---
title: "Hands-on Exercise 2A"
author: "Kock Si Min"
date: August 31, 2024
date-modified: "last-modified"
toc: true
execute:
  eval: true
  echo: true
  freeze: true
  warning: false
  message: false
---

# 1st Order Spatial Point Pattern Analysis Methods

## 1.1 Learning Outcomes

Spatial Point Pattern Analysis is the evaluation of the pattern or distribution of a set of points on a surface. The point can be a location of:

-   events such as crime, traffic incident and disease onset or

-   business services (coffee and fast food outlets) or facilities such as childcare and eldercare

In this hands-on exercise, we will use appropriate functions of [spatstat](https://cran.r-project.org/web/packages/spatstat/) to discover the spatial point processes of childcare centres in Singapore.

The specific questions to be addressed are as follows:

-   are the childcare centres in Singapore randomly distributed throughout the country?

-   if the answer is not, then the next question is where are the locations with higher concentrations of childcare centres?

## 1.2 Data Acquisition

Three datasets are used in this exercise:

-   `CHILDCARE`, a point feature data providing both location and attribute information of childcare centres. It was downloaded from [data.gov.sg](https://data.gov.sg/) and is in geojson format.

-   `MP14_SUBZONE_WEB_PL`, a polygon feature data providing information of URA 2014 Master Plan Planning Subzone boundary data. It is in ESRI shapefile format. This data set was also downloaded from [data.gov.sg](https://data.gov.sg/).

-   `CostalOutline`, a polygon feature data showing the national boundary of Singapore. It is provided by SLA and is in ESRI shapefile format.

## 1.3 Installing and Launching R packages

-   [**sf**](https://r-spatial.github.io/sf/) for importing, managing, and processing vector-based geospatial data, and

-   [**spatstat**](https://spatstat.org/), which has a wide range of useful functions for point pattern analysis. In this hands-on exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer

-   [**raster**](https://cran.r-project.org/web/packages/raster/) which reads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster). In this hands-on exercise, it will be used to convert image output generate by spatstat into raster format.

-   [**maptools**](https://cran.r-project.org/web/packages/maptools/index.html) which provides a set of tools for manipulating geographic data. In this hands-on exercise, we mainly use it to convert *Spatial* objects into *ppp* format of **spatstat**.

-   [**tmap**](https://cran.r-project.org/web/packages/tmap/index.html) which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using [leaflet](https://leafletjs.com/) API.

-   [**tidyverse**](https://www.tidyverse.org/) for performing data science tasks such as importing, wrangling and visualising data.

The packages are loaded with the following code chunk:

```{r}
pacman::p_load(sf,spatstat,raster,tmap,tidyverse)
```

::: callout-tip
**maptools** is [retired](https://cran.r-project.org/src/contrib/Archive/maptools/) and binary is removed from CRAN, however it can be downloaded from [Posit Public Package Manager](https://posit.co/products/cloud/public-package-manager/) (this site is useful for Shiny) snapshots by using the code chunk below. Alternatively, can utilise the CRAN retired website and key in the latest version.

```{r}
#| eval: false
install.packages("maptools",
                 repos = "https://packagemanager.posit.co/cran/2023-10-13")
```
:::

## 1.4 Spatial Data Wrangling

### 1.4.1 Importing the spatial data

We will import the geospatial data using [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package:

```{r}
childcare_sf <- st_read("data/geospatial/child-care-services-geojson.geojson") %>%
  st_transform(crs = 3414)
```

Checking whether the EPSG code has been corrected:

```{r}
st_crs(childcare_sf)
```

When the input geospatial data is in shapefile format, two arguments are used:

-   `dsn` to define the data path

-   `layer` to provide the shapefile name

```{r}
sg_sf <- st_read(dsn = "data/geospatial",
                 layer = "CostalOutline")
```

```{r}
mpsz_sf <- st_read(dsn = "data/geospatial",
                   layer = "MP14_SUBZONE_WEB_PL")
```

Before using these data for analysis, it is important to ensure that they are projected in the same projection system.

```{r}
st_crs(sg_sf)
```

```{r}
st_crs(mpsz_sf)
```

While the *sg_sf* and *mpsz_sf* data frames are projected in svy21, the end of the printout above states that the EPSG is 9001 - this is a wrong EPSG code as the correct EPSG code for svy21 should be [3414](https://epsg.io/3414).

To correctly assign the right EPSG code to both data frame, *st_set_crs()* of sf package is used:

```{r}
sg_sf3414 <- st_set_crs(sg_sf,3414)
mpsz_sf3414 <- st_set_crs(mpsz_sf,3414)
```

Checking whether the EPSG code has been corrected:

```{r}
st_crs(sg_sf3414)
```

```{r}
st_crs(mpsz_sf3414)
```

### 1.4.2 Mapping the geospatial datasets

After checking the referencing system of each geospatial dataframe, it is also useful to plot a map to show their spatial patterns. A pin map can be prepared using the code below:

```{r}
tmap_mode('view')
tm_shape(childcare_sf)+
  tm_dots()
```

All the geospatial layers are within the same map extend which indicates that their referencing system and coordinate values are referred to similar spatial context. This is very important in any geospatial analysis.

```{r}
tmap_mode('plot')
```

At interactive mode, **tmap** is using [**leaflet for R**](https://rstudio.github.io/leaflet/)API. The advantage of an interactive pin map is it allows one to navigate and zoom around the map freely as well as query the information of each simple feature (i.e. the point) by clicking on the. The background of the internet map layer can also be changed. At present, three internet map layers are provided: ESRI.WorldGrayCanvas, OpenStreetMap, and ESRI.WorldTopoMap. The default is ESRI.WorldGrayCanvas.

::: callout-tip
It is always important to switch back to plot mode after the interactive map as each interactive mode will consume a connection.

It is important to avoid displaying excessive number of interactive maps i.e. not more than 10, in one RMarkdown document when publishing on Netlify.
:::

## 1.5 Geospatial Data Wrangling

While simple feature data frame is gaining popularity against Spatial\* classes, many geospatial analysis packages require the input geospatial data in to be in Spatial\* classes. In this section, simple feature data frame will be converted to Spatial\* class.

### 1.5.1 Converting sf dataframes to sp's Spatial\* class

The code chunk below uses [*as_Spatial()*](https://r4gdsa.netlify.app/chap04.html) of **sf** package to convert the three geospatial data from simple feature data frame to sp’s Spatial\* class.

```{r}
childcare <- as_Spatial(childcare_sf)
mpsz <- as_Spatial(mpsz_sf3414)
sg <- as_Spatial(sg_sf3414)
```

```{r}
childcare
```

```{r}
mpsz
```

```{r}
sg
```

The geospatial data have been converted into their respective sp’s Spatial\* classes now.

### 1.5.2 **Converting the Spatial\* class into generic sp format**

**spatstat** requires the analytical data in ***ppp*** object form. There is no direct way to convert a Spatial\* classes into ***ppp*** object. We need to convert the ***Spatial*** **classes**\* into ***Spatial*** object first.

The codes chunk below converts the Spatial\* classes into generic sp objects.

```{r}
childcare_sp <- as(childcare, "SpatialPoints")
sg_sp <- as(sg,"SpatialPolygons")
```

```{r}
childcare_sp
```

```{r}
sg_sp
```

### 1.5.3 Converting generic sp format into spatstat's ppp format

Now, we will use *as.ppp()* function of **spatstat** to convert the spatial data into **spatstat**’s ***ppp*** object format.

```{r}
childcare_ppp <- as.ppp(childcare_sf)
childcare_ppp
```

Plotting childcare_ppp:

```{r}
plot(childcare_ppp)
```

Taking a look at the summary statistics of the ppp object:

```{r}
summary(childcare_ppp)
```

::: callout-note
In spatial point patterns analysis, a significant issue is the presence of duplicates. The statistical methodology used for spatial point patterns processes is based largely on the assumption that process is *simple*, that is, that the points cannot be coincidental.
:::

### 1.5.4 Handling duplicate points

We can check the duplication in a ppp object using the code chunk below:

```{r}
any(duplicated(childcare_ppp))
```

To count the number of coincidence points, the *multiplicity()* function is used, as shown in the code chunk below.

```{r}
multiplicity(childcare_ppp)
```

To know how many locations have more than one point event, the code chunk below is used:

```{r}
sum(multiplicity(childcare_ppp) > 1)
```

```{r}
tmap_mode('view')
tm_shape(childcare) +
  tm_dots(alpha=0.4, 
          size=0.05)
```

```{r}
tmap_mode('plot')
```

In the event of duplicate points, there are 3 ways to overcome the issue:

1.  Delete the duplicates - easiest way but it will also meant that some useful point events will be lost
2.  Jittering - this method will add a small perturbation to the duplicate points so that they do not occupy the exact same space
3.  Make each point "unique" and attach the duplicates of the points to the patterns as **marks**, as attributes of the points. Analytical techniques that take into account these marks would be required.

The code chunk below implements the jittering approach:

```{r}
childcare_ppp_jit <- rjitter(childcare_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
```

::: callout-important
Note that Prof's original code only indicated nsim = 1 which means there's only 2 simulations. To increase the value i.e. nsim = 49 to bring the simulations up to 50.
:::

Check for duplicated points:

```{r}
any(duplicated(childcare_ppp_jit))
```

### 1.5.5 Creating *owin* object

When analysing spatial point patterns, it is a good practice to confine the analysis within a geographical area like Singapore's boundary. In **spatstat**, an object called ***owin*** is specially designed to represent this polygonal region.

The code chunk below is used to covert *sg* SpatialPolygon object into owin object of **spatstat**.

```{r}
sg_owin <- as.owin(sg_sf)
```

The ouput object can be displayed by using *plot()* function:

```{r}
plot(sg_owin)
```

```{r}
summary(sg_owin)
```

### 1.5.6 **Combining point events object and owin object**

In this last step of geospatial data wrangling, we will extract childcare events that are located within Singapore by using the code chunk below:

```{r}
childcareSG_ppp = childcare_ppp[sg_owin]
```

The output object combined both the point and polygon feature in one ppp object class as shown below:

```{r}
summary(childcareSG_ppp)
```

Plotting the newly derived *childcareSG_ppp*:

```{r}
plot(childcareSG_ppp)
```

## 1.6 **First-order Spatial Point Patterns Analysis**

In this section, first-order SPPA will be performed using **spatstat** package. The hands-on exercise will focus on:

-   deriving **kernel density estimation (KDE)** layer for visualising and exploring the intensity of point processes,

-   performing **Confirmatory Spatial Point Patterns Analysis** by using **Nearest Neighbour** statistics.

### 1.6.1 **Kernel Density Estimation**

In this section, we will compute the kernel density estimation (KDE) of childcare services in Singapore.

#### 1.6.1.1 Computing kernel density estimation using automatic bandwidth selection method

The code chunk below computes a kernel density by using the following configurations of [*density()*](https://rdrr.io/cran/spatstat/man/density.ppp.html) of **spatstat**:

-   [*bw.diggle()*](https://rdrr.io/cran/spatstat/man/bw.diggle.html) automatic bandwidth selection method. Other recommended methods are [*bw.CvL()*](https://rdrr.io/cran/spatstat/man/bw.CvL.html), [*bw.scott()*](https://rdrr.io/cran/spatstat/man/bw.scott.html) or [*bw.ppl()*](https://rdrr.io/cran/spatstat/man/bw.ppl.html).

-   The smoothing kernel used is *gaussian*, which is the default. Other smoothing methods are: “epanechnikov”, “quartic” or “disc”.

-   The intensity estimate is corrected for edge effect bias by using method described by Jones (1993) and Diggle (2010, equation 18.9). The default is *FALSE*.

```{r}
kde_childcareSG_bw <- density(childcareSG_ppp,
                              sigma=bw.diggle,
                              edge=TRUE,
                            kernel="gaussian") 
```

The *plot()* function of Base R is then used to display the kernel density derived.

```{r}
plot(kde_childcareSG_bw)
```

The density values of the output range from 0 to 0.000035 which is way too small to comprehend. This is because the default unit of measurement of svy21 is in meter. As a result, the density values computed is in “number of points per square meter”.

As added info, the bandwidth used to compute the kde layer can be retrieved using the code chunk below:

```{r}
bw <- bw.diggle(childcareSG_ppp)
bw
```

#### 1.6.1.2 Re-scaling KDE values

In the code chunk below, *rescale.ppp()* is used to covert the unit of measurement from meter to kilometer:

```{r}
childcareSG_ppp.km <- rescale.ppp(childcareSG_ppp, 1000, "km")
```

Re-run *density()* using the resale data set and plot the output kde map:

```{r}
kde_childcareSG.bw <- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG.bw)
```

Note that the output image looks identical to the earlier version and that the only change is in the data values (refer to the legend).

### 1.6.2 **Working with different automatic badwidth methods**

Beside *bw.diggle()*, there are three other **spatstat** functions can be used to determine the bandwidth, they are: *bw.CvL()*, *bw.scott()*, and *bw.ppl()*.

```{r}
 bw.CvL(childcareSG_ppp.km)
```

```{r}
bw.scott(childcareSG_ppp.km)
```

```{r}
bw.ppl(childcareSG_ppp.km)
```

```{r}
bw.diggle(childcareSG_ppp.km)
```

Baddeley et. (2016) suggested the use of the *bw.ppl()* algorithm as from their experience, this method tends to produce more appropriate values when the pattern consisted predominantly of tight clusters. However, if the purpose of thestudy is to detect a single tight cluster in the midst of random noise, the *bw.diggle()* method seemed to work best.

The code chunk beow will be used to compare the output of using *bw.diggle* and *bw.ppl* methods:

```{r}
kde_childcareSG.ppl <- density(childcareSG_ppp.km, 
                               sigma=bw.ppl, 
                               edge=TRUE,
                               kernel="gaussian")
par(mfrow=c(1,2))
plot(kde_childcareSG.bw, main = "bw.diggle")
plot(kde_childcareSG.ppl, main = "bw.ppl")
```

### 1.6.3 **Working with different kernel methods**

By default, the kernel method used in *density.ppp()* is *gaussian*. But there are three other options, namely: Epanechnikov, Quartic and Dics.

The code chunk below will be used to compute three more kernel density estimations by using these three kernel function:

```{r}
par(mfrow=c(2,2))
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="Gaussian")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="epanechnikov"), 
     main="Epanechnikov")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="quartic"), 
     main="Quartic")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="disc"), 
     main="Disc")
```

## 1.7 **Fixed and Adaptive KDE**

### 1.7.1 **Computing KDE by using fixed bandwidth**

Next, a KDE layer will be computed by defining a bandwidth of 600 meter. In the code chunk below, the sigma value used is 0.6. as the unit of measurement of ***childcareSG_ppp.km*** object is in kilometer, hence the 600m is 0.6km.

```{r}
kde_childcareSG_600 <- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG_600)
```

### 1.7.2 **Computing KDE by using adaptive bandwidth**

Fixed bandwidth method is very sensitive to highly skew distribution of spatial point patterns over geographical units for example urban versus rural. One way to overcome this problem is by using adaptive bandwidth instead.

In this section, adaptive kernel density estimation will be derived using [*density.adaptive()*](https://rdrr.io/cran/spatstat/man/adaptive.density.html) of **spatstat**.

```{r}
kde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km, method="kernel")
plot(kde_childcareSG_adaptive)
```

We can compare the fixed and adaptive kernel density estimation outputs by using the code chunk below.

```{r}
par(mfrow=c(1,2))
plot(kde_childcareSG.bw, main = "Fixed bandwidth")
plot(kde_childcareSG_adaptive, main = "Adaptive bandwidth")
```

### 1.7.3 **Converting KDE output into grid object**

We convert the result to be suitable for mapping purposes:

```{r}
gridded_kde_childcareSG_bw <- as.im(kde_childcareSG.bw)
plot(gridded_kde_childcareSG_bw)
```

### 1.7.3.1 Converting gridded output into raster

Next, the gridded kernal density objects will be converted into a RasterLayer object by using *raster()* of **raster** package:

```{r}
kde_childcareSG_bw_raster <- raster(kde_childcareSG.bw)
```

Taking a look at the properties of *kde_childcareSG_bw_raster* RasterLayer*:*

```{r}
kde_childcareSG_bw_raster
```

Note that the crs property is NA.

#### 1.7.3.2 Assigning projection systems

The code chunk below will be used to include the CRS information on *kde_childcareSG_bw_raster* RasterLayer:

```{r}
projection(kde_childcareSG_bw_raster) <- CRS("+init=EPSG:3414")
kde_childcareSG_bw_raster
```

The crs property is now completed.

### 1.7.4 **Visualising the output in tmap**

Finally, we will display the raster in cartographic quality map using **tmap** package:

```{r}
tm_shape(kde_childcareSG_bw_raster) + 
  tm_raster("layer", palette = "viridis") +
  tm_layout(legend.position = c("right", "bottom"), frame = FALSE)
```

Note that the raster values are encoded explicitly onto the raster pixel using the values in “v”” field.

### 1.7.5 **Comparing Spatial Point Patterns using KDE**

In this section, the KDE of childcare at Ponggol, Tampines, Chua Chu Kang and Jurong West planning areas will be compared.

### 1.7.5.1 Extracting study area

The code chunk below will be used to extract the target planning areas.

```{r}
pg <- mpsz_sf %>%
  filter(PLN_AREA_N == "PUNGGOL")
tm <- mpsz_sf %>%
  filter(PLN_AREA_N == "TAMPINES")
ck <- mpsz_sf %>%
  filter(PLN_AREA_N == "CHOA CHU KANG")
jw <- mpsz_sf %>%
  filter(PLN_AREA_N == "JURONG WEST")
```

Plotting target planning areas:

```{r}
par(mfrow=c(2,2))
plot(pg, main = "Punggol")
```

```{r}
plot(tm, main = "Tampines")
```

```{r}
plot(ck, main = "Choa Chu Kang")
```

```{r}
plot(jw, main = "Jurong West")
```

#### 1.7.5.2 Creating ***owin*** object

Now, we will convert these sf objects into owin objects that is required by **spatstat**:

```{r}
pg_owin = as.owin(pg)
tm_owin = as.owin(tm)
ck_owin = as.owin(ck)
jw_owin = as.owin(jw)
```

#### 1.7.5.3 Combining childcare points and the study area

By using the code chunk below, we are able to extract childcare that is within the specific region to do our analysis later on.

```{r}
childcare_pg_ppp = childcare_ppp_jit[pg_owin]
childcare_tm_ppp = childcare_ppp_jit[tm_owin]
childcare_ck_ppp = childcare_ppp_jit[ck_owin]
childcare_jw_ppp = childcare_ppp_jit[jw_owin]
```

```{r}
class(childcare_pg_ppp)
class(childcare_tm_ppp)
class(childcare_ck_ppp)
class(childcare_jw_ppp)
```

Next, *rescale.ppp()* function is used to transform the unit of measurement from metre to kilometre:

```{r}
childcare_pg_ppp.km = rescale.ppp(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale.ppp(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km = rescale.ppp(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km = rescale.ppp(childcare_jw_ppp, 1000, "km")
```

The code chunk below is used to plot these four study areas and the locations of the childcare centres:

```{r}
par(mfrow=c(2,2))
plot(childcare_pg_ppp.km, main="Punggol")
plot(childcare_tm_ppp.km, main="Tampines")
plot(childcare_ck_ppp.km, main="Choa Chu Kang")
plot(childcare_jw_ppp.km, main="Jurong West")
```

#### 1.7.5.4 Computing KDE

The code chunk below will be used to compute the KDE of these four planning area. ***bw.diggle*** method is used to derive the bandwidth of each area:

```{r}
par(mfrow=c(2,2))
plot(density(childcare_pg_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tampines")
plot(density(childcare_ck_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Choa Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Jurong West")
```

#### 1.7.5.5 Computing fixed bandwidth KDE

For comparison purposes, 250m will be used as the bandwidth:

```{r}
par(mfrow=c(2,2))
plot(density(childcare_ck_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Chou Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Jurong West")
plot(density(childcare_pg_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tampines")
```

## 1.8 **Nearest Neighbour Analysis**

In this section, we will perform the Clark-Evans test of aggregation for a spatial point pattern by using [*clarkevans.test()*](https://www.rdocumentation.org/packages/spatstat/versions/1.63-3/topics/clarkevans.test) of **statspat**.

The test hypotheses are:

H0 = The distribution of childcare services are randomly distributed.

H1= The distribution of childcare services are not randomly distributed.

The 95% confidence interval will be used.

### 1.8.1 **Testing spatial point patterns using Clark and Evans Test**

```{r}
clarkevans.test(childcareSG_ppp,
                correction="none",
                clipregion="sg_owin",
                alternative=c("clustered"),
                nsim=99)
```

### 1.8.2 **Clark and Evans Test: Choa Chu Kang planning area**

In the code chunk below, [*clarkevans.test()*](https://rdrr.io/cran/spatstat/man/clarkevans.test.html) of **spatstat** is used to performs Clark-Evans test of aggregation for childcare centre in Choa Chu Kang planning area:

```{r}
clarkevans.test(childcare_ck_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```

### 1.8.3 **Clark and Evans Test: Tampines planning area**

In the code chunk below, the similar test is used to analyse the spatial point patterns of childcare centre in Tampines planning area:

```{r}
clarkevans.test(childcare_tm_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```
