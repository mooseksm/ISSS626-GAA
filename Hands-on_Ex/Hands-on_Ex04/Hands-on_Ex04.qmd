---
title: "Hands-on Exercise 4"
author: "Kock Si Min"
date: September 14, 2024
date-modified: "last-modified"
toc: true
execute:
  eval: true
  echo: true
  freeze: true
  warning: false
  message: false
---

# Spatial Weights and Applications

## 4.1 Overview

In this hands-on exercise, I will compute spatial weights using R. By the end to this hands-on exercise, the aim is to be able to:

-   import geospatial data using appropriate function(s) of **sf** package,

-   import csv file using appropriate function of **readr** package,

-   perform relational join using appropriate join function of **dplyr** package,

-   compute spatial weights using appropriate functions of **spdep** package, and

-   calculate spatially lagged variables using appropriate functions of **spdep** package.

## 4.2 Study Area and Data

Two data sets will be used in this hands-on exercise:

-   Hunan county boundary layer. This is a geospatial data set in ESRI shapefile format.

-   Hunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.

## 4.3 Installing and loading R packages

To carry out the analysis, we install and load the following R packages:

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr)
```

## 4.4 Getting the Data into R environment

The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.

### 4.4.1 Import shapefile into R environment

The code chunk below uses [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package to import Hunan shapefile into R. The imported shapefile will be a **simple features object of sf.**

```{r}
hunan <- st_read(dsn = "data/geospatial",
                 layer = "Hunan")
```

### 4.4.2 Import csv file into R environment

Next, we will import *Hunan_2012.csv* into R using *read_csv()* of **readr** package. The output is R dataframe class.

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

### 4.4.3 Performing a relational join

The code chunk below is used to update the attribute table of *hunan*’s SpatialPolygonsDataFrame with the attribute fields of *hunan2012* data frame. This is performed using *left_join()* of **dplyr** package.

```{r}
hunan <- left_join(hunan,hunan2012) %>%
  select(1:4,7,15)
```

## 4.5 Visualising Regional Development Indicator

We then prepare a basemap and a choropleth map showing the distribution of GDP per capita (GDPPC) 2012 by using *qtm()* of **tmap** package.

```{r}
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size=0.5)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

## 4.6 Computing Contiguity Spatial Weights

In this section, [*poly2nb()*](https://r-spatial.github.io/spdep/reference/poly2nb.html)of **spdep** package will be used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. Based on the documentation, note that the “queen” argument takes TRUE or FALSE as options. If not specified, the default is set to TRUE and the function will return a list of first order neighbours using the Queen criteria.

### 4.6.1 Computing (QUEEN) contiguity based neighbours

The code chunk below is used to compute the Queen contiguity weight matrix:

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

The summary report shows that there are 88 regions in Hunan. The most connected region has 11 neighbours. There are two regions with only one neighbour.

For each polygon in the polygon object, *wm_q* lists all neighboring polygons. For example, to see the neighbors for the first polygon in the object:

```{r}
wm_q[[1]]
```

This indicates that Polygon 1 has five neighbours. The numbers represent the polygon IDs stored in *hunan* SpatialPolygons Data Frame class.

The county name of Polygon ID = 1 can be retrieved as follows:

```{r}
hunan$County[1]
```

The output reveals that Polygon ID = 1 is Anxiang county.

To reveal the names of the five neighbouring counties, the code chunk below is used:

```{r}
hunan$NAME_3[c(2,3,4,57,85)]
```

The GDPPC of these counties can be obtained via the following code chunk:

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

The output indicates that the GDPPC of the five nearest neighbours of Anxiang county, based on the Queen's method, are 20981, 34592, 24473, 21311 and 22879.

The complete weight matrix can be displayed using *str()*:

```{r}
str(wm_q)
```

### 4.6.2 Creating (ROOK) contiguity based neighbours

The code chunk below is used to compute the ROOK contiguity weight matrix:

```{r}
wm_r <- poly2nb(hunan,queen = FALSE)
summary(wm_r)
```

The summary report indicates that there are 88 regions in Hunan. The most connected region has 10 neighbours and there are two regions with just one neighbour.

### 4.6.3 Visualising contiguity weights

A connectivity graph takes a point and displays a line to each neighboring point. As we are currently working with polygons, we will need to get points in order to make connectivity graphs. The most typical method for this is polygon centroids, which can be calculated using the sf package before moving onto the graphs.

#### 4.6.3.1 Getting latitude and longitude of polygon centroids

We will need points to associate with each polygon before making the connectivity graph. It will be a little more complicated than just running *st_centroid()* on the sf object: us.bound.

We need the coordinates in a separate data frame. To do this we will use a mapping function which applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be *st_centroid()*. We will use a map_dbl variation of map from the purrr package.

To get our longitude values we map the *st_centroid()* function over the geometry column of us.bound and access the longitude value through double bracket notation \[\[\]\] and 1. This allows us to get only the longitude, which is the first value in each centroid.

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

We do the same for latitude with one key difference - we access the second value for each centroid with \[\[2\]\]:

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

With latitude and longitude, we use cbind to put longitude and latitude into the same object:

```{r}
coords <- cbind(longitude, latitude)
```

We check the first few observations to see if things are formatted correctly:

```{r}
head(coords)
```

#### 4.6.3.2 Ploting Queen contiguity based neighbours map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
```

#### 4.6.3.3 Ploting ROOK contiguity based neighbours map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

#### 4.6.3.4 Ploting both Queen and ROOK contiguity based neighbours map

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="Queen Contiguity")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
plot(hunan$geometry, border="lightgrey", main="ROOK Contiguity")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

## 4.7 Computing distanced based neighbours

In this section, we will derive distance-based weight matrices using [*dnearneigh()*](https://r-spatial.github.io/spdep/reference/dnearneigh.html) of **spdep** package.

The function identifies neighbours of region points by Euclidean distance with a distance band of lower d1= and upper d2= bounds controlled by the bounds= argument. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in **km** will be calculated assuming the WGS84 reference ellipsoid.

### 4.7.1 Determining the cut-off distance

Firstly, the upper limit for distance band is determined using the steps below:

-   Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using [*knearneigh()*](https://r-spatial.github.io/spdep/reference/knearneigh.html) of **spdep**.

-   Convert the knn object returned by *knearneigh()* to a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using [*knn2nb()*](https://r-spatial.github.io/spdep/reference/knn2nb.html).

-   Return the length of neighbour relationship edges by using [*nbdists()*](https://r-spatial.github.io/spdep/reference/nbdists.html) of **spdep**. The function returns in the units of the coordinates if the coordinates are projected, or otherwise in km.

-   Remove the list structure of the returned object by using [**unlist()**](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/unlist).

```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

The summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.

### 4.7.2 Computing fixed distance weight matrix

The distance weight matrix is then computed using *dnearneigh()* as shown in the code chunk below:

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

The average number of links refer to the average number of neighbours each region has in a spatial network.

*str()* is then used to display the content of the wm_d62 weight matrix:

```{r}
str(wm_d62)
```

An alternative way to display the structure of the weight matrix is to combine [table()](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/table) and [card()](https://r-spatial.github.io/spdep/reference/card.html) of spdep:

```{r}
table(hunan$County, card(wm_d62))
```

```{r}
n_comp <- n.comp.nb(wm_d62)
n_comp$nc
```

The *n.comb.nb()* function is used to analyze the connectivity components of the spatial weights object. The output of 1 indicates that the entire spatial network consists of a single connected component i.e. is a path between any two regions in the spatial network, meaning that all regions are interconnected directly or indirectly

```{r}
table(n_comp$comp.id)
```

The code above then generates a frequency table of the connected components and the output indicates that all 88 regions in Hunan are part of a unique connected component (ID = 1).

#### 4.7.2.1 Plotting fixed distance weight matrix

The distance weight matrix is plotted using the following code chunk:

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="red", length=0.08)
```

The red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.

Alternatively, both lines can be plotted in adjacent charts uing the code chunk below:

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="1st nearest neighbours")
plot(k1, coords, add=TRUE, col="red", length=0.08)
plot(hunan$geometry, border="lightgrey", main="Distance link")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)
```

### 4.7.3 Computing adaptive distance weight matrix

One of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.

It is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below:

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

The content of the matrix can be displayed by using *str():*

```{r}
str(knn6)
```

Note that each county has six neighbours.

#### 4.7.3.1 Plotting distance based neighbours

The weight matrix can be plotted using the code chunk below:

```{r}
plot(hunan$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

## 4.8 Weights based on IDW

In this section, a spatial weight matrix will be derived based on Inversed Distance method.

First, we will compute the distances between areas by using [*nbdists()*](https://r-spatial.github.io/spdep/reference/nbdists.html) of **spdep**:

```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```

## 4.9 Row-standardised Weight Matrix

Next, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values.

While this is the most intuitive way to summarise the neighbors’ values, it has one drawback in that the polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but there are other more robust options are available, notably style=“B”.

```{r}
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
```

The zero.policy=TRUE option allows for lists of non-neighbors. Note that this should be used with caution as the user may not be aware of missing neighbors in their dataset however, a zero.policy=FALSE would return an error.

To see the weight of the first polygon’s eight neighbors type:

```{r}
rswm_q$weights[1]
```

Each neighbor is assigned a 0.2 of the total weight. This means that when R computes the average neighboring income values, each neighbor’s income will be multiplied by 0.2 before being tallied.

Using the same method, we can also derive a row standardised distance weight matrix by using the code chunk below:

```{r}
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids
```

```{r}
rswm_ids$weights[1]
```

```{r}
summary(unlist(rswm_ids$weights))
```

## 4.10 Application of Spatial Weight Matrix

In this section, four different spatial lagged variables will be created:

-   spatial lag with row-standardized weights,

-   spatial lag as a sum of neighbouring values,

-   spatial window average, and

-   spatial window sum.

### 4.10.1 Spatial lag with row-standardized weights

We will compute the average neighbor GDPPC value for each polygon. These values are often referred to as **spatially lagged values**.

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
```

Recall that in the previous section, the GDPPC of five counties were retrieved using the code chunk below:

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

We can append the spatially lag GDPPC values onto *hunan* sf data frame by using the code chunk below:

```{r}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan,lag.res)
```

The following shows the average neighboring income values (stored in the Inc.lag object) for each county:

```{r}
head(hunan)
```

Next, we will plot both the GDPPC and spatial lag GDPPC for comparison using the code chunk below:

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

### 8.10.2 Spatial lag as a sum of neighbouring values

We can calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbors list, then apply a function that will assign binary weights, then we use glist = in the nb2listw function to explicitly assign these weights.

We start by applying a function that will assign a value of 1 per neighbor. This is done with lapply which applies a function across each value in the neighbors structure.

```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

With the proper weights assigned, we can use lag.listw to compute a lag variable from our weight and GDPPC:

```{r}
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
```

We examine the results using the code chunk below:

```{r}
lag_sum
```

Next, we will append the *lag_sum GDPPC* field into the `hunan` sf data frame by using the code chunk below:

```{r}
hunan <- left_join(hunan, lag.res)
```

We then plot both the *GDPPC* and *Spatial Lag Sum GDPPC* for comparison using the code chunk below:

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

### 8.10.3 Spatial window average

The spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights.

To add the diagonal element to the neighbour list, we just need to use *include.self()* from **spdep**:

```{r}
wm_qs <- include.self(wm_q)
wm_qs
```

The number of nonzero links, % nonzero weights and average number of links are 536, 6.921488 and 6.090909 respectively as compared to wm_q of 448, 5.785124 and 5.090909

Let us take a good look at the neighbour list of area \[1\] by using the code chunk below:

```{r}
wm_qs[[1]]
```

Note that ID = 1 now has six instead of five neighbours.

We then obtain the weights with *nb2listw()*:

```{r}
wm_qs <- nb2listw(wm_qs)
wm_qs
```

Lastly, we just need to create the lag variable from our weight structure and GDPPC variable:

```{r}
lag_w_avg_gpdpc <- lag.listw(wm_qs, 
                             hunan$GDPPC)
lag_w_avg_gpdpc
```

Next, we will convert the lag variable listw object into a data.frame by using *as.data.frame()*:

```{r}
lag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))
lag_wm_qs.res <- as.data.frame(lag.list.wm_qs)
colnames(lag_wm_qs.res) <- c("NAME_3", "lag_window_avg GDPPC")
```

Note that the third command line of the code chunk above renames the field names of *lag_wm_q.res* object into *NAME_3* and *lag_window_avg GDPPC* respectively.

Next, the code chunk below will be used to append *lag_window_avg GDPPC* values onto *hunan* sf data.frame by using *left_join()* of **dplyr** package:

```{r}
hunan <- left_join(hunan, lag_wm_qs.res)
```

To compare the values of lag GDPPC and Spatial window average, `kable()` of Knitr package is used to prepare a table using the code chunk below:

```{r}
hunan %>%
  select("County", 
         "lag GDPPC", 
         "lag_window_avg GDPPC") %>%
  kable()
```

Lastly, *qtm()* of **tmap** package is used to plot the *lag_gdppc* and *w_ave_gdppc* maps next to each other for quick comparison:

```{r}
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)
```

### 8.10.4 Spatial window sum

The spatial window sum is the counter part of the window average, but without using row-standardized weights.

To add the diagonal element to the neighbour list, we just need to use *include.self()* from **spdep**:

```{r}
wm_qs <- include.self(wm_q)
wm_qs
```

Next, we will assign binary weights to the neighbour structure that includes the diagonal element:

```{r}
b_weights <- lapply(wm_qs, function(x) 0*x + 1)
b_weights[1]
```

Note that now \[1\] has six instead of five neighbours .

Again, we use *nb2listw()* and *glist()* to explicitly assign weight values.

```{r}
b_weights2 <- nb2listw(wm_qs, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

With our new weight structure, we can compute the lag variable with *lag.listw()*:

```{r}
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
```

Next, we will convert the lag variable listw object into a data.frame by using *as.data.frame()*:

```{r}
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
```

Note that te second command line on the code chunk above renames the field names of *w_sum_gdppc.res* object into *NAME_3* and *w_sum GDPPC* respectively.

Next, the code chunk below will be used to append *w_sum GDPPC* values onto *hunan* sf data.frame by using *left_join()* of **dplyr** package:

```{r}
hunan <- left_join(hunan, w_sum_gdppc.res)
```

To compare the values of lag GDPPC and Spatial window average, `kable()` of Knitr package is used to prepare a table using the code chunk below:

```{r}
hunan %>%
  select("County", "lag_sum GDPPC", "w_sum GDPPC") %>%
  kable()
```

Lastly, *qtm()* of **tmap** package is used to plot the *lag_sum GDPPC* and *w_sum_gdppc* maps next to each other for quick comparison:

```{r}
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)
```

## **8.11 References**

-   [Creating Neighbours using sf objects](https://cran.r-project.org/web/packages/spdep/vignettes/nb_sf.html)
