---
title: "Hands-on Exercise 5A"
author: "Kock Si Min"
date: September 18, 2024
date-modified: "last-modified"
toc: true
execute:
  eval: true
  echo: true
  freeze: true
  warning: false
  message: false
---

# Global Measures of Spatial Autocorrelation

## 5.1 Overview

In this hands-on exercise, we will compute Global Measures of Spatial Autocorrelation (GMSA) using **spdep** package. The learning points of this hands-on exercise are to:

-   import geospatial data using appropriate function(s) of **sf** package,

-   import csv file using appropriate function of **readr** package,

-   perform relational join using appropriate join function of **dplyr** package,

-   compute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of **spdep** package,

    -   plot Moran scatterplot,

    -   compute and plot spatial correlogram using appropriate function of **spdep** package.

-   provide statistically correct interpretation of GSA statistics.

## 5.2 Getting Started

### 5.2.1 The analytical question

In spatial policy, one of the main development objective of the local government and planners is to ensure equal distribution of development in the province. Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically. If the answer is **No**. Then, our next question will be “is there sign of spatial clustering?”. And, if the answer for this question is **yes**, then our next question will be “where are these clusters?”

In this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of [Hunan Provice](https://en.wikipedia.org/wiki/Hunan), People Republic of China.

### 5.2.2 The Study Area and Data

Two data sets will be used in this hands-on exercise, they are:

-   Hunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.

-   Hunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.

### 5.2.3 Setting the Analytical Tools

Before we get started, we need to ensure that **spdep**, **sf**, **tmap** and **tidyverse** packages of R are installed in R.

-   **sf** is use for importing and handling geospatial data in R,

-   **tidyverse** is mainly use for wrangling attribute data in R,

-   **spdep** will be used to compute spatial weights, global and local spatial autocorrelation statistics, and

-   **tmap** will be used to prepare cartographic quality chropleth map.

The code chunk below is used to perform the following tasks:

-   creating a package list containing the necessary R packages,

-   checking if the R packages in the package list have been installed in R,

    -   if they have yet to be installed, RStudio will installed the missing packages,

-   launching the packages into R environment.

```{r}
pacman::p_load(sf,tidyverse,spdep,tmap)
```

## 5.3 Getting the Data into R environment

In this section, we will bring a geospatial data and its associated attribute table into R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.

### 5.3.1 Import shapefile into R environment

The code chunk below uses [`st_read()`](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package to import Hunan shapefile into R. The imported shapefile will be a **simple features** **object** of **sf**.

```{r}
hunan <- st_read(dsn = "data/geospatial",
                 layer = "Hunan")
```

We note that the simple features data has a polygon geometry and has 88 features and 7 fields. It is in WGS84 geographic coordinate system.

### 5.3.2 Import csv file into R environment

Next, we will import *Hunan_2012.csv* into R using [`read_csv()`](https://readr.tidyverse.org/reference/read_delim.html) of readr package. The output is in R data frame class.

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

### 5.3.3 Performing a relational join

The code chunk below will be used to update the attribute table of *hunan*’s SpatialPolygonsDataFrame with the attribute fields of *hunan2012* dataframe. This is performed by using [`left_join()`](#0) of **dplyr** package:

```{r}
hunan <- left_join(hunan,hunan2012)%>%
  select(1:4,7,15)
```

### 5.3.4 Visualisng Regional Development Indicator

Now, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using `qtm()` of **tmap** package.

```{r}
equal <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal interval classification",
            main.title.size = 1,
            legend.text.size = 0.6,
            legend.height = 1.20,
            legend.width = 1.20,
            frame = TRUE)

quantile <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal quantile classification",
            main.title.size = 1,
            legend.text.size = 0.6,
            legend.height = 1.20,
            legend.width = 1.20,
            frame = TRUE)

tmap_arrange(equal,
             quantile,
             asp = 1,
             ncol = 2)
```

## 5.4 Global Measures of Spatial Autocorrelation

In this section, we will compute global spatial autocorrelation statistics and perform spatial complete randomness test for global spatial autocorrelation.

### 5.4.1 Computing Contiguity Spatial Weights

Before we can compute the global spatial autocorrelation statistics, we need to construct spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.

In the code chunk below, [`poly2nb()`](https://r-spatial.github.io/spdep/reference/poly2nb.html) of **spdep** package is used to compute contiguity weight matrices for the study area. **This function builds a neighbours list based on regions with contiguous boundaries.** Based on the documentation, note that the “queen” argument can take TRUE or FALSE as options. If not specified, the default is set to TRUE and the function will return a list of first order neighbours using the Queen criteria (which is on the basis of shared boundaries):

The code chunk below is used to compute Queen contiguity weight matrix:

```{r}
wm_q <- poly2nb(hunan,
                queen = TRUE)

summary(wm_q)
```

The summary report shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours and there are two ara units with only one neighbour.

### 5.4.3 Row-standardised weights matrix

Next, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. **While this is the most intuitive way to summarise the neighbors’ values, it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data.** For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.

```{r}
rswm_q <- nb2listw(wm_q,
                   style = "W",
                   zero.policy = TRUE)
rswm_q
```

::: callout-note
## What can we learn from the code chunk above?

-   The input of [`nb2listw()`](https://r-spatial.github.io/spdep/reference/nb2listw.html) must be an object of class **nb**. The syntax of the function has two major arguments, namely style and zero.policy.

-   *style* can take values “W”, “B”, “C”, “U”, “minmax” and “S”.

    -   B is the basic binary coding

    -   W is row standardised (sums over all links to n)

    -   C is globally standardised (sums over all links to n)

    -   U is equal to C divided by the number of neighbours (sums over all links to unity)

    -   S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).

-   If *zero policy* is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %\*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.
:::

::: callout-note
**Moran's I** and **Geary's C** are two common measures used in **spatial statistics** to assess the degree of **spatial autocorrelation**—that is, how spatially similar or dissimilar neighboring regions are to one another based on a given variable. Both are used to analyze whether similar values cluster together in space or if there is a random or dispersed pattern.

-   Moran's I is a **global measure** of spatial autocorrelation. It compares the similarity of values across neighboring regions and indicates whether similar or dissimilar values are spatially clustered.

-   Geary’s C focuses more on **local differences** between pairs of neighboring regions. It tends to be more sensitive to local variations than Moran’s I.
:::

## 5.5 Global Measures of Spatial Autocorrelation: Moran's I statistic testing

In this section, we will perform Moran’s I statistics testing using [`moran.test()`](https://r-spatial.github.io/spdep/reference/moran.test.html) of **spdep.**

### 5.5.1 Maron's I test

The code chunk below performs Moran’s I statistical testing using [`moran.test()`](https://r-spatial.github.io/spdep/reference/moran.test.html) of **spdep**.

```{r}
moran.test(hunan$GDPPC,
           listw = rswm_q,
           zero.policy = TRUE,
           na.action = na.omit)
```

### 5.5.2 Computing Monte Carlo Moran's I

The code chunk below performs the permutation test for Moran’s I statistic using [`moran.mc()`](https://r-spatial.github.io/spdep/reference/moran.mc.html) of **spdep**. A total of 1000 simulations will be performed.

```{r}
set.seed(1234)
bperm = moran.mc(hunan$GDPPC,
                 listw = rswm_q,
                 nsim = 999,
                 zero.policy = TRUE,
                 na.action = na.omit)
bperm
```

### 5.5.3 Visualising Monte Carlo Moran's I

It is always a good practice to examine the simulated Moran’s I test statistics in greater detail. This can be achieved by plotting the distribution of the statistical values as a histogram by using the code chunk below.

In the code chunk below [`hist()`](https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/hist) and [`abline()`](https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/abline) of R Graphics are used.

```{r}
mean(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res,
     freq = TRUE,
     breaks = 20,
     xlab = "Simulated Moran's I")
abline(v = 0,
       col = "red")
```

Alternatively, we can use ggplot2 to plot the graph:

```{r}
ggplot(data.frame(res = bperm$res),aes(x=res)) +
  geom_histogram(bins = 20,
                 color="black", 
                 fill="grey") +
  geom_vline(xintercept = 0,
             color="red",
             linetype="dashed")+
  labs(x = "Simulated Moran's I", y="Frequency")+
  ggtitle("Distribution of Moran's I test statistical values")
```

## 5.6 Global Measures of Spatial Autocorrelation: Geary's C

In this section, we will perform Geary’s C statistics testing using appropriate functions of **spdep** package.

### 5.6.1 Geary's C test

The code chunk below performs Geary’s C test for spatial autocorrelation using [`geary.test()`](https://r-spatial.github.io/spdep/reference/geary.test.html) of **spdep**.

```{r}
geary.test(hunan$GDPPC,listw = rswm_q)
```

### 5.6.2 Computing Monte Carlo Geary's C

The code chunk below performs permutation test for Geary’s C statistic using [`geary.mc()`](https://r-spatial.github.io/spdep/reference/geary.mc.html) of **spdep**.

```{r}
set.seed(1234)
bperm=geary.mc(hunan$GDPPC,
               listw = rswm_q,
               nsim = 999)
bperm
```

### 5.6.3 Visualising the Monte Carlo Geary's C

Next, we will plot a histogram to reveal the distribution of the simulated values by using the code chunk below.

```{r}
mean(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res,
     freq=TRUE,
     breaks=20,
     xlab="Simulated Geary's C")
abline(v = 1,
       col = "red")
```

## 5.7 Spatial Correlogram

Spatial correlograms are great for examining patterns of spatial autocorrelation in your data or model residuals. **They show how correlated pairs of spatial observations are when you increase the distance (lag) between them** - they are plots of some index of autocorrelation (Moran’s I or Geary’s c) against distance. Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.

### 5.7.1 Compute Moran's I correlogram

In the code chunk below, [`sp.correlogram()`](https://r-spatial.github.io/spdep/reference/sp.correlogram.html) of **spdep** package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used is Moran’s I (note method = "I" in code below). The **plot()** of base Graph is then used to plot the output.

```{r}
MI_corr <- sp.correlogram(wm_q,
                          hunan$GDPPC,
                          order = 6,
                          method = "I",
                          style = "W")
plot(MI_corr)
```

Plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.

```{r}
print(MI_corr)
```

::: callout-note
**Interpretation:**

-   **Lag 1** shows **significant positive spatial autocorrelation**, meaning nearby regions tend to have similar GDPPC values.

-   As the lags increase, spatial autocorrelation diminishes and eventually becomes slightly negative (indicating dissimilarity between regions further apart), but with wider error bars indicating less significance.
:::

### 5.7.2 Compute Geary's C correlogram and plot

In the code chunk below, `sp.correlogram()` of **spdep** package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary’s C (note method = "C" in code below). The **plot()** of base Graph is then used to plot the output.

```{r}
GC_corr <- sp.correlogram(wm_q,
                          hunan$GDPPC,
                          order = 6,
                          method = "C",
                          style = "W")
plot(GC_corr)
```

Similar to the previous step, we will print out the analysis report by using the code chunk below:

```{r}
print(GC_corr)
```

::: callout-note
**Interpretation:**

-   The Geary's C plot supports the conclusion that there is **initial positive spatial autocorrelation** at short distances (e.g., Lag 1).

-   However, as you move to greater distances (Lags 2 through 4), it suggests the spatial relationships become weaker, approaching random distribution.

-   Finally, at Lags 5 and 6, there’s evidence of **negative spatial autocorrelation**.
:::

::: callout-note
## Own notes on why wm_q is used in correlogram rather than rswm_q

-   The primary goal of a **spatial correlogram** is to examine how spatial autocorrelation (e.g., Moran's I or Geary's C) changes over different spatial lags or distances. Using the original spatial weights matrix allows the correlogram to reflect **the true intensity of spatial autocorrelation at various distances**.

-   Row-standardizing weights can distort the actual spatial influence by giving an equal contribution to all neighboring observations, regardless of their spatial closeness or the intensity of their spatial relationship. This could obscure patterns of spatial autocorrelation that are distance-dependent.
:::
