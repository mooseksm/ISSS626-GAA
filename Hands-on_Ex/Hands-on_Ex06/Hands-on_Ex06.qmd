---
title: "Hands-on Exercise 6"
author: "Kock Si Min"
date: September 29, 2024
date-modified: "last-modified"
toc: true
execute:
  eval: true
  echo: true
  freeze: true
  warning: false
  message: false
---

# Geographical Segmentation with Spatially Constrained Clustering Techniques

## 6.1 Overview

In this hands-on exercise, we will delineate a homogeneous region by using geographically referenced multivariate data. There are two major analysis, namely:

-   hierarchical cluster analysis; and

-   spatially constrained cluster analysis.

### 6.1.1 Learning Outcomes

The learning outcomes of this hands-on exercise are:

-   to convert GIS polygon data into R’s simple feature data.frame by using appropriate functions of **sf** package of R;

-   to convert simple feature data.frame into R’s SpatialPolygonDataFrame object by using appropriate **sf** of package of R;

-   to perform custer analysis by using *hclust()* of Base R;

-   to perform spatially constrained cluster analysis using *skater()* of Base R; and

-   to visualise the analysis output by using **ggplot2** and **tmap** package.

## 6.2 Getting Started

### 6.2.1 The analytical question

In geobusiness and spatial policy, it is a common practice to delineate the market or planning area into homogeneous regions by using multivariate data. In this hands-on exercise, we are interested to delineate [Shan State](https://en.wikipedia.org/wiki/Shan_State), [Myanmar](https://en.wikipedia.org/wiki/Myanmar) into homogeneous regions by using multiple Information and Communication Technology (ICT) measures, namely: Radio, Television, Land line phone, Mobile phone, Computer, and Internet at home.

## 6.3 The data

Two data sets will be used in this study. They are:

-   Myanmar Township Boundary Data (i.e. *myanmar_township_boundaries*) : This is a GIS data in ESRI shapefile format. It consists of township boundary information of Myanmar. The spatial data are captured in polygon features.

-   *Shan-ICT.csv*: This is an extract of [**The 2014 Myanmar Population and Housing Census Myanmar**](https://myanmar.unfpa.org/en/publications/2014-population-and-housing-census-myanmar-data-sheet) at the township level.

Both data sets are download from [Myanmar Information Management Unit (MIMU)](http://themimu.info/).

### 6.3.1 Installing and Loading R packages

Before we start the analysis, we need to install and launch the following packages into the R environment:

-   Spatial data handling

    -   **sf**, **rgdal** and **spdep**

-   Attribute data handling

    -   **tidyverse**, especially **readr**, **ggplot2** and **dplyr**

-   Choropleth mapping

    -   **tmap**

-   Multivariate data visualisation and analysis

    -   **coorplot**, **ggpubr**, and **heatmaply**

-   Cluster analysis

    -   **cluster**

    -   **ClustGeo**

```{r}
pacman::p_load(spdep,tmap,sf,ClustGeo,ggpubr,cluster,factoextra,NbClust,heatmaply,corrplot,psych,tidyverse,GGally)
```

## 6.4 Data Import and Preparation

### 6.4.1 Importing geospatial data into R environment

In this section, I will import Myanmar Township Boundary GIS data and its associated attrbiute table into R environment.

The Myanmar Township Boundary GIS data is in ESRI shapefile format. It will be imported into R environment by using the [*st_read()*](https://www.rdocumentation.org/packages/sf/versions/0.7-2/topics/st_read) function of **sf**.

The code chunks used are shown below:

```{r}
shan_sf <- st_read(dsn = "data/geospatial",
                   layer = "myanmar_township_boundaries") %>%
  filter(ST %in% c("Shan (East)","Shan (North)","Shan (South)")) %>%
  select(c(2:7))
```

The imported township boundary object is called *shan_sf*. It is saved in simple feature data.frame format.

We view the contents of the newly created *shan_sf* simple features dataframe using the code chunk below:

```{r}
shan_sf
```

Note that the sf dataframe is conformed to the Hardy Wickham's [tidy](https://edzer.github.io/rstudio_conf/#1) framework, as such we can also use the *glimpse()* function to reveal the data type of its fields:

```{r}
glimpse(shan_sf)
```

### 6.4.2 Importing aspatial data into R environment

```{r}
ict <- read_csv("data/aspatial/Shan-ICT.csv")
```

The imported InfoComm variables were extracted from the **2014 Myanmar Population and Housing Census Myanmar** and imported into R environment as *ict* in the R tibble dataframe format.

We can view the summary statistics of *ict* dataframe as follows:

```{r}
summary(ict)
```

There are a total of 11 fields and 55 observations in the tibble dataframe.

### 6.4.3 Derive new variables using dplyr package

The unit of measurement of the values in *ict* are the number of households. Using these values directly will be biased by the underlying total number of households. In general, townships with relatively higher total number of households will also have a higher number of households owning radios, TV etc.

To overcome this problem, we will derive the penetration rate of each ICT variable using the code chunk below:

```{r}
ict_derived <- ict %>%
  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %>%
  mutate(`TV_PR` = `Television`/`Total households`*1000) %>%
  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %>%
  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %>%
  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %>%
  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %>%
  rename(`DT_PHONE`=`District Pcode`,
        `DT` = `District Name`,
        `TS_PCODE`=`Township Pcode`,
        `TS`=`Township Name`,
        `TT_HOUSEHOLDS`=`Total households`,
        `RADIO`=`Radio`,
        `TV`=`Television`,
        `LLPHONE`=`Land line phone`,
        `MPHONE`=`Mobile phone`,
        `COMPUTER`=`Computer`,
        `INTERNET`=`Internet at home`)
```

We review the summary statistics of the newly derived penetration codes using the code chunk below:

```{r}
summary(ict_derived)
```

Note that we have added six new fields into the dataframe: RADIO_PR, TV_PR, LLPHONE_PR, MPHONE_PR, COMPUTER_PR and INTERNET_PR.

## 6.5 Exploratory Data Analysis (EDA)

### 6.5.1 EDA using statistical graphics

We can plot the distribution of variables using appropriate EDA as shown in the code chunk below. Histogram is useful to identify the overall distribution of the data values i.e. left-/right-skewed or normal distribution.

```{r}
ggplot(ict_derived,
       aes(x=`RADIO`))+
  geom_histogram(bins = 20,
                 color = "black",
                 fill = "lightblue")
```

Boxplot is useful to detect any outliers:

```{r}
ggplot(ict_derived,
       aes(x=`RADIO`))+
  geom_boxplot(color ="black",
               fill = "lightblue")
```

We will also plot the distributed of the newly derived variable i.e. Radio Penetration Rate by using the code chunk below:

```{r}
ggplot(ict_derived,
       aes(x=`RADIO_PR`))+
  geom_histogram(bins = 20,
                 color = "black",
                 fill = "lightblue")
```

We also plot using boxplot:

```{r}
ggplot(ict_derived,
       aes(x=`RADIO_PR`))+
  geom_boxplot(color = "black",
               fill = "lightblue")
```

We plot the distribution of the other variables as well by first creating the individual histograms:

```{r}
radio <- ggplot(ict_derived,
                aes(x=`RADIO_PR`))+
  geom_histogram(bins = 20,
                 color = "black",
                 fill = "lightblue")

tv <- ggplot(ict_derived,
                aes(x=`TV_PR`))+
  geom_histogram(bins = 20,
                 color = "black",
                 fill = "lightblue")

llphone <- ggplot(ict_derived,
                aes(x=`LLPHONE_PR`))+
  geom_histogram(bins = 20,
                 color = "black",
                 fill = "lightblue")

mphone <- ggplot(ict_derived,
                aes(x=`MPHONE_PR`))+
  geom_histogram(bins = 20,
                 color = "black",
                 fill = "lightblue")

computer <- ggplot(ict_derived,
                aes(x=`COMPUTER_PR`))+
  geom_histogram(bins = 20,
                 color = "black",
                 fill = "lightblue")

internet <- ggplot(ict_derived,
                aes(x=`INTERNET_PR`))+
  geom_histogram(bins = 20,
                 color = "black",
                 fill = "lightblue")
```

We then use [*ggarrange()*](https://rpkgs.datanovia.com/ggpubr/reference/ggarrange.html) function of [**ggpubr package**](https://rpkgs.datanovia.com/ggpubr/index.html)to group the histograms together:

```{r}
ggarrange(radio,tv,llphone,mphone,computer,internet,
          ncol = 3,
          nrow = 2)
```

### 6.5.2 EDA using chloropleth map

#### 6.5.2.1 Joining geospatial data with aspatial data

Before we can prepare the chloropleth map, we need to combine both the geospatial data object *shan_sf* and the aspatial dataframe object *ict_derived* into one. This will be performed using *left_join()* function of dplyr package.

The *shan_sf* simple feature dataframe will be used as the base data object and the *ict_derived* dataframe will be used as the join table.

The unique identifier and common field used to join both data objects is *TS_PCODE*. We saved the file as a new rds file to avoid rerunning the preparation steps.

```{r}
#| eval: false
shan_sf <- left_join(shan_sf,
                              ict_derived,
                              by = c("TS_PCODE"="TS_PCODE"))

write_rds(shan_sf,"data/rds/shan_sf.rds")
```

It is important to note that no new output data has been created. Instead, the data fields from *ict_derived* dataframe are now updated into the *shan_sf* dataframe.

```{r}
shan_sf <- read_rds("data/rds/shan_sf.rds")
```

#### 6.5.2.2 Preparing a chloropleth map

We will prepare a choropleth map to take a quick look at the distribution of radio penetration rate of Shan State at the township level.

We use the *qtm()* function of the **tmap** package below:

```{r}
qtm(shan_sf,"RADIO_PR")
```

In order to reveal that the distribution shown in the choropleth map above is bias to the underlying total number of households at the township, we will create two choropleth maps - one for the total number of households *TT_HOUSEHOLDS.map* and one for the total number of households with Radio i.e. *RADIO.map* using the code chunk below:

```{r}
TT_HOUSEHOLDS.map <- tm_shape(shan_sf)+
  tm_fill(col = "TT_HOUSEHOLDS",
          n = 5,
          style = "jenks",
          title = "Total households")+
  tm_borders(alpha = 0.5)+
  tm_layout(legend.position =c(0.8,0.5))

RADIO.map <- tm_shape(shan_sf)+
  tm_fill(col = "RADIO",
          n = 5,
          style = "jenks",
          title = "Number of households with Radio")+
  tm_borders(alpha = 0.5)+
  tm_layout(legend.position =c(0.8,0.5))

tmap_arrange(TT_HOUSEHOLDS.map,RADIO.map,
             asp = NA,
             ncol = 2)
```

The choropleth maps above show that townships with relatively larger number of households are also showing relatively higher number of radio ownership.

Now we plot the choropleth maps showing the distribution of total number of households and radio penetration rate using the code chunk below:

```{r}
tm_shape(shan_sf)+
  tm_polygons(c("TT_HOUSEHOLDS","RADIO_PR"),
              style="jenks")+
  tm_facets(sync = TRUE,
            ncol = 2)+
  tm_legend(legend.position = c("right","bottom"))+
  tm_layout(outer.margins = 0,
            asp = 0)
```

As shown above, choropleth maps above show that townships with relatively larger number of households might not have a higher number of radio penetration rate.

## 6.6 Correlation Analysis

Before we perform cluster analysis, it is important to ensure that the cluster variables are not highly correlated.

We will use [*corrplot.mixed()*](https://cran.r-project.org/web/packages/corrplot/corrplot.pdf) function of [**corrplot**](https://cran.r-project.org/web/packages/corrplot/vignettes/corrplot-intro.html) package to visualise and analyse the correlation of the input variables.

```{r}
cluster_vars.cor = cor(ict_derived[,12:17])
corrplot.mixed(cluster_vars.cor,
               lower = "ellipse",
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black")
```

The correlation plot shows that COMPUTER_PR and INTERNET_PR are highly correlated i.e. 0.87. This suggests that only one of them should be used in the cluster analysis.

## 6.7 Hierarchy Cluster Analysis

In this section, we will perform hierarchical cluster analysis. The analysis consist of four major steps:

### 6.7.1 Extracting clustering variables

The code chunk below will be used to extract the clustering variables from *shan_sf* simple feature object into a dataframe. Note that we have omitted INTERNET_PR as it is highly correlated to COMPUTER_PR.

```{r}
cluster_vars <- shan_sf %>%
  st_set_geometry(NULL) %>%
  select("TS.x","RADIO_PR","TV_PR","LLPHONE_PR","MPHONE_PR","COMPUTER_PR")
head(cluster_vars,10)
```

Next, we need to change the rows by township name instead of row number using the code chunk below:

```{r}
row.names(cluster_vars) <- cluster_vars$"TS.x"
head(cluster_vars,10)
```

This replaced the row number with township name. Next, we will delete the "TS.x" field using the following code chunk:

```{r}
shan_ict <- select(cluster_vars,c(2:6))
head(shan_ict,10)
```

### 6.7.2 Data Standardisation

In general, multiple variables will be used in cluster analysis. It is not unusal that their value ranges are different. To avoid the cluster analysis being biased to clustering variables with large values, it is useful to standardise the input variables before performing cluster analysis.

#### 6.7.2.1 Min-Max standardisation

In the code chunk below, *normalize()* of [**heatmaply**](https://cran.r-project.org/web/packages/heatmaply/index.html) package is used to standardise the clustering variables using the Min-Max method. The summary() function is then used to display the summary statistics of the standardised clustering variables.

```{r}
shan_ict.std <- normalize(shan_ict)
summary(shan_ict.std)
```

Note that the value ranges of the Min-Max standardised clustering variables are now from 0 to 1.

### 6.7.4 Z-score standardisation

Z-score standardisation can also be performed easily using *scale()* of Base R, as seen in the code chunk below:

```{r}
shan_ict.z <- scale(shan_ict)
describe(shan_ict.z)
```

Note that the mean and standard deviation of the Z-score standardised clustering variables are 0 and 1 respectively.

::: callout-note
Note that [*describe()*](https://www.rdocumentation.org/packages/Hmisc/versions/4.4-0/topics/describe) of [**pscyh**](https://cran.r-project.org/web/packages/psych/index.html) package is used here instead of *summary()* of Base R because the former provide standard deviation values.
:::

::: callout-warning
Note that Z-score standardisation method should only be used if we assume that all variables come from some normal distribution.
:::

### 6.7.5 Visualising the standardised clustering variables

Before reviewing the summary statistics of the standardised clustering variables, it is a good practice to visualise their graphical distribution.

The code chunk below plots the scaled *Radio_PR* field.

```{r}
r <- ggplot(ict_derived,
            aes(x=`RADIO_PR`))+
  geom_histogram(bins = 20,
                 color = "black",
                 fill = "lightblue")+
  ggtitle("Raw values without standardisation")

shan_ict_s_df <- as.data.frame(shan_ict.std)
s <- ggplot(shan_ict_s_df,
            aes(x=`RADIO_PR`))+
  geom_histogram(bins = 20,
                 color = "black",
                 fill = "lightblue")+
  ggtitle("Min-Max Standardisation")

shan_ict_z_df <- as.data.frame(shan_ict.z)
z <- ggplot(shan_ict_z_df,
            aes(x=`RADIO_PR`))+
  geom_histogram(bins = 20,
                 color = "black",
                 fill = "lightblue")+
  ggtitle("Z-Score Standardisation")

ggarrange(r,s,z,
          ncol = 3,
          nrow = 1)
```

We also plot the density curves:

```{r}
r <- ggplot(ict_derived,
            aes(x=`RADIO_PR`))+
  geom_density(color = "black",
               fill = "lightblue")+
  ggtitle("Raw values without standardisation")

shan_ict_s_df <- as.data.frame(shan_ict.std)
s <- ggplot(shan_ict_s_df,
            aes(x=`RADIO_PR`))+
  geom_density(color = "black",
               fill = "lightblue")+
  ggtitle("Min-Max Standardisation")

shan_ict_z_df <- as.data.frame(shan_ict.z)
z <- ggplot(shan_ict_z_df,
            aes(x=`RADIO_PR`))+
  geom_density(color = "black",
               fill = "lightblue")+
  ggtitle("Z-Score Standardisation")

ggarrange(r,s,z,
          ncol = 3,
          nrow = 1)
```

### 6.7.6 Computing proximity matrix

In R, many packages provide functions to calculate distance matrix. We will compute the proximity matrix using [*dist()*](https://stat.ethz.ch/R-manual/R-devel/library/stats/html/dist.html) of R.

*dist()* supports six distance proximity calculations, namely **euclidean (default option), maximum, manhatten, canberra, binary and minkowski*.***

The code chunk below computes the proximity matrix using euclidean method:

```{r}
proxmat <- dist(shan_ict,method = "euclidean")
```

The code chunk below is used to list the content of *proxmat* for visual inspection:

```{r}
proxmat
```

### 6.7.7 Computing hierarchical clustering

In R, there are several packages that provide hierarchical clustering function. In this exercise, [*hclust()*](https://stat.ethz.ch/R-manual/R-devel/library/stats/html/hclust.html) of R stats will be used.

*hclust()* employs the agglomeration method to compute the cluster. Eight clustering algorithms are supportedm namely ward.D, ward.D2, single, complete, average(UPGMA), mcquitty(WPGMA), median(WPGMC) and centroid(UPGMC).

The code chunk below performs the hierarchical cluster analysis using ward.D method. The hierarchical clustering output is stored in an object of class **hclust** which describes the tree produced by the clustering process.

```{r}
hclust_ward <- hclust(proxmat, method="ward.D")
```

We plot the tree using *plot()* of R Graphics using the code chunk below:

```{r}
plot(hclust_ward,cex = 0.6)
```

### 6.7.8 Selecting the optimal clustering algorithm

One challenge in performing hierarchical clustering is to identify stronger clustering structures. The issue can be solved by using [*agnes()*](https://www.rdocumentation.org/packages/cluster/versions/2.1.0/topics/agnes) function of [**cluster**](https://cran.r-project.org/web/packages/cluster/) package.

It functions like *hclust()* but with the *agnes()* function, we also get the agglomerative coefficient which measures the amount of clustering structure found i.e. values closer to 1 suggest a stronger clustering structure.

The code chunk below is used to compute the agglomerative coefficient of all hierarchical clustering algorithms:

```{r}
m <- c("average","single","complete","ward")
names(m) <- c("average","single","complete","ward")

ac <- function(x){
  agnes(shan_ict,method=x)$ac
}

map_dbl(m,ac)
```

With reference to the output above, we can see that **Ward’s method provides the strongest clustering structure among the four methods assessed.** Hence, in the subsequent analysis, only Ward’s method will be used.

### 6.7.9 Determining optimal clusters

Another technical challenge face by data analyst in performing clustering analysis is to determine the optimal clusters to retain.

There are [three](https://statweb.stanford.edu/~gwalther/gap) commonly used methods to determine the optimal clusters, they are:

-   [Elbow Method](https://en.wikipedia.org/wiki/Elbow_method_(clustering))

-   [Average Silhouette Method](https://www.sciencedirect.com/science/article/pii/0377042787901257?via%3Dihub)

-   [Gap Statistic Method](http://www.web.stanford.edu/~hastie/Papers/gap.pdf)

#### 6.7.9.1 Gap Statistic Method

The [**gap statistic**](http://www.web.stanford.edu/~hastie/Papers/gap.pdf) **compares the total within intra-cluster variation for different values of k with their expected values under null reference distribution of the data.** The estimate of the optimal clusters will be value that **maximize the gap statistic** (i.e., that yields the largest gap statistic). This means that the **clustering structure is far away from the random uniform distribution of points.**

To compute the gap statistic, [*clusGap()*](https://www.rdocumentation.org/packages/cluster/versions/2.1.0/topics/clusGap) of [**cluster**](https://cran.r-project.org/web/packages/cluster/index.html) package will be used.

```{r}
set.seed(12345)
gap_stat <- clusGap(shan_ict,
                    FUN = hcut,
                    nstart = 25,
                    K.max = 10,
                    B = 50)

print(gap_stat,method="firstmax")
```

Note that the [*hcut*](https://rpkgs.datanovia.com/factoextra/reference/hcut.html) function used is from the [**factoextra**](https://rpkgs.datanovia.com/factoextra/index.html) package.

Next, we can visualise the plot using [*fviz_gap_stat()*](https://rpkgs.datanovia.com/factoextra/reference/fviz_nbclust.html) of [**factoextra**](https://rpkgs.datanovia.com/factoextra/index.html) package:

```{r}
fviz_gap_stat(gap_stat)
```

With reference to the gap statistic graph above, the recommended number of cluster to retain is 1. However, **it is not logical to retain only one cluster.** By examine the gap statistic graph, **the 6-cluster gives the next largest gap statistic and should be the next best cluster to pick.**

::: callout-note
**Note:** In addition to these commonly used approaches, the [NbClust](https://cran.r-project.org/web/packages/NbClust/) package, published by Charrad et al., 2014, provides 30 indices for determining the relevant number of clusters and proposes to users the best clustering scheme from the different results obtained by varying all combinations of number of clusters, distance measures, and clustering methods.
:::

### 6.7.10 Interpreting the dendograms

In the dendrogram displayed above, each leaf corresponds to one observation. As we move up the tree, observations that are similar to each other are combined into branches, which are themselves fused at a higher height.

The **height of the fusion, provided on the vertical axis, indicates the (dis)similarity between two observations.** The **higher the height of the fusion, the less similar the observations are.** Note that, conclusions about the proximity of two observations can be drawn only based on the height where branches containing those two observations first are fused. We cannot use the proximity of two observations along the horizontal axis as a criteria of their similarity.

It’s also possible to draw the dendrogram with a border around the selected clusters by using [*rect.hclust()*](https://stat.ethz.ch/R-manual/R-devel/library/stats/html/rect.hclust.html) of R stats. The argument *border* is used to specify the border colors for the rectangles.

```{r}
plot(hclust_ward, cex = 0.6)
rect.hclust(hclust_ward,
            k = 6,
            border = 2:5)
```

### 6.7.11 Visually-driven hierarchical clustering analysis

In this section, we will learn how to perform visually-driven hiearchical clustering analysis using [*heatmaply*](https://cran.r-project.org/web/packages/heatmaply/index.html) package.

With **heatmaply**, we are able to build both highly interactive or static cluster heatmap.

#### 6.7.11.1 Transforming the dataframe into a matrix

The data was loaded into a data frame, but it **has to be a data matrix to make your heatmap.**

The code chunk below will be used to transform *shan_ict* data frame into a data matrix.

```{r}
shan_ict_mat <- data.matrix(shan_ict)
```

#### 6.7.11.2 Plotting interactive cluster heatmap using *heatmaply()*

In the code chunk below, the [*heatmaply()*](https://talgalili.github.io/heatmaply/reference/heatmaply.html) of [heatmaply](https://talgalili.github.io/heatmaply/index.html) package is used to build an interactive cluster heatmap.

```{r}
heatmaply(normalize(shan_ict_mat),
          Colv = NA,
          dist_method = "euclidean",
          hclust_method = "ward.D",
          seriate = "OLO",
          colors = Blues,
          k_row = 6,
          margins = c(NA,200,60,NA),
          fontsize_row = 4,
          fontsize_col = 5,
          main = "Geographic Segmentation of Shan State by ICT Indicators",
          xlab = "ICT Indicators",
          ylab = "Townships of Shan State")
```

### 6.7.12 Mapping the clusters formed

With closed examination of the dendragram above, we have decided to retain six clusters.

[*cutree()*](https://stat.ethz.ch/R-manual/R-devel/library/stats/html/cutree.html) of R Base will be used in the code chunk below to derive a 6-cluster model.

```{r}
groups <- as.factor(cutree(hclust_ward, k=6))
```

The output is called *groups*. It is a *list* object.

In order to visualise the clusters, the *groups* object need to be appended onto *shan_sf* simple feature object.

The code chunk below form the join in three steps:

-   the *groups* list object will be converted into a matrix;

-   *cbind()* is used to append *groups* matrix onto *shan_sf* to produce an output simple feature object called `shan_sf_cluster`; and

-   *rename()* of **dplyr** package is used to rename *as.matrix.groups* field as *CLUSTER*.

```{r}
shan_sf_cluster <- cbind(shan_sf, as.matrix(groups)) %>%
  rename(`CLUSTER`=`as.matrix.groups.`)
```

Next, *qtm()* of **tmap** package is used to plot the choropleth map showing the cluster formed:

```{r}
qtm(shan_sf_cluster,"CLUSTER")
```

**The choropleth map above reveals the clusters are very fragmented. The is one of the major limitations when non-spatial clustering algorithm such as hierarchical cluster analysis method is used.**

## 6.8 Spatially Constrained Clustering: SKATER approach

In this section, we will derive spatially constrained cluster using [*skater()*](https://r-spatial.github.io/spdep/reference/skater.html) method of [**spdep**](https://r-spatial.github.io/spdep/index.html) package.

### 6.8.1 **Converting into SpatialPolygonsDataFrame**

First, we need to convert `shan_sf` into SpatialPolygonsDataFrame. This is because SKATER function only support **sp** objects such as SpatialPolygonDataFrame.

The code chunk below uses [*as_Spatial()*](https://r-spatial.github.io/sf/reference/coerce-methods.html) of **sf** package to convert *shan_sf* into a SpatialPolygonDataFrame called *shan_sp*.

```{r}
shan_sp <- as_Spatial(shan_sf)
```

### 6.8.2 Computing Neighbour List

Next, [poly2nd()](https://r-spatial.github.io/spdep/reference/poly2nb.html) of **spdep** package will be used to compute the neighbours list from polygon list.

```{r}
shan.nb <- poly2nb(shan_sp)
summary(shan.nb)
```

We can plot the neighbours list on *shan_sp* using the code chunk below. Since we now can plot the community area boundaries as well, we plot this graph on top of the map. The first plot command gives the boundaries. This is followed by the plot of the neighbor list object, with coordinates applied to the original SpatialPolygonDataFrame (Shan state township boundaries) to extract the centroids of the polygons. These are used as the nodes for the graph representation. We also set the color to blue and specify add=TRUE to plot the network on top of the boundaries.

```{r}
coords <- st_coordinates(
  st_centroid(st_geometry(shan_sf)))
```

```{r}
plot(st_geometry(shan_sf), 
     border=grey(.5))
plot(shan.nb,
     coords, 
     col="blue", 
     add=TRUE)
```

Note that if you plot the network first and then the boundaries, some of the areas will be clipped. This is because the plotting area is determined by the characteristics of the first plot. In this example, because the boundary map extends further than the graph, we plot it first.

### 6.8.3 Computing minimum spanning tree

#### 6.8.3.1 Calculating edge costs

Next, [*nbcosts()*](https://r-spatial.github.io/spdep/reference/nbcosts.html) of **spdep** package is used to compute the cost of each edge. It is the distance between it nodes. This function compute this distance using a data.frame with observations vector in each node.

The code chunk below is used to compute the cost of each edge.

```{r}
lcosts <- nbcosts(shan.nb, shan_ict)
```

For each observation, this gives the pairwise dissimilarity between its values on the five variables and the values for the neighbouring observation (from the neighbour list). Basically, this is the notion of a generalised weight for a spatial weights matrix.

Next, we will incorporate these costs into a weights object in the same way as we did in the calculation of inverse of distance weights. In other words, we convert the neighbour list to a list weights object by specifying the just computed ***lcosts*** as the weights.

In order to achieve this, [*nb2listw()*](https://r-spatial.github.io/spdep/reference/nb2listw.html) of **spdep** package is used as shown in the code chunk below.

Note that we specify the *style* as **B** to make sure the cost values are not row-standardised.

```{r}
shan.w <- nb2listw(shan.nb, 
                   lcosts, 
                   style="B")
summary(shan.w)
```

The minimum spanning tree is computed by mean of the [*mstree()*](https://r-spatial.github.io/spdep/reference/mstree.html) of **spdep** package as shown in the code chunk below.

```{r}
shan.mst <- mstree(shan.w)
```

After computing the MST, we can check its class and dimension by using the code chunk below.

```{r}
class(shan.mst)
```

```{r}
dim(shan.mst)
```

Note that the dimension is 54 and not 55. **This is because the minimum spanning tree consists on n-1 edges (links) in order to traverse all the nodes.**

We can display the content of *shan.mst* by using *head()* as shown in the code chunk below.

```{r}
head(shan.mst)
```

The plot method for the MST include a way to show the observation numbers of the nodes in addition to the edge. As before, we plot this together with the township boundaries. We can see how the initial neighbour list is simplified to just one edge connecting each of the nodes, while passing through all the nodes.

```{r}
plot(st_geometry(shan_sf), 
                 border=gray(.5))
plot.mst(shan.mst, 
         coords, 
         col="blue", 
         cex.lab=0.7, 
         cex.circles=0.005, 
         add=TRUE)
```

### 6.8.4 **Computing spatially constrained clusters using SKATER method**

The code chunk below compute the spatially constrained cluster using [*skater()*](https://r-spatial.github.io/spdep/reference/skater.html) of **spdep** package.

```{r}
clust6 <- spdep::skater(edges = shan.mst[,1:2], 
                 data = shan_ict, 
                 method = "euclidean", 
                 ncuts = 5)
```

The *skater()* takes three mandatory arguments: - the first two columns of the MST matrix (i.e. not the cost), - the data matrix (to update the costs as units are being grouped), and - the number of cuts.

Note: It is set to **one less than the number of clusters**. So, the value specified is **not** the number of clusters, but the number of cuts in the graph, one less than the number of clusters.

The result of the *skater()* is an object of class **skater**. We can examine its contents by using the code chunk below.

```{r}
str(clust6)
```

The most interesting component of this list structure is the groups vector containing the labels of the cluster to which each observation belongs (as before, the label itself is arbitary). This is followed by a detailed summary for each of the clusters in the edges.groups list. Sum of squares measures are given as ssto for the total and ssw to show the effect of each of the cuts on the overall criterion.

We can check the cluster assignment by using the conde chunk below.

```{r}
ccs6 <- clust6$groups
ccs6
```

We can find out how many observations are in each cluster by means of the table command. Parenthetially, we can also find this as the dimension of each vector in the lists contained in edges.groups. For example, the first list has node with dimension 12, which is also the number of observations in the first cluster.

```{r}
table(ccs6)
```

Lastly, we can also plot the pruned tree that shows the five clusters on top of the townshop area.

```{r}
plot(st_geometry(shan_sf), 
     border=gray(.5))
plot(clust6, 
     coords, 
     cex.lab=.7,
     groups.colors=c("red","green","blue", "brown", "pink"),
     cex.circles=0.005, 
     add=TRUE)
```

### 6.8.5 Visualising the clusters in a choropleth map

The code chunk below is used to plot the newly derived clusters by using SKATER method.

```{r}
groups_mat <- as.matrix(clust6$groups)
shan_sf_spatialcluster <- cbind(shan_sf_cluster, as.factor(groups_mat)) %>%
  rename(`SP_CLUSTER`=`as.factor.groups_mat.`)
qtm(shan_sf_spatialcluster, "SP_CLUSTER")
```

For easy comparison, it will be better to place both the hierarchical clustering and spatially constrained hierarchical clustering maps next to each other.

```{r}
hclust.map <- qtm(shan_sf_cluster,
                  "CLUSTER") + 
  tm_borders(alpha = 0.5) 

shclust.map <- qtm(shan_sf_spatialcluster,
                   "SP_CLUSTER") + 
  tm_borders(alpha = 0.5) 

tmap_arrange(hclust.map, shclust.map,
             asp=NA, ncol=2)
```

## 6.9 **Spatially Constrained Clustering: ClustGeo Method**

In this section, we will use functions provided by **ClustGeo** package to perform non-spatially constrained hierarchical cluster analysis and spatially constrained cluster analysis.

### 6.9.1 **A short note about ClustGeo package**

[**ClustGeo**](https://cran.r-project.org/web/packages/ClustGeo/) package is an R package specially designed to support the need of performing spatially constrained cluster analysis. More specifically, it provides a Ward-like hierarchical clustering algorithm called `hclustgeo()` including spatial/geographical constraints.

In the nutshell, the algorithm uses two dissimilarity matrices D0 and D1 along with a mixing parameter alpha, whereby the value of alpha must be a real number between \[0, 1\]. D0 can be non-Euclidean and the weights of the observations can be non-uniform. It gives the dissimilarities in the **attribute/clustering variable space**. D1, on the other hand, gives the dissimilarities in the **constraint space**. The criterion minimised at each stage is a convex combination of the homogeneity criterion calculated with D0 and the homogeneity criterion calculated with D1.

The idea is then to determine a value of alpha which increases the spatial contiguity without deteriorating too much the quality of the solution based on the variables of interest. This need is supported by a function called `choicealpha()`.

### 6.9.2 **Ward-like hierarchical clustering: ClustGeo**

ClustGeo package provides function called `hclustgeo()` to perform a typical Ward-like hierarchical clustering just like `hclust()` learned in previous section.

To perform non-spatially constrained hierarchical clustering, we only need to provide the function a dissimilarity matrix as shown in the code chunk below.

```{r}
nongeo_cluster <- hclustgeo(proxmat)
plot(nongeo_cluster, cex = 0.5)
rect.hclust(nongeo_cluster, 
            k = 6, 
            border = 2:5)
```

Note that the dissimilarity matrix must be an object of class `dist`, i.e. an object obtained with the function `dist()`. For sample code chunk, please refer to [5.7.6 Computing proximity matrix](https://r4gdsa.netlify.app/chap05#computing-proximity-matrix)

#### 6.9.2.1 Mapping the clusters formed

Similarly, we can plot the clusters on a categorical area shaded map by using the steps we learned in 5.7.12 Mapping the clusters formed.

```{r}
groups <- as.factor(cutree(nongeo_cluster, k=6))
```

```{r}
shan_sf_ngeo_cluster <- cbind(shan_sf, as.matrix(groups)) %>%
  rename(`CLUSTER` = `as.matrix.groups.`)
```

```{r}
qtm(shan_sf_ngeo_cluster, "CLUSTER")
```

### 6.9.3 **Spatially Constrained Hierarchical Clustering**

Before we can performed spatially constrained hierarchical clustering, a spatial distance matrix will be derived by using [`st_distance()`](https://r-spatial.github.io/sf/reference/geos_measures.html) of sf package.

```{r}
dist <- st_distance(shan_sf, shan_sf)
distmat <- as.dist(dist)
```

Notice that `as.dist()` is used to convert the data frame into matrix.

Next, `choicealpha()` will be used to determine a suitable value for the mixing parameter alpha as shown in the code chunk below.

```{r}
cr <- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K=6, graph = TRUE)
```

With reference to the graphs above, alpha = 0.3 will be used as shown in the code chunk below.

```{r}
clustG <- hclustgeo(proxmat, distmat, alpha = 0.3)
```

Next, `cutree()` is used to derive the cluster object.

```{r}
groups <- as.factor(cutree(clustG, k=6))
```

We will then join back the group list with *shan_sf* polygon feature data frame by using the code chunk below.

```{r}
shan_sf_Gcluster <- cbind(shan_sf, as.matrix(groups)) %>%
  rename(`CLUSTER` = `as.matrix.groups.`)
```

We can now plot the map of the newly delineated spatially constrained clusters.

```{r}
qtm(shan_sf_Gcluster, "CLUSTER")
```

## 6.10 Visual interpretation of clusters

### 6.10.1 **Visualising individual clustering variable**

Code chunk below is used to reveal the distribution of a clustering variable (i.e RADIO_PR) by cluster.

```{r}
ggplot(data = shan_sf_ngeo_cluster,
       aes(x = CLUSTER, y = RADIO_PR)) +
  geom_boxplot()
```

The boxplot reveals Cluster 3 displays the highest mean Radio Ownership Per Thousand Household. This is followed by Cluster 2, 1, 4, 6 and 5.

### 6.10.2 **Multivariate Visualisation**

Past studies shown that parallel coordinate plot can be used to reveal clustering variables by cluster very effectively. In the code chunk below, [`ggparcoord()`](https://ggobi.github.io/ggally/reference/ggparcoord.html) of [**GGally**](https://ggobi.github.io/ggally/index.html) package

```{r}
ggparcoord(data = shan_sf_ngeo_cluster, 
           columns = c(17:21), 
           scale = "globalminmax",
           alphaLines = 0.2,
           boxplot = TRUE, 
           title = "Multiple Parallel Coordinates Plots of ICT Variables by Cluster") +
  facet_grid(~ CLUSTER) + 
  theme(axis.text.x = element_text(angle = 30))
```

The parallel coordinate plot above reveals that households in Cluster 4 townships tend to own the highest number of TV and mobile-phone. On the other hand, households in Cluster 5 tends to own the lowest of all the five ICT.

Note that the `scale` argument of `ggparcoor()` provide several methods to scale the clustering variables. They are:

-   std: univariately, subtract mean and divide by standard deviation.

-   robust: univariately, subtract median and divide by median absolute deviation.

-   uniminmax: univariately, scale so the minimum of the variable is zero, and the maximum is one.

-   globalminmax: no scaling is done; the range of the graphs is defined by the global minimum and the global maximum.

-   center: use uniminmax to standardize vertical height, then center each variable at a value specified by the scaleSummary param.

-   centerObs: use uniminmax to standardize vertical height, then center each variable at the value of the observation specified by the centerObsID param

There is no one best scaling method to use - we will need to explore them and select the one that best meets the analysis need.

Last but not least, we can also compute the summary statistics such as mean, median, sd, etc to complement the visual interpretation.

In the code chunk below, `group_by()` and `summarise()` of dplyr are used to derive mean values of the clustering variables.

```{r}
shan_sf_ngeo_cluster %>% 
  st_set_geometry(NULL) %>%
  group_by(CLUSTER) %>%
  summarise(mean_RADIO_PR = mean(RADIO_PR),
            mean_TV_PR = mean(TV_PR),
            mean_LLPHONE_PR = mean(LLPHONE_PR),
            mean_MPHONE_PR = mean(MPHONE_PR),
            mean_COMPUTER_PR = mean(COMPUTER_PR))
```
