[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS626-GAA",
    "section": "",
    "text": "Welcome to Si Min’s ISSS626 Geospatial Analytics and Applications website!\nPlease find below the latest updates:\n\n\n\n\n\n\n\n\n\n\n\n\nTake-home Exercise 2\n\n\n25 min\n\n\n\nOct 2, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 4\n\n\n17 min\n\n\n\nSep 14, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 2A\n\n\n18 min\n\n\n\nAug 31, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Welcome to Si Min’s ISSS626 Geospatial Analytics and Applications website!"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Geospatial Data Science is a process of importing, wrangling, integrating and processing geographically referenced datasets. In this hands-on exercise, I will perform geospatial data science tasks in R using the sf package and acquire the following competencies:\n\ninstall and load sf and tidyverse packages into the R environment\nimport geospatial data using appropriate functions of sf package\nimport aspatial data by using appropriate function of readr package\nexplore the content of simple feature data frame by using appropriate Base R and sf functions\nassign or transform coordinate systems by using appropriate sf functions\nconvert aspatial data into a sf dataframe by using appropriate functions of the sf package\nperform geoprocessing tasks using appropriate functions of sf package\nperform data wrangling tasks by using appropriate functions of dplyr package\nperform exploratory data analysis (EDA) using appropriate functions from ggplot2 package\n\n\n\n\nThe following datasets were downloaded:\n\nMaster Plan 2014 Subzone Boundary (Web) from data.gov.sg\nPre-Schools Location from data.gov.sg\nCycling Path from LTADataMall\nLatest version of Singapore Airbnb listing data from Inside Airbnb\n\n\n\n\n\n\n\nsf for importing, managing, and processing geospatial data, and\ntidyverse for performing data science tasks such as importing, wrangling and visualising data. tidyverse consists of a family of R packages and the following within the family will be used in this exercise\n\nreadr for importing csv data,\nreadxl for importing Excel worksheet,\ntidyr for manipulating data,\ndplyr for transforming data, and\nggplot2 for visualising data\n\n\nThe packages are loaded with the following code chunk:\n\npacman::p_load(sf,tidyverse)\n\n\n\n\n\nWe will import the following geospatial data using st_read() of sf package:\n\nMP14_SUBZONE_WEB_PL, a polygon feature layer in ESRI shapefile format,\nCyclingPath, a line feature layer in ESRI shapefile format, and\nPreSchool, a point feature layer in kml file format.\n\n\n\nThe following code chunk uses the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile as a polygon feature data frame.\nWhen the input geospatial data is in shapefile format, two arguments are used:\n\ndsn to define the data path\nlayer to provide the shapefile name\n\nNo extension such as .shp,.dbf,.prj and .shx are needed.\n\nmpsz = st_read(dsn=\"data/geospatial\",\n               layer=\"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThe following will be shown after running the code chunk above:\n\n\nIt reveals that the geospatial objects are multipolygon features.\nThere are a total of 323 features and 15 fields in the mpsz simple feature data frame.\nmpsz is in svy21 projected coordinates systems.\nThe bounding box provides the x extent and y extent of the data.\n\n\n\n\nThe following code chunk uses the st_read() function of sf package to import import CyclingPath shapefile as a line feature data frame.\n\ncyclingpath = st_read(dsn=\"data/geospatial\",layer=\"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3138 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42644.17 ymax: 48948.15\nProjected CRS: SVY21\n\n\nThe following will be shown after running the code chunk above:\n\n\nIt reveals that the geospatial objects are multiline string features.\nThere are a total of 3138 features and 2 fields in the cyclingpath linestring feature data frame.\ncyclingpath is in svy21 projected coordinates systems.\n\n\n\n\nThe code chunk below is used to import the PreSchoolsLocation data which is in kml format.\n\npreschool = st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#learning-outcomes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#learning-outcomes",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Geospatial Data Science is a process of importing, wrangling, integrating and processing geographically referenced datasets. In this hands-on exercise, I will perform geospatial data science tasks in R using the sf package and acquire the following competencies:\n\ninstall and load sf and tidyverse packages into the R environment\nimport geospatial data using appropriate functions of sf package\nimport aspatial data by using appropriate function of readr package\nexplore the content of simple feature data frame by using appropriate Base R and sf functions\nassign or transform coordinate systems by using appropriate sf functions\nconvert aspatial data into a sf dataframe by using appropriate functions of the sf package\nperform geoprocessing tasks using appropriate functions of sf package\nperform data wrangling tasks by using appropriate functions of dplyr package\nperform exploratory data analysis (EDA) using appropriate functions from ggplot2 package"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#data-acquisition",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#data-acquisition",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The following datasets were downloaded:\n\nMaster Plan 2014 Subzone Boundary (Web) from data.gov.sg\nPre-Schools Location from data.gov.sg\nCycling Path from LTADataMall\nLatest version of Singapore Airbnb listing data from Inside Airbnb"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "sf for importing, managing, and processing geospatial data, and\ntidyverse for performing data science tasks such as importing, wrangling and visualising data. tidyverse consists of a family of R packages and the following within the family will be used in this exercise\n\nreadr for importing csv data,\nreadxl for importing Excel worksheet,\ntidyr for manipulating data,\ndplyr for transforming data, and\nggplot2 for visualising data\n\n\nThe packages are loaded with the following code chunk:\n\npacman::p_load(sf,tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-geospatial-data",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "We will import the following geospatial data using st_read() of sf package:\n\nMP14_SUBZONE_WEB_PL, a polygon feature layer in ESRI shapefile format,\nCyclingPath, a line feature layer in ESRI shapefile format, and\nPreSchool, a point feature layer in kml file format.\n\n\n\nThe following code chunk uses the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile as a polygon feature data frame.\nWhen the input geospatial data is in shapefile format, two arguments are used:\n\ndsn to define the data path\nlayer to provide the shapefile name\n\nNo extension such as .shp,.dbf,.prj and .shx are needed.\n\nmpsz = st_read(dsn=\"data/geospatial\",\n               layer=\"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThe following will be shown after running the code chunk above:\n\n\nIt reveals that the geospatial objects are multipolygon features.\nThere are a total of 323 features and 15 fields in the mpsz simple feature data frame.\nmpsz is in svy21 projected coordinates systems.\nThe bounding box provides the x extent and y extent of the data.\n\n\n\n\nThe following code chunk uses the st_read() function of sf package to import import CyclingPath shapefile as a line feature data frame.\n\ncyclingpath = st_read(dsn=\"data/geospatial\",layer=\"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3138 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42644.17 ymax: 48948.15\nProjected CRS: SVY21\n\n\nThe following will be shown after running the code chunk above:\n\n\nIt reveals that the geospatial objects are multiline string features.\nThere are a total of 3138 features and 2 fields in the cyclingpath linestring feature data frame.\ncyclingpath is in svy21 projected coordinates systems.\n\n\n\n\nThe code chunk below is used to import the PreSchoolsLocation data which is in kml format.\n\npreschool = st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html",
    "title": "Hands-on Exercise 1A",
    "section": "",
    "text": "Geospatial Data Science is a process of importing, wrangling, integrating and processing geographically referenced datasets. In this hands-on exercise, I will perform geospatial data science tasks in R using the sf package and acquire the following competencies:\n\ninstall and load sf and tidyverse packages into the R environment\nimport geospatial data using appropriate functions of sf package\nimport aspatial data by using appropriate function of readr package\nexplore the content of simple feature data frame by using appropriate Base R and sf functions\nassign or transform coordinate systems by using appropriate sf functions\nconvert aspatial data into a sf dataframe by using appropriate functions of the sf package\nperform geoprocessing tasks using appropriate functions of sf package\nperform data wrangling tasks by using appropriate functions of dplyr package\nperform exploratory data analysis (EDA) using appropriate functions from ggplot2 package\n\n\n\n\nThe following datasets were downloaded:\n\nMaster Plan 2014 Subzone Boundary (Web) from data.gov.sg\nPre-Schools Location from data.gov.sg\nCycling Path from LTADataMall\nLatest version of Singapore Airbnb listing data from Inside Airbnb\n\n\n\n\n\n\n\nsf for importing, managing, and processing geospatial data, and\ntidyverse for performing data science tasks such as importing, wrangling and visualising data. tidyverse consists of a family of R packages and the following within the family will be used in this exercise\n\nreadr for importing csv data,\nreadxl for importing Excel worksheet,\ntidyr for manipulating data,\ndplyr for transforming data, and\nggplot2 for visualising data\n\n\nThe packages are loaded with the following code chunk:\n\npacman::p_load(sf,tidyverse)\n\n\n\n\n\nWe will import the following geospatial data using st_read() of sf package:\n\nMP14_SUBZONE_WEB_PL, a polygon feature layer in ESRI shapefile format,\nCyclingPath, a line feature layer in ESRI shapefile format, and\nPreSchool, a point feature layer in kml file format.\n\n\n\nThe following code chunk uses the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile as a polygon feature data frame.\nWhen the input geospatial data is in shapefile format, two arguments are used:\n\ndsn to define the data path\nlayer to provide the shapefile name\n\nNo extension such as .shp,.dbf,.prj and .shx are needed.\n\nmpsz = st_read(dsn=\"data/geospatial\",\n               layer=\"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nIt reveals that the geospatial objects are multipolygon features.\nThere are a total of 323 features and 15 fields in the mpsz simple feature data frame.\nmpsz is in svy21 projected coordinates systems.\nThe bounding box provides the x extent and y extent of the data.\n\n\n\n\nThe following code chunk uses the st_read() function of sf package to import import CyclingPath shapefile as a line feature data frame.\n\ncyclingpath = st_read(dsn=\"data/geospatial\",layer=\"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3138 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42644.17 ymax: 48948.15\nProjected CRS: SVY21\n\n\n\nIt reveals that the geospatial objects are multiline string features.\nThere are a total of 3138 features and 2 fields in the cyclingpath linestring feature data frame.\ncyclingpath is in svy21 projected coordinates systems.\n\n\n\n\nThe code chunk below is used to import the PreSchoolsLocation data which is in kml format.\n\npreschool = st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nIt reveals that preschool is a point feature data frame.\nThere are a total of 2290 features and 2 fields.\nUnlike the previous two simple feature data frames, preschool is in a wgs84 coordinates system.\n\n\n\n\n\nIn this subsection, I will utilise different ways to retrieve information related to the content of a simple feature data frame.\n\n\nThe column in the sf data frame that contains the geometries is a list, of class sfc - the geometry list-column can be retrieved using:\n\nmpsz$geom or\nmpsz[[1]]\n\nbut more general way uses st_geometry():\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nThe print only displays basic information of the feature class such as type of geometry, geographic extent of the features and the coordinate system of the data.\n\n\n\nTo learn more about the associated attribute information in the data frame, we can use glimpse() of dplyr:\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\nThe report reveals the data type of each field. For example FMEL-UPD_D field is in date data type and X_ADDR, Y_ADDR, SHAPE_L and SHAPE_AREA fields are all in double-precision values.\n\n\n\nTo reveal the complete information of a feature object, we use head()of Base R:\n\nhead(mpsz,n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\nWe can change the number in the n argument to reflect different number of records.\n\n\n\n\nIn geospatial data science, we need to visualise the geospatial features, beyond just looking at the feature information.\n\nplot(mpsz)\n\n\n\n\n\n\n\n\nThe default plot of an sf object is a multiplot of all attributes, up to a reasonable maximum number, as shown above. However, we can choose to plot only the geometry:\n\nplot(st_geometry(mpsz))\n\n\n\n\n\n\n\n\nAlternatively, we can also choose to plot the sf object by using a specific attribute:\n\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nNote: plot() is meant to plot the geospatial object for a quick look. For high quality cartographic plot, other R packages such as tmap should be used.\n\n\n\n\n\nMap projection is an important property of a geospatial data. To perform geoprocessing using two geospatial data, there is a need to ensure that both geospatial data are projected using a similar coordinate system.\nThe process of projecting a simple feature data frame from one coordinate system to another coordinate system is called projection transformation.\n\n\nOne common issue that can happen when importing geospatial data is either the coordinate system of the source data is missing or wrongly assigned during the importing process.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nWhile the mpsz data frame is projected in svy21, the end of the printout above states that the EPSG is 9001 - this is a wrong EPSG code as the correct EPSG code for svy21 should be 3414.\nTo correctly assign the right EPSG code to the mpsz data frame, st_set_crs() of sf package is used:\n\nmpsz3414 &lt;- st_set_crs(mpsz,3414)\n\nWe then check whether the EPSG code has been corrected:\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\n\nIn geospatial analytics, it is common to transform the original data from one geographic coordinate system to a projected coordinated system. This is because a geographic coordinate system is not appropriate if the analysis needs to use distance and/or area measurements.\n\nst_geometry(preschool)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nThe print indicates that preschool is in wgs84 coordinate system.\nThis is a scenario for which st_set_crs() is not appropriate and st_transform() of sf package should be used. This is because we need to reproject preschool from one coordinate system to another coordinate system mathematically but st_crs() : replacing crs does not reproject data.\nThe projection transformation is performed as follows:\n\npreschool3414 &lt;- st_transform(preschool,crs=3414)\n\n\n\n\n\n\n\nNote\n\n\n\nNote: In practice, we need find out the appropriate project coordinate system to use before performing the projection transformation.\n\n\nDisplaying the content of preschool3414 data frame\n\nst_geometry(preschool3414)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\npreschool3414 is in svy21 projected coordinate system now. Further, as seen from the bounding box, the values are greater than 0 to 360 range of decimal degree commonly used by most of the geographic coordinate systems.\n\n\n\n\nAspatial data are non-geospatial data that have data fields that are able to capture the x- and y-coordinate of data points.\nAspatial data can be imported into a R environment, saved as a tibble data frame and further converted into a simple feature data frame.\n\n\nThe listings dataset is in csv format hence the read_csv() function of readr package is used:\n\nlistings &lt;- read_csv(\"data/aspatial/listings.csv\")\n\nThe output is called a tibble data frame.\nTo examine if the data file has been imported properly, list() of Base R is used instead of glimpse:\n\nlist(listings)\n\n[[1]]\n# A tibble: 3,540 × 18\n       id name      host_id host_name neighbourhood_group neighbourhood latitude\n    &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;               &lt;chr&gt;            &lt;dbl&gt;\n 1  71609 Ensuite …  367042 Belinda   East Region         Tampines          1.35\n 2  71896 B&B  Roo…  367042 Belinda   East Region         Tampines          1.35\n 3  71903 Room 2-n…  367042 Belinda   East Region         Tampines          1.35\n 4 275343 10min wa… 1439258 Kay       Central Region      Bukit Merah       1.29\n 5 275344 15 mins … 1439258 Kay       Central Region      Bukit Merah       1.29\n 6 289234 Booking …  367042 Belinda   East Region         Tampines          1.34\n 7 294281 5 mins w… 1521514 Elizabeth Central Region      Newton            1.31\n 8 324945 Comforta… 1439258 Kay       Central Region      Bukit Merah       1.29\n 9 330095 Relaxing… 1439258 Kay       Central Region      Bukit Merah       1.29\n10 344803 Budget s…  367042 Belinda   East Region         Tampines          1.35\n# ℹ 3,530 more rows\n# ℹ 11 more variables: longitude &lt;dbl&gt;, room_type &lt;chr&gt;, price &lt;dbl&gt;,\n#   minimum_nights &lt;dbl&gt;, number_of_reviews &lt;dbl&gt;, last_review &lt;date&gt;,\n#   reviews_per_month &lt;dbl&gt;, calculated_host_listings_count &lt;dbl&gt;,\n#   availability_365 &lt;dbl&gt;, number_of_reviews_ltm &lt;dbl&gt;, license &lt;chr&gt;\n\n\nThe output indicates that the tibble dataframe consists of 3.540 rows and 18 columns. Two useful fields used in next phase are latitude and longitude, which are in decimal degree format. As a guess, it is assumed that the data is in wgs84 geographic coordinate system.\n\n\n\nThe code chunk below converts the listing data frame into a simple feature data frame using st_as_sf() of sf package:\n\nlistings_sf &lt;- st_as_sf(listings,coords=c(\"longitude\",\"latitude\"),crs=4326) %&gt;%\n  st_transform(crs=3414)\n\nLearning points from above:\n\ncoords argument requires the column name of the x-coordinates first followed by the column name of y-coordinates\ncrs argument requires the coordinate system in EPSG format - EPSG 4326 is wgs84 geographic coordinate system while EPSG 3414 is the Singapore svy21 projected coordinate system. Other countries’ EPSG code can be found via EPSG website.\n%&gt;% is used to nest the st_transform() to transform the newly created simple feature data frame into a svy21 projected coordinates system.\n\n\nglimpse(listings_sf)\n\nRows: 3,540\nColumns: 17\n$ id                             &lt;dbl&gt; 71609, 71896, 71903, 275343, 275344, 28…\n$ name                           &lt;chr&gt; \"Ensuite Room (Room 1 & 2) near EXPO\", …\n$ host_id                        &lt;dbl&gt; 367042, 367042, 367042, 1439258, 143925…\n$ host_name                      &lt;chr&gt; \"Belinda\", \"Belinda\", \"Belinda\", \"Kay\",…\n$ neighbourhood_group            &lt;chr&gt; \"East Region\", \"East Region\", \"East Reg…\n$ neighbourhood                  &lt;chr&gt; \"Tampines\", \"Tampines\", \"Tampines\", \"Bu…\n$ room_type                      &lt;chr&gt; \"Private room\", \"Private room\", \"Privat…\n$ price                          &lt;dbl&gt; NA, 80, 80, 50, 50, NA, 85, 65, 45, 54,…\n$ minimum_nights                 &lt;dbl&gt; 92, 92, 92, 180, 180, 92, 92, 180, 180,…\n$ number_of_reviews              &lt;dbl&gt; 19, 24, 46, 20, 16, 12, 131, 17, 5, 60,…\n$ last_review                    &lt;date&gt; 2020-01-17, 2019-10-13, 2020-01-09, 20…\n$ reviews_per_month              &lt;dbl&gt; 0.12, 0.15, 0.29, 0.15, 0.11, 0.08, 0.8…\n$ calculated_host_listings_count &lt;dbl&gt; 6, 6, 6, 49, 49, 6, 7, 49, 49, 6, 7, 7,…\n$ availability_365               &lt;dbl&gt; 89, 148, 90, 62, 0, 88, 365, 0, 0, 365,…\n$ number_of_reviews_ltm          &lt;dbl&gt; 0, 0, 0, 0, 2, 0, 0, 1, 1, 1, 0, 0, 0, …\n$ license                        &lt;chr&gt; NA, NA, NA, \"S0399\", \"S0399\", NA, NA, \"…\n$ geometry                       &lt;POINT [m]&gt; POINT (41972.5 36390.05), POINT (…\n\n\nNote that a new column called geometry has been added into the data frame while the longitude and latitude columns have been dropped from the data frame.\n\n\n\n\nBesides providing functions to handle (i.e. importing, exporting, assigning projection, transforming projection) geospatial data, sf package also offers geoprocessing functions.\nTwo commonly used geoprocessing functions are bufferingand point in polygon count.\n\n\nThe scenario:\nThe authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on both sides of the current cycling path. The task is to determine the extent of land that needs to be acquired and the total area.\nThe solution:\nFirst, the st_buffer() of sf package is used to compute the 5-meters buffer around the cycling path:\n\nbuffer_cycling &lt;- st_buffer(cyclingpath,dist=5,nQuadSegs = 30)\n\nThe area of the buffers is calculated:\n\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\n\nLastly, the sum() of Base R will be used to derive the total land involved:\n\nsum(buffer_cycling$AREA)\n\n2218855 [m^2]\n\n\nMission accomplished!\n\n\n\nThe scenario:\nA preschool service group wants to find out the number of preschools in each planning subzone.\nThe solution:\nThe code chunk below performs 2 operations at 1 go:\n(1) Identify preschools located inside each planning subzone using st_intersects()\n(2) length() of Base R is used to calculate the number of preschools that fall inside each planning subzone\n\nmpsz3414$`PreSch Count` &lt;- lengths(st_intersects(mpsz3414,preschool3414))\n\n\n\n\n\n\n\nWarning\n\n\n\nWarning: st_intersects()should not be confused with st_intersection().\nTo also note that the symbol is ` rather than ’.\n\n\nThe summary statistics of the newly derived PreSch Count field can be shown with the code below:\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\nTo list the planning zone with the most number of preschools, the top_n() of dplyr package is used as shown in the code chunk below:\n\ntop_n(mpsz3414, 1,`PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n\n\nTo calculate the density of preschools by planning zone:\n\nmpsz3414$Area &lt;- mpsz3414 %&gt;%\n  st_area()\n\nNext, mutate() of dplyr package is used to compute the density by using the code chunk below:\n\nmpsz3414 &lt;- mpsz3414 %&gt;%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n\n\n\n\n\nIn practice, many geospatial analytics start with Exploratory Data Analysis. In this section, appropriate ggplot2 functions will be used to create functional and yet truthful statistical graphs for EDA purposes.\nA histogram is plotted to reveal the distribution of PreSch Density.\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\n\n\n\n\nHowever, the output does not meet publication quality and there is limited room for further customisation using this function. As such, we use ggplot2 functions instead:\n\nggplot(data = mpsz3414,\n       aes(x=as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20,\n                 color='black',\n                 fill='pink')+\n  labs(title=\"Are preschools evenly distributed in Singapore?\",\n       subtitle=\"There are many planning subzones with a single preschool. However, there are two planning subzones with at least 20 preschools.\",\n       x=\"Preschool density (per km sq)\",\n       y=\"Frequency\")\n\n\n\n\n\n\n\n\nA scatterplot is plotted to show the relationship between PreSch Density and PreSch Count:\n\nggplot(data= mpsz3414,\n       aes(y=`PreSch Count`,\n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\")+\n  xlim(0,40)+\n  ylim(0,40)+\n  labs(title=\"Preschool count vs Preschool density\",\n       x=\"Preschool density(per km sq)\",\n       y=\"Preschool count\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html#learning-outcomes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html#learning-outcomes",
    "title": "Hands-on Exercise 1A",
    "section": "",
    "text": "Geospatial Data Science is a process of importing, wrangling, integrating and processing geographically referenced datasets. In this hands-on exercise, I will perform geospatial data science tasks in R using the sf package and acquire the following competencies:\n\ninstall and load sf and tidyverse packages into the R environment\nimport geospatial data using appropriate functions of sf package\nimport aspatial data by using appropriate function of readr package\nexplore the content of simple feature data frame by using appropriate Base R and sf functions\nassign or transform coordinate systems by using appropriate sf functions\nconvert aspatial data into a sf dataframe by using appropriate functions of the sf package\nperform geoprocessing tasks using appropriate functions of sf package\nperform data wrangling tasks by using appropriate functions of dplyr package\nperform exploratory data analysis (EDA) using appropriate functions from ggplot2 package"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html#data-acquisition",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html#data-acquisition",
    "title": "Hands-on Exercise 1A",
    "section": "",
    "text": "The following datasets were downloaded:\n\nMaster Plan 2014 Subzone Boundary (Web) from data.gov.sg\nPre-Schools Location from data.gov.sg\nCycling Path from LTADataMall\nLatest version of Singapore Airbnb listing data from Inside Airbnb"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html#getting-started",
    "title": "Hands-on Exercise 1A",
    "section": "",
    "text": "sf for importing, managing, and processing geospatial data, and\ntidyverse for performing data science tasks such as importing, wrangling and visualising data. tidyverse consists of a family of R packages and the following within the family will be used in this exercise\n\nreadr for importing csv data,\nreadxl for importing Excel worksheet,\ntidyr for manipulating data,\ndplyr for transforming data, and\nggplot2 for visualising data\n\n\nThe packages are loaded with the following code chunk:\n\npacman::p_load(sf,tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html#importing-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html#importing-geospatial-data",
    "title": "Hands-on Exercise 1A",
    "section": "",
    "text": "We will import the following geospatial data using st_read() of sf package:\n\nMP14_SUBZONE_WEB_PL, a polygon feature layer in ESRI shapefile format,\nCyclingPath, a line feature layer in ESRI shapefile format, and\nPreSchool, a point feature layer in kml file format.\n\n\n\nThe following code chunk uses the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile as a polygon feature data frame.\nWhen the input geospatial data is in shapefile format, two arguments are used:\n\ndsn to define the data path\nlayer to provide the shapefile name\n\nNo extension such as .shp,.dbf,.prj and .shx are needed.\n\nmpsz = st_read(dsn=\"data/geospatial\",\n               layer=\"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nIt reveals that the geospatial objects are multipolygon features.\nThere are a total of 323 features and 15 fields in the mpsz simple feature data frame.\nmpsz is in svy21 projected coordinates systems.\nThe bounding box provides the x extent and y extent of the data.\n\n\n\n\nThe following code chunk uses the st_read() function of sf package to import import CyclingPath shapefile as a line feature data frame.\n\ncyclingpath = st_read(dsn=\"data/geospatial\",layer=\"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3138 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42644.17 ymax: 48948.15\nProjected CRS: SVY21\n\n\n\nIt reveals that the geospatial objects are multiline string features.\nThere are a total of 3138 features and 2 fields in the cyclingpath linestring feature data frame.\ncyclingpath is in svy21 projected coordinates systems.\n\n\n\n\nThe code chunk below is used to import the PreSchoolsLocation data which is in kml format.\n\npreschool = st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nIt reveals that preschool is a point feature data frame.\nThere are a total of 2290 features and 2 fields.\nUnlike the previous two simple feature data frames, preschool is in a wgs84 coordinates system."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html#checking-the-content-of-a-simple-feature-data-frame",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html#checking-the-content-of-a-simple-feature-data-frame",
    "title": "Hands-on Exercise 1A",
    "section": "",
    "text": "In this subsection, I will utilise different ways to retrieve information related to the content of a simple feature data frame.\n\n\nThe column in the sf data frame that contains the geometries is a list, of class sfc - the geometry list-column can be retrieved using:\n\nmpsz$geom or\nmpsz[[1]]\n\nbut more general way uses st_geometry():\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nThe print only displays basic information of the feature class such as type of geometry, geographic extent of the features and the coordinate system of the data.\n\n\n\nTo learn more about the associated attribute information in the data frame, we can use glimpse() of dplyr:\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\nThe report reveals the data type of each field. For example FMEL-UPD_D field is in date data type and X_ADDR, Y_ADDR, SHAPE_L and SHAPE_AREA fields are all in double-precision values.\n\n\n\nTo reveal the complete information of a feature object, we use head()of Base R:\n\nhead(mpsz,n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\nWe can change the number in the n argument to reflect different number of records."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html#plotting-the-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html#plotting-the-geospatial-data",
    "title": "Hands-on Exercise 1A",
    "section": "",
    "text": "In geospatial data science, we need to visualise the geospatial features, beyond just looking at the feature information.\n\nplot(mpsz)\n\n\n\n\n\n\n\n\nThe default plot of an sf object is a multiplot of all attributes, up to a reasonable maximum number, as shown above. However, we can choose to plot only the geometry:\n\nplot(st_geometry(mpsz))\n\n\n\n\n\n\n\n\nAlternatively, we can also choose to plot the sf object by using a specific attribute:\n\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nNote: plot() is meant to plot the geospatial object for a quick look. For high quality cartographic plot, other R packages such as tmap should be used."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html#working-with-projection",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html#working-with-projection",
    "title": "Hands-on Exercise 1A",
    "section": "",
    "text": "Map projection is an important property of a geospatial data. To perform geoprocessing using two geospatial data, there is a need to ensure that both geospatial data are projected using a similar coordinate system.\nThe process of projecting a simple feature data frame from one coordinate system to another coordinate system is called projection transformation.\n\n\nOne common issue that can happen when importing geospatial data is either the coordinate system of the source data is missing or wrongly assigned during the importing process.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nWhile the mpsz data frame is projected in svy21, the end of the printout above states that the EPSG is 9001 - this is a wrong EPSG code as the correct EPSG code for svy21 should be 3414.\nTo correctly assign the right EPSG code to the mpsz data frame, st_set_crs() of sf package is used:\n\nmpsz3414 &lt;- st_set_crs(mpsz,3414)\n\nWe then check whether the EPSG code has been corrected:\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\n\nIn geospatial analytics, it is common to transform the original data from one geographic coordinate system to a projected coordinated system. This is because a geographic coordinate system is not appropriate if the analysis needs to use distance and/or area measurements.\n\nst_geometry(preschool)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nThe print indicates that preschool is in wgs84 coordinate system.\nThis is a scenario for which st_set_crs() is not appropriate and st_transform() of sf package should be used. This is because we need to reproject preschool from one coordinate system to another coordinate system mathematically but st_crs() : replacing crs does not reproject data.\nThe projection transformation is performed as follows:\n\npreschool3414 &lt;- st_transform(preschool,crs=3414)\n\n\n\n\n\n\n\nNote\n\n\n\nNote: In practice, we need find out the appropriate project coordinate system to use before performing the projection transformation.\n\n\nDisplaying the content of preschool3414 data frame\n\nst_geometry(preschool3414)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\npreschool3414 is in svy21 projected coordinate system now. Further, as seen from the bounding box, the values are greater than 0 to 360 range of decimal degree commonly used by most of the geographic coordinate systems."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html#importing-and-converting-aspatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html#importing-and-converting-aspatial-data",
    "title": "Hands-on Exercise 1A",
    "section": "",
    "text": "Aspatial data are non-geospatial data that have data fields that are able to capture the x- and y-coordinate of data points.\nAspatial data can be imported into a R environment, saved as a tibble data frame and further converted into a simple feature data frame.\n\n\nThe listings dataset is in csv format hence the read_csv() function of readr package is used:\n\nlistings &lt;- read_csv(\"data/aspatial/listings.csv\")\n\nThe output is called a tibble data frame.\nTo examine if the data file has been imported properly, list() of Base R is used instead of glimpse:\n\nlist(listings)\n\n[[1]]\n# A tibble: 3,540 × 18\n       id name      host_id host_name neighbourhood_group neighbourhood latitude\n    &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;               &lt;chr&gt;            &lt;dbl&gt;\n 1  71609 Ensuite …  367042 Belinda   East Region         Tampines          1.35\n 2  71896 B&B  Roo…  367042 Belinda   East Region         Tampines          1.35\n 3  71903 Room 2-n…  367042 Belinda   East Region         Tampines          1.35\n 4 275343 10min wa… 1439258 Kay       Central Region      Bukit Merah       1.29\n 5 275344 15 mins … 1439258 Kay       Central Region      Bukit Merah       1.29\n 6 289234 Booking …  367042 Belinda   East Region         Tampines          1.34\n 7 294281 5 mins w… 1521514 Elizabeth Central Region      Newton            1.31\n 8 324945 Comforta… 1439258 Kay       Central Region      Bukit Merah       1.29\n 9 330095 Relaxing… 1439258 Kay       Central Region      Bukit Merah       1.29\n10 344803 Budget s…  367042 Belinda   East Region         Tampines          1.35\n# ℹ 3,530 more rows\n# ℹ 11 more variables: longitude &lt;dbl&gt;, room_type &lt;chr&gt;, price &lt;dbl&gt;,\n#   minimum_nights &lt;dbl&gt;, number_of_reviews &lt;dbl&gt;, last_review &lt;date&gt;,\n#   reviews_per_month &lt;dbl&gt;, calculated_host_listings_count &lt;dbl&gt;,\n#   availability_365 &lt;dbl&gt;, number_of_reviews_ltm &lt;dbl&gt;, license &lt;chr&gt;\n\n\nThe output indicates that the tibble dataframe consists of 3.540 rows and 18 columns. Two useful fields used in next phase are latitude and longitude, which are in decimal degree format. As a guess, it is assumed that the data is in wgs84 geographic coordinate system.\n\n\n\nThe code chunk below converts the listing data frame into a simple feature data frame using st_as_sf() of sf package:\n\nlistings_sf &lt;- st_as_sf(listings,coords=c(\"longitude\",\"latitude\"),crs=4326) %&gt;%\n  st_transform(crs=3414)\n\nLearning points from above:\n\ncoords argument requires the column name of the x-coordinates first followed by the column name of y-coordinates\ncrs argument requires the coordinate system in EPSG format - EPSG 4326 is wgs84 geographic coordinate system while EPSG 3414 is the Singapore svy21 projected coordinate system. Other countries’ EPSG code can be found via EPSG website.\n%&gt;% is used to nest the st_transform() to transform the newly created simple feature data frame into a svy21 projected coordinates system.\n\n\nglimpse(listings_sf)\n\nRows: 3,540\nColumns: 17\n$ id                             &lt;dbl&gt; 71609, 71896, 71903, 275343, 275344, 28…\n$ name                           &lt;chr&gt; \"Ensuite Room (Room 1 & 2) near EXPO\", …\n$ host_id                        &lt;dbl&gt; 367042, 367042, 367042, 1439258, 143925…\n$ host_name                      &lt;chr&gt; \"Belinda\", \"Belinda\", \"Belinda\", \"Kay\",…\n$ neighbourhood_group            &lt;chr&gt; \"East Region\", \"East Region\", \"East Reg…\n$ neighbourhood                  &lt;chr&gt; \"Tampines\", \"Tampines\", \"Tampines\", \"Bu…\n$ room_type                      &lt;chr&gt; \"Private room\", \"Private room\", \"Privat…\n$ price                          &lt;dbl&gt; NA, 80, 80, 50, 50, NA, 85, 65, 45, 54,…\n$ minimum_nights                 &lt;dbl&gt; 92, 92, 92, 180, 180, 92, 92, 180, 180,…\n$ number_of_reviews              &lt;dbl&gt; 19, 24, 46, 20, 16, 12, 131, 17, 5, 60,…\n$ last_review                    &lt;date&gt; 2020-01-17, 2019-10-13, 2020-01-09, 20…\n$ reviews_per_month              &lt;dbl&gt; 0.12, 0.15, 0.29, 0.15, 0.11, 0.08, 0.8…\n$ calculated_host_listings_count &lt;dbl&gt; 6, 6, 6, 49, 49, 6, 7, 49, 49, 6, 7, 7,…\n$ availability_365               &lt;dbl&gt; 89, 148, 90, 62, 0, 88, 365, 0, 0, 365,…\n$ number_of_reviews_ltm          &lt;dbl&gt; 0, 0, 0, 0, 2, 0, 0, 1, 1, 1, 0, 0, 0, …\n$ license                        &lt;chr&gt; NA, NA, NA, \"S0399\", \"S0399\", NA, NA, \"…\n$ geometry                       &lt;POINT [m]&gt; POINT (41972.5 36390.05), POINT (…\n\n\nNote that a new column called geometry has been added into the data frame while the longitude and latitude columns have been dropped from the data frame."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html#geoprocessing-with-sf-package",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html#geoprocessing-with-sf-package",
    "title": "Hands-on Exercise 1A",
    "section": "",
    "text": "Besides providing functions to handle (i.e. importing, exporting, assigning projection, transforming projection) geospatial data, sf package also offers geoprocessing functions.\nTwo commonly used geoprocessing functions are bufferingand point in polygon count.\n\n\nThe scenario:\nThe authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on both sides of the current cycling path. The task is to determine the extent of land that needs to be acquired and the total area.\nThe solution:\nFirst, the st_buffer() of sf package is used to compute the 5-meters buffer around the cycling path:\n\nbuffer_cycling &lt;- st_buffer(cyclingpath,dist=5,nQuadSegs = 30)\n\nThe area of the buffers is calculated:\n\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\n\nLastly, the sum() of Base R will be used to derive the total land involved:\n\nsum(buffer_cycling$AREA)\n\n2218855 [m^2]\n\n\nMission accomplished!\n\n\n\nThe scenario:\nA preschool service group wants to find out the number of preschools in each planning subzone.\nThe solution:\nThe code chunk below performs 2 operations at 1 go:\n(1) Identify preschools located inside each planning subzone using st_intersects()\n(2) length() of Base R is used to calculate the number of preschools that fall inside each planning subzone\n\nmpsz3414$`PreSch Count` &lt;- lengths(st_intersects(mpsz3414,preschool3414))\n\n\n\n\n\n\n\nWarning\n\n\n\nWarning: st_intersects()should not be confused with st_intersection().\nTo also note that the symbol is ` rather than ’.\n\n\nThe summary statistics of the newly derived PreSch Count field can be shown with the code below:\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\nTo list the planning zone with the most number of preschools, the top_n() of dplyr package is used as shown in the code chunk below:\n\ntop_n(mpsz3414, 1,`PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n\n\nTo calculate the density of preschools by planning zone:\n\nmpsz3414$Area &lt;- mpsz3414 %&gt;%\n  st_area()\n\nNext, mutate() of dplyr package is used to compute the density by using the code chunk below:\n\nmpsz3414 &lt;- mpsz3414 %&gt;%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html#exploratory-data-analysis-eda",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html#exploratory-data-analysis-eda",
    "title": "Hands-on Exercise 1A",
    "section": "",
    "text": "In practice, many geospatial analytics start with Exploratory Data Analysis. In this section, appropriate ggplot2 functions will be used to create functional and yet truthful statistical graphs for EDA purposes.\nA histogram is plotted to reveal the distribution of PreSch Density.\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\n\n\n\n\nHowever, the output does not meet publication quality and there is limited room for further customisation using this function. As such, we use ggplot2 functions instead:\n\nggplot(data = mpsz3414,\n       aes(x=as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20,\n                 color='black',\n                 fill='pink')+\n  labs(title=\"Are preschools evenly distributed in Singapore?\",\n       subtitle=\"There are many planning subzones with a single preschool. However, there are two planning subzones with at least 20 preschools.\",\n       x=\"Preschool density (per km sq)\",\n       y=\"Frequency\")\n\n\n\n\n\n\n\n\nA scatterplot is plotted to show the relationship between PreSch Density and PreSch Count:\n\nggplot(data= mpsz3414,\n       aes(y=`PreSch Count`,\n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\")+\n  xlim(0,40)+\n  ylim(0,40)+\n  labs(title=\"Preschool count vs Preschool density\",\n       x=\"Preschool density(per km sq)\",\n       y=\"Preschool count\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "Thematic mapping involves the use of map symbols to visualise selected properties of geographic features that are not naturally visible i.e. population, temperate, crime rate and property prices.\nGeovisualisation works by providing a geographical ideation to render a place, phenomenon or process visible. In this exercise, functional and truthful chloropleth maps will be plot using the tmappackage.\n\n\n\nIn this hands-on exercise, the key R package is the tmappackage and the following packages:\n\nreadrto import delimited text file\ntidyrfor tidying data\ndplyrfor wrangling data\nsfto handle geospatial data\n\nThe first 3 packages above are part of the tidyverse package.\nThe packages are loaded with the following code chunk:\n\npacman::p_load(tmap,tidyverse,sf)\n\n\n\n\n\n\nThe following datasets were used to create the chloropleth map:\n\nMaster Plan 2014 Subzone Boundary (Web) (“MP14_SUBZONE_WEB_PL”) from data.gov.sg in ESRI shapefile format. This is geospatial data comprising the geographical boundary of Singapore at the planning subzone level, based on URA Master Plan 2014.\nSingapore Residents by Planning Area/Subzone, Age Group, Sex and Type of Dwelling, June 2011 to 2020 (“respopagesextod2011to2020.csv”), from Department of Statistics, Singapore, in csv file format. This is an aspatial datafile, it does not contain any coordinates to the “MP14_SUBZONE_WEB_PL” shapefile.\n\n\n\n\nThe following code chunk uses the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile as a simple feature data frame.\n\nmpsz &lt;- st_read(dsn=\"data/geospatial\",\n                layer=\"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThe content of mpsz can be examined using the code below:\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n\n\nThe read_csv() function of readr package is used to import respopagesextod2011to2020.csv file and saved as a data frame called popdata:\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\n\n\n\nA data table with year 2020 values, comprising variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY is first prepared.\n\nYOUNG: age group 0 to 4 until age group 20 to 24\nECONOMY ACTIVE: age group 25-29 until age group 60-64\nAGED: age group 65 and above\nTOTAL: all age groups\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\n\nThe following data wrangling and transformation functions will be used:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by() and select() of dplyr package\n\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA,SZ,AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from=AG,\n              values_from=POP) %&gt;%\n  mutate(`YOUNG` = rowSums(.[3:6])\n         +rowSums(.[14])) %&gt;%\n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\n           rowSums(.[13:15])) %&gt;%\n  mutate(`AGED`=rowSums(.[16:21])) %&gt;%\n  mutate(`TOTAL`=rowSums(.[3:21])) %&gt;%\n  mutate(`DEPENDENCY`=(`YOUNG`+`AGED`)/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`,`SZ`,`YOUNG`,`ECONOMY ACTIVE`,`AGED`,`TOTAL`,`DEPENDENCY`)\n\n\n\n\nBefore georelational join can be performed, an added step is needed to convert the values in PA and SZ to uppercase, as they are currently in both upper- and lowercase. On the other hand, the SUBZONE_N and PLN_AREA_N are in uppercase.\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate_at(.vars = vars(PA,SZ),\n            .funs = list(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE`&gt;0)\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name i.e. SUBZONE_N and SZ as the common identifier:\n\nmpsz_pop2020 &lt;- left_join(mpsz,popdata2020,by=c(\"SUBZONE_N\"=\"SZ\"))\n\nleft_join() of dplyr is used with the mpsz simple feature data frame as the left data table is used to ensure that the output will be a simple feature data frame.\nThe joined file is then saved:\n\nwrite_rds(mpsz_pop2020,\"data/rds/mpszpop2020.rds\")\n\n\n\n\n\n\nChoropleth mapping involves the symbolisation of enumeration units such as countries, provinces, states, counties or census units, using area patterns or graduated colours. For instance, a social scientist may require a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\nTwo approaches are used to prepare the thematic map using tmap:\n\nPlotting a thematic map quickly using qtm()\nPlotting a highly customisable thematic map using tmap elements\n\n\n\nqtm() is a concise way to provide a good default visualisation:\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020,\n    fill=\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nLearning points:\n\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used\nfill argument is used to map the attribute i.e. DEPENDENCY\n\n\n\n\nThe disadvantage of qtm() is that the aesthetics of individual layers are harder to control. tmap drawing elements are required to draw a high quality cartographic choropleth map:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          title = \"Dependency ratio\")+\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45,\n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha=0.5)+\n  tm_compass(type=\"8star\",size=2) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2) +\n  tm_credits(\"Source: Planning subzone boundary from Urban Redevelopment Authority (URA) and population data from Department of Statistics (DOS)\",\n          position = c(\"left\",\"bottom\")   )\n\n\n\n\n\n\n\n\nThe following section explains the tmap functions that were used to plot the above elements:\n\n\n\nThe basic building block of tmap is tm_shape() followed by one or more layer elements such as tm_fill() or tm_polygons()\nIn the code chunk below, tm_shape() is used to define the input data and tm_polygons() is used to draw the planning subzone polygons:\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n\n\n\n\n\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as Dependency to tm_polygons():\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nLearning points from tm_polygons():\n\ndefault interval binning used to draw the choropleth map is called “pretty”\ndefault color scheme used is YlOrRd of ColorBrewer\ndefault color for missing value is a grey shade\n\n\n\n\ntm_polygons() is a wrapper of tm_fill() and tm_border():\n\ntm_fill() shades the polygons by using the default color scheme\ntm_borders() add the borders of the shapefile onto the choropleth map\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nWith tm_borders(), light gray border lines are added onto the choropleth map:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")+\n  tm_borders(lwd = 0.1, alpha = 1)\n\n\n\n\n\n\n\n\n\nalpha argument defines the transparency number between 0 (totally transparent) to 1 (not transparent). by default, the alpha value is 1\ncol defines the border color\nlwd defines the border line width, default is 1\nlty defines the border line type, default is solid\n\n\n\n\n\nMost choropleth maps employ methods of data classification, which aims to take a large number of observations and group them into data ranges or classes.\ntmap provides 10 data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher and jenks.\nThe style argument of tm_fill() or tm_polygons() will need to be used to define the data classification method.\n\n\nQuantile data classification with 5 classes:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=5,\n          style=\"quantile\")+\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\nEqual data classification method:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=5,\n          style=\"equal\")+\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nComparing the two methods above, the distribution of the quantile method is more even than the equal distribution method. Maps can lie, below are some other methods of classification and different number of classes being tested out.\n\n\nkmeans data classification with 5 classes:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=5,\n          style=\"kmeans\")+\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\nkmeans data classification with 2 classes:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=2,\n          style=\"kmeans\")+\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\nfisher data classification with 5 classes:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=5,\n          style=\"fisher\")+\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\nfisher data classification with 20 classes:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=20,\n          style=\"fisher\")+\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\n\n\n\nFor all built-in styles, category breaks are computed internally. To override the defaults, the breakpoints can be set explicitly by means of breaks argument to tm_fill().\n\n\n\n\n\n\nImportant\n\n\n\nIn tmap, breaks include a minimum and maximum. To end up with n categories, n+1 elements must be specified in the breaks option (values must be in increasing order)\n\n\nBefore setting the break points, it is important and good practice to obtain the descriptive statistics:\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6751  0.7288  0.8084  0.8092 19.0000      92 \n\n\nWith reference to the results above, we set the break points at 0.60, 0.70, 0.80 and 0.90. We also need to include a minimum and maximum, set at 0 and 1.00 respectively.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks=c(0,0.60,0.70,0.80,0.90,1.00)) +\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\n\n\n\n\ntmap support color ramps defined by the user or a set of predefined color ramps from the RColorBrewer package.\n\n\nThis is done by assigning the preferred color to palette argument of tm_fill():\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=6,\n          style=\"quantile\",\n          palette = \"Blues\")+\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\nTo reverse the color shading, we add a “-” prefix:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=6,\n          style = \"quantile\",\n          palette = \"-Blues\")+\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nThis also applies to other palette colors like Greens:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=6,\n          style = \"quantile\",\n          palette = \"Greens\")+\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=6,\n          style = \"quantile\",\n          palette = \"-Greens\")+\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\nMap layout refers to the combination of all map elements into a cohesive map. Map elements include title, scale bar, compass, margins and aspect ratios. 1.4.3 Data classification methods of tmap and 1.4.4 Color scheme covered above affect how the map looks.\n\n\nLegend options include changing the placement, format and appearance of the legend:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style=\"jenks\",\n          palette = \"Blues\",\n          legend.hist = TRUE,\n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1)+\n  tm_layout(main.title=\"Distribution of Dependency Ratio by planning subzone \\n(Jenks Classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45,\n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\",\"bottom\"),\n            frame = FALSE)+\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\nA variety of layout settings that can be changed are called by using tmap_style():\nClassic style:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\")+\n  tm_borders(alpha = 0.5)+\n  tmap_style(\"classic\")\n\n\n\n\n\n\n\n\n\n\n\ntmap also provides arguments to draw other map furniture like compass, scale bar and grid lines i.e. through the use of tm_compass(), tm_scale_bar() and tm_grid():\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          title = \"No. of persons\")+\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45,\n            legend.width = 0.35,\n            frame = TRUE)+\n  tm_borders(alpha = 0.5)+\n  tm_compass(type = \"8star\",size=2)+\n  tm_scale_bar(width = 0.15)+\n  tm_grid(lwd = 0.1,alpha = 0.2)+\n  tm_credits(\"Source: Planning subzone boundary data from Urban Redevelopment Authority (URA) and Population Data from Department of Statistics (DOS)\",\n             position = c(\"left\",\"bottom\"))\n\n\n\n\n\n\n\n\nTo reset to default style:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          title = \"No. of persons\")+\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45,\n            legend.width = 0.35,\n            frame = TRUE)+\n  tm_borders(alpha = 0.5)+\n  tm_compass(type = \"8star\",size=2)+\n  tm_scale_bar(width = 0.15)+\n  tm_grid(lwd = 0.1,alpha = 0.2)+\n  tm_credits(\"Source: Planning subzone boundary data from Urban Redevelopment Authority (URA) and Population Data from Department of Statistics (DOS)\",\n             position = c(\"left\",\"bottom\"))+\n  tmap_style(\"white\")\n\n\n\n\n\n\n\n\n\n\n\n\nSmall multiple maps are also referred to as facet maps and comprise many maps arranged side-by-side and sometimes, stacked vertically. Facet maps enable the visualisation of how spatial relationships change with respect to another variable such as time.\nFacet maps can be plotted in 3 ways in tmap:\n\nby assigning multiple values to at least one of the aesthetic arguments\nby defining a group-by variable in tm_facets()\nby creating a multiple standalone maps with tmap_arrange()\n\n\n\nHere, we create facet maps by defining ncols in tm_fill():\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\",\"AGED\"),\n          style = \"equal\",\n          palette = \"Blues\")+\n  tm_layout(legend.position = c(\"right\",\"bottom\"))+\n  tm_borders(alpha = 0.5)+\n  tmap_style(\"white\")\n\n\n\n\n\n\n\n\nAnother example, we assign different styles and palette:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\",\"quantile\"),\n          palette = list(\"Blues\",\"Greens\"))+\n  tm_layout(legend.position = c(\"right\",\"bottom\"))\n\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0)+\n  tm_facets(by=\"REGION_N\",\n            free.coords = TRUE,\n            drop.shapes = TRUE)+\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\",\"center\"),\n            title.size = 20)+\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+\n  tm_polygons(\"YOUNG\",\n              style = \"quantile\",\n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+\n  tm_polygons(\"AGED\",\n              style = \"quantile\",\n              palette = \"Blues\")\n\ntmap_arrange(youngmap,agedmap,asp=1,ncol=2)\n\n\n\n\n\n\n\n\n\n\n\n\nInstead of creating small multiple choropleth map, a selection function can also be used to map spatial objects meeting a selection criterion:\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\",])+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          legend.hist = TRUE,\n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1)+\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45,\n            legend.width = 5.0,\n            legend.position = c(\"right\",\"bottom\"),\n            frame = FALSE)+\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntmap: Thematic Maps in R\ntmap\ntmap: get started!\ntmap: changes in version 2.0\ntmap: creating thematic maps in a flexible way (useR!2015)\nExploring and presenting maps with tmap (useR!2017)\n\n\n\n\n\nsf: Simple Features for R\nSimple Features for R: StandardizedSupport for Spatial Vector Data\nReading, Writing and Converting Simple Features\n\n\n\n\n\ndplyr\nTidy data\ntidyr: Easily Tidy Data with ‘spread()’ and ‘gather()’ Functions"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#learning-outcomes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#learning-outcomes",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "Geospatial Data Science is a process of importing, wrangling, integrating and processing geographically referenced datasets. In this hands-on exercise, I will perform geospatial data science tasks in R using the sf package and acquire the following competencies:\n\ninstall and load sf and tidyverse packages into the R environment\nimport geospatial data using appropriate functions of sf package\nimport aspatial data by using appropriate function of readr package\nexplore the content of simple feature data frame by using appropriate Base R and sf functions\nassign or transform coordinate systems by using appropriate sf functions\nconvert aspatial data into a sf dataframe by using appropriate functions of the sf package\nperform geoprocessing tasks using appropriate functions of sf package\nperform data wrangling tasks by using appropriate functions of dplyr package\nperform exploratory data analysis (EDA) using appropriate functions from ggplot2 package"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#data-acquisition",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#data-acquisition",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "The following datasets were downloaded:\n\nMaster Plan 2014 Subzone Boundary (Web) from data.gov.sg\nPre-Schools Location from data.gov.sg\nCycling Path from LTADataMall\nLatest version of Singapore Airbnb listing data from Inside Airbnb"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#getting-started",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "In this hands-on exercise, the key R package is the tmappackage and the following packages:\n\nreadrto import delimited text file\ntidyrfor tidying data\ndplyrfor wrangling data\nsfto handle geospatial data\n\nThe first 3 packages above are part of the tidyverse package.\nThe packages are loaded with the following code chunk:\n\npacman::p_load(tmap,tidyverse,sf)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#importing-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#importing-geospatial-data",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "We will import the following geospatial data using st_read() of sf package:\n\nMP14_SUBZONE_WEB_PL, a polygon feature layer in ESRI shapefile format,\nCyclingPath, a line feature layer in ESRI shapefile format, and\nPreSchool, a point feature layer in kml file format.\n\n\n\nThe following code chunk uses the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile as a polygon feature data frame.\nWhen the input geospatial data is in shapefile format, two arguments are used:\n\ndsn to define the data path\nlayer to provide the shapefile name\n\nNo extension such as .shp,.dbf,.prj and .shx are needed.\n\nmpsz = st_read(dsn=\"data/geospatial\",\n               layer=\"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nIt reveals that the geospatial objects are multipolygon features.\nThere are a total of 323 features and 15 fields in the mpsz simple feature data frame.\nmpsz is in svy21 projected coordinates systems.\nThe bounding box provides the x extent and y extent of the data.\n\n\n\n\nThe following code chunk uses the st_read() function of sf package to import import CyclingPath shapefile as a line feature data frame.\n\ncyclingpath = st_read(dsn=\"data/geospatial\",layer=\"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3138 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42644.17 ymax: 48948.15\nProjected CRS: SVY21\n\n\n\nIt reveals that the geospatial objects are multiline string features.\nThere are a total of 3138 features and 2 fields in the cyclingpath linestring feature data frame.\ncyclingpath is in svy21 projected coordinates systems.\n\n\n\n\nThe code chunk below is used to import the PreSchoolsLocation data which is in kml format.\n\npreschool = st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nIt reveals that preschool is a point feature data frame.\nThere are a total of 2290 features and 2 fields.\nUnlike the previous two simple feature data frames, preschool is in a wgs84 coordinates system."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#checking-the-content-of-a-simple-feature-data-frame",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#checking-the-content-of-a-simple-feature-data-frame",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "In this subsection, I will utilise different ways to retrieve information related to the content of a simple feature data frame.\n\n\nThe column in the sf data frame that contains the geometries is a list, of class sfc - the geometry list-column can be retrieved using:\n\nmpsz$geom or\nmpsz[[1]]\n\nbut more general way uses st_geometry():\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nThe print only displays basic information of the feature class such as type of geometry, geographic extent of the features and the coordinate system of the data.\n\n\n\nTo learn more about the associated attribute information in the data frame, we can use glimpse() of dplyr:\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\nThe report reveals the data type of each field. For example FMEL-UPD_D field is in date data type and X_ADDR, Y_ADDR, SHAPE_L and SHAPE_AREA fields are all in double-precision values.\n\n\n\nTo reveal the complete information of a feature object, we use head()of Base R:\n\nhead(mpsz,n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\nWe can change the number in the n argument to reflect different number of records."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#plotting-the-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#plotting-the-geospatial-data",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "In geospatial data science, we need to visualise the geospatial features, beyond just looking at the feature information.\n\nplot(mpsz)\n\n\n\n\n\n\n\n\nThe default plot of an sf object is a multiplot of all attributes, up to a reasonable maximum number, as shown above. However, we can choose to plot only the geometry:\n\nplot(st_geometry(mpsz))\n\n\n\n\n\n\n\n\nAlternatively, we can also choose to plot the sf object by using a specific attribute:\n\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nNote: plot() is meant to plot the geospatial object for a quick look. For high quality cartographic plot, other R packages such as tmap should be used."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#working-with-projection",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#working-with-projection",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "Map projection is an important property of a geospatial data. To perform geoprocessing using two geospatial data, there is a need to ensure that both geospatial data are projected using a similar coordinate system.\nThe process of projecting a simple feature data frame from one coordinate system to another coordinate system is called projection transformation.\n\n\nOne common issue that can happen when importing geospatial data is either the coordinate system of the source data is missing or wrongly assigned during the importing process.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nWhile the mpsz data frame is projected in svy21, the end of the printout above states that the EPSG is 9001 - this is a wrong EPSG code as the correct EPSG code for svy21 should be 3414.\nTo correctly assign the right EPSG code to the mpsz data frame, st_set_crs() of sf package is used:\n\nmpsz3414 &lt;- st_set_crs(mpsz,3414)\n\nWe then check whether the EPSG code has been corrected:\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\n\nIn geospatial analytics, it is common to transform the original data from one geographic coordinate system to a projected coordinated system. This is because a geographic coordinate system is not appropriate if the analysis needs to use distance and/or area measurements.\n\nst_geometry(preschool)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nThe print indicates that preschool is in wgs84 coordinate system.\nThis is a scenario for which st_set_crs() is not appropriate and st_transform() of sf package should be used. This is because we need to reproject preschool from one coordinate system to another coordinate system mathematically but st_crs() : replacing crs does not reproject data.\nThe projection transformation is performed as follows:\n\npreschool3414 &lt;- st_transform(preschool,crs=3414)\n\n\n\n\n\n\n\nNote\n\n\n\nNote: In practice, we need find out the appropriate project coordinate system to use before performing the projection transformation.\n\n\nDisplaying the content of preschool3414 data frame\n\nst_geometry(preschool3414)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\npreschool3414 is in svy21 projected coordinate system now. Further, as seen from the bounding box, the values are greater than 0 to 360 range of decimal degree commonly used by most of the geographic coordinate systems."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#importing-and-converting-aspatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#importing-and-converting-aspatial-data",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "Aspatial data are non-geospatial data that have data fields that are able to capture the x- and y-coordinate of data points.\nAspatial data can be imported into a R environment, saved as a tibble data frame and further converted into a simple feature data frame.\n\n\nThe listings dataset is in csv format hence the read_csv() function of readr package is used:\n\nlistings &lt;- read_csv(\"data/aspatial/listings.csv\")\n\nThe output is called a tibble data frame.\nTo examine if the data file has been imported properly, list() of Base R is used instead of glimpse:\n\nlist(listings)\n\n[[1]]\n# A tibble: 3,540 × 18\n       id name      host_id host_name neighbourhood_group neighbourhood latitude\n    &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;               &lt;chr&gt;            &lt;dbl&gt;\n 1  71609 Ensuite …  367042 Belinda   East Region         Tampines          1.35\n 2  71896 B&B  Roo…  367042 Belinda   East Region         Tampines          1.35\n 3  71903 Room 2-n…  367042 Belinda   East Region         Tampines          1.35\n 4 275343 10min wa… 1439258 Kay       Central Region      Bukit Merah       1.29\n 5 275344 15 mins … 1439258 Kay       Central Region      Bukit Merah       1.29\n 6 289234 Booking …  367042 Belinda   East Region         Tampines          1.34\n 7 294281 5 mins w… 1521514 Elizabeth Central Region      Newton            1.31\n 8 324945 Comforta… 1439258 Kay       Central Region      Bukit Merah       1.29\n 9 330095 Relaxing… 1439258 Kay       Central Region      Bukit Merah       1.29\n10 344803 Budget s…  367042 Belinda   East Region         Tampines          1.35\n# ℹ 3,530 more rows\n# ℹ 11 more variables: longitude &lt;dbl&gt;, room_type &lt;chr&gt;, price &lt;dbl&gt;,\n#   minimum_nights &lt;dbl&gt;, number_of_reviews &lt;dbl&gt;, last_review &lt;date&gt;,\n#   reviews_per_month &lt;dbl&gt;, calculated_host_listings_count &lt;dbl&gt;,\n#   availability_365 &lt;dbl&gt;, number_of_reviews_ltm &lt;dbl&gt;, license &lt;chr&gt;\n\n\nThe output indicates that the tibble dataframe consists of 3.540 rows and 18 columns. Two useful fields used in next phase are latitude and longitude, which are in decimal degree format. As a guess, it is assumed that the data is in wgs84 geographic coordinate system.\n\n\n\nThe code chunk below converts the listing data frame into a simple feature data frame using st_as_sf() of sf package:\n\nlistings_sf &lt;- st_as_sf(listings,coords=c(\"longitude\",\"latitude\"),crs=4326) %&gt;%\n  st_transform(crs=3414)\n\nLearning points from above:\n\ncoords argument requires the column name of the x-coordinates first followed by the column name of y-coordinates\ncrs argument requires the coordinate system in EPSG format - EPSG 4326 is wgs84 geographic coordinate system while EPSG 3414 is the Singapore svy21 projected coordinate system. Other countries’ EPSG code can be found via EPSG website.\n%&gt;% is used to nest the st_transform() to transform the newly created simple feature data frame into a svy21 projected coordinates system.\n\n\nglimpse(listings_sf)\n\nRows: 3,540\nColumns: 17\n$ id                             &lt;dbl&gt; 71609, 71896, 71903, 275343, 275344, 28…\n$ name                           &lt;chr&gt; \"Ensuite Room (Room 1 & 2) near EXPO\", …\n$ host_id                        &lt;dbl&gt; 367042, 367042, 367042, 1439258, 143925…\n$ host_name                      &lt;chr&gt; \"Belinda\", \"Belinda\", \"Belinda\", \"Kay\",…\n$ neighbourhood_group            &lt;chr&gt; \"East Region\", \"East Region\", \"East Reg…\n$ neighbourhood                  &lt;chr&gt; \"Tampines\", \"Tampines\", \"Tampines\", \"Bu…\n$ room_type                      &lt;chr&gt; \"Private room\", \"Private room\", \"Privat…\n$ price                          &lt;dbl&gt; NA, 80, 80, 50, 50, NA, 85, 65, 45, 54,…\n$ minimum_nights                 &lt;dbl&gt; 92, 92, 92, 180, 180, 92, 92, 180, 180,…\n$ number_of_reviews              &lt;dbl&gt; 19, 24, 46, 20, 16, 12, 131, 17, 5, 60,…\n$ last_review                    &lt;date&gt; 2020-01-17, 2019-10-13, 2020-01-09, 20…\n$ reviews_per_month              &lt;dbl&gt; 0.12, 0.15, 0.29, 0.15, 0.11, 0.08, 0.8…\n$ calculated_host_listings_count &lt;dbl&gt; 6, 6, 6, 49, 49, 6, 7, 49, 49, 6, 7, 7,…\n$ availability_365               &lt;dbl&gt; 89, 148, 90, 62, 0, 88, 365, 0, 0, 365,…\n$ number_of_reviews_ltm          &lt;dbl&gt; 0, 0, 0, 0, 2, 0, 0, 1, 1, 1, 0, 0, 0, …\n$ license                        &lt;chr&gt; NA, NA, NA, \"S0399\", \"S0399\", NA, NA, \"…\n$ geometry                       &lt;POINT [m]&gt; POINT (41972.5 36390.05), POINT (…\n\n\nNote that a new column called geometry has been added into the data frame while the longitude and latitude columns have been dropped from the data frame."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#geoprocessing-with-sf-package",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#geoprocessing-with-sf-package",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "Besides providing functions to handle (i.e. importing, exporting, assigning projection, transforming projection) geospatial data, sf package also offers geoprocessing functions.\nTwo commonly used geoprocessing functions are bufferingand point in polygon count.\n\n\nThe scenario:\nThe authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on both sides of the current cycling path. The task is to determine the extent of land that needs to be acquired and the total area.\nThe solution:\nFirst, the st_buffer() of sf package is used to compute the 5-meters buffer around the cycling path:\n\nbuffer_cycling &lt;- st_buffer(cyclingpath,dist=5,nQuadSegs = 30)\n\nThe area of the buffers is calculated:\n\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\n\nLastly, the sum() of Base R will be used to derive the total land involved:\n\nsum(buffer_cycling$AREA)\n\n2218855 [m^2]\n\n\nMission accomplished!\n\n\n\nThe scenario:\nA preschool service group wants to find out the number of preschools in each planning subzone.\nThe solution:\nThe code chunk below performs 2 operations at 1 go:\n(1) Identify preschools located inside each planning subzone using st_intersects()\n(2) length() of Base R is used to calculate the number of preschools that fall inside each planning subzone\n\nmpsz3414$`PreSch Count` &lt;- lengths(st_intersects(mpsz3414,preschool3414))\n\n\n\n\n\n\n\nWarning\n\n\n\nWarning: st_intersects()should not be confused with st_intersection().\nTo also note that the symbol is ` rather than ’.\n\n\nThe summary statistics of the newly derived PreSch Count field can be shown with the code below:\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\nTo list the planning zone with the most number of preschools, the top_n() of dplyr package is used as shown in the code chunk below:\n\ntop_n(mpsz3414, 1,`PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n\n\nTo calculate the density of preschools by planning zone:\n\nmpsz3414$Area &lt;- mpsz3414 %&gt;%\n  st_area()\n\nNext, mutate() of dplyr package is used to compute the density by using the code chunk below:\n\nmpsz3414 &lt;- mpsz3414 %&gt;%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#exploratory-data-analysis-eda",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#exploratory-data-analysis-eda",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "In practice, many geospatial analytics start with Exploratory Data Analysis. In this section, appropriate ggplot2 functions will be used to create functional and yet truthful statistical graphs for EDA purposes.\nA histogram is plotted to reveal the distribution of PreSch Density.\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\n\n\n\n\nHowever, the output does not meet publication quality and there is limited room for further customisation using this function. As such, we use ggplot2 functions instead:\n\nggplot(data = mpsz3414,\n       aes(x=as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20,\n                 color='black',\n                 fill='pink')+\n  labs(title=\"Are preschools evenly distributed in Singapore?\",\n       subtitle=\"There are many planning subzones with a single preschool. However, there are two planning subzones with at least 20 preschools.\",\n       x=\"Preschool density (per km sq)\",\n       y=\"Frequency\")\n\n\n\n\n\n\n\n\nA scatterplot is plotted to show the relationship between PreSch Density and PreSch Count:\n\nggplot(data= mpsz3414,\n       aes(y=`PreSch Count`,\n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\")+\n  xlim(0,40)+\n  ylim(0,40)+\n  labs(title=\"Preschool count vs Preschool density\",\n       x=\"Preschool density(per km sq)\",\n       y=\"Preschool count\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#overview",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "Thematic mapping involves the use of map symbols to visualise selected properties of geographic features that are not naturally visible i.e. population, temperate, crime rate and property prices.\nGeovisualisation works by providing a geographical ideation to render a place, phenomenon or process visible. In this exercise, functional and truthful chloropleth maps will be plot using the tmappackage."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#importing-data-into-r",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#importing-data-into-r",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "The following datasets were used to create the chloropleth map:\n\nMaster Plan 2014 Subzone Boundary (Web) (“MP14_SUBZONE_WEB_PL”) from data.gov.sg in ESRI shapefile format. This is geospatial data comprising the geographical boundary of Singapore at the planning subzone level, based on URA Master Plan 2014.\nSingapore Residents by Planning Area/Subzone, Age Group, Sex and Type of Dwelling, June 2011 to 2020 (“respopagesextod2011to2020.csv”), from Department of Statistics, Singapore, in csv file format. This is an aspatial datafile, it does not contain any coordinates to the “MP14_SUBZONE_WEB_PL” shapefile.\n\n\n\n\nThe following code chunk uses the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile as a simple feature data frame.\n\nmpsz &lt;- st_read(dsn=\"data/geospatial\",\n                layer=\"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThe content of mpsz can be examined using the code below:\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n\n\nThe read_csv() function of readr package is used to import respopagesextod2011to2020.csv file and saved as a data frame called popdata:\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\n\n\n\nA data table with year 2020 values, comprising variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY is first prepared.\n\nYOUNG: age group 0 to 4 until age group 20 to 24\nECONOMY ACTIVE: age group 25-29 until age group 60-64\nAGED: age group 65 and above\nTOTAL: all age groups\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\n\nThe following data wrangling and transformation functions will be used:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by() and select() of dplyr package\n\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA,SZ,AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from=AG,\n              values_from=POP) %&gt;%\n  mutate(`YOUNG` = rowSums(.[3:6])\n         +rowSums(.[14])) %&gt;%\n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\n           rowSums(.[13:15])) %&gt;%\n  mutate(`AGED`=rowSums(.[16:21])) %&gt;%\n  mutate(`TOTAL`=rowSums(.[3:21])) %&gt;%\n  mutate(`DEPENDENCY`=(`YOUNG`+`AGED`)/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`,`SZ`,`YOUNG`,`ECONOMY ACTIVE`,`AGED`,`TOTAL`,`DEPENDENCY`)\n\n\n\n\nBefore georelational join can be performed, an added step is needed to convert the values in PA and SZ to uppercase, as they are currently in both upper- and lowercase. On the other hand, the SUBZONE_N and PLN_AREA_N are in uppercase.\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate_at(.vars = vars(PA,SZ),\n            .funs = list(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE`&gt;0)\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name i.e. SUBZONE_N and SZ as the common identifier:\n\nmpsz_pop2020 &lt;- left_join(mpsz,popdata2020,by=c(\"SUBZONE_N\"=\"SZ\"))\n\nleft_join() of dplyr is used with the mpsz simple feature data frame as the left data table is used to ensure that the output will be a simple feature data frame.\nThe joined file is then saved:\n\nwrite_rds(mpsz_pop2020,\"data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#choropleth-mapping-geospatial-data-using-tmap",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#choropleth-mapping-geospatial-data-using-tmap",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "Choropleth mapping involves the symbolisation of enumeration units such as countries, provinces, states, counties or census units, using area patterns or graduated colours. For instance, a social scientist may require a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\nTwo approaches are used to prepare the thematic map using tmap:\n\nPlotting a thematic map quickly using qtm()\nPlotting a highly customisable thematic map using tmap elements\n\n\n\nqtm() is a concise way to provide a good default visualisation:\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020,\n    fill=\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nLearning points:\n\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used\nfill argument is used to map the attribute i.e. DEPENDENCY\n\n\n\n\nThe disadvantage of qtm() is that the aesthetics of individual layers are harder to control. tmap drawing elements are required to draw a high quality cartographic choropleth map:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          title = \"Dependency ratio\")+\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45,\n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha=0.5)+\n  tm_compass(type=\"8star\",size=2) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2) +\n  tm_credits(\"Source: Planning subzone boundary from Urban Redevelopment Authority (URA) and population data from Department of Statistics (DOS)\",\n          position = c(\"left\",\"bottom\")   )\n\n\n\n\n\n\n\n\nThe following section explains the tmap functions that were used to plot the above elements:\n\n\n\nThe basic building block of tmap is tm_shape() followed by one or more layer elements such as tm_fill() or tm_polygons()\nIn the code chunk below, tm_shape() is used to define the input data and tm_polygons() is used to draw the planning subzone polygons:\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n\n\n\n\n\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as Dependency to tm_polygons():\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nLearning points from tm_polygons():\n\ndefault interval binning used to draw the choropleth map is called “pretty”\ndefault color scheme used is YlOrRd of ColorBrewer\ndefault color for missing value is a grey shade\n\n\n\n\ntm_polygons() is a wrapper of tm_fill() and tm_border():\n\ntm_fill() shades the polygons by using the default color scheme\ntm_borders() add the borders of the shapefile onto the choropleth map\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nWith tm_borders(), light gray border lines are added onto the choropleth map:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")+\n  tm_borders(lwd = 0.1, alpha = 1)\n\n\n\n\n\n\n\n\n\nalpha argument defines the transparency number between 0 (totally transparent) to 1 (not transparent). by default, the alpha value is 1\ncol defines the border color\nlwd defines the border line width, default is 1\nlty defines the border line type, default is solid"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#data-classification-methods-of-tmap",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#data-classification-methods-of-tmap",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "Most choropleth maps employ methods of data classification, which aims to take a large number of observations and group them into data ranges or classes.\ntmap provides 10 data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher and jenks.\nThe style argument of tm_fill() or tm_polygons() will need to be used to define the data classification method.\n\n\nQuantile data classification with 5 classes:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=5,\n          style=\"quantile\")+\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\nEqual data classification method:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=5,\n          style=\"equal\")+\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nComparing the two methods above, the distribution of the quantile method is more even than the equal distribution method. Maps can lie, below are some other methods of classification and different number of classes being tested out.\n\n\nkmeans data classification with 5 classes:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=5,\n          style=\"kmeans\")+\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\nkmeans data classification with 2 classes:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=2,\n          style=\"kmeans\")+\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\nfisher data classification with 5 classes:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=5,\n          style=\"fisher\")+\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\nfisher data classification with 20 classes:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=20,\n          style=\"fisher\")+\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\n\n\n\nFor all built-in styles, category breaks are computed internally. To override the defaults, the breakpoints can be set explicitly by means of breaks argument to tm_fill().\n\n\n\n\n\n\nImportant\n\n\n\nIn tmap, breaks include a minimum and maximum. To end up with n categories, n+1 elements must be specified in the breaks option (values must be in increasing order)\n\n\nBefore setting the break points, it is important and good practice to obtain the descriptive statistics:\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6751  0.7288  0.8084  0.8092 19.0000      92 \n\n\nWith reference to the results above, we set the break points at 0.60, 0.70, 0.80 and 0.90. We also need to include a minimum and maximum, set at 0 and 1.00 respectively.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks=c(0,0.60,0.70,0.80,0.90,1.00)) +\n  tm_borders(alpha=0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#color-scheme",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#color-scheme",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "tmap support color ramps defined by the user or a set of predefined color ramps from the RColorBrewer package.\n\n\nThis is done by assigning the preferred color to palette argument of tm_fill():\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=6,\n          style=\"quantile\",\n          palette = \"Blues\")+\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\nTo reverse the color shading, we add a “-” prefix:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=6,\n          style = \"quantile\",\n          palette = \"-Blues\")+\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nThis also applies to other palette colors like Greens:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=6,\n          style = \"quantile\",\n          palette = \"Greens\")+\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=6,\n          style = \"quantile\",\n          palette = \"-Greens\")+\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#map-layouts",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#map-layouts",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "Map layout refers to the combination of all map elements into a cohesive map. Map elements include title, scale bar, compass, margins and aspect ratios. 1.4.3 Data classification methods of tmap and 1.4.4 Color scheme covered above affect how the map looks.\n\n\nLegend options include changing the placement, format and appearance of the legend:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style=\"jenks\",\n          palette = \"Blues\",\n          legend.hist = TRUE,\n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1)+\n  tm_layout(main.title=\"Distribution of Dependency Ratio by planning subzone \\n(Jenks Classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45,\n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\",\"bottom\"),\n            frame = FALSE)+\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\nA variety of layout settings that can be changed are called by using tmap_style():\nClassic style:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\")+\n  tm_borders(alpha = 0.5)+\n  tmap_style(\"classic\")\n\n\n\n\n\n\n\n\n\n\n\ntmap also provides arguments to draw other map furniture like compass, scale bar and grid lines i.e. through the use of tm_compass(), tm_scale_bar() and tm_grid():\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          title = \"No. of persons\")+\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45,\n            legend.width = 0.35,\n            frame = TRUE)+\n  tm_borders(alpha = 0.5)+\n  tm_compass(type = \"8star\",size=2)+\n  tm_scale_bar(width = 0.15)+\n  tm_grid(lwd = 0.1,alpha = 0.2)+\n  tm_credits(\"Source: Planning subzone boundary data from Urban Redevelopment Authority (URA) and Population Data from Department of Statistics (DOS)\",\n             position = c(\"left\",\"bottom\"))\n\n\n\n\n\n\n\n\nTo reset to default style:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          title = \"No. of persons\")+\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45,\n            legend.width = 0.35,\n            frame = TRUE)+\n  tm_borders(alpha = 0.5)+\n  tm_compass(type = \"8star\",size=2)+\n  tm_scale_bar(width = 0.15)+\n  tm_grid(lwd = 0.1,alpha = 0.2)+\n  tm_credits(\"Source: Planning subzone boundary data from Urban Redevelopment Authority (URA) and Population Data from Department of Statistics (DOS)\",\n             position = c(\"left\",\"bottom\"))+\n  tmap_style(\"white\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#drawing-small-multiple-choropleth-maps",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#drawing-small-multiple-choropleth-maps",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "Small multiple maps are also referred to as facet maps and comprise many maps arranged side-by-side and sometimes, stacked vertically. Facet maps enable the visualisation of how spatial relationships change with respect to another variable such as time.\nFacet maps can be plotted in 3 ways in tmap:\n\nby assigning multiple values to at least one of the aesthetic arguments\nby defining a group-by variable in tm_facets()\nby creating a multiple standalone maps with tmap_arrange()\n\n\n\nHere, we create facet maps by defining ncols in tm_fill():\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\",\"AGED\"),\n          style = \"equal\",\n          palette = \"Blues\")+\n  tm_layout(legend.position = c(\"right\",\"bottom\"))+\n  tm_borders(alpha = 0.5)+\n  tmap_style(\"white\")\n\n\n\n\n\n\n\n\nAnother example, we assign different styles and palette:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\",\"quantile\"),\n          palette = list(\"Blues\",\"Greens\"))+\n  tm_layout(legend.position = c(\"right\",\"bottom\"))\n\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0)+\n  tm_facets(by=\"REGION_N\",\n            free.coords = TRUE,\n            drop.shapes = TRUE)+\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\",\"center\"),\n            title.size = 20)+\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+\n  tm_polygons(\"YOUNG\",\n              style = \"quantile\",\n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+\n  tm_polygons(\"AGED\",\n              style = \"quantile\",\n              palette = \"Blues\")\n\ntmap_arrange(youngmap,agedmap,asp=1,ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#mapping-spatial-object-meeting-a-selection-criterion",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#mapping-spatial-object-meeting-a-selection-criterion",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "Instead of creating small multiple choropleth map, a selection function can also be used to map spatial objects meeting a selection criterion:\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\",])+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          legend.hist = TRUE,\n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1)+\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45,\n            legend.width = 5.0,\n            legend.position = c(\"right\",\"bottom\"),\n            frame = FALSE)+\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#references",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "tmap: Thematic Maps in R\ntmap\ntmap: get started!\ntmap: changes in version 2.0\ntmap: creating thematic maps in a flexible way (useR!2015)\nExploring and presenting maps with tmap (useR!2017)\n\n\n\n\n\nsf: Simple Features for R\nSimple Features for R: StandardizedSupport for Spatial Vector Data\nReading, Writing and Converting Simple Features\n\n\n\n\n\ndplyr\nTidy data\ntidyr: Easily Tidy Data with ‘spread()’ and ‘gather()’ Functions"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/data/geospatial/MPSZ-2019.html",
    "href": "In-class_Ex/In-class_Ex01/data/geospatial/MPSZ-2019.html",
    "title": "ISSS626-GAA",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "title": "In-class Exercise 1: Geospatial",
    "section": "",
    "text": "Tips for quarto page settings\n\n\n\nIf true,\n\neval: R will run code\necho: R will display code chunk\nfreeze: whatever document that has already been committed and pushed to github (and if there’s no changes), will no longer be rendereds\n\nIf false,\n\nmessage: avoid printing out warning messages (for added info, warning in markdown is the same as warning in message)\n\n\n\nIn this in-class exercise, the following packages will be used:\n\ntidyverse\nsf\ntmap\nggstatsplot\n\n\n\n\npacman::p_load(tidyverse,sf,tmap,ggstatsplot)\n\n\npacman will first check whether packages are installed before loading\npacman is just called once and not loaded into the environment as its not required for the long-term and to avoid taking up memory\n\n\n\n\n\n\n\n\n\nmpsz14_shp = st_read(dsn=\"data/geospatial\",\n               layer=\"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\In-class_Ex\\In-class_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\ngeometry column store all coordinate pairs\n\n\n\n\n\nmpsz14_kml &lt;- st_read(\"data/geospatial/MasterPlan2014SubzoneBoundaryWebKML.kml\")\n\n\nthis kml file is corrupted\nin other cases, if cannot open kml file, can change extension to .kmz and see if it can be unzipped\n\nIt is possible to generate a kml file from shp file as follows:\n\nst_write(mpsz14_shp,\n         \"data/geospatial/MP14_SUBZONE_WEB_PL.kml\",\n         delete_dsn=TRUE)\n\n\nmpsz14_kml &lt;- st_read(\"data/geospatial/MP14_SUBZONE_WEB_PL.kml\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\In-class_Ex\\In-class_Ex01\\data\\geospatial\\MP14_SUBZONE_WEB_PL.kml' \n  using driver `KML'\nSimple feature collection with 323 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\ndelete_dsn = TRUE is to overwrite previous file otherwise it will prompt an error that the dataset already exists\n\n\n\n\n\n\n\n\nmpsz19_shp = st_read(dsn=\"data/geospatial\",\n                   layer=\"MPSZ-2019\")\n\nReading layer `MPSZ-2019' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\In-class_Ex\\In-class_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\nnote from printout above that the coordinate system is in WGS84 (geographic coordinate system for which units are in decimal degree)\nWGS84 is popular and used in our handphones but problem is such coordinate systems are not useful for distance and area measurements i.e. 1 degree at equator not equivalent to 1 degree at north pole aka distorted. As such, always use projected coordinated system.\n\n\n\n\n\n\n\nImportant\n\n\n\nImportant to know coordinate system to interpret coordinate points\n\nlatitude, longitude straightforward as typically in degrees BUT\nif in x, y, could be in various units i.e. metres, km\n\n\n\n\n\n\n\nmpsz19_kml &lt;- st_read(\"data/geospatial/MasterPlan2019SubzoneBoundaryNoSeaKML.kml\")\n\nReading layer `URA_MP19_SUBZONE_NO_SEA_PL' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\In-class_Ex\\In-class_Ex01\\data\\geospatial\\MasterPlan2019SubzoneBoundaryNoSeaKML.kml' \n  using driver `KML'\nSimple feature collection with 332 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nComparing the 2 files, shp file is clearer than kml file hence naturally use the shp file. kml file will require splitting\n\n\n\n\n\n\n\nTip\n\n\n\nGiven the above, always download different versions of the same file and analyse which is the better data to use.\n\n\n\n\n\n\nmpsz19_shp &lt;- st_read(dsn=\"data/geospatial\",\n                   layer=\"MPSZ-2019\")%&gt;%\n  st_transform(crs=3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\In-class_Ex\\In-class_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\nst_crs(mpsz19_shp)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\ndo not create intermediate data, just replace\n\n\n\n\n\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2023.csv\")\n\nRows: 100928 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\npopdata2023 &lt;- popdata %&gt;%\n  group_by(PA,SZ,AG) %&gt;%\n  summarise(`POP`=sum(`Pop`)) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from = AG,\n              values_from = POP)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\ncolnames(popdata2023)\n\n [1] \"PA\"          \"SZ\"          \"0_to_4\"      \"10_to_14\"    \"15_to_19\"   \n [6] \"20_to_24\"    \"25_to_29\"    \"30_to_34\"    \"35_to_39\"    \"40_to_44\"   \n[11] \"45_to_49\"    \"50_to_54\"    \"55_to_59\"    \"5_to_9\"      \"60_to_64\"   \n[16] \"65_to_69\"    \"70_to_74\"    \"75_to_79\"    \"80_to_84\"    \"85_to_89\"   \n[21] \"90_and_Over\"\n\n\n\nr vs python: r starts from 1 and not 0 like python\nnote which rows the age groups fall in\n\n\npopdata2023 &lt;- popdata2023 %&gt;%\n  mutate(`YOUNG` = rowSums(.[3:6])\n         +rowSums(.[14])) %&gt;%\n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:13])+\n           rowSums(.[15])) %&gt;%\n  mutate(`AGED`=rowSums(.[16:21])) %&gt;%\n  mutate(`TOTAL`=rowSums(.[3:21])) %&gt;%\n  mutate(`DEPENDENCY`=(`YOUNG`+`AGED`)/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`,`SZ`,`YOUNG`,`ECONOMY ACTIVE`,`AGED`,`TOTAL`,`DEPENDENCY`)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#installing-and-loading-r-packages",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#installing-and-loading-r-packages",
    "title": "In-class Exercise 1: Geospatial",
    "section": "",
    "text": "pacman::p_load(tidyverse,sf,tmap,ggstatsplot)\n\n\npacman will first check whether packages are installed before loading\npacman is just called once and not loaded into the environment as its not required for the long-term and to avoid taking up memory"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#working-with-master-plan-planning-subzone-data",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#working-with-master-plan-planning-subzone-data",
    "title": "In-class Exercise 1: Geospatial",
    "section": "",
    "text": "mpsz14_shp = st_read(dsn=\"data/geospatial\",\n               layer=\"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\In-class_Ex\\In-class_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\ngeometry column store all coordinate pairs\n\n\n\n\n\nmpsz14_kml &lt;- st_read(\"data/geospatial/MasterPlan2014SubzoneBoundaryWebKML.kml\")\n\n\nthis kml file is corrupted\nin other cases, if cannot open kml file, can change extension to .kmz and see if it can be unzipped\n\nIt is possible to generate a kml file from shp file as follows:\n\nst_write(mpsz14_shp,\n         \"data/geospatial/MP14_SUBZONE_WEB_PL.kml\",\n         delete_dsn=TRUE)\n\n\nmpsz14_kml &lt;- st_read(\"data/geospatial/MP14_SUBZONE_WEB_PL.kml\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\In-class_Ex\\In-class_Ex01\\data\\geospatial\\MP14_SUBZONE_WEB_PL.kml' \n  using driver `KML'\nSimple feature collection with 323 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\ndelete_dsn = TRUE is to overwrite previous file otherwise it will prompt an error that the dataset already exists\n\n\n\n\n\n\n\n\nmpsz19_shp = st_read(dsn=\"data/geospatial\",\n                   layer=\"MPSZ-2019\")\n\nReading layer `MPSZ-2019' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\In-class_Ex\\In-class_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\nnote from printout above that the coordinate system is in WGS84 (geographic coordinate system for which units are in decimal degree)\nWGS84 is popular and used in our handphones but problem is such coordinate systems are not useful for distance and area measurements i.e. 1 degree at equator not equivalent to 1 degree at north pole aka distorted. As such, always use projected coordinated system.\n\n\n\n\n\n\n\nImportant\n\n\n\nImportant to know coordinate system to interpret coordinate points\n\nlatitude, longitude straightforward as typically in degrees BUT\nif in x, y, could be in various units i.e. metres, km\n\n\n\n\n\n\n\nmpsz19_kml &lt;- st_read(\"data/geospatial/MasterPlan2019SubzoneBoundaryNoSeaKML.kml\")\n\nReading layer `URA_MP19_SUBZONE_NO_SEA_PL' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\In-class_Ex\\In-class_Ex01\\data\\geospatial\\MasterPlan2019SubzoneBoundaryNoSeaKML.kml' \n  using driver `KML'\nSimple feature collection with 332 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nComparing the 2 files, shp file is clearer than kml file hence naturally use the shp file. kml file will require splitting\n\n\n\n\n\n\n\nTip\n\n\n\nGiven the above, always download different versions of the same file and analyse which is the better data to use.\n\n\n\n\n\n\nmpsz19_shp &lt;- st_read(dsn=\"data/geospatial\",\n                   layer=\"MPSZ-2019\")%&gt;%\n  st_transform(crs=3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\In-class_Ex\\In-class_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\nst_crs(mpsz19_shp)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\ndo not create intermediate data, just replace\n\n\n\n\n\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2023.csv\")\n\nRows: 100928 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\npopdata2023 &lt;- popdata %&gt;%\n  group_by(PA,SZ,AG) %&gt;%\n  summarise(`POP`=sum(`Pop`)) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from = AG,\n              values_from = POP)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\ncolnames(popdata2023)\n\n [1] \"PA\"          \"SZ\"          \"0_to_4\"      \"10_to_14\"    \"15_to_19\"   \n [6] \"20_to_24\"    \"25_to_29\"    \"30_to_34\"    \"35_to_39\"    \"40_to_44\"   \n[11] \"45_to_49\"    \"50_to_54\"    \"55_to_59\"    \"5_to_9\"      \"60_to_64\"   \n[16] \"65_to_69\"    \"70_to_74\"    \"75_to_79\"    \"80_to_84\"    \"85_to_89\"   \n[21] \"90_and_Over\"\n\n\n\nr vs python: r starts from 1 and not 0 like python\nnote which rows the age groups fall in\n\n\npopdata2023 &lt;- popdata2023 %&gt;%\n  mutate(`YOUNG` = rowSums(.[3:6])\n         +rowSums(.[14])) %&gt;%\n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:13])+\n           rowSums(.[15])) %&gt;%\n  mutate(`AGED`=rowSums(.[16:21])) %&gt;%\n  mutate(`TOTAL`=rowSums(.[3:21])) %&gt;%\n  mutate(`DEPENDENCY`=(`YOUNG`+`AGED`)/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`,`SZ`,`YOUNG`,`ECONOMY ACTIVE`,`AGED`,`TOTAL`,`DEPENDENCY`)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02A.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02A.html",
    "title": "Hands-on Exercise 2A",
    "section": "",
    "text": "Spatial Point Pattern Analysis is the evaluation of the pattern or distribution of a set of points on a surface. The point can be a location of:\n\nevents such as crime, traffic incident and disease onset or\nbusiness services (coffee and fast food outlets) or facilities such as childcare and eldercare\n\nIn this hands-on exercise, we will use appropriate functions of spatstat to discover the spatial point processes of childcare centres in Singapore.\nThe specific questions to be addressed are as follows:\n\nare the childcare centres in Singapore randomly distributed throughout the country?\nif the answer is not, then the next question is where are the locations with higher concentrations of childcare centres?\n\n\n\n\nThree datasets are used in this exercise:\n\nCHILDCARE, a point feature data providing both location and attribute information of childcare centres. It was downloaded from data.gov.sg and is in geojson format.\nMP14_SUBZONE_WEB_PL, a polygon feature data providing information of URA 2014 Master Plan Planning Subzone boundary data. It is in ESRI shapefile format. This data set was also downloaded from data.gov.sg.\nCostalOutline, a polygon feature data showing the national boundary of Singapore. It is provided by SLA and is in ESRI shapefile format.\n\n\n\n\n\nsf for importing, managing, and processing vector-based geospatial data, and\nspatstat, which has a wide range of useful functions for point pattern analysis. In this hands-on exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer\nraster which reads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster). In this hands-on exercise, it will be used to convert image output generate by spatstat into raster format.\nmaptools which provides a set of tools for manipulating geographic data. In this hands-on exercise, we mainly use it to convert Spatial objects into ppp format of spatstat.\ntmap which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using leaflet API.\ntidyverse for performing data science tasks such as importing, wrangling and visualising data.\n\nThe packages are loaded with the following code chunk:\n\npacman::p_load(sf,spatstat,raster,tmap,tidyverse)\n\n\n\n\n\n\n\nTip\n\n\n\nmaptools is retired and binary is removed from CRAN, however it can be downloaded from Posit Public Package Manager (this site is useful for Shiny) snapshots by using the code chunk below. Alternatively, can utilise the CRAN retired website and key in the latest version.\n\ninstall.packages(\"maptools\",\n                 repos = \"https://packagemanager.posit.co/cran/2023-10-13\")\n\n\n\n\n\n\n\n\nWe will import the geospatial data using st_read() of sf package:\n\nchildcare_sf &lt;- st_read(\"data/geospatial/child-care-services-geojson.geojson\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `child-care-services-geojson' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex02\\data\\geospatial\\child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nChecking whether the EPSG code has been corrected:\n\nst_crs(childcare_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nWhen the input geospatial data is in shapefile format, two arguments are used:\n\ndsn to define the data path\nlayer to provide the shapefile name\n\n\nsg_sf &lt;- st_read(dsn = \"data/geospatial\",\n                 layer = \"CostalOutline\")\n\nReading layer `CostalOutline' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\n\n\nmpsz_sf &lt;- st_read(dsn = \"data/geospatial\",\n                   layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nBefore using these data for analysis, it is important to ensure that they are projected in the same projection system.\n\nst_crs(sg_sf)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\nst_crs(mpsz_sf)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nWhile the sg_sf and mpsz_sf data frames are projected in svy21, the end of the printout above states that the EPSG is 9001 - this is a wrong EPSG code as the correct EPSG code for svy21 should be 3414.\nTo correctly assign the right EPSG code to both data frame, st_set_crs() of sf package is used:\n\nsg_sf3414 &lt;- st_set_crs(sg_sf,3414)\nmpsz_sf3414 &lt;- st_set_crs(mpsz_sf,3414)\n\nChecking whether the EPSG code has been corrected:\n\nst_crs(sg_sf3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\nst_crs(mpsz_sf3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\n\nAfter checking the referencing system of each geospatial dataframe, it is also useful to plot a map to show their spatial patterns. A pin map can be prepared using the code below:\n\ntmap_mode('view')\ntm_shape(childcare_sf)+\n  tm_dots()\n\n\n\n\n\nAll the geospatial layers are within the same map extend which indicates that their referencing system and coordinate values are referred to similar spatial context. This is very important in any geospatial analysis.\n\ntmap_mode('plot')\n\nAt interactive mode, tmap is using leaflet for RAPI. The advantage of an interactive pin map is it allows one to navigate and zoom around the map freely as well as query the information of each simple feature (i.e. the point) by clicking on the. The background of the internet map layer can also be changed. At present, three internet map layers are provided: ESRI.WorldGrayCanvas, OpenStreetMap, and ESRI.WorldTopoMap. The default is ESRI.WorldGrayCanvas.\n\n\n\n\n\n\nTip\n\n\n\nIt is always important to switch back to plot mode after the interactive map as each interactive mode will consume a connection.\nIt is important to avoid displaying excessive number of interactive maps i.e. not more than 10, in one RMarkdown document when publishing on Netlify.\n\n\n\n\n\n\nWhile simple feature data frame is gaining popularity against Spatial* classes, many geospatial analysis packages require the input geospatial data in to be in Spatial* classes. In this section, simple feature data frame will be converted to Spatial* class.\n\n\nThe code chunk below uses as_Spatial() of sf package to convert the three geospatial data from simple feature data frame to sp’s Spatial* class.\n\nchildcare &lt;- as_Spatial(childcare_sf)\nmpsz &lt;- as_Spatial(mpsz_sf3414)\nsg &lt;- as_Spatial(sg_sf3414)\n\n\nchildcare\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       :    Nameescription \nmin values  :   kml_1, &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;018989&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;1, MARINA BOULEVARD, #B1 - 01, ONE MARINA BOULEVARD, SINGAPORE 018989&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;THE LITTLE SKOOL-HOUSE INTERNATIONAL PTE. LTD.&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;08F73931F4A691F4&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20200826094036&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \nmax values  : kml_999,                  &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;829646&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;200, PONGGOL SEVENTEENTH AVENUE, SINGAPORE 829646&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;Child Care Services&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;RAFFLES KIDZ @ PUNGGOL PTE LTD&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;379D017BF244B0FA&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20200826094036&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \n\n\n\nmpsz\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 323 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 15\nnames       : OBJECTID, SUBZONE_NO, SUBZONE_N, SUBZONE_C, CA_IND, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C,          INC_CRC, FMEL_UPD_D,     X_ADDR,     Y_ADDR,    SHAPE_Leng,    SHAPE_Area \nmin values  :        1,          1, ADMIRALTY,    AMSZ01,      N, ANG MO KIO,         AM, CENTRAL REGION,       CR, 00F5E30B5C9B7AD8,      16409,  5092.8949,  19579.069, 871.554887798, 39437.9352703 \nmax values  :      323,         17,    YUNNAN,    YSSZ09,      Y,     YISHUN,         YS,    WEST REGION,       WR, FFCCF172717C2EAF,      16409, 50424.7923, 49552.7904, 68083.9364708,  69748298.792 \n\n\n\nsg\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 4\nnames       : GDO_GID, MSLINK, MAPID,              COSTAL_NAM \nmin values  :       1,      1,     0,             ISLAND LINK \nmax values  :      60,     67,     0, SINGAPORE - MAIN ISLAND \n\n\nThe geospatial data have been converted into their respective sp’s Spatial* classes now.\n\n\n\nspatstat requires the analytical data in ppp object form. There is no direct way to convert a Spatial* classes into ppp object. We need to convert the Spatial classes* into Spatial object first.\nThe codes chunk below converts the Spatial* classes into generic sp objects.\n\nchildcare_sp &lt;- as(childcare, \"SpatialPoints\")\nsg_sp &lt;- as(sg,\"SpatialPolygons\")\n\n\nchildcare_sp\n\nclass       : SpatialPoints \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nsg_sp\n\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\n\n\nNow, we will use as.ppp() function of spatstat to convert the spatial data into spatstat’s ppp object format.\n\nchildcare_ppp &lt;- as.ppp(childcare_sf)\nchildcare_ppp\n\nMarked planar point pattern: 1545 points\nmarks are of storage type  'character'\nwindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n\n\nPlotting childcare_ppp:\n\nplot(childcare_ppp)\n\n\n\n\n\n\n\n\nTaking a look at the summary statistics of the ppp object:\n\nsummary(childcare_ppp)\n\nMarked planar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\nCoordinates are given to 11 decimal places\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     1545 character character \n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units\n\n\n\n\n\n\n\n\nNote\n\n\n\nIn spatial point patterns analysis, a significant issue is the presence of duplicates. The statistical methodology used for spatial point patterns processes is based largely on the assumption that process is simple, that is, that the points cannot be coincidental.\n\n\n\n\n\nWe can check the duplication in a ppp object using the code chunk below:\n\nany(duplicated(childcare_ppp))\n\n[1] FALSE\n\n\nTo count the number of coincidence points, the multiplicity() function is used, as shown in the code chunk below.\n\nmultiplicity(childcare_ppp)\n\n   [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [75] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [112] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [149] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [186] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [223] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [260] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [297] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [334] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [371] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [408] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [445] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [482] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [519] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [556] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [593] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [630] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [667] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [704] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [741] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [778] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [815] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [852] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [889] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [926] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [963] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1000] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1037] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1074] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1111] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1148] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1185] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1222] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1259] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1296] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1333] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1370] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1407] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1444] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1481] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1518] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n\n\nTo know how many locations have more than one point event, the code chunk below is used:\n\nsum(multiplicity(childcare_ppp) &gt; 1)\n\n[1] 0\n\n\n\ntmap_mode('view')\ntm_shape(childcare) +\n  tm_dots(alpha=0.4, \n          size=0.05)\n\n\n\n\n\n\ntmap_mode('plot')\n\nIn the event of duplicate points, there are 3 ways to overcome the issue:\n\nDelete the duplicates - easiest way but it will also meant that some useful point events will be lost\nJittering - this method will add a small perturbation to the duplicate points so that they do not occupy the exact same space\nMake each point “unique” and attach the duplicates of the points to the patterns as marks, as attributes of the points. Analytical techniques that take into account these marks would be required.\n\nThe code chunk below implements the jittering approach:\n\nchildcare_ppp_jit &lt;- rjitter(childcare_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n\n\n\n\n\n\n\nImportant\n\n\n\nNote that Prof’s original code only indicated nsim = 1 which means there’s only 2 simulations. To increase the value i.e. nsim = 49 to bring the simulations up to 50.\n\n\nCheck for duplicated points:\n\nany(duplicated(childcare_ppp_jit))\n\n[1] FALSE\n\n\n\n\n\nWhen analysing spatial point patterns, it is a good practice to confine the analysis within a geographical area like Singapore’s boundary. In spatstat, an object called owin is specially designed to represent this polygonal region.\nThe code chunk below is used to covert sg SpatialPolygon object into owin object of spatstat.\n\nsg_owin &lt;- as.owin(sg_sf)\n\nThe ouput object can be displayed by using plot() function:\n\nplot(sg_owin)\n\n\n\n\n\n\n\n\n\nsummary(sg_owin)\n\nWindow: polygonal boundary\n50 separate polygons (1 hole)\n                 vertices         area relative.area\npolygon 1 (hole)       30     -7081.18     -9.76e-06\npolygon 2              55     82537.90      1.14e-04\npolygon 3              90    415092.00      5.72e-04\npolygon 4              49     16698.60      2.30e-05\npolygon 5              38     24249.20      3.34e-05\npolygon 6             976  23344700.00      3.22e-02\npolygon 7             721   1927950.00      2.66e-03\npolygon 8            1992   9992170.00      1.38e-02\npolygon 9             330   1118960.00      1.54e-03\npolygon 10            175    925904.00      1.28e-03\npolygon 11            115    928394.00      1.28e-03\npolygon 12             24      6352.39      8.76e-06\npolygon 13            190    202489.00      2.79e-04\npolygon 14             37     10170.50      1.40e-05\npolygon 15             25     16622.70      2.29e-05\npolygon 16             10      2145.07      2.96e-06\npolygon 17             66     16184.10      2.23e-05\npolygon 18           5195 636837000.00      8.78e-01\npolygon 19             76    312332.00      4.31e-04\npolygon 20            627  31891300.00      4.40e-02\npolygon 21             20     32842.00      4.53e-05\npolygon 22             42     55831.70      7.70e-05\npolygon 23             67   1313540.00      1.81e-03\npolygon 24            734   4690930.00      6.47e-03\npolygon 25             16      3194.60      4.40e-06\npolygon 26             15      4872.96      6.72e-06\npolygon 27             15      4464.20      6.15e-06\npolygon 28             14      5466.74      7.54e-06\npolygon 29             37      5261.94      7.25e-06\npolygon 30            111    662927.00      9.14e-04\npolygon 31             69     56313.40      7.76e-05\npolygon 32            143    145139.00      2.00e-04\npolygon 33            397   2488210.00      3.43e-03\npolygon 34             90    115991.00      1.60e-04\npolygon 35             98     62682.90      8.64e-05\npolygon 36            165    338736.00      4.67e-04\npolygon 37            130     94046.50      1.30e-04\npolygon 38             93    430642.00      5.94e-04\npolygon 39             16      2010.46      2.77e-06\npolygon 40            415   3253840.00      4.49e-03\npolygon 41             30     10838.20      1.49e-05\npolygon 42             53     34400.30      4.74e-05\npolygon 43             26      8347.58      1.15e-05\npolygon 44             74     58223.40      8.03e-05\npolygon 45            327   2169210.00      2.99e-03\npolygon 46            177    467446.00      6.44e-04\npolygon 47             46    699702.00      9.65e-04\npolygon 48              6     16841.00      2.32e-05\npolygon 49             13     70087.30      9.66e-05\npolygon 50              4      9459.63      1.30e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 725376000 square units\nFraction of frame area: 0.401\n\n\n\n\n\nIn this last step of geospatial data wrangling, we will extract childcare events that are located within Singapore by using the code chunk below:\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\n\nThe output object combined both the point and polygon feature in one ppp object class as shown below:\n\nsummary(childcareSG_ppp)\n\nMarked planar point pattern:  1545 points\nAverage intensity 2.129929e-06 points per square unit\n\nCoordinates are given to 11 decimal places\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     1545 character character \n\nWindow: polygonal boundary\n50 separate polygons (1 hole)\n                 vertices         area relative.area\npolygon 1 (hole)       30     -7081.18     -9.76e-06\npolygon 2              55     82537.90      1.14e-04\npolygon 3              90    415092.00      5.72e-04\npolygon 4              49     16698.60      2.30e-05\npolygon 5              38     24249.20      3.34e-05\npolygon 6             976  23344700.00      3.22e-02\npolygon 7             721   1927950.00      2.66e-03\npolygon 8            1992   9992170.00      1.38e-02\npolygon 9             330   1118960.00      1.54e-03\npolygon 10            175    925904.00      1.28e-03\npolygon 11            115    928394.00      1.28e-03\npolygon 12             24      6352.39      8.76e-06\npolygon 13            190    202489.00      2.79e-04\npolygon 14             37     10170.50      1.40e-05\npolygon 15             25     16622.70      2.29e-05\npolygon 16             10      2145.07      2.96e-06\npolygon 17             66     16184.10      2.23e-05\npolygon 18           5195 636837000.00      8.78e-01\npolygon 19             76    312332.00      4.31e-04\npolygon 20            627  31891300.00      4.40e-02\npolygon 21             20     32842.00      4.53e-05\npolygon 22             42     55831.70      7.70e-05\npolygon 23             67   1313540.00      1.81e-03\npolygon 24            734   4690930.00      6.47e-03\npolygon 25             16      3194.60      4.40e-06\npolygon 26             15      4872.96      6.72e-06\npolygon 27             15      4464.20      6.15e-06\npolygon 28             14      5466.74      7.54e-06\npolygon 29             37      5261.94      7.25e-06\npolygon 30            111    662927.00      9.14e-04\npolygon 31             69     56313.40      7.76e-05\npolygon 32            143    145139.00      2.00e-04\npolygon 33            397   2488210.00      3.43e-03\npolygon 34             90    115991.00      1.60e-04\npolygon 35             98     62682.90      8.64e-05\npolygon 36            165    338736.00      4.67e-04\npolygon 37            130     94046.50      1.30e-04\npolygon 38             93    430642.00      5.94e-04\npolygon 39             16      2010.46      2.77e-06\npolygon 40            415   3253840.00      4.49e-03\npolygon 41             30     10838.20      1.49e-05\npolygon 42             53     34400.30      4.74e-05\npolygon 43             26      8347.58      1.15e-05\npolygon 44             74     58223.40      8.03e-05\npolygon 45            327   2169210.00      2.99e-03\npolygon 46            177    467446.00      6.44e-04\npolygon 47             46    699702.00      9.65e-04\npolygon 48              6     16841.00      2.32e-05\npolygon 49             13     70087.30      9.66e-05\npolygon 50              4      9459.63      1.30e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 725376000 square units\nFraction of frame area: 0.401\n\n\nPlotting the newly derived childcareSG_ppp:\n\nplot(childcareSG_ppp)\n\n\n\n\n\n\n\n\n\n\n\n\nIn this section, first-order SPPA will be performed using spatstat package. The hands-on exercise will focus on:\n\nderiving kernel density estimation (KDE) layer for visualising and exploring the intensity of point processes,\nperforming Confirmatory Spatial Point Patterns Analysis by using Nearest Neighbour statistics.\n\n\n\nIn this section, we will compute the kernel density estimation (KDE) of childcare services in Singapore.\n\n\nThe code chunk below computes a kernel density by using the following configurations of density() of spatstat:\n\nbw.diggle() automatic bandwidth selection method. Other recommended methods are bw.CvL(), bw.scott() or bw.ppl().\nThe smoothing kernel used is gaussian, which is the default. Other smoothing methods are: “epanechnikov”, “quartic” or “disc”.\nThe intensity estimate is corrected for edge effect bias by using method described by Jones (1993) and Diggle (2010, equation 18.9). The default is FALSE.\n\n\nkde_childcareSG_bw &lt;- density(childcareSG_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\nThe plot() function of Base R is then used to display the kernel density derived.\n\nplot(kde_childcareSG_bw)\n\n\n\n\n\n\n\n\nThe density values of the output range from 0 to 0.000035 which is way too small to comprehend. This is because the default unit of measurement of svy21 is in meter. As a result, the density values computed is in “number of points per square meter”.\nAs added info, the bandwidth used to compute the kde layer can be retrieved using the code chunk below:\n\nbw &lt;- bw.diggle(childcareSG_ppp)\nbw\n\n   sigma \n298.4095 \n\n\n\n\n\nIn the code chunk below, rescale.ppp() is used to covert the unit of measurement from meter to kilometer:\n\nchildcareSG_ppp.km &lt;- rescale.ppp(childcareSG_ppp, 1000, \"km\")\n\nRe-run density() using the resale data set and plot the output kde map:\n\nkde_childcareSG.bw &lt;- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG.bw)\n\n\n\n\n\n\n\n\nNote that the output image looks identical to the earlier version and that the only change is in the data values (refer to the legend).\n\n\n\n\nBeside bw.diggle(), there are three other spatstat functions can be used to determine the bandwidth, they are: bw.CvL(), bw.scott(), and bw.ppl().\n\n bw.CvL(childcareSG_ppp.km)\n\n   sigma \n4.543278 \n\n\n\nbw.scott(childcareSG_ppp.km)\n\n sigma.x  sigma.y \n2.224898 1.450966 \n\n\n\nbw.ppl(childcareSG_ppp.km)\n\n    sigma \n0.3897114 \n\n\n\nbw.diggle(childcareSG_ppp.km)\n\n    sigma \n0.2984095 \n\n\nBaddeley et. (2016) suggested the use of the bw.ppl() algorithm as from their experience, this method tends to produce more appropriate values when the pattern consisted predominantly of tight clusters. However, if the purpose of thestudy is to detect a single tight cluster in the midst of random noise, the bw.diggle() method seemed to work best.\nThe code chunk beow will be used to compare the output of using bw.diggle and bw.ppl methods:\n\nkde_childcareSG.ppl &lt;- density(childcareSG_ppp.km, \n                               sigma=bw.ppl, \n                               edge=TRUE,\n                               kernel=\"gaussian\")\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"bw.diggle\")\nplot(kde_childcareSG.ppl, main = \"bw.ppl\")\n\n\n\n\n\n\n\n\n\n\n\nBy default, the kernel method used in density.ppp() is gaussian. But there are three other options, namely: Epanechnikov, Quartic and Dics.\nThe code chunk below will be used to compute three more kernel density estimations by using these three kernel function:\n\npar(mfrow=c(2,2))\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"), \n     main=\"Gaussian\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"epanechnikov\"), \n     main=\"Epanechnikov\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"quartic\"), \n     main=\"Quartic\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"disc\"), \n     main=\"Disc\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNext, a KDE layer will be computed by defining a bandwidth of 600 meter. In the code chunk below, the sigma value used is 0.6. as the unit of measurement of childcareSG_ppp.km object is in kilometer, hence the 600m is 0.6km.\n\nkde_childcareSG_600 &lt;- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG_600)\n\n\n\n\n\n\n\n\n\n\n\nFixed bandwidth method is very sensitive to highly skew distribution of spatial point patterns over geographical units for example urban versus rural. One way to overcome this problem is by using adaptive bandwidth instead.\nIn this section, adaptive kernel density estimation will be derived using density.adaptive() of spatstat.\n\nkde_childcareSG_adaptive &lt;- adaptive.density(childcareSG_ppp.km, method=\"kernel\")\nplot(kde_childcareSG_adaptive)\n\n\n\n\n\n\n\n\nWe can compare the fixed and adaptive kernel density estimation outputs by using the code chunk below.\n\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"Fixed bandwidth\")\nplot(kde_childcareSG_adaptive, main = \"Adaptive bandwidth\")\n\n\n\n\n\n\n\n\n\n\n\nWe convert the result to be suitable for mapping purposes:\n\ngridded_kde_childcareSG_bw &lt;- as.im(kde_childcareSG.bw)\nplot(gridded_kde_childcareSG_bw)\n\n\n\n\n\n\n\n\n\n\n\nNext, the gridded kernal density objects will be converted into a RasterLayer object by using raster() of raster package:\n\nkde_childcareSG_bw_raster &lt;- raster(kde_childcareSG.bw)\n\nTaking a look at the properties of kde_childcareSG_bw_raster RasterLayer:\n\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : layer \nvalues     : -8.476185e-15, 28.51831  (min, max)\n\n\nNote that the crs property is NA.\n\n\nThe code chunk below will be used to include the CRS information on kde_childcareSG_bw_raster RasterLayer:\n\nprojection(kde_childcareSG_bw_raster) &lt;- CRS(\"+init=EPSG:3414\")\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +units=m +no_defs \nsource     : memory\nnames      : layer \nvalues     : -8.476185e-15, 28.51831  (min, max)\n\n\nThe crs property is now completed.\n\n\n\n\nFinally, we will display the raster in cartographic quality map using tmap package:\n\ntm_shape(kde_childcareSG_bw_raster) + \n  tm_raster(\"layer\", palette = \"viridis\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\n\n\n\n\n\n\n\nNote that the raster values are encoded explicitly onto the raster pixel using the values in “v”” field.\n\n\n\nIn this section, the KDE of childcare at Ponggol, Tampines, Chua Chu Kang and Jurong West planning areas will be compared.\n\n\n\nThe code chunk below will be used to extract the target planning areas.\n\npg &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"PUNGGOL\")\ntm &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"TAMPINES\")\nck &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"CHOA CHU KANG\")\njw &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"JURONG WEST\")\n\nPlotting target planning areas:\n\npar(mfrow=c(2,2))\nplot(pg, main = \"Punggol\")\n\n\n\n\n\n\n\n\n\nplot(tm, main = \"Tampines\")\n\n\n\n\n\n\n\n\n\nplot(ck, main = \"Choa Chu Kang\")\n\n\n\n\n\n\n\n\n\nplot(jw, main = \"Jurong West\")\n\n\n\n\n\n\n\n\n\n\nNow, we will convert these sf objects into owin objects that is required by spatstat:\n\npg_owin = as.owin(pg)\ntm_owin = as.owin(tm)\nck_owin = as.owin(ck)\njw_owin = as.owin(jw)\n\n\n\n\nBy using the code chunk below, we are able to extract childcare that is within the specific region to do our analysis later on.\n\nchildcare_pg_ppp = childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp = childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp = childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp = childcare_ppp_jit[jw_owin]\n\n\nclass(childcare_pg_ppp)\n\n[1] \"ppp\"\n\nclass(childcare_tm_ppp)\n\n[1] \"ppp\"\n\nclass(childcare_ck_ppp)\n\n[1] \"ppp\"\n\nclass(childcare_jw_ppp)\n\n[1] \"ppp\"\n\n\nNext, rescale.ppp() function is used to transform the unit of measurement from metre to kilometre:\n\nchildcare_pg_ppp.km = rescale.ppp(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale.ppp(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale.ppp(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale.ppp(childcare_jw_ppp, 1000, \"km\")\n\nThe code chunk below is used to plot these four study areas and the locations of the childcare centres:\n\npar(mfrow=c(2,2))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below will be used to compute the KDE of these four planning area. bw.diggle method is used to derive the bandwidth of each area:\n\npar(mfrow=c(2,2))\nplot(density(childcare_pg_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tampines\")\nplot(density(childcare_ck_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Choa Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Jurong West\")\n\n\n\n\n\n\n\n\n\n\n\nFor comparison purposes, 250m will be used as the bandwidth:\n\npar(mfrow=c(2,2))\nplot(density(childcare_ck_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Chou Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Jurong West\")\nplot(density(childcare_pg_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tampines\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn this section, we will perform the Clark-Evans test of aggregation for a spatial point pattern by using clarkevans.test() of statspat.\nThe test hypotheses are:\nH0 = The distribution of childcare services are randomly distributed.\nH1= The distribution of childcare services are not randomly distributed.\nThe 95% confidence interval will be used.\n\n\n\nclarkevans.test(childcareSG_ppp,\n                correction=\"none\",\n                clipregion=\"sg_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcareSG_ppp\nR = 0.55631, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\n\n\n\nIn the code chunk below, clarkevans.test() of spatstat is used to performs Clark-Evans test of aggregation for childcare centre in Choa Chu Kang planning area:\n\nclarkevans.test(childcare_ck_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_ck_ppp\nR = 0.93999, p-value = 0.3699\nalternative hypothesis: two-sided\n\n\n\n\n\nIn the code chunk below, the similar test is used to analyse the spatial point patterns of childcare centre in Tampines planning area:\n\nclarkevans.test(childcare_tm_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_tm_ppp\nR = 0.78163, p-value = 8.113e-05\nalternative hypothesis: two-sided"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02A.html#learning-outcomes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02A.html#learning-outcomes",
    "title": "Hands-on Exercise 2A",
    "section": "",
    "text": "Spatial Point Pattern Analysis is the evaluation of the pattern or distribution of a set of points on a surface. The point can be a location of:\n\nevents such as crime, traffic incident and disease onset or\nbusiness services (coffee and fast food outlets) or facilities such as childcare and eldercare\n\nIn this hands-on exercise, we will use appropriate functions of spatstat to discover the spatial point processes of childcare centres in Singapore.\nThe specific questions to be addressed are as follows:\n\nare the childcare centres in Singapore randomly distributed throughout the country?\nif the answer is not, then the next question is where are the locations with higher concentrations of childcare centres?"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02A.html#data-acquisition",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02A.html#data-acquisition",
    "title": "Hands-on Exercise 2A",
    "section": "",
    "text": "Three datasets are used in this exercise:\n\nCHILDCARE, a point feature data providing both location and attribute information of childcare centres. It was downloaded from data.gov.sg and is in geojson format.\nMP14_SUBZONE_WEB_PL, a polygon feature data providing information of URA 2014 Master Plan Planning Subzone boundary data. It is in ESRI shapefile format. This data set was also downloaded from data.gov.sg.\nCostalOutline, a polygon feature data showing the national boundary of Singapore. It is provided by SLA and is in ESRI shapefile format."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02A.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02A.html#installing-and-launching-r-packages",
    "title": "Hands-on Exercise 2A",
    "section": "",
    "text": "sf for importing, managing, and processing vector-based geospatial data, and\nspatstat, which has a wide range of useful functions for point pattern analysis. In this hands-on exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer\nraster which reads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster). In this hands-on exercise, it will be used to convert image output generate by spatstat into raster format.\nmaptools which provides a set of tools for manipulating geographic data. In this hands-on exercise, we mainly use it to convert Spatial objects into ppp format of spatstat.\ntmap which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using leaflet API.\ntidyverse for performing data science tasks such as importing, wrangling and visualising data.\n\nThe packages are loaded with the following code chunk:\n\npacman::p_load(sf,spatstat,raster,tmap,tidyverse)\n\n\n\n\n\n\n\nTip\n\n\n\nmaptools is retired and binary is removed from CRAN, however it can be downloaded from Posit Public Package Manager (this site is useful for Shiny) snapshots by using the code chunk below. Alternatively, can utilise the CRAN retired website and key in the latest version.\n\ninstall.packages(\"maptools\",\n                 repos = \"https://packagemanager.posit.co/cran/2023-10-13\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02A.html#spatial-data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02A.html#spatial-data-wrangling",
    "title": "Hands-on Exercise 2A",
    "section": "",
    "text": "We will import the geospatial data using st_read() of sf package:\n\nchildcare_sf &lt;- st_read(\"data/geospatial/child-care-services-geojson.geojson\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `child-care-services-geojson' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex02\\data\\geospatial\\child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nChecking whether the EPSG code has been corrected:\n\nst_crs(childcare_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nWhen the input geospatial data is in shapefile format, two arguments are used:\n\ndsn to define the data path\nlayer to provide the shapefile name\n\n\nsg_sf &lt;- st_read(dsn = \"data/geospatial\",\n                 layer = \"CostalOutline\")\n\nReading layer `CostalOutline' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\n\n\nmpsz_sf &lt;- st_read(dsn = \"data/geospatial\",\n                   layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nBefore using these data for analysis, it is important to ensure that they are projected in the same projection system.\n\nst_crs(sg_sf)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\nst_crs(mpsz_sf)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nWhile the sg_sf and mpsz_sf data frames are projected in svy21, the end of the printout above states that the EPSG is 9001 - this is a wrong EPSG code as the correct EPSG code for svy21 should be 3414.\nTo correctly assign the right EPSG code to both data frame, st_set_crs() of sf package is used:\n\nsg_sf3414 &lt;- st_set_crs(sg_sf,3414)\nmpsz_sf3414 &lt;- st_set_crs(mpsz_sf,3414)\n\nChecking whether the EPSG code has been corrected:\n\nst_crs(sg_sf3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\nst_crs(mpsz_sf3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\n\nAfter checking the referencing system of each geospatial dataframe, it is also useful to plot a map to show their spatial patterns. A pin map can be prepared using the code below:\n\ntmap_mode('view')\ntm_shape(childcare_sf)+\n  tm_dots()\n\n\n\n\n\nAll the geospatial layers are within the same map extend which indicates that their referencing system and coordinate values are referred to similar spatial context. This is very important in any geospatial analysis.\n\ntmap_mode('plot')\n\nAt interactive mode, tmap is using leaflet for RAPI. The advantage of an interactive pin map is it allows one to navigate and zoom around the map freely as well as query the information of each simple feature (i.e. the point) by clicking on the. The background of the internet map layer can also be changed. At present, three internet map layers are provided: ESRI.WorldGrayCanvas, OpenStreetMap, and ESRI.WorldTopoMap. The default is ESRI.WorldGrayCanvas.\n\n\n\n\n\n\nTip\n\n\n\nIt is always important to switch back to plot mode after the interactive map as each interactive mode will consume a connection.\nIt is important to avoid displaying excessive number of interactive maps i.e. not more than 10, in one RMarkdown document when publishing on Netlify."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02A.html#geospatial-data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02A.html#geospatial-data-wrangling",
    "title": "Hands-on Exercise 2A",
    "section": "",
    "text": "While simple feature data frame is gaining popularity against Spatial* classes, many geospatial analysis packages require the input geospatial data in to be in Spatial* classes. In this section, simple feature data frame will be converted to Spatial* class.\n\n\nThe code chunk below uses as_Spatial() of sf package to convert the three geospatial data from simple feature data frame to sp’s Spatial* class.\n\nchildcare &lt;- as_Spatial(childcare_sf)\nmpsz &lt;- as_Spatial(mpsz_sf3414)\nsg &lt;- as_Spatial(sg_sf3414)\n\n\nchildcare\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       :    Nameescription \nmin values  :   kml_1, &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;018989&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;1, MARINA BOULEVARD, #B1 - 01, ONE MARINA BOULEVARD, SINGAPORE 018989&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;THE LITTLE SKOOL-HOUSE INTERNATIONAL PTE. LTD.&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;08F73931F4A691F4&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20200826094036&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \nmax values  : kml_999,                  &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;829646&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;200, PONGGOL SEVENTEENTH AVENUE, SINGAPORE 829646&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;Child Care Services&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;RAFFLES KIDZ @ PUNGGOL PTE LTD&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;379D017BF244B0FA&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20200826094036&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \n\n\n\nmpsz\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 323 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 15\nnames       : OBJECTID, SUBZONE_NO, SUBZONE_N, SUBZONE_C, CA_IND, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C,          INC_CRC, FMEL_UPD_D,     X_ADDR,     Y_ADDR,    SHAPE_Leng,    SHAPE_Area \nmin values  :        1,          1, ADMIRALTY,    AMSZ01,      N, ANG MO KIO,         AM, CENTRAL REGION,       CR, 00F5E30B5C9B7AD8,      16409,  5092.8949,  19579.069, 871.554887798, 39437.9352703 \nmax values  :      323,         17,    YUNNAN,    YSSZ09,      Y,     YISHUN,         YS,    WEST REGION,       WR, FFCCF172717C2EAF,      16409, 50424.7923, 49552.7904, 68083.9364708,  69748298.792 \n\n\n\nsg\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 4\nnames       : GDO_GID, MSLINK, MAPID,              COSTAL_NAM \nmin values  :       1,      1,     0,             ISLAND LINK \nmax values  :      60,     67,     0, SINGAPORE - MAIN ISLAND \n\n\nThe geospatial data have been converted into their respective sp’s Spatial* classes now.\n\n\n\nspatstat requires the analytical data in ppp object form. There is no direct way to convert a Spatial* classes into ppp object. We need to convert the Spatial classes* into Spatial object first.\nThe codes chunk below converts the Spatial* classes into generic sp objects.\n\nchildcare_sp &lt;- as(childcare, \"SpatialPoints\")\nsg_sp &lt;- as(sg,\"SpatialPolygons\")\n\n\nchildcare_sp\n\nclass       : SpatialPoints \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nsg_sp\n\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\n\n\nNow, we will use as.ppp() function of spatstat to convert the spatial data into spatstat’s ppp object format.\n\nchildcare_ppp &lt;- as.ppp(childcare_sf)\nchildcare_ppp\n\nMarked planar point pattern: 1545 points\nmarks are of storage type  'character'\nwindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n\n\nPlotting childcare_ppp:\n\nplot(childcare_ppp)\n\n\n\n\n\n\n\n\nTaking a look at the summary statistics of the ppp object:\n\nsummary(childcare_ppp)\n\nMarked planar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\nCoordinates are given to 11 decimal places\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     1545 character character \n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units\n\n\n\n\n\n\n\n\nNote\n\n\n\nIn spatial point patterns analysis, a significant issue is the presence of duplicates. The statistical methodology used for spatial point patterns processes is based largely on the assumption that process is simple, that is, that the points cannot be coincidental.\n\n\n\n\n\nWe can check the duplication in a ppp object using the code chunk below:\n\nany(duplicated(childcare_ppp))\n\n[1] FALSE\n\n\nTo count the number of coincidence points, the multiplicity() function is used, as shown in the code chunk below.\n\nmultiplicity(childcare_ppp)\n\n   [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [75] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [112] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [149] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [186] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [223] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [260] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [297] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [334] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [371] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [408] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [445] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [482] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [519] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [556] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [593] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [630] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [667] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [704] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [741] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [778] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [815] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [852] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [889] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [926] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [963] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1000] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1037] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1074] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1111] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1148] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1185] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1222] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1259] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1296] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1333] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1370] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1407] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1444] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1481] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1518] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n\n\nTo know how many locations have more than one point event, the code chunk below is used:\n\nsum(multiplicity(childcare_ppp) &gt; 1)\n\n[1] 0\n\n\n\ntmap_mode('view')\ntm_shape(childcare) +\n  tm_dots(alpha=0.4, \n          size=0.05)\n\n\n\n\n\n\ntmap_mode('plot')\n\nIn the event of duplicate points, there are 3 ways to overcome the issue:\n\nDelete the duplicates - easiest way but it will also meant that some useful point events will be lost\nJittering - this method will add a small perturbation to the duplicate points so that they do not occupy the exact same space\nMake each point “unique” and attach the duplicates of the points to the patterns as marks, as attributes of the points. Analytical techniques that take into account these marks would be required.\n\nThe code chunk below implements the jittering approach:\n\nchildcare_ppp_jit &lt;- rjitter(childcare_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n\n\n\n\n\n\n\nImportant\n\n\n\nNote that Prof’s original code only indicated nsim = 1 which means there’s only 2 simulations. To increase the value i.e. nsim = 49 to bring the simulations up to 50.\n\n\nCheck for duplicated points:\n\nany(duplicated(childcare_ppp_jit))\n\n[1] FALSE\n\n\n\n\n\nWhen analysing spatial point patterns, it is a good practice to confine the analysis within a geographical area like Singapore’s boundary. In spatstat, an object called owin is specially designed to represent this polygonal region.\nThe code chunk below is used to covert sg SpatialPolygon object into owin object of spatstat.\n\nsg_owin &lt;- as.owin(sg_sf)\n\nThe ouput object can be displayed by using plot() function:\n\nplot(sg_owin)\n\n\n\n\n\n\n\n\n\nsummary(sg_owin)\n\nWindow: polygonal boundary\n50 separate polygons (1 hole)\n                 vertices         area relative.area\npolygon 1 (hole)       30     -7081.18     -9.76e-06\npolygon 2              55     82537.90      1.14e-04\npolygon 3              90    415092.00      5.72e-04\npolygon 4              49     16698.60      2.30e-05\npolygon 5              38     24249.20      3.34e-05\npolygon 6             976  23344700.00      3.22e-02\npolygon 7             721   1927950.00      2.66e-03\npolygon 8            1992   9992170.00      1.38e-02\npolygon 9             330   1118960.00      1.54e-03\npolygon 10            175    925904.00      1.28e-03\npolygon 11            115    928394.00      1.28e-03\npolygon 12             24      6352.39      8.76e-06\npolygon 13            190    202489.00      2.79e-04\npolygon 14             37     10170.50      1.40e-05\npolygon 15             25     16622.70      2.29e-05\npolygon 16             10      2145.07      2.96e-06\npolygon 17             66     16184.10      2.23e-05\npolygon 18           5195 636837000.00      8.78e-01\npolygon 19             76    312332.00      4.31e-04\npolygon 20            627  31891300.00      4.40e-02\npolygon 21             20     32842.00      4.53e-05\npolygon 22             42     55831.70      7.70e-05\npolygon 23             67   1313540.00      1.81e-03\npolygon 24            734   4690930.00      6.47e-03\npolygon 25             16      3194.60      4.40e-06\npolygon 26             15      4872.96      6.72e-06\npolygon 27             15      4464.20      6.15e-06\npolygon 28             14      5466.74      7.54e-06\npolygon 29             37      5261.94      7.25e-06\npolygon 30            111    662927.00      9.14e-04\npolygon 31             69     56313.40      7.76e-05\npolygon 32            143    145139.00      2.00e-04\npolygon 33            397   2488210.00      3.43e-03\npolygon 34             90    115991.00      1.60e-04\npolygon 35             98     62682.90      8.64e-05\npolygon 36            165    338736.00      4.67e-04\npolygon 37            130     94046.50      1.30e-04\npolygon 38             93    430642.00      5.94e-04\npolygon 39             16      2010.46      2.77e-06\npolygon 40            415   3253840.00      4.49e-03\npolygon 41             30     10838.20      1.49e-05\npolygon 42             53     34400.30      4.74e-05\npolygon 43             26      8347.58      1.15e-05\npolygon 44             74     58223.40      8.03e-05\npolygon 45            327   2169210.00      2.99e-03\npolygon 46            177    467446.00      6.44e-04\npolygon 47             46    699702.00      9.65e-04\npolygon 48              6     16841.00      2.32e-05\npolygon 49             13     70087.30      9.66e-05\npolygon 50              4      9459.63      1.30e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 725376000 square units\nFraction of frame area: 0.401\n\n\n\n\n\nIn this last step of geospatial data wrangling, we will extract childcare events that are located within Singapore by using the code chunk below:\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\n\nThe output object combined both the point and polygon feature in one ppp object class as shown below:\n\nsummary(childcareSG_ppp)\n\nMarked planar point pattern:  1545 points\nAverage intensity 2.129929e-06 points per square unit\n\nCoordinates are given to 11 decimal places\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     1545 character character \n\nWindow: polygonal boundary\n50 separate polygons (1 hole)\n                 vertices         area relative.area\npolygon 1 (hole)       30     -7081.18     -9.76e-06\npolygon 2              55     82537.90      1.14e-04\npolygon 3              90    415092.00      5.72e-04\npolygon 4              49     16698.60      2.30e-05\npolygon 5              38     24249.20      3.34e-05\npolygon 6             976  23344700.00      3.22e-02\npolygon 7             721   1927950.00      2.66e-03\npolygon 8            1992   9992170.00      1.38e-02\npolygon 9             330   1118960.00      1.54e-03\npolygon 10            175    925904.00      1.28e-03\npolygon 11            115    928394.00      1.28e-03\npolygon 12             24      6352.39      8.76e-06\npolygon 13            190    202489.00      2.79e-04\npolygon 14             37     10170.50      1.40e-05\npolygon 15             25     16622.70      2.29e-05\npolygon 16             10      2145.07      2.96e-06\npolygon 17             66     16184.10      2.23e-05\npolygon 18           5195 636837000.00      8.78e-01\npolygon 19             76    312332.00      4.31e-04\npolygon 20            627  31891300.00      4.40e-02\npolygon 21             20     32842.00      4.53e-05\npolygon 22             42     55831.70      7.70e-05\npolygon 23             67   1313540.00      1.81e-03\npolygon 24            734   4690930.00      6.47e-03\npolygon 25             16      3194.60      4.40e-06\npolygon 26             15      4872.96      6.72e-06\npolygon 27             15      4464.20      6.15e-06\npolygon 28             14      5466.74      7.54e-06\npolygon 29             37      5261.94      7.25e-06\npolygon 30            111    662927.00      9.14e-04\npolygon 31             69     56313.40      7.76e-05\npolygon 32            143    145139.00      2.00e-04\npolygon 33            397   2488210.00      3.43e-03\npolygon 34             90    115991.00      1.60e-04\npolygon 35             98     62682.90      8.64e-05\npolygon 36            165    338736.00      4.67e-04\npolygon 37            130     94046.50      1.30e-04\npolygon 38             93    430642.00      5.94e-04\npolygon 39             16      2010.46      2.77e-06\npolygon 40            415   3253840.00      4.49e-03\npolygon 41             30     10838.20      1.49e-05\npolygon 42             53     34400.30      4.74e-05\npolygon 43             26      8347.58      1.15e-05\npolygon 44             74     58223.40      8.03e-05\npolygon 45            327   2169210.00      2.99e-03\npolygon 46            177    467446.00      6.44e-04\npolygon 47             46    699702.00      9.65e-04\npolygon 48              6     16841.00      2.32e-05\npolygon 49             13     70087.30      9.66e-05\npolygon 50              4      9459.63      1.30e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 725376000 square units\nFraction of frame area: 0.401\n\n\nPlotting the newly derived childcareSG_ppp:\n\nplot(childcareSG_ppp)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02A.html#first-order-spatial-point-patterns-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02A.html#first-order-spatial-point-patterns-analysis",
    "title": "Hands-on Exercise 2A",
    "section": "",
    "text": "In this section, first-order SPPA will be performed using spatstat package. The hands-on exercise will focus on:\n\nderiving kernel density estimation (KDE) layer for visualising and exploring the intensity of point processes,\nperforming Confirmatory Spatial Point Patterns Analysis by using Nearest Neighbour statistics.\n\n\n\nIn this section, we will compute the kernel density estimation (KDE) of childcare services in Singapore.\n\n\nThe code chunk below computes a kernel density by using the following configurations of density() of spatstat:\n\nbw.diggle() automatic bandwidth selection method. Other recommended methods are bw.CvL(), bw.scott() or bw.ppl().\nThe smoothing kernel used is gaussian, which is the default. Other smoothing methods are: “epanechnikov”, “quartic” or “disc”.\nThe intensity estimate is corrected for edge effect bias by using method described by Jones (1993) and Diggle (2010, equation 18.9). The default is FALSE.\n\n\nkde_childcareSG_bw &lt;- density(childcareSG_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\nThe plot() function of Base R is then used to display the kernel density derived.\n\nplot(kde_childcareSG_bw)\n\n\n\n\n\n\n\n\nThe density values of the output range from 0 to 0.000035 which is way too small to comprehend. This is because the default unit of measurement of svy21 is in meter. As a result, the density values computed is in “number of points per square meter”.\nAs added info, the bandwidth used to compute the kde layer can be retrieved using the code chunk below:\n\nbw &lt;- bw.diggle(childcareSG_ppp)\nbw\n\n   sigma \n298.4095 \n\n\n\n\n\nIn the code chunk below, rescale.ppp() is used to covert the unit of measurement from meter to kilometer:\n\nchildcareSG_ppp.km &lt;- rescale.ppp(childcareSG_ppp, 1000, \"km\")\n\nRe-run density() using the resale data set and plot the output kde map:\n\nkde_childcareSG.bw &lt;- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG.bw)\n\n\n\n\n\n\n\n\nNote that the output image looks identical to the earlier version and that the only change is in the data values (refer to the legend).\n\n\n\n\nBeside bw.diggle(), there are three other spatstat functions can be used to determine the bandwidth, they are: bw.CvL(), bw.scott(), and bw.ppl().\n\n bw.CvL(childcareSG_ppp.km)\n\n   sigma \n4.543278 \n\n\n\nbw.scott(childcareSG_ppp.km)\n\n sigma.x  sigma.y \n2.224898 1.450966 \n\n\n\nbw.ppl(childcareSG_ppp.km)\n\n    sigma \n0.3897114 \n\n\n\nbw.diggle(childcareSG_ppp.km)\n\n    sigma \n0.2984095 \n\n\nBaddeley et. (2016) suggested the use of the bw.ppl() algorithm as from their experience, this method tends to produce more appropriate values when the pattern consisted predominantly of tight clusters. However, if the purpose of thestudy is to detect a single tight cluster in the midst of random noise, the bw.diggle() method seemed to work best.\nThe code chunk beow will be used to compare the output of using bw.diggle and bw.ppl methods:\n\nkde_childcareSG.ppl &lt;- density(childcareSG_ppp.km, \n                               sigma=bw.ppl, \n                               edge=TRUE,\n                               kernel=\"gaussian\")\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"bw.diggle\")\nplot(kde_childcareSG.ppl, main = \"bw.ppl\")\n\n\n\n\n\n\n\n\n\n\n\nBy default, the kernel method used in density.ppp() is gaussian. But there are three other options, namely: Epanechnikov, Quartic and Dics.\nThe code chunk below will be used to compute three more kernel density estimations by using these three kernel function:\n\npar(mfrow=c(2,2))\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"), \n     main=\"Gaussian\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"epanechnikov\"), \n     main=\"Epanechnikov\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"quartic\"), \n     main=\"Quartic\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"disc\"), \n     main=\"Disc\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02A.html#fixed-and-adaptive-kde",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02A.html#fixed-and-adaptive-kde",
    "title": "Hands-on Exercise 2A",
    "section": "",
    "text": "Next, a KDE layer will be computed by defining a bandwidth of 600 meter. In the code chunk below, the sigma value used is 0.6. as the unit of measurement of childcareSG_ppp.km object is in kilometer, hence the 600m is 0.6km.\n\nkde_childcareSG_600 &lt;- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG_600)\n\n\n\n\n\n\n\n\n\n\n\nFixed bandwidth method is very sensitive to highly skew distribution of spatial point patterns over geographical units for example urban versus rural. One way to overcome this problem is by using adaptive bandwidth instead.\nIn this section, adaptive kernel density estimation will be derived using density.adaptive() of spatstat.\n\nkde_childcareSG_adaptive &lt;- adaptive.density(childcareSG_ppp.km, method=\"kernel\")\nplot(kde_childcareSG_adaptive)\n\n\n\n\n\n\n\n\nWe can compare the fixed and adaptive kernel density estimation outputs by using the code chunk below.\n\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"Fixed bandwidth\")\nplot(kde_childcareSG_adaptive, main = \"Adaptive bandwidth\")\n\n\n\n\n\n\n\n\n\n\n\nWe convert the result to be suitable for mapping purposes:\n\ngridded_kde_childcareSG_bw &lt;- as.im(kde_childcareSG.bw)\nplot(gridded_kde_childcareSG_bw)\n\n\n\n\n\n\n\n\n\n\n\nNext, the gridded kernal density objects will be converted into a RasterLayer object by using raster() of raster package:\n\nkde_childcareSG_bw_raster &lt;- raster(kde_childcareSG.bw)\n\nTaking a look at the properties of kde_childcareSG_bw_raster RasterLayer:\n\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : layer \nvalues     : -8.476185e-15, 28.51831  (min, max)\n\n\nNote that the crs property is NA.\n\n\nThe code chunk below will be used to include the CRS information on kde_childcareSG_bw_raster RasterLayer:\n\nprojection(kde_childcareSG_bw_raster) &lt;- CRS(\"+init=EPSG:3414\")\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +units=m +no_defs \nsource     : memory\nnames      : layer \nvalues     : -8.476185e-15, 28.51831  (min, max)\n\n\nThe crs property is now completed.\n\n\n\n\nFinally, we will display the raster in cartographic quality map using tmap package:\n\ntm_shape(kde_childcareSG_bw_raster) + \n  tm_raster(\"layer\", palette = \"viridis\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\n\n\n\n\n\n\n\nNote that the raster values are encoded explicitly onto the raster pixel using the values in “v”” field.\n\n\n\nIn this section, the KDE of childcare at Ponggol, Tampines, Chua Chu Kang and Jurong West planning areas will be compared.\n\n\n\nThe code chunk below will be used to extract the target planning areas.\n\npg &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"PUNGGOL\")\ntm &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"TAMPINES\")\nck &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"CHOA CHU KANG\")\njw &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"JURONG WEST\")\n\nPlotting target planning areas:\n\npar(mfrow=c(2,2))\nplot(pg, main = \"Punggol\")\n\n\n\n\n\n\n\n\n\nplot(tm, main = \"Tampines\")\n\n\n\n\n\n\n\n\n\nplot(ck, main = \"Choa Chu Kang\")\n\n\n\n\n\n\n\n\n\nplot(jw, main = \"Jurong West\")\n\n\n\n\n\n\n\n\n\n\nNow, we will convert these sf objects into owin objects that is required by spatstat:\n\npg_owin = as.owin(pg)\ntm_owin = as.owin(tm)\nck_owin = as.owin(ck)\njw_owin = as.owin(jw)\n\n\n\n\nBy using the code chunk below, we are able to extract childcare that is within the specific region to do our analysis later on.\n\nchildcare_pg_ppp = childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp = childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp = childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp = childcare_ppp_jit[jw_owin]\n\n\nclass(childcare_pg_ppp)\n\n[1] \"ppp\"\n\nclass(childcare_tm_ppp)\n\n[1] \"ppp\"\n\nclass(childcare_ck_ppp)\n\n[1] \"ppp\"\n\nclass(childcare_jw_ppp)\n\n[1] \"ppp\"\n\n\nNext, rescale.ppp() function is used to transform the unit of measurement from metre to kilometre:\n\nchildcare_pg_ppp.km = rescale.ppp(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale.ppp(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale.ppp(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale.ppp(childcare_jw_ppp, 1000, \"km\")\n\nThe code chunk below is used to plot these four study areas and the locations of the childcare centres:\n\npar(mfrow=c(2,2))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below will be used to compute the KDE of these four planning area. bw.diggle method is used to derive the bandwidth of each area:\n\npar(mfrow=c(2,2))\nplot(density(childcare_pg_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tampines\")\nplot(density(childcare_ck_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Choa Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Jurong West\")\n\n\n\n\n\n\n\n\n\n\n\nFor comparison purposes, 250m will be used as the bandwidth:\n\npar(mfrow=c(2,2))\nplot(density(childcare_ck_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Chou Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Jurong West\")\nplot(density(childcare_pg_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tampines\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02A.html#nearest-neighbour-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02A.html#nearest-neighbour-analysis",
    "title": "Hands-on Exercise 2A",
    "section": "",
    "text": "In this section, we will perform the Clark-Evans test of aggregation for a spatial point pattern by using clarkevans.test() of statspat.\nThe test hypotheses are:\nH0 = The distribution of childcare services are randomly distributed.\nH1= The distribution of childcare services are not randomly distributed.\nThe 95% confidence interval will be used.\n\n\n\nclarkevans.test(childcareSG_ppp,\n                correction=\"none\",\n                clipregion=\"sg_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcareSG_ppp\nR = 0.55631, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\n\n\n\nIn the code chunk below, clarkevans.test() of spatstat is used to performs Clark-Evans test of aggregation for childcare centre in Choa Chu Kang planning area:\n\nclarkevans.test(childcare_ck_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_ck_ppp\nR = 0.93999, p-value = 0.3699\nalternative hypothesis: two-sided\n\n\n\n\n\nIn the code chunk below, the similar test is used to analyse the spatial point patterns of childcare centre in Tampines planning area:\n\nclarkevans.test(childcare_tm_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_tm_ppp\nR = 0.78163, p-value = 8.113e-05\nalternative hypothesis: two-sided"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02B.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02B.html",
    "title": "Hands-on Exercise 2B",
    "section": "",
    "text": "Spatial Point Pattern Analysis is the evaluation of the pattern or distribution of a set of points on a surface. The point can be a location of:\n\nevents such as crime, traffic incident and disease onset or\nbusiness services (coffee and fast food outlets) or facilities such as childcare and eldercare\n\nIn this hands-on exercise, we will use appropriate functions of spatstat to discover the spatial point processes of childcare centres in Singapore.\nThe specific questions to be addressed are as follows:\n\nare the childcare centres in Singapore randomly distributed throughout the country?\nif the answer is not, then the next question is where are the locations with higher concentrations of childcare centres?\n\n\n\n\nThree datasets are used in this exercise:\n\nCHILDCARE, a point feature data providing both location and attribute information of childcare centres. It was downloaded from data.gov.sg and is in geojson format.\nMP14_SUBZONE_WEB_PL, a polygon feature data providing information of URA 2014 Master Plan Planning Subzone boundary data. It is in ESRI shapefile format. This data set was also downloaded from data.gov.sg.\nCostalOutline, a polygon feature data showing the national boundary of Singapore. It is provided by SLA and is in ESRI shapefile format.\n\n\n\n\n\nsf for importing, managing, and processing vector-based geospatial data, and\nspatstat, which has a wide range of useful functions for point pattern analysis. In this hands-on exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer\nraster which reads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster). In this hands-on exercise, it will be used to convert image output generate by spatstat into raster format.\ntmap which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using leaflet API.\ntidyverse for performing data science tasks such as importing, wrangling and visualising data.\n\nThe packages are loaded with the following code chunk:\n\npacman::p_load(sf,spatstat,raster,tmap,tidyverse)\n\n\n\n\n\n\nWe will import the geospatial data using st_read() of sf package:\n\nchildcare_sf &lt;- st_read(\"data/geospatial/child-care-services-geojson.geojson\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `child-care-services-geojson' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex02\\data\\geospatial\\child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nChecking whether the EPSG code has been corrected:\n\nst_crs(childcare_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nWhen the input geospatial data is in shapefile format, two arguments are used:\n\ndsn to define the data path\nlayer to provide the shapefile name\n\n\nsg_sf &lt;- st_read(dsn = \"data/geospatial\",\n                 layer = \"CostalOutline\")\n\nReading layer `CostalOutline' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\n\n\nmpsz_sf &lt;- st_read(dsn = \"data/geospatial\",\n                   layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nBefore using these data for analysis, it is important to ensure that they are projected in the same projection system.\n\nst_crs(sg_sf)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\nst_crs(mpsz_sf)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nWhile the sg_sf and mpsz_sf data frames are projected in svy21, the end of the printout above states that the EPSG is 9001 - this is a wrong EPSG code as the correct EPSG code for svy21 should be 3414.\nTo correctly assign the right EPSG code to both data frame, st_set_crs() of sf package is used:\n\nsg_sf3414 &lt;- st_set_crs(sg_sf,3414)\nmpsz_sf3414 &lt;- st_set_crs(mpsz_sf,3414)\n\nChecking whether the EPSG code has been corrected:\n\nst_crs(sg_sf3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\nst_crs(mpsz_sf3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\n\nAfter checking the referencing system of each geospatial dataframe, it is also useful to plot a map to show their spatial patterns. A pin map can be prepared using the code below:\n\ntmap_mode('view')\ntm_shape(childcare_sf)+\n  tm_dots()\n\n\n\n\n\nAll the geospatial layers are within the same map extend which indicates that their referencing system and coordinate values are referred to similar spatial context. This is very important in any geospatial analysis.\n\ntmap_mode('plot')\n\nAt interactive mode, tmap is using leaflet for RAPI. The advantage of an interactive pin map is it allows one to navigate and zoom around the map freely as well as query the information of each simple feature (i.e. the point) by clicking on the. The background of the internet map layer can also be changed. At present, three internet map layers are provided: ESRI.WorldGrayCanvas, OpenStreetMap, and ESRI.WorldTopoMap. The default is ESRI.WorldGrayCanvas.\n\n\n\n\n\n\nTip\n\n\n\nIt is always important to switch back to plot mode after the interactive map as each interactive mode will consume a connection.\nIt is important to avoid displaying excessive number of interactive maps i.e. not more than 10, in one RMarkdown document when publishing on Netlify.\n\n\n\n\n\n\nWhile simple feature data frame is gaining popularity against Spatial* classes, many geospatial analysis packages require the input geospatial data in to be in Spatial* classes. In this section, simple feature data frame will be converted to Spatial* class.\n\n\nThe code chunk below as.ppp() function of spatstat to convert the spatial data into spatstat’s ppp object format.\n\nchildcare_ppp &lt;- as.ppp(childcare_sf)\nchildcare_ppp\n\nMarked planar point pattern: 1545 points\nmarks are of storage type  'character'\nwindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n\n\nPlotting childcare_ppp:\n\nplot(childcare_ppp)\n\n\n\n\n\n\n\n\nTaking a look at the summary statistics of the ppp object:\n\nsummary(childcare_ppp)\n\nMarked planar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\nCoordinates are given to 11 decimal places\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     1545 character character \n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units\n\n\n\n\n\n\n\n\nNote\n\n\n\nIn spatial point patterns analysis, a significant issue is the presence of duplicates. The statistical methodology used for spatial point patterns processes is based largely on the assumption that process is simple, that is, that the points cannot be coincidental.\n\n\n\n\n\nWe can check the duplication in a ppp object using the code chunk below:\n\nany(duplicated(childcare_ppp))\n\n[1] FALSE\n\n\nTo count the number of coincidence points, the multiplicity() function is used, as shown in the code chunk below.\n\nmultiplicity(childcare_ppp)\n\n   [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [75] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [112] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [149] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [186] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [223] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [260] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [297] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [334] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [371] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [408] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [445] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [482] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [519] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [556] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [593] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [630] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [667] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [704] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [741] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [778] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [815] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [852] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [889] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [926] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [963] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1000] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1037] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1074] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1111] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1148] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1185] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1222] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1259] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1296] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1333] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1370] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1407] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1444] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1481] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1518] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n\n\nTo know how many locations have more than one point event, the code chunk below is used:\n\nsum(multiplicity(childcare_ppp) &gt; 1)\n\n[1] 0\n\n\n\ntmap_mode('view')\ntm_shape(childcare_sf) +\n  tm_dots(alpha=0.4, \n          size=0.05)\n\n\n\n\n\n\ntmap_mode('plot')\n\nIn the event of duplicate points, there are 3 ways to overcome the issue:\n\nDelete the duplicates - easiest way but it will also meant that some useful point events will be lost\nJittering - this method will add a small perturbation to the duplicate points so that they do not occupy the exact same space\nMake each point “unique” and attach the duplicates of the points to the patterns as marks, as attributes of the points. Analytical techniques that take into account these marks would be required.\n\nThe code chunk below implements the jittering approach:\n\nchildcare_ppp_jit &lt;- rjitter(childcare_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n\nCheck for duplicated points:\n\nany(duplicated(childcare_ppp_jit))\n\n[1] FALSE\n\n\n\n\n\nWhen analysing spatial point patterns, it is a good practice to confine the analysis within a geographical area like Singapore’s boundary. In spatstat, an object called owin is specially designed to represent this polygonal region.\nThe code chunk below is used to covert sg SpatialPolygon object into owin object of spatstat.\n\nsg_owin &lt;- as.owin(sg_sf)\n\nThe ouput object can be displayed by using plot() function:\n\nplot(sg_owin)\n\n\n\n\n\n\n\n\n\nsummary(sg_owin)\n\nWindow: polygonal boundary\n50 separate polygons (1 hole)\n                 vertices         area relative.area\npolygon 1 (hole)       30     -7081.18     -9.76e-06\npolygon 2              55     82537.90      1.14e-04\npolygon 3              90    415092.00      5.72e-04\npolygon 4              49     16698.60      2.30e-05\npolygon 5              38     24249.20      3.34e-05\npolygon 6             976  23344700.00      3.22e-02\npolygon 7             721   1927950.00      2.66e-03\npolygon 8            1992   9992170.00      1.38e-02\npolygon 9             330   1118960.00      1.54e-03\npolygon 10            175    925904.00      1.28e-03\npolygon 11            115    928394.00      1.28e-03\npolygon 12             24      6352.39      8.76e-06\npolygon 13            190    202489.00      2.79e-04\npolygon 14             37     10170.50      1.40e-05\npolygon 15             25     16622.70      2.29e-05\npolygon 16             10      2145.07      2.96e-06\npolygon 17             66     16184.10      2.23e-05\npolygon 18           5195 636837000.00      8.78e-01\npolygon 19             76    312332.00      4.31e-04\npolygon 20            627  31891300.00      4.40e-02\npolygon 21             20     32842.00      4.53e-05\npolygon 22             42     55831.70      7.70e-05\npolygon 23             67   1313540.00      1.81e-03\npolygon 24            734   4690930.00      6.47e-03\npolygon 25             16      3194.60      4.40e-06\npolygon 26             15      4872.96      6.72e-06\npolygon 27             15      4464.20      6.15e-06\npolygon 28             14      5466.74      7.54e-06\npolygon 29             37      5261.94      7.25e-06\npolygon 30            111    662927.00      9.14e-04\npolygon 31             69     56313.40      7.76e-05\npolygon 32            143    145139.00      2.00e-04\npolygon 33            397   2488210.00      3.43e-03\npolygon 34             90    115991.00      1.60e-04\npolygon 35             98     62682.90      8.64e-05\npolygon 36            165    338736.00      4.67e-04\npolygon 37            130     94046.50      1.30e-04\npolygon 38             93    430642.00      5.94e-04\npolygon 39             16      2010.46      2.77e-06\npolygon 40            415   3253840.00      4.49e-03\npolygon 41             30     10838.20      1.49e-05\npolygon 42             53     34400.30      4.74e-05\npolygon 43             26      8347.58      1.15e-05\npolygon 44             74     58223.40      8.03e-05\npolygon 45            327   2169210.00      2.99e-03\npolygon 46            177    467446.00      6.44e-04\npolygon 47             46    699702.00      9.65e-04\npolygon 48              6     16841.00      2.32e-05\npolygon 49             13     70087.30      9.66e-05\npolygon 50              4      9459.63      1.30e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 725376000 square units\nFraction of frame area: 0.401\n\n\n\n\n\nIn this last step of geospatial data wrangling, we will extract childcare events that are located within Singapore by using the code chunk below:\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\n\nThe output object combined both the point and polygon feature in one ppp object class as shown below:\n\nsummary(childcareSG_ppp)\n\nMarked planar point pattern:  1545 points\nAverage intensity 2.129929e-06 points per square unit\n\nCoordinates are given to 11 decimal places\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     1545 character character \n\nWindow: polygonal boundary\n50 separate polygons (1 hole)\n                 vertices         area relative.area\npolygon 1 (hole)       30     -7081.18     -9.76e-06\npolygon 2              55     82537.90      1.14e-04\npolygon 3              90    415092.00      5.72e-04\npolygon 4              49     16698.60      2.30e-05\npolygon 5              38     24249.20      3.34e-05\npolygon 6             976  23344700.00      3.22e-02\npolygon 7             721   1927950.00      2.66e-03\npolygon 8            1992   9992170.00      1.38e-02\npolygon 9             330   1118960.00      1.54e-03\npolygon 10            175    925904.00      1.28e-03\npolygon 11            115    928394.00      1.28e-03\npolygon 12             24      6352.39      8.76e-06\npolygon 13            190    202489.00      2.79e-04\npolygon 14             37     10170.50      1.40e-05\npolygon 15             25     16622.70      2.29e-05\npolygon 16             10      2145.07      2.96e-06\npolygon 17             66     16184.10      2.23e-05\npolygon 18           5195 636837000.00      8.78e-01\npolygon 19             76    312332.00      4.31e-04\npolygon 20            627  31891300.00      4.40e-02\npolygon 21             20     32842.00      4.53e-05\npolygon 22             42     55831.70      7.70e-05\npolygon 23             67   1313540.00      1.81e-03\npolygon 24            734   4690930.00      6.47e-03\npolygon 25             16      3194.60      4.40e-06\npolygon 26             15      4872.96      6.72e-06\npolygon 27             15      4464.20      6.15e-06\npolygon 28             14      5466.74      7.54e-06\npolygon 29             37      5261.94      7.25e-06\npolygon 30            111    662927.00      9.14e-04\npolygon 31             69     56313.40      7.76e-05\npolygon 32            143    145139.00      2.00e-04\npolygon 33            397   2488210.00      3.43e-03\npolygon 34             90    115991.00      1.60e-04\npolygon 35             98     62682.90      8.64e-05\npolygon 36            165    338736.00      4.67e-04\npolygon 37            130     94046.50      1.30e-04\npolygon 38             93    430642.00      5.94e-04\npolygon 39             16      2010.46      2.77e-06\npolygon 40            415   3253840.00      4.49e-03\npolygon 41             30     10838.20      1.49e-05\npolygon 42             53     34400.30      4.74e-05\npolygon 43             26      8347.58      1.15e-05\npolygon 44             74     58223.40      8.03e-05\npolygon 45            327   2169210.00      2.99e-03\npolygon 46            177    467446.00      6.44e-04\npolygon 47             46    699702.00      9.65e-04\npolygon 48              6     16841.00      2.32e-05\npolygon 49             13     70087.30      9.66e-05\npolygon 50              4      9459.63      1.30e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 725376000 square units\nFraction of frame area: 0.401\n\n\nPlotting the newly derived childcareSG_ppp:\n\nplot(childcareSG_ppp)\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below will be used to extract the target planning areas.\n\npg &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"PUNGGOL\")\ntm &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"TAMPINES\")\nck &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"CHOA CHU KANG\")\njw &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"JURONG WEST\")\n\nPlotting target planning areas:\n\npar(mfrow=c(2,2))\nplot(pg, main = \"Punggol\")\n\n\n\n\n\n\n\n\n\nplot(tm, main = \"Tampines\")\n\n\n\n\n\n\n\n\n\nplot(ck, main = \"Choa Chu Kang\")\n\n\n\n\n\n\n\n\n\nplot(jw, main = \"Jurong West\")\n\n\n\n\n\n\n\n\n\n\nNow, we will convert these sf objects into owin objects that is required by spatstat:\n\npg_owin = as.owin(pg)\ntm_owin = as.owin(tm)\nck_owin = as.owin(ck)\njw_owin = as.owin(jw)\n\n\n\n\nBy using the code chunk below, we are able to extract childcare that is within the specific region to do our analysis later on.\n\nchildcare_pg_ppp = childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp = childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp = childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp = childcare_ppp_jit[jw_owin]\n\nNext, rescale.ppp() function is used to transform the unit of measurement from metre to kilometre:\n\nchildcare_pg_ppp.km = rescale.ppp(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale.ppp(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale.ppp(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale.ppp(childcare_jw_ppp, 1000, \"km\")\n\nThe code chunk below is used to plot these four study areas and the locations of the childcare centres:\n\npar(mfrow=c(2,2))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe G function measures the distribution of the distances from an arbitrary event to its nearest event. In this section, we will compute G-function estimation using Gest() of spatstat package. A monte carlo simulation test will also be performed using envelope() of spatstat package.\n\n\n\n\nThe code chunk below is used to compute G-function using Gest() of spatat package.\n\nG_CK = Gest(childcare_ck_ppp, correction = \"border\")\nplot(G_CK, xlim=c(0,500))\n\n\n\n\n\n\n\n\n\n\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nH0 = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with G-function:\n\nG_CK.csr &lt;- envelope(childcare_ck_ppp, Gest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(G_CK.csr)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG_tm = Gest(childcare_tm_ppp, correction = \"best\")\nplot(G_tm)\n\n\n\n\n\n\n\n\n\n\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nH0 = The distribution of childcare services at Tampines are randomly distributed.\nH1= The distribution of childcare services at Tampines are not randomly distributed.\nThe null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.\nThe code chunk below is used to perform the hypothesis testing:\n\nG_tm.csr &lt;- envelope(childcare_tm_ppp, Gest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(G_tm.csr)\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe F function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape. In this section, we will compute the F-function estimation by using Fest() of spatstat package. A monte carlo simulation test will also be performed using envelope() of spatstat package.\n\n\n\n\nThe code chunk below is used to compute F-function using Fest() of spatat package.\n\nF_CK = Fest(childcare_ck_ppp)\nplot(F_CK)\n\n\n\n\n\n\n\n\n\n\n\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nH0 = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with F-function:\n\nF_CK.csr &lt;- envelope(childcare_ck_ppp, Fest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(F_CK.csr)\n\n\n\n\n\n\n\n\n\n\n\n\n\nMonte Carlo test with F-function:\n\nF_tm = Fest(childcare_tm_ppp, correction = \"best\")\nplot(F_tm)\n\n\n\n\n\n\n\n\n\n\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nH0 = The distribution of childcare services at Tampines are randomly distributed.\nH1= The distribution of childcare services at Tampines are not randomly distributed.\nThe null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.\nThe code chunk below is used to perform the hypothesis testing:\n\nF_tm.csr &lt;- envelope(childcare_tm_ppp, Fest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(F_tm.csr)\n\n\n\n\n\n\n\n\n\n\n\n\n\nK-function measures the number of events found up to a given distance of any particular event. In this section, we will compute K-function estimates by using Kest() of spatstat package. We will also perform monte carlo simulation test using envelope() of spatstat package.\n\n\n\n\n\nK_ck = Kest(childcare_ck_ppp, correction = \"Ripley\")\nplot(K_ck, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n\n\n\n\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nH0 = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nThe code chunk below is used to perform the hypothesis testing:\n\nK_ck.csr &lt;- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(K_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nK_tm = Kest(childcare_tm_ppp, correction = \"Ripley\")\nplot(K_tm, . -r ~ r, \n     ylab= \"K(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\n\n\n\n\n\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nH0 = The distribution of childcare services at Tampines are randomly distributed.\nH1= The distribution of childcare services at Tampines are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nThe code chunk below is used to perform the hypothesis testing:\n\nK_tm.csr &lt;- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(K_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"K(d)-r\", xlim=c(0,500))\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn this section, we will compute L-function estimation by using Lest() of spatstat package. We will also perform monte carlo simulation test using envelope() of spatstat package.\n\n\n\n\n\nL_ck = Lest(childcare_ck_ppp, correction = \"Ripley\")\nplot(L_ck, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n\n\n\n\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nH0 = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nThe null hypothesis will be rejected if p-value if smaller than alpha value of 0.001.\nThe code chunk below is used to perform the hypothesis testing.\n\nL_ck.csr &lt;- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(L_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nL_tm = Lest(childcare_tm_ppp, correction = \"Ripley\")\nplot(L_tm, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\n\n\n\n\n\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nH0 = The distribution of childcare services at Tampines are randomly distributed.\nH1= The distribution of childcare services at Tampines are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nThe code chunk below will be used to perform the hypothesis testing.\n\nL_tm.csr &lt;- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(L_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"L(d)-r\", xlim=c(0,500))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02B.html#learning-outcomes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02B.html#learning-outcomes",
    "title": "Hands-on Exercise 2B",
    "section": "",
    "text": "Spatial Point Pattern Analysis is the evaluation of the pattern or distribution of a set of points on a surface. The point can be a location of:\n\nevents such as crime, traffic incident and disease onset or\nbusiness services (coffee and fast food outlets) or facilities such as childcare and eldercare\n\nIn this hands-on exercise, we will use appropriate functions of spatstat to discover the spatial point processes of childcare centres in Singapore.\nThe specific questions to be addressed are as follows:\n\nare the childcare centres in Singapore randomly distributed throughout the country?\nif the answer is not, then the next question is where are the locations with higher concentrations of childcare centres?"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02B.html#data-acquisition",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02B.html#data-acquisition",
    "title": "Hands-on Exercise 2B",
    "section": "",
    "text": "Three datasets are used in this exercise:\n\nCHILDCARE, a point feature data providing both location and attribute information of childcare centres. It was downloaded from data.gov.sg and is in geojson format.\nMP14_SUBZONE_WEB_PL, a polygon feature data providing information of URA 2014 Master Plan Planning Subzone boundary data. It is in ESRI shapefile format. This data set was also downloaded from data.gov.sg.\nCostalOutline, a polygon feature data showing the national boundary of Singapore. It is provided by SLA and is in ESRI shapefile format."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02B.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02B.html#installing-and-launching-r-packages",
    "title": "Hands-on Exercise 2B",
    "section": "",
    "text": "sf for importing, managing, and processing vector-based geospatial data, and\nspatstat, which has a wide range of useful functions for point pattern analysis. In this hands-on exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer\nraster which reads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster). In this hands-on exercise, it will be used to convert image output generate by spatstat into raster format.\ntmap which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using leaflet API.\ntidyverse for performing data science tasks such as importing, wrangling and visualising data.\n\nThe packages are loaded with the following code chunk:\n\npacman::p_load(sf,spatstat,raster,tmap,tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02B.html#spatial-data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02B.html#spatial-data-wrangling",
    "title": "Hands-on Exercise 2B",
    "section": "",
    "text": "We will import the geospatial data using st_read() of sf package:\n\nchildcare_sf &lt;- st_read(\"data/geospatial/child-care-services-geojson.geojson\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `child-care-services-geojson' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex02\\data\\geospatial\\child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nChecking whether the EPSG code has been corrected:\n\nst_crs(childcare_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nWhen the input geospatial data is in shapefile format, two arguments are used:\n\ndsn to define the data path\nlayer to provide the shapefile name\n\n\nsg_sf &lt;- st_read(dsn = \"data/geospatial\",\n                 layer = \"CostalOutline\")\n\nReading layer `CostalOutline' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\n\n\nmpsz_sf &lt;- st_read(dsn = \"data/geospatial\",\n                   layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nBefore using these data for analysis, it is important to ensure that they are projected in the same projection system.\n\nst_crs(sg_sf)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\nst_crs(mpsz_sf)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nWhile the sg_sf and mpsz_sf data frames are projected in svy21, the end of the printout above states that the EPSG is 9001 - this is a wrong EPSG code as the correct EPSG code for svy21 should be 3414.\nTo correctly assign the right EPSG code to both data frame, st_set_crs() of sf package is used:\n\nsg_sf3414 &lt;- st_set_crs(sg_sf,3414)\nmpsz_sf3414 &lt;- st_set_crs(mpsz_sf,3414)\n\nChecking whether the EPSG code has been corrected:\n\nst_crs(sg_sf3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\nst_crs(mpsz_sf3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\n\nAfter checking the referencing system of each geospatial dataframe, it is also useful to plot a map to show their spatial patterns. A pin map can be prepared using the code below:\n\ntmap_mode('view')\ntm_shape(childcare_sf)+\n  tm_dots()\n\n\n\n\n\nAll the geospatial layers are within the same map extend which indicates that their referencing system and coordinate values are referred to similar spatial context. This is very important in any geospatial analysis.\n\ntmap_mode('plot')\n\nAt interactive mode, tmap is using leaflet for RAPI. The advantage of an interactive pin map is it allows one to navigate and zoom around the map freely as well as query the information of each simple feature (i.e. the point) by clicking on the. The background of the internet map layer can also be changed. At present, three internet map layers are provided: ESRI.WorldGrayCanvas, OpenStreetMap, and ESRI.WorldTopoMap. The default is ESRI.WorldGrayCanvas.\n\n\n\n\n\n\nTip\n\n\n\nIt is always important to switch back to plot mode after the interactive map as each interactive mode will consume a connection.\nIt is important to avoid displaying excessive number of interactive maps i.e. not more than 10, in one RMarkdown document when publishing on Netlify."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02B.html#geospatial-data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02B.html#geospatial-data-wrangling",
    "title": "Hands-on Exercise 2B",
    "section": "",
    "text": "While simple feature data frame is gaining popularity against Spatial* classes, many geospatial analysis packages require the input geospatial data in to be in Spatial* classes. In this section, simple feature data frame will be converted to Spatial* class.\n\n\nThe code chunk below as.ppp() function of spatstat to convert the spatial data into spatstat’s ppp object format.\n\nchildcare_ppp &lt;- as.ppp(childcare_sf)\nchildcare_ppp\n\nMarked planar point pattern: 1545 points\nmarks are of storage type  'character'\nwindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n\n\nPlotting childcare_ppp:\n\nplot(childcare_ppp)\n\n\n\n\n\n\n\n\nTaking a look at the summary statistics of the ppp object:\n\nsummary(childcare_ppp)\n\nMarked planar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\nCoordinates are given to 11 decimal places\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     1545 character character \n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units\n\n\n\n\n\n\n\n\nNote\n\n\n\nIn spatial point patterns analysis, a significant issue is the presence of duplicates. The statistical methodology used for spatial point patterns processes is based largely on the assumption that process is simple, that is, that the points cannot be coincidental.\n\n\n\n\n\nWe can check the duplication in a ppp object using the code chunk below:\n\nany(duplicated(childcare_ppp))\n\n[1] FALSE\n\n\nTo count the number of coincidence points, the multiplicity() function is used, as shown in the code chunk below.\n\nmultiplicity(childcare_ppp)\n\n   [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [75] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [112] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [149] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [186] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [223] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [260] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [297] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [334] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [371] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [408] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [445] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [482] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [519] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [556] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [593] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [630] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [667] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [704] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [741] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [778] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [815] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [852] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [889] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [926] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [963] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1000] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1037] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1074] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1111] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1148] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1185] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1222] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1259] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1296] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1333] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1370] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1407] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1444] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1481] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1518] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n\n\nTo know how many locations have more than one point event, the code chunk below is used:\n\nsum(multiplicity(childcare_ppp) &gt; 1)\n\n[1] 0\n\n\n\ntmap_mode('view')\ntm_shape(childcare_sf) +\n  tm_dots(alpha=0.4, \n          size=0.05)\n\n\n\n\n\n\ntmap_mode('plot')\n\nIn the event of duplicate points, there are 3 ways to overcome the issue:\n\nDelete the duplicates - easiest way but it will also meant that some useful point events will be lost\nJittering - this method will add a small perturbation to the duplicate points so that they do not occupy the exact same space\nMake each point “unique” and attach the duplicates of the points to the patterns as marks, as attributes of the points. Analytical techniques that take into account these marks would be required.\n\nThe code chunk below implements the jittering approach:\n\nchildcare_ppp_jit &lt;- rjitter(childcare_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n\nCheck for duplicated points:\n\nany(duplicated(childcare_ppp_jit))\n\n[1] FALSE\n\n\n\n\n\nWhen analysing spatial point patterns, it is a good practice to confine the analysis within a geographical area like Singapore’s boundary. In spatstat, an object called owin is specially designed to represent this polygonal region.\nThe code chunk below is used to covert sg SpatialPolygon object into owin object of spatstat.\n\nsg_owin &lt;- as.owin(sg_sf)\n\nThe ouput object can be displayed by using plot() function:\n\nplot(sg_owin)\n\n\n\n\n\n\n\n\n\nsummary(sg_owin)\n\nWindow: polygonal boundary\n50 separate polygons (1 hole)\n                 vertices         area relative.area\npolygon 1 (hole)       30     -7081.18     -9.76e-06\npolygon 2              55     82537.90      1.14e-04\npolygon 3              90    415092.00      5.72e-04\npolygon 4              49     16698.60      2.30e-05\npolygon 5              38     24249.20      3.34e-05\npolygon 6             976  23344700.00      3.22e-02\npolygon 7             721   1927950.00      2.66e-03\npolygon 8            1992   9992170.00      1.38e-02\npolygon 9             330   1118960.00      1.54e-03\npolygon 10            175    925904.00      1.28e-03\npolygon 11            115    928394.00      1.28e-03\npolygon 12             24      6352.39      8.76e-06\npolygon 13            190    202489.00      2.79e-04\npolygon 14             37     10170.50      1.40e-05\npolygon 15             25     16622.70      2.29e-05\npolygon 16             10      2145.07      2.96e-06\npolygon 17             66     16184.10      2.23e-05\npolygon 18           5195 636837000.00      8.78e-01\npolygon 19             76    312332.00      4.31e-04\npolygon 20            627  31891300.00      4.40e-02\npolygon 21             20     32842.00      4.53e-05\npolygon 22             42     55831.70      7.70e-05\npolygon 23             67   1313540.00      1.81e-03\npolygon 24            734   4690930.00      6.47e-03\npolygon 25             16      3194.60      4.40e-06\npolygon 26             15      4872.96      6.72e-06\npolygon 27             15      4464.20      6.15e-06\npolygon 28             14      5466.74      7.54e-06\npolygon 29             37      5261.94      7.25e-06\npolygon 30            111    662927.00      9.14e-04\npolygon 31             69     56313.40      7.76e-05\npolygon 32            143    145139.00      2.00e-04\npolygon 33            397   2488210.00      3.43e-03\npolygon 34             90    115991.00      1.60e-04\npolygon 35             98     62682.90      8.64e-05\npolygon 36            165    338736.00      4.67e-04\npolygon 37            130     94046.50      1.30e-04\npolygon 38             93    430642.00      5.94e-04\npolygon 39             16      2010.46      2.77e-06\npolygon 40            415   3253840.00      4.49e-03\npolygon 41             30     10838.20      1.49e-05\npolygon 42             53     34400.30      4.74e-05\npolygon 43             26      8347.58      1.15e-05\npolygon 44             74     58223.40      8.03e-05\npolygon 45            327   2169210.00      2.99e-03\npolygon 46            177    467446.00      6.44e-04\npolygon 47             46    699702.00      9.65e-04\npolygon 48              6     16841.00      2.32e-05\npolygon 49             13     70087.30      9.66e-05\npolygon 50              4      9459.63      1.30e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 725376000 square units\nFraction of frame area: 0.401\n\n\n\n\n\nIn this last step of geospatial data wrangling, we will extract childcare events that are located within Singapore by using the code chunk below:\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\n\nThe output object combined both the point and polygon feature in one ppp object class as shown below:\n\nsummary(childcareSG_ppp)\n\nMarked planar point pattern:  1545 points\nAverage intensity 2.129929e-06 points per square unit\n\nCoordinates are given to 11 decimal places\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     1545 character character \n\nWindow: polygonal boundary\n50 separate polygons (1 hole)\n                 vertices         area relative.area\npolygon 1 (hole)       30     -7081.18     -9.76e-06\npolygon 2              55     82537.90      1.14e-04\npolygon 3              90    415092.00      5.72e-04\npolygon 4              49     16698.60      2.30e-05\npolygon 5              38     24249.20      3.34e-05\npolygon 6             976  23344700.00      3.22e-02\npolygon 7             721   1927950.00      2.66e-03\npolygon 8            1992   9992170.00      1.38e-02\npolygon 9             330   1118960.00      1.54e-03\npolygon 10            175    925904.00      1.28e-03\npolygon 11            115    928394.00      1.28e-03\npolygon 12             24      6352.39      8.76e-06\npolygon 13            190    202489.00      2.79e-04\npolygon 14             37     10170.50      1.40e-05\npolygon 15             25     16622.70      2.29e-05\npolygon 16             10      2145.07      2.96e-06\npolygon 17             66     16184.10      2.23e-05\npolygon 18           5195 636837000.00      8.78e-01\npolygon 19             76    312332.00      4.31e-04\npolygon 20            627  31891300.00      4.40e-02\npolygon 21             20     32842.00      4.53e-05\npolygon 22             42     55831.70      7.70e-05\npolygon 23             67   1313540.00      1.81e-03\npolygon 24            734   4690930.00      6.47e-03\npolygon 25             16      3194.60      4.40e-06\npolygon 26             15      4872.96      6.72e-06\npolygon 27             15      4464.20      6.15e-06\npolygon 28             14      5466.74      7.54e-06\npolygon 29             37      5261.94      7.25e-06\npolygon 30            111    662927.00      9.14e-04\npolygon 31             69     56313.40      7.76e-05\npolygon 32            143    145139.00      2.00e-04\npolygon 33            397   2488210.00      3.43e-03\npolygon 34             90    115991.00      1.60e-04\npolygon 35             98     62682.90      8.64e-05\npolygon 36            165    338736.00      4.67e-04\npolygon 37            130     94046.50      1.30e-04\npolygon 38             93    430642.00      5.94e-04\npolygon 39             16      2010.46      2.77e-06\npolygon 40            415   3253840.00      4.49e-03\npolygon 41             30     10838.20      1.49e-05\npolygon 42             53     34400.30      4.74e-05\npolygon 43             26      8347.58      1.15e-05\npolygon 44             74     58223.40      8.03e-05\npolygon 45            327   2169210.00      2.99e-03\npolygon 46            177    467446.00      6.44e-04\npolygon 47             46    699702.00      9.65e-04\npolygon 48              6     16841.00      2.32e-05\npolygon 49             13     70087.30      9.66e-05\npolygon 50              4      9459.63      1.30e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 725376000 square units\nFraction of frame area: 0.401\n\n\nPlotting the newly derived childcareSG_ppp:\n\nplot(childcareSG_ppp)\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below will be used to extract the target planning areas.\n\npg &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"PUNGGOL\")\ntm &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"TAMPINES\")\nck &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"CHOA CHU KANG\")\njw &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"JURONG WEST\")\n\nPlotting target planning areas:\n\npar(mfrow=c(2,2))\nplot(pg, main = \"Punggol\")\n\n\n\n\n\n\n\n\n\nplot(tm, main = \"Tampines\")\n\n\n\n\n\n\n\n\n\nplot(ck, main = \"Choa Chu Kang\")\n\n\n\n\n\n\n\n\n\nplot(jw, main = \"Jurong West\")\n\n\n\n\n\n\n\n\n\n\nNow, we will convert these sf objects into owin objects that is required by spatstat:\n\npg_owin = as.owin(pg)\ntm_owin = as.owin(tm)\nck_owin = as.owin(ck)\njw_owin = as.owin(jw)\n\n\n\n\nBy using the code chunk below, we are able to extract childcare that is within the specific region to do our analysis later on.\n\nchildcare_pg_ppp = childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp = childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp = childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp = childcare_ppp_jit[jw_owin]\n\nNext, rescale.ppp() function is used to transform the unit of measurement from metre to kilometre:\n\nchildcare_pg_ppp.km = rescale.ppp(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale.ppp(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale.ppp(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale.ppp(childcare_jw_ppp, 1000, \"km\")\n\nThe code chunk below is used to plot these four study areas and the locations of the childcare centres:\n\npar(mfrow=c(2,2))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02B.html#analysing-spatial-point-process-using-g-function",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02B.html#analysing-spatial-point-process-using-g-function",
    "title": "Hands-on Exercise 2B",
    "section": "",
    "text": "The G function measures the distribution of the distances from an arbitrary event to its nearest event. In this section, we will compute G-function estimation using Gest() of spatstat package. A monte carlo simulation test will also be performed using envelope() of spatstat package.\n\n\n\n\nThe code chunk below is used to compute G-function using Gest() of spatat package.\n\nG_CK = Gest(childcare_ck_ppp, correction = \"border\")\nplot(G_CK, xlim=c(0,500))\n\n\n\n\n\n\n\n\n\n\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nH0 = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with G-function:\n\nG_CK.csr &lt;- envelope(childcare_ck_ppp, Gest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(G_CK.csr)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG_tm = Gest(childcare_tm_ppp, correction = \"best\")\nplot(G_tm)\n\n\n\n\n\n\n\n\n\n\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nH0 = The distribution of childcare services at Tampines are randomly distributed.\nH1= The distribution of childcare services at Tampines are not randomly distributed.\nThe null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.\nThe code chunk below is used to perform the hypothesis testing:\n\nG_tm.csr &lt;- envelope(childcare_tm_ppp, Gest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(G_tm.csr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02B.html#analysing-spatial-point-process-using-f-function",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02B.html#analysing-spatial-point-process-using-f-function",
    "title": "Hands-on Exercise 2B",
    "section": "",
    "text": "The F function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape. In this section, we will compute the F-function estimation by using Fest() of spatstat package. A monte carlo simulation test will also be performed using envelope() of spatstat package.\n\n\n\n\nThe code chunk below is used to compute F-function using Fest() of spatat package.\n\nF_CK = Fest(childcare_ck_ppp)\nplot(F_CK)\n\n\n\n\n\n\n\n\n\n\n\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nH0 = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with F-function:\n\nF_CK.csr &lt;- envelope(childcare_ck_ppp, Fest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(F_CK.csr)\n\n\n\n\n\n\n\n\n\n\n\n\n\nMonte Carlo test with F-function:\n\nF_tm = Fest(childcare_tm_ppp, correction = \"best\")\nplot(F_tm)\n\n\n\n\n\n\n\n\n\n\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nH0 = The distribution of childcare services at Tampines are randomly distributed.\nH1= The distribution of childcare services at Tampines are not randomly distributed.\nThe null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.\nThe code chunk below is used to perform the hypothesis testing:\n\nF_tm.csr &lt;- envelope(childcare_tm_ppp, Fest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(F_tm.csr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02B.html#analysing-spatial-point-process-using-k-function",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02B.html#analysing-spatial-point-process-using-k-function",
    "title": "Hands-on Exercise 2B",
    "section": "",
    "text": "K-function measures the number of events found up to a given distance of any particular event. In this section, we will compute K-function estimates by using Kest() of spatstat package. We will also perform monte carlo simulation test using envelope() of spatstat package.\n\n\n\n\n\nK_ck = Kest(childcare_ck_ppp, correction = \"Ripley\")\nplot(K_ck, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n\n\n\n\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nH0 = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nThe code chunk below is used to perform the hypothesis testing:\n\nK_ck.csr &lt;- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(K_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nK_tm = Kest(childcare_tm_ppp, correction = \"Ripley\")\nplot(K_tm, . -r ~ r, \n     ylab= \"K(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\n\n\n\n\n\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nH0 = The distribution of childcare services at Tampines are randomly distributed.\nH1= The distribution of childcare services at Tampines are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nThe code chunk below is used to perform the hypothesis testing:\n\nK_tm.csr &lt;- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(K_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"K(d)-r\", xlim=c(0,500))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02B.html#analysing-spatial-point-process-using-l-function",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02B.html#analysing-spatial-point-process-using-l-function",
    "title": "Hands-on Exercise 2B",
    "section": "",
    "text": "In this section, we will compute L-function estimation by using Lest() of spatstat package. We will also perform monte carlo simulation test using envelope() of spatstat package.\n\n\n\n\n\nL_ck = Lest(childcare_ck_ppp, correction = \"Ripley\")\nplot(L_ck, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n\n\n\n\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nH0 = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nThe null hypothesis will be rejected if p-value if smaller than alpha value of 0.001.\nThe code chunk below is used to perform the hypothesis testing.\n\nL_ck.csr &lt;- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(L_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nL_tm = Lest(childcare_tm_ppp, correction = \"Ripley\")\nplot(L_tm, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\n\n\n\n\n\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nH0 = The distribution of childcare services at Tampines are randomly distributed.\nH1= The distribution of childcare services at Tampines are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nThe code chunk below will be used to perform the hypothesis testing.\n\nL_tm.csr &lt;- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(L_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"L(d)-r\", xlim=c(0,500))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "title": "In-class Exercise 2",
    "section": "",
    "text": "sf for importing, managing, and processing vector-based geospatial data, and\nspatstat, which has a wide range of useful functions for point pattern analysis. In this hands-on exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer\nraster which reads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster). In this hands-on exercise, it will be used to convert image output generate by spatstat into raster format.\nmaptools which provides a set of tools for manipulating geographic data. In this hands-on exercise, we mainly use it to convert Spatial objects into ppp format of spatstat.\ntmap which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using leaflet API.\ntidyverse for performing data science tasks such as importing, wrangling and visualising data.\n\nThe packages are loaded with the following code chunk:\n\npacman::p_load(sf,spatstat,raster,tmap,tidyverse)\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nmaptools is retired and binary is removed from CRAN, however it can be downloaded from Posit Public Package Manager (this site is useful for Shiny) snapshots by using the code chunk below. Alternatively, can utilise the CRAN retired website and key in the latest version.\n\ninstall.packages(\"maptools\",\n                 repos = \"https://packagemanager.posit.co/cran/2023-10-13\")\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nutilise #| eval: false after installing the packages to avoid the code from re-running everything the page is rendered\n\n\n\n\n\n\nsf is a full programmable GIS software - does all the GIS work\n\n\n\n\nThe code chunk below st_union() is used to derive the coastal outline of sf tibble data.frame\n\n\nsg_sf &lt;- mpsz_sf %&gt;%\n  st_union()\n\n\nplot(sg_sf)\n\n\n\n\n\nspatstat has several sub-packages, the notable ones:\n\nspatstat.geom: if its sp object - use ppp or owin, if its sf object - use as.ppp or as.owin. Prof advised not to use sp object at all, just use sf.\n\nas.ppp - allow creation of point object\nas.owin - create the boundary\n\n\n\n\n\nCode chunk shows 2 different ways to convert KDE output into grid object\n\npar(bg =\"#E4D5C9\")\ngridded_kde_childcareSG_ad &lt;- maptools::as.SpatialGridDataFrame.im(kde_childcareSG_adaptive)\nspplot(gridded_kde_childcareSG_ad)\n\nTo use spatstat.geom method instead of maptools since the latter is now defunct:\n\ngridded_kde_childcareSG_ad &lt;- as(kde_childcareSG_adaptive,\n                                 \"SpatialGridDataFrame\")\nspplot(gridded_kde_childcareSG_ad)\n\n\n\n\n\nto ensure reproducibility, to always set a seed before using spatstat functions that involve Monte Carlo simulation\nlikewise, this should be applicable for other randomisation processes\n\n\nset.seed(1234)\n\n\n\n\n\nEdge correction help to avoid biases that arise when estimating spatial statistics near the boundaries of a study area\nimportant when extracting spatial area cause there might be data points close to the edge, for instance:\n\nFor beginners, to test out the different methods for edge correction\nHowever, there is always the option of not carrying out edge correction if points are not near the edge as this process would take up computation time\n\n\n\n\n\nMultiple points can overplot each other i.e. HDB with the same postal code - calculations will not truly reflect distribution\nin hands-on exercise 2, there is no duplicate results hence the steps are actually redundant but is for learning purposes\n\n\n\n\nFor section 1.5.4, to increase nsim as the code chunk only shows 1 time.\n\n\n\n\nsf_geometry\n\n\n\nsp_geometry to remove the attribute"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#issues-with-hands-on-ex-2",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#issues-with-hands-on-ex-2",
    "title": "In-class Exercise 2",
    "section": "",
    "text": "sf for importing, managing, and processing vector-based geospatial data, and\nspatstat, which has a wide range of useful functions for point pattern analysis. In this hands-on exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer\nraster which reads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster). In this hands-on exercise, it will be used to convert image output generate by spatstat into raster format.\nmaptools which provides a set of tools for manipulating geographic data. In this hands-on exercise, we mainly use it to convert Spatial objects into ppp format of spatstat.\ntmap which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using leaflet API.\ntidyverse for performing data science tasks such as importing, wrangling and visualising data.\n\nThe packages are loaded with the following code chunk:\n\npacman::p_load(sf,spatstat,raster,tmap,tidyverse)\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nmaptools is retired and binary is removed from CRAN, however it can be downloaded from Posit Public Package Manager (this site is useful for Shiny) snapshots by using the code chunk below. Alternatively, can utilise the CRAN retired website and key in the latest version.\n\ninstall.packages(\"maptools\",\n                 repos = \"https://packagemanager.posit.co/cran/2023-10-13\")\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nutilise #| eval: false after installing the packages to avoid the code from re-running everything the page is rendered\n\n\n\n\n\n\nsf is a full programmable GIS software - does all the GIS work\n\n\n\n\nThe code chunk below st_union() is used to derive the coastal outline of sf tibble data.frame\n\n\nsg_sf &lt;- mpsz_sf %&gt;%\n  st_union()\n\n\nplot(sg_sf)\n\n\n\n\n\nspatstat has several sub-packages, the notable ones:\n\nspatstat.geom: if its sp object - use ppp or owin, if its sf object - use as.ppp or as.owin. Prof advised not to use sp object at all, just use sf.\n\nas.ppp - allow creation of point object\nas.owin - create the boundary\n\n\n\n\n\nCode chunk shows 2 different ways to convert KDE output into grid object\n\npar(bg =\"#E4D5C9\")\ngridded_kde_childcareSG_ad &lt;- maptools::as.SpatialGridDataFrame.im(kde_childcareSG_adaptive)\nspplot(gridded_kde_childcareSG_ad)\n\nTo use spatstat.geom method instead of maptools since the latter is now defunct:\n\ngridded_kde_childcareSG_ad &lt;- as(kde_childcareSG_adaptive,\n                                 \"SpatialGridDataFrame\")\nspplot(gridded_kde_childcareSG_ad)\n\n\n\n\n\nto ensure reproducibility, to always set a seed before using spatstat functions that involve Monte Carlo simulation\nlikewise, this should be applicable for other randomisation processes\n\n\nset.seed(1234)\n\n\n\n\n\nEdge correction help to avoid biases that arise when estimating spatial statistics near the boundaries of a study area\nimportant when extracting spatial area cause there might be data points close to the edge, for instance:\n\nFor beginners, to test out the different methods for edge correction\nHowever, there is always the option of not carrying out edge correction if points are not near the edge as this process would take up computation time\n\n\n\n\n\nMultiple points can overplot each other i.e. HDB with the same postal code - calculations will not truly reflect distribution\nin hands-on exercise 2, there is no duplicate results hence the steps are actually redundant but is for learning purposes\n\n\n\n\nFor section 1.5.4, to increase nsim as the code chunk only shows 1 time.\n\n\n\n\nsf_geometry\n\n\n\nsp_geometry to remove the attribute"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#installing-and-launching-r-packages",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#installing-and-launching-r-packages",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "Key packages that are installed are:\n\nsf for importing, managing, and processing vector-based geospatial data, and\nspatstat, which has a wide range of useful functions for point pattern analysis. In this hands-on exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer\nraster which reads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster). In this hands-on exercise, it will be used to convert image output generate by spatstat into raster format.\nmaptools which provides a set of tools for manipulating geographic data. In this hands-on exercise, we mainly use it to convert Spatial objects into ppp format of spatstat.\ntmap which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using leaflet API.\ntidyverse for performing data science tasks such as importing, wrangling and visualising data.\nspNetwork which provides functions to perform Spatial Point Patterns Analysis such as kernel density estimation (KDE) and K-function on network. It can also be used to build spatial matrices (`listw’ objects like in ‘spdep’ package) to conduct any kind of traditional spatial analysis with spatial weights based on reticular distances.\n\nThe packages are loaded with the following code chunk:\n\npacman::p_load(sf,spatstat,raster,maptools,tmap,tidyverse,spNetwork,DT,forcats,ggthemes,plotly)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-data",
    "title": "Take-home Exercise 1",
    "section": "Importing Data",
    "text": "Importing Data\n\nrdacc_sf &lt;- read_csv(\"data/rawdata/thai_road_accident_2019_2022.csv\") %&gt;%\n  filter(!is.na(longitude) & longitude != \"\",\n         !is.na(latitude) & latitude != \"\") %&gt;%\n  st_as_sf(coords = c(\n    \"longitude\", \"latitude\"),\n    crs=4326) %&gt;%\n  st_transform(crs = 32647)\n\n\nNote that incident_datetime and report_datetime are kept in datetime field, so that easier for manipulation later on i.e. extracting day of week, time of day using lubridate. Can be useful in determining the occurrence of incidents at a particular timing i.e. peak hour.\nwhen file is read in sf, can easily convert to ppp\ndissecting the code - it comes in 4 chunks:\n\nthe first to load the file\nthe second to filter missing values\nthe third is to get the coordinates and transform the crs\ntransform it\n\nwithout the filter function in between, running the code will give you error, this is because there are missing values for longitude and latitude"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "Network constrained Spatial Point Patterns Analysis (NetSPAA) is a collection of spatial point patterns analysis methods specially developed for analysing spatial point events that occur on or alongside a network. The spatial point event can be locations of traffic accidents or childcare centres for example. The network, on the other hand, can be a road network or a river network.\nIn this hands-on exercise, I will use appropriate functions of the spNetwork package to:\n\nderive network kernel density estimation (NKDE) and\nperform network G-function and K-function analysis\n\n\n\n\nIn this study, the spatial distribution of childcare centres in the Punggol Planning Area will be analysed. For this study, two geospatial datasets will be used:\n\nPunggol_St, a line features geospatial data which stores the road network within the Punggol Planning Area\nPunggol_CC, a point features geospatial data which stores the location of childcare centres within the Punggol Planning Area\n\nBoth datasets are in the ESRI shapefile format.\n\n\n\nIn this hands-on exercise, four R packages will be used:\n\nspNetwork which provides functions to perform Spatial Point Patterns Analysis such as kernel density estimation (KDE) and K-function on network. It can also be used to build spatial matrices (`listw’ objects like in ‘spdep’ package) to conduct any kind of traditional spatial analysis with spatial weights based on reticular distances.\nsf package provides functions to manage, process and manipulate Simple Features, a formal geospatial data standard that specifies a storage and access model of spatial geometries such as points, lines and polygons.\ntmap which provides functions for plotting cartographic quality static point pattern maps or interactive maps by using leaflet API\n\n\npacman:::p_load(spNetwork,sf,tmap,tidyverse)\n\n\n\n\nThe code chunk below uses st_read() of sf package to import Punggol_St and Pungol_CC geospatial datasets into RStudio as sf dataframes:\n\nnetwork &lt;- st_read(dsn=\"data/geospatial\",\n                   layer=\"Punggol_St\")\n\nReading layer `Punggol_St' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2642 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 34038.56 ymin: 40941.11 xmax: 38882.85 ymax: 44801.27\nProjected CRS: SVY21 / Singapore TM\n\n\n\nchildcare &lt;- st_read(dsn = \"data/geospatial\",\n                     layer=\"Punggol_CC\")\n\nReading layer `Punggol_CC' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 61 features and 1 field\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 34423.98 ymin: 41503.6 xmax: 37619.47 ymax: 44685.77\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\n\n\nWe can examine the structure of the simple features data tables in RStudio or use the code chunk below to print the content of the network and childcare simple features:\n\nChildcareNetwork\n\n\n\nchildcare\n\nSimple feature collection with 61 features and 1 field\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 34423.98 ymin: 41503.6 xmax: 37619.47 ymax: 44685.77\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n      Name                      geometry\n1   kml_10 POINT Z (36173.81 42550.33 0)\n2   kml_99 POINT Z (36479.56 42405.21 0)\n3  kml_100 POINT Z (36618.72 41989.13 0)\n4  kml_101 POINT Z (36285.37 42261.42 0)\n5  kml_122  POINT Z (35414.54 42625.1 0)\n6  kml_161 POINT Z (36545.16 42580.09 0)\n7  kml_172 POINT Z (35289.44 44083.57 0)\n8  kml_188 POINT Z (36520.56 42844.74 0)\n9  kml_205  POINT Z (36924.01 41503.6 0)\n10 kml_222 POINT Z (37141.76 42326.36 0)\n\n\n\n\n\nnetwork\n\nSimple feature collection with 2642 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 34038.56 ymin: 40941.11 xmax: 38882.85 ymax: 44801.27\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n     LINK_ID                   ST_NAME                       geometry\n1  116130894                PUNGGOL RD LINESTRING (36546.89 44574....\n2  116130897 PONGGOL TWENTY-FOURTH AVE LINESTRING (36546.89 44574....\n3  116130901   PONGGOL SEVENTEENTH AVE LINESTRING (36012.73 44154....\n4  116130902   PONGGOL SEVENTEENTH AVE LINESTRING (36062.81 44197....\n5  116130907           PUNGGOL CENTRAL LINESTRING (36131.85 42755....\n6  116130908                PUNGGOL RD LINESTRING (36112.93 42752....\n7  116130909           PUNGGOL CENTRAL LINESTRING (36127.4 42744.5...\n8  116130910               PUNGGOL FLD LINESTRING (35994.98 42428....\n9  116130911               PUNGGOL FLD LINESTRING (35984.97 42407....\n10 116130912            EDGEFIELD PLNS LINESTRING (36200.87 42219....\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nNote that spNetwork would require the geospatial data to contain complete CRS information.\n\n\nI also double check the EPSG code for both dataframes to ensure that EPSG code is correctly stated as 3414:\n\nst_crs(childcare)\n\nCoordinate Reference System:\n  User input: SVY21 / Singapore TM \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\nst_crs(network)\n\nCoordinate Reference System:\n  User input: SVY21 / Singapore TM \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\n\nBefore going into analysis, it is always a good practice to visualise the geospatial data. There are two ways to do so.\nOne way is to use plot() of Base R as shown in the code chunk below:\n\nplot(st_geometry(network))\nplot(childcare,add=T,col='red',pch=19)\n\n\n\n\n\n\n\n\nA second way is to use the mapping function of tmap package to visualise the geospatial data with high cartographic quality and in an interactive manner:\n\ntmap_mode('view')\ntm_shape(childcare)+\n  tm_dots()+\n  tm_shape(network)+\n  tm_lines()\n\n\n\n\n\n\ntmap_mode('plot')\n\n\n\n\nIn this section, we will perform NKDE analysis using appropriate functions provided in the spNetwork package.\n\n\nBefore computing NKDE, the Spatial Lines object needs to be cut into lixels with a specified minimal distance. This task can be performed using lixelize_lines() of spNetwork:\n\nlixels &lt;- lixelize_lines(network,\n                         700,\n                         mindist = 375)\n\nIn the code above,\n\nlength of a lixel, lx_length, is set to 700m and\nminimum length of a lixel, mindist, is set to 350m\n\nAfter cutting, if the length of the final lixel is shorter than the minimum distance, it is added to the previous lixel. If NULL, the mindist = maxdist/10. Also note that the segments that are already shorter than the minimum distance are not modified.\n\n\n\n\n\n\nNote\n\n\n\nThere is another function called lixelize_lines.mc() which provides multicore support.\n\n\n\n\n\nNext, lines_center() of spNetwork will be used to generate a SpatialPointsDataFrame i.e. samples, with line center points as shown in the code chunk below:\n\nsamples &lt;- lines_center(lixels)\n\nThe points are located at the center of the line based on the length of the line.\n\n\n\n\ndensities &lt;- nkde(network,\n                  events = childcare,\n                  w = rep(1, nrow(childcare)),\n                  samples = samples,\n                  kernel_name = \"quartic\",\n                  bw = 300,\n                  div = \"bw\",\n                  method = \"simple\",\n                  digits = 1,\n                  tol = 1,\n                  grid_shape = c(1,1),\n                  max_depth = 8,\n                  agg = 5,\n                  sparse = TRUE,\n                  verbose = FALSE)\n\nUsing the code above gives an error message that the number of columns of arguments do not match. Comparing both dataframes, it is noted that the childcare dataframe contain points that have z coordinates aka points are 3D while network dataframe contain points in 2D format. Based on Details on NKDE, it seems like 2D points are required for the computation and hence an additional step of dropping the z-dimension of points in childcare dataframe is required. This is done using the st_zm() function:\n\nchildcare &lt;- st_zm(childcare)\n\nRerunning the NKDE computation code:\n\ndensities &lt;- nkde(network,\n                  events = childcare,\n                  w = rep(1, nrow(childcare)),\n                  samples = samples,\n                  kernel_name = \"quartic\",\n                  bw = 300,\n                  div = \"bw\",\n                  method = \"simple\",\n                  digits = 1,\n                  tol = 1,\n                  grid_shape = c(1,1),\n                  max_depth = 8,\n                  agg = 5,\n                  sparse = TRUE,\n                  verbose = FALSE)\n\nLearning lessons from the code chunk above:\n\nkernel_name argument indicates that quartic kernel is used. Other possible kernel methods supported by spNetwork are triangle, gaussian, scaled gaussian, tricube, cosine, triweight, epanechnikov or uniform\nmethod argument indicate that simple method is used to calculate the NKDE. At present, spNetwork support three popular methods:\n\nsimple: this method proposes an intuitive solution. The distances between events and sampling points are replaced by network distances, and the formula of the kernel is adapted to calculate the density over a linear unit instead of an area unit.\ndiscontinuous: this method equally divides the mass density of an event at intersections of lixels.\ncontinuous: if the discontinuous method is unbiased, it leads to a discontinuous kernel function which is counter-intuitive. The continuous method divides the mass density at the intersection but adjusts the density before the intersection to make the function continuous.\n\n\n\n\nBefore visualising NKDE values, the code chunk below will be used to insert the computed density values i.e. densities into the samples and lixel objects as density field:\n\nsamples$density &lt;- densities\nlixels$density &lt;- densities\n\nSince the SVY21 projection system is in metres, the computed density values are very small i.e. 0.0000005. The code chunk below is used to rescale the density values from the number of events per metre to number of events per kilometre, to help the mapping:\n\nsamples$density &lt;- samples$density*1000\nlixels$density &lt;- lixels$density*1000\n\nThe code below then uses appropriate functions of tmap package to prepare interactive and high cartographic quality map visualisation:\n\ntmap_mode('view')\ntm_shape(lixels)+\n  tm_lines(col = \"density\")+\ntm_shape(childcare)+\n  tm_dots()\n\n\n\n\n\n\ntmap_mode('plot')\n\n\n\n\n\n\nIn this section, complete spatial randomness (CSR) test will be performed using kfunctions() of spNetwork package. The null hypothesis is defined as such:\nH0: The observed spatial point events (i.e. distribution of childcare centres) are uniformly distributed over a street network in Punggol Planning Area.\nThe CSR test is based on the assumption of the binomial point process which implies the hypothesis that the childcare centres are randomly and independently distributed over the street network.\nIf the hypothesis is rejected, we may infer that the distribution of the childcare centres is spatially interacting and dependent on each other and thus, may form non-random patterns.\n\nkfun_childcare &lt;- kfunctions(network,\n                             childcare,\n                             start = 0,\n                             end = 1000,\n                             step = 50,\n                             width = 50,\n                             nsim = 50,\n                             resolution = 50,\n                             verbose = FALSE,\n                             conf_int = 0.05)\n\nLearning points from the code chunk above - there are 10 arguments used in the code chunk:\n\nlines: a SpatialLinesDataFrame with the sampling points. The geometries must be a SpatialLinesDataFrame else it may crash if there are invalid geometries\npoints: a SpatialPointsDataFrame representing the points on the network. These points will be snapped on the network.\nstart: a double, the start value for evaluating K- and G-functions\nend: a double, the last value for evaluating K- and G-functions\nstep: a double, the jump for evaluating the K- and G-functions\nwidth: width of each donut for the G-function\nnsim: indicates the number of Monte Carlo simulations required. Most of the time, more simulations are required for inference\nresolution: when simulating random points on the network, selecting a resolution will greatly reduce the calculation time. When the resolution is null, the random points can occur everywhere on the graph. If a value is specified, the edges are split according to this value and the random points will be selected vertices on the new network.\nconf_int: a double, indicating the width confidence interval (default = 0.05)\n\nThe output of kfunctions() is a list with the following values:\n\nplotkA: ggplot2 object representing the values of the k-function\nplotgA: ggplot2 object representing the values of the g-function\nvaluesA: a dataframe with the values used to build the plots\n\nThe ggplot2 object of k-function can be visualised using the code chunk below:\n\nkfun_childcare$plotk\n\n\n\n\n\n\n\n\nThe blue line is the empirical network K-function of the childcare centres in Punggol Planning Area. The gray envelope represents the results of the 50 simulations in the interval of 2.5% to 97.5%. As the blue line between the distances of 250m to 400m is below the gray area, we can infer that the childcare centres in Punggol Planning Area resemble regular pattern at the distance of 250m to 400m.\n\n\n\n\nspNetwork: Spatial Analysis on Network\nNetwork Kernel Density Estimate\nDetails about NKDE\nNetwork k Functions"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#overview",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "Network constrained Spatial Point Patterns Analysis (NetSPAA) is a collection of spatial point patterns analysis methods specially developed for analysing spatial point events that occur on or alongside a network. The spatial point event can be locations of traffic accidents or childcare centres for example. The network, on the other hand, can be a road network or a river network.\nIn this hands-on exercise, I will use appropriate functions of the spNetwork package to:\n\nderive network kernel density estimation (NKDE) and\nperform network G-function and K-function analysis"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#the-data",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "In this study, the spatial distribution of childcare centres in the Punggol Planning Area will be analysed. For this study, two geospatial datasets will be used:\n\nPunggol_St, a line features geospatial data which stores the road network within the Punggol Planning Area\nPunggol_CC, a point features geospatial data which stores the location of childcare centres within the Punggol Planning Area\n\nBoth datasets are in the ESRI shapefile format."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#installing-and-launching-the-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#installing-and-launching-the-r-packages",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "In this hands-on exercise, four R packages will be used:\n\nspNetwork which provides functions to perform Spatial Point Patterns Analysis such as kernel density estimation (KDE) and K-function on network. It can also be used to build spatial matrices (`listw’ objects like in ‘spdep’ package) to conduct any kind of traditional spatial analysis with spatial weights based on reticular distances.\nsf package provides functions to manage, process and manipulate Simple Features, a formal geospatial data standard that specifies a storage and access model of spatial geometries such as points, lines and polygons.\ntmap which provides functions for plotting cartographic quality static point pattern maps or interactive maps by using leaflet API\n\n\npacman:::p_load(spNetwork,sf,tmap,tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#data-import-and-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#data-import-and-preparation",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "The code chunk below uses st_read() of sf package to import Punggol_St and Pungol_CC geospatial datasets into RStudio as sf dataframes:\n\nnetwork &lt;- st_read(dsn=\"data/geospatial\",\n                   layer=\"Punggol_St\")\n\nReading layer `Punggol_St' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2642 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 34038.56 ymin: 40941.11 xmax: 38882.85 ymax: 44801.27\nProjected CRS: SVY21 / Singapore TM\n\n\n\nchildcare &lt;- st_read(dsn = \"data/geospatial\",\n                     layer=\"Punggol_CC\")\n\nReading layer `Punggol_CC' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 61 features and 1 field\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 34423.98 ymin: 41503.6 xmax: 37619.47 ymax: 44685.77\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\n\n\nWe can examine the structure of the simple features data tables in RStudio or use the code chunk below to print the content of the network and childcare simple features:\n\nChildcareNetwork\n\n\n\nchildcare\n\nSimple feature collection with 61 features and 1 field\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 34423.98 ymin: 41503.6 xmax: 37619.47 ymax: 44685.77\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n      Name                      geometry\n1   kml_10 POINT Z (36173.81 42550.33 0)\n2   kml_99 POINT Z (36479.56 42405.21 0)\n3  kml_100 POINT Z (36618.72 41989.13 0)\n4  kml_101 POINT Z (36285.37 42261.42 0)\n5  kml_122  POINT Z (35414.54 42625.1 0)\n6  kml_161 POINT Z (36545.16 42580.09 0)\n7  kml_172 POINT Z (35289.44 44083.57 0)\n8  kml_188 POINT Z (36520.56 42844.74 0)\n9  kml_205  POINT Z (36924.01 41503.6 0)\n10 kml_222 POINT Z (37141.76 42326.36 0)\n\n\n\n\n\nnetwork\n\nSimple feature collection with 2642 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 34038.56 ymin: 40941.11 xmax: 38882.85 ymax: 44801.27\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n     LINK_ID                   ST_NAME                       geometry\n1  116130894                PUNGGOL RD LINESTRING (36546.89 44574....\n2  116130897 PONGGOL TWENTY-FOURTH AVE LINESTRING (36546.89 44574....\n3  116130901   PONGGOL SEVENTEENTH AVE LINESTRING (36012.73 44154....\n4  116130902   PONGGOL SEVENTEENTH AVE LINESTRING (36062.81 44197....\n5  116130907           PUNGGOL CENTRAL LINESTRING (36131.85 42755....\n6  116130908                PUNGGOL RD LINESTRING (36112.93 42752....\n7  116130909           PUNGGOL CENTRAL LINESTRING (36127.4 42744.5...\n8  116130910               PUNGGOL FLD LINESTRING (35994.98 42428....\n9  116130911               PUNGGOL FLD LINESTRING (35984.97 42407....\n10 116130912            EDGEFIELD PLNS LINESTRING (36200.87 42219....\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nNote that spNetwork would require the geospatial data to contain complete CRS information.\n\n\nI also double check the EPSG code for both dataframes to ensure that EPSG code is correctly stated as 3414:\n\nst_crs(childcare)\n\nCoordinate Reference System:\n  User input: SVY21 / Singapore TM \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\nst_crs(network)\n\nCoordinate Reference System:\n  User input: SVY21 / Singapore TM \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#visualising-the-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#visualising-the-geospatial-data",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "Before going into analysis, it is always a good practice to visualise the geospatial data. There are two ways to do so.\nOne way is to use plot() of Base R as shown in the code chunk below:\n\nplot(st_geometry(network))\nplot(childcare,add=T,col='red',pch=19)\n\n\n\n\n\n\n\n\nA second way is to use the mapping function of tmap package to visualise the geospatial data with high cartographic quality and in an interactive manner:\n\ntmap_mode('view')\ntm_shape(childcare)+\n  tm_dots()+\n  tm_shape(network)+\n  tm_lines()\n\n\n\n\n\n\ntmap_mode('plot')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#network-kde-nkde-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#network-kde-nkde-analysis",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "In this section, we will perform NKDE analysis using appropriate functions provided in the spNetwork package.\n\n\nBefore computing NKDE, the Spatial Lines object needs to be cut into lixels with a specified minimal distance. This task can be performed using lixelize_lines() of spNetwork:\n\nlixels &lt;- lixelize_lines(network,\n                         700,\n                         mindist = 375)\n\nIn the code above,\n\nlength of a lixel, lx_length, is set to 700m and\nminimum length of a lixel, mindist, is set to 350m\n\nAfter cutting, if the length of the final lixel is shorter than the minimum distance, it is added to the previous lixel. If NULL, the mindist = maxdist/10. Also note that the segments that are already shorter than the minimum distance are not modified.\n\n\n\n\n\n\nNote\n\n\n\nThere is another function called lixelize_lines.mc() which provides multicore support.\n\n\n\n\n\nNext, lines_center() of spNetwork will be used to generate a SpatialPointsDataFrame i.e. samples, with line center points as shown in the code chunk below:\n\nsamples &lt;- lines_center(lixels)\n\nThe points are located at the center of the line based on the length of the line.\n\n\n\n\ndensities &lt;- nkde(network,\n                  events = childcare,\n                  w = rep(1, nrow(childcare)),\n                  samples = samples,\n                  kernel_name = \"quartic\",\n                  bw = 300,\n                  div = \"bw\",\n                  method = \"simple\",\n                  digits = 1,\n                  tol = 1,\n                  grid_shape = c(1,1),\n                  max_depth = 8,\n                  agg = 5,\n                  sparse = TRUE,\n                  verbose = FALSE)\n\nUsing the code above gives an error message that the number of columns of arguments do not match. Comparing both dataframes, it is noted that the childcare dataframe contain points that have z coordinates aka points are 3D while network dataframe contain points in 2D format. Based on Details on NKDE, it seems like 2D points are required for the computation and hence an additional step of dropping the z-dimension of points in childcare dataframe is required. This is done using the st_zm() function:\n\nchildcare &lt;- st_zm(childcare)\n\nRerunning the NKDE computation code:\n\ndensities &lt;- nkde(network,\n                  events = childcare,\n                  w = rep(1, nrow(childcare)),\n                  samples = samples,\n                  kernel_name = \"quartic\",\n                  bw = 300,\n                  div = \"bw\",\n                  method = \"simple\",\n                  digits = 1,\n                  tol = 1,\n                  grid_shape = c(1,1),\n                  max_depth = 8,\n                  agg = 5,\n                  sparse = TRUE,\n                  verbose = FALSE)\n\nLearning lessons from the code chunk above:\n\nkernel_name argument indicates that quartic kernel is used. Other possible kernel methods supported by spNetwork are triangle, gaussian, scaled gaussian, tricube, cosine, triweight, epanechnikov or uniform\nmethod argument indicate that simple method is used to calculate the NKDE. At present, spNetwork support three popular methods:\n\nsimple: this method proposes an intuitive solution. The distances between events and sampling points are replaced by network distances, and the formula of the kernel is adapted to calculate the density over a linear unit instead of an area unit.\ndiscontinuous: this method equally divides the mass density of an event at intersections of lixels.\ncontinuous: if the discontinuous method is unbiased, it leads to a discontinuous kernel function which is counter-intuitive. The continuous method divides the mass density at the intersection but adjusts the density before the intersection to make the function continuous.\n\n\n\n\nBefore visualising NKDE values, the code chunk below will be used to insert the computed density values i.e. densities into the samples and lixel objects as density field:\n\nsamples$density &lt;- densities\nlixels$density &lt;- densities\n\nSince the SVY21 projection system is in metres, the computed density values are very small i.e. 0.0000005. The code chunk below is used to rescale the density values from the number of events per metre to number of events per kilometre, to help the mapping:\n\nsamples$density &lt;- samples$density*1000\nlixels$density &lt;- lixels$density*1000\n\nThe code below then uses appropriate functions of tmap package to prepare interactive and high cartographic quality map visualisation:\n\ntmap_mode('view')\ntm_shape(lixels)+\n  tm_lines(col = \"density\")+\ntm_shape(childcare)+\n  tm_dots()\n\n\n\n\n\n\ntmap_mode('plot')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#network-constrained-g--and-k-function-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#network-constrained-g--and-k-function-analysis",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "In this section, complete spatial randomness (CSR) test will be performed using kfunctions() of spNetwork package. The null hypothesis is defined as such:\nH0: The observed spatial point events (i.e. distribution of childcare centres) are uniformly distributed over a street network in Punggol Planning Area.\nThe CSR test is based on the assumption of the binomial point process which implies the hypothesis that the childcare centres are randomly and independently distributed over the street network.\nIf the hypothesis is rejected, we may infer that the distribution of the childcare centres is spatially interacting and dependent on each other and thus, may form non-random patterns.\n\nkfun_childcare &lt;- kfunctions(network,\n                             childcare,\n                             start = 0,\n                             end = 1000,\n                             step = 50,\n                             width = 50,\n                             nsim = 50,\n                             resolution = 50,\n                             verbose = FALSE,\n                             conf_int = 0.05)\n\nLearning points from the code chunk above - there are 10 arguments used in the code chunk:\n\nlines: a SpatialLinesDataFrame with the sampling points. The geometries must be a SpatialLinesDataFrame else it may crash if there are invalid geometries\npoints: a SpatialPointsDataFrame representing the points on the network. These points will be snapped on the network.\nstart: a double, the start value for evaluating K- and G-functions\nend: a double, the last value for evaluating K- and G-functions\nstep: a double, the jump for evaluating the K- and G-functions\nwidth: width of each donut for the G-function\nnsim: indicates the number of Monte Carlo simulations required. Most of the time, more simulations are required for inference\nresolution: when simulating random points on the network, selecting a resolution will greatly reduce the calculation time. When the resolution is null, the random points can occur everywhere on the graph. If a value is specified, the edges are split according to this value and the random points will be selected vertices on the new network.\nconf_int: a double, indicating the width confidence interval (default = 0.05)\n\nThe output of kfunctions() is a list with the following values:\n\nplotkA: ggplot2 object representing the values of the k-function\nplotgA: ggplot2 object representing the values of the g-function\nvaluesA: a dataframe with the values used to build the plots\n\nThe ggplot2 object of k-function can be visualised using the code chunk below:\n\nkfun_childcare$plotk\n\n\n\n\n\n\n\n\nThe blue line is the empirical network K-function of the childcare centres in Punggol Planning Area. The gray envelope represents the results of the 50 simulations in the interval of 2.5% to 97.5%. As the blue line between the distances of 250m to 400m is below the gray area, we can infer that the childcare centres in Punggol Planning Area resemble regular pattern at the distance of 250m to 400m."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#references",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "spNetwork: Spatial Analysis on Network\nNetwork Kernel Density Estimate\nDetails about NKDE\nNetwork k Functions"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "Network constrained Spatial Point Patterns Analysis (NetSPAA) is a collection of spatial point patterns analysis methods specially developed for analysing spatial point events that occur on or alongside a network. The spatial point event can be locations of traffic accidents or childcare centres for example. The network, on the other hand, can be a road network or a river network.\nIn this hands-on exercise, I will use appropriate functions of the spNetwork package to:\n\nderive network kernel density estimation (NKDE) and\nperform network G-function and K-function analysis\n\n\n\n\nIn this study, the spatial distribution of childcare centres in the Punggol Planning Area will be analysed. For this study, two geospatial datasets will be used:\n\nPunggol_St, a line features geospatial data which stores the road network within the Punggol Planning Area\nPunggol_CC, a point features geospatial data which stores the location of childcare centres within the Punggol Planning Area\n\nBoth datasets are in the ESRI shapefile format.\n\n\n\nIn this hands-on exercise, four R packages will be used:\n\nspNetwork which provides functions to perform Spatial Point Patterns Analysis such as kernel density estimation (KDE) and K-function on network. It can also be used to build spatial matrices (`listw’ objects like in ‘spdep’ package) to conduct any kind of traditional spatial analysis with spatial weights based on reticular distances.\nsf package provides functions to manage, process and manipulate Simple Features, a formal geospatial data standard that specifies a storage and access model of spatial geometries such as points, lines and polygons.\ntmap which provides functions for plotting cartographic quality static point pattern maps or interactive maps by using leaflet API\n\n\npacman:::p_load(spNetwork,sf,tmap,tidyverse)\n\n\n\n\nThe code chunk below uses st_read() of sf package to import Punggol_St and Pungol_CC geospatial datasets into RStudio as sf dataframes:\n\nnetwork &lt;- st_read(dsn=\"data/geospatial\",\n                   layer=\"Punggol_St\")\n\n\nchildcare &lt;- st_read(dsn = \"data/geospatial\",\n                     layer=\"Punggol_CC\") %&gt;%\n  st_zm(drop = TRUE,\n        what = \"ZM\")\n\n\n\n\n\n\n\nIn-class notes from Prof Kam:\n\n\n\n\nalways take a look at the data after importing\nuse sf to extract data and save it as a new rds, to avoid re-running data prep steps - this is useful for Take-home Ex01 (sf for geospatial, tidyverse for aspatial)\nspNetwork is different from spatstat - to note that the former has shifted to sf hence input for the former is always in the form of sf\ntidyverse offers lubridate to tidy datetime field\nimporting shp files always need to provide dsn and layer (no need extension)\nfor take-home ex01, to break down folders in “data” file to “rawdata” and “rds” (for derived data) for clarity. all will not be pushed to github as long as “data/” is in .gitignore\nexamining “network” data, linear data must be in LINESTRING, cannot be MULTI-LINESTRING version - if its the latter, have to use st function to break the multi-line into single line, otherwise will have error message\nexamining “childcare” data (from Data.gov, where they convert to kml before converting to shp file hence dimension is XYZ, got Z data vs that of “network” where dimension is XY) however spNetwork can only simple feature hence have to remove z data from “childcare”\n\n\n\nWe can examine the structure of the simple features data tables in RStudio or use the code chunk below to print the content of the network and childcare simple features:\n\nChildcareNetwork\n\n\n\nchildcare\n\n\n\n\nnetwork\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nNote that spNetwork would require the geospatial data to contain complete CRS information.\n\n\nI also double check the EPSG code for both dataframes to ensure that EPSG code is correctly stated as 3414:\n\nst_crs(childcare)\n\n\nst_crs(network)\n\n\n\n\nBefore going into analysis, it is always a good practice to visualise the geospatial data. There are two ways to do so.\nOne way is to use plot() of Base R as shown in the code chunk below:\n\nplot(st_geometry(network))\nplot(childcare,add=T,col='red',pch=19)\n\n\n\n\n\n\n\nIn-class notes from Prof Kam:\n\n\n\n\nadd=T means True (short-form)\nthe code above is plotting twice\nimportance of st_geometry: without it, will have more than 1 plot for network (see code below) because “network” has 3 columns - plot(network) will pull out individual columns and plot - so for LINK_ID, colors are mapped to LINK_ID and for ST_NAME, colors are mapped to ST_NAME. st_geometry will hence just pull the geometry (just the road network without the attributes) rather than all columns. does not matter for “childcare” cause you already indicate the color to be the same (red)\n\n\n\n\n\n\nplot(network)\nplot(childcare,add=T,col='red',pch=19)\n\nA second way is to use the mapping function of tmap package to visualise the geospatial data with high cartographic quality and in an interactive manner:\n\ntmap_mode('view')\ntm_shape(childcare)+\n  tm_dots()+\n  tm_shape(network)+\n  tm_lines()\n\n\ntmap_mode('plot')\n\n\n\n\n\n\n\nIn-class notes from Prof Kam:\n\n\n\n\nCan change the colour of the dots to red to get similar map as above. Define using the extent of the map layer. There are also other symbols that can be used beyond dots (dots vs bubble - former keep size constant when you zoom in and out) (reference):\n\n\n\n\n\ntmap_mode('view')\ntm_shape(childcare)+\n  tm_dots(col = \"red\")+\n  tm_shape(network)+\n  tm_lines()\n\n\ntmap_mode('plot')\n\n\n\n\n\n\n\nIn-class notes from Prof Kam:\n\n\n\n\nLeaflet is a lightweight application that allows one to turn on and off the different variables “childcare” and “network”\n\n\n\nCan also toggle between different views\n\n\n\nIf meet with problems rendering, to upgrade tmap\nProf tends to use tmap over plot as it provides more flexibility\nAlways change to plot mode before moving to next section, otherwise it will consume a lot of resources when rendering\n\n\n\n\n\n\n\nIn this section, we will perform NKDE analysis using appropriate functions provided in the spNetwork package.\n\n\nBefore computing NKDE, the Spatial Lines object needs to be cut into lixels with a specified minimal distance. This task can be performed using lixelize_lines() of spNetwork:\n\nlixels &lt;- lixelize_lines(network,\n                         700,\n                         mindist = 350)\n\nIn the code above,\n\nlength of a lixel, lx_length, is set to 700m and\nminimum length of a lixel, mindist, is set to 350m\n\nAfter cutting, if the length of the final lixel is shorter than the minimum distance, it is added to the previous lixel. If NULL, the mindist = maxdist/10. Also note that the segments that are already shorter than the minimum distance are not modified.\n\n\n\n\n\n\nNote\n\n\n\nThere is another function called lixelize_lines.mc() which provides multicore support.\n\n\n\n\n\n\n\n\nIn-class notes from Prof Kam:\n\n\n\n\nProf set the lixel length at 700m as based on NTU study, 700m is a reasonable walking distance based on Singapore weather while minimum distance was set at 350m by instinct. This is also based on the understanding that parents/grandparents walk their children to the childcare centre.\nat length = 700, mindist = 350, lixels generate 2645 observations while network has 2642 observations.\nfor take-home ex1, need to experiment with different length and mindist cause don’t have context for that.\n\nQuestion: what is the basis for a good cut-off? Prof says calculate the nearest neighbour, test with different distances, plot it out to see which one allows to catch accidents, don’t take a distance that don’t allow you to pick up accidents (cause that would be useless) but also also avoid a distance that captures too many\n\n\n\n\n\n\n\nNext, lines_center() of spNetwork will be used to generate a SpatialPointsDataFrame i.e. samples, with line center points as shown in the code chunk below:\n\nsamples &lt;- lines_center(lixels)\n\nThe points are located at the center of the line based on the length of the line.\n\n\n\n\n\n\nIn-class notes from Prof Kam:\n\n\n\n\n“samples” and “lixels” should have the same observations, Prof suggest to plot out\n\n\n\n\ntmap_mode('view')\ntm_shape(lixels) +\n  tm_lines() +\ntm_shape(samples) +\n  tm_dots(size=0.01)\ntmap_mode('plot')\n\n\n\n\n\ndensities &lt;- nkde(network,\n                  events = childcare,\n                  w = rep(1, nrow(childcare)),\n                  samples = samples,\n                  kernel_name = \"quartic\",\n                  bw = 300,\n                  div = \"bw\",\n                  method = \"simple\",\n                  digits = 1,\n                  tol = 1,\n                  grid_shape = c(1,1),\n                  max_depth = 8,\n                  agg = 5,\n                  sparse = TRUE,\n                  verbose = FALSE)\n\n\n\n\n\n\n\nIn-class notes from Prof Kam:\n\n\n\n\nTry not to use kernel_name = “gaussian” method if density tends to negative\noutput from above is a list of numbers (see “densities” below) which will have to be added as a new field under 3.6.3.1 Visualising NKDE:\n\nNote that if want to do the step above, do not sort the data cause the sequence will change and when you map over, will no longer map to the same point.\n\n\n\nUsing the code above gives an error message that the number of columns of arguments do not match. Comparing both dataframes, it is noted that the childcare dataframe contain points that have z coordinates aka points are 3D while network dataframe contain points in 2D format. Based on Details on NKDE, it seems like 2D points are required for the computation and hence an additional step of dropping the z-dimension of points in childcare dataframe is required. This is done using the st_zm() function:\n\nchildcare &lt;- st_zm(childcare)\n\nRerunning the NKDE computation code:\n\ndensities &lt;- nkde(network,\n                  events = childcare,\n                  w = rep(1, nrow(childcare)),\n                  samples = samples,\n                  kernel_name = \"quartic\",\n                  bw = 300,\n                  div = \"bw\",\n                  method = \"simple\",\n                  digits = 1,\n                  tol = 1,\n                  grid_shape = c(1,1),\n                  max_depth = 8,\n                  agg = 5,\n                  sparse = TRUE,\n                  verbose = FALSE)\n\nLearning lessons from the code chunk above:\n\nkernel_name argument indicates that quartic kernel is used. Other possible kernel methods supported by spNetwork are triangle, gaussian, scaled gaussian, tricube, cosine, triweight, epanechnikov or uniform\nmethod argument indicate that simple method is used to calculate the NKDE. At present, spNetwork support three popular methods:\n\nsimple: this method proposes an intuitive solution. The distances between events and sampling points are replaced by network distances, and the formula of the kernel is adapted to calculate the density over a linear unit instead of an area unit.\ndiscontinuous: this method equally divides the mass density of an event at intersections of lixels.\ncontinuous: if the discontinuous method is unbiased, it leads to a discontinuous kernel function which is counter-intuitive. The continuous method divides the mass density at the intersection but adjusts the density before the intersection to make the function continuous.\n\n\n\n\nBefore visualising NKDE values, the code chunk below will be used to insert the computed density values i.e. densities into the samples and lixel objects as density field:\n\nsamples$density &lt;- densities\nlixels$density &lt;- densities\n\nSince the SVY21 projection system is in metres, the computed density values are very small i.e. 0.0000005. The code chunk below is used to rescale the density values from the number of events per metre to number of events per kilometre, to help the mapping:\n\nsamples$density &lt;- samples$density*1000\nlixels$density &lt;- lixels$density*1000\n\n\n\n\n\n\n\nIn-class notes from Prof Kam:\n\n\n\n\nalways note your unit of measurement\n\n\n\nThe code below then uses appropriate functions of tmap package to prepare interactive and high cartographic quality map visualisation:\n\ntmap_mode('view')\ntm_shape(lixels)+\n  tm_lines(col = \"density\")+\ntm_shape(childcare)+\n  tm_dots()\n\n\ntmap_mode('plot')\n\n\n\n\n\n\nIn this section, complete spatial randomness (CSR) test will be performed using kfunctions() of spNetwork package. The null hypothesis is defined as such:\nH0: The observed spatial point events (i.e. distribution of childcare centres) are uniformly distributed over a street network in Punggol Planning Area.\nThe CSR test is based on the assumption of the binomial point process which implies the hypothesis that the childcare centres are randomly and independently distributed over the street network.\nIf the hypothesis is rejected, we may infer that the distribution of the childcare centres is spatially interacting and dependent on each other and thus, may form non-random patterns.\n\nkfun_childcare &lt;- kfunctions(network,\n                             childcare,\n                             start = 0,\n                             end = 1000,\n                             step = 50,\n                             width = 50,\n                             nsim = 49,\n                             resolution = 50,\n                             verbose = FALSE,\n                             conf_int = 0.05)\n\nLearning points from the code chunk above - there are 10 arguments used in the code chunk:\n\nlines: a SpatialLinesDataFrame with the sampling points. The geometries must be a SpatialLinesDataFrame else it may crash if there are invalid geometries\npoints: a SpatialPointsDataFrame representing the points on the network. These points will be snapped on the network.\nstart: a double, the start value for evaluating K- and G-functions\nend: a double, the last value for evaluating K- and G-functions\nstep: a double, the jump for evaluating the K- and G-functions\nwidth: width of each donut for the G-function\nnsim: indicates the number of Monte Carlo simulations required. Most of the time, more simulations are required for inference\nresolution: when simulating random points on the network, selecting a resolution will greatly reduce the calculation time. When the resolution is null, the random points can occur everywhere on the graph. If a value is specified, the edges are split according to this value and the random points will be selected vertices on the new network.\nconf_int: a double, indicating the width confidence interval (default = 0.05)\n\nThe output of kfunctions() is a list with the following values:\n\nplotkA: ggplot2 object representing the values of the k-function\nplotgA: ggplot2 object representing the values of the g-function\nvaluesA: a dataframe with the values used to build the plots\n\nThe ggplot2 object of k-function can be visualised using the code chunk below:\n\nkfun_childcare$plotk\n\nThe blue line is the empirical network K-function of the childcare centres in Punggol Planning Area. The gray envelope represents the results of the 50 simulations in the interval of 2.5% to 97.5%. As the blue line between the distances of 250m to 400m is below the gray area, we can infer that the childcare centres in Punggol Planning Area resemble regular pattern at the distance of 250m to 400m.\n\n\n\n\n\n\nIn-class notes from Prof Kam:\n\n\n\n\nnote that you can call either plotk or plotg despite the name of the function being kfunctions()\nbefore 250m and after 400m, is complete spatial randomness\nregular pattern occur between 250m to 400m means that childcare centres have a tendency to occur that distance apart within the Punggol area. contrasts with in-class exercise 2/hands-on exercise 2 finding.\n\n\n\n\n\n\n\nparameters that enable detection of behavioural or environmental factors can be used to create subset point events i.e. to determine whether caused by people drunk, people ruthless driver or whether it occurred at a junction (these are found within the accident report data)\nextent to note that its Bangkok Metropolitan Region (to select out the 6 regions that define the boundary) - note from the Wikipedia page and extract from Thailand - Subnational Administrative Boundaries on HDX (do not use the OpenStreetMap version as its much larger, more data)\nto note to categorise data to “rawdata” and “rds”\nstart the file by going to Quarto Document –&gt; create Take-home_Ex01"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#overview",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#overview",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "Network constrained Spatial Point Patterns Analysis (NetSPAA) is a collection of spatial point patterns analysis methods specially developed for analysing spatial point events that occur on or alongside a network. The spatial point event can be locations of traffic accidents or childcare centres for example. The network, on the other hand, can be a road network or a river network.\nIn this hands-on exercise, I will use appropriate functions of the spNetwork package to:\n\nderive network kernel density estimation (NKDE) and\nperform network G-function and K-function analysis"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#the-data",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#the-data",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "In this study, the spatial distribution of childcare centres in the Punggol Planning Area will be analysed. For this study, two geospatial datasets will be used:\n\nPunggol_St, a line features geospatial data which stores the road network within the Punggol Planning Area\nPunggol_CC, a point features geospatial data which stores the location of childcare centres within the Punggol Planning Area\n\nBoth datasets are in the ESRI shapefile format."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#installing-and-launching-the-r-packages",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#installing-and-launching-the-r-packages",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "In this hands-on exercise, four R packages will be used:\n\nspNetwork which provides functions to perform Spatial Point Patterns Analysis such as kernel density estimation (KDE) and K-function on network. It can also be used to build spatial matrices (`listw’ objects like in ‘spdep’ package) to conduct any kind of traditional spatial analysis with spatial weights based on reticular distances.\nsf package provides functions to manage, process and manipulate Simple Features, a formal geospatial data standard that specifies a storage and access model of spatial geometries such as points, lines and polygons.\ntmap which provides functions for plotting cartographic quality static point pattern maps or interactive maps by using leaflet API\n\n\npacman:::p_load(spNetwork,sf,tmap,tidyverse)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#data-import-and-preparation",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#data-import-and-preparation",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "The code chunk below uses st_read() of sf package to import Punggol_St and Pungol_CC geospatial datasets into RStudio as sf dataframes:\n\nnetwork &lt;- st_read(dsn=\"data/geospatial\",\n                   layer=\"Punggol_St\")\n\n\nchildcare &lt;- st_read(dsn = \"data/geospatial\",\n                     layer=\"Punggol_CC\") %&gt;%\n  st_zm(drop = TRUE,\n        what = \"ZM\")\n\n\n\n\n\n\n\nIn-class notes from Prof Kam:\n\n\n\n\nalways take a look at the data after importing\nuse sf to extract data and save it as a new rds, to avoid re-running data prep steps - this is useful for Take-home Ex01 (sf for geospatial, tidyverse for aspatial)\nspNetwork is different from spatstat - to note that the former has shifted to sf hence input for the former is always in the form of sf\ntidyverse offers lubridate to tidy datetime field\nimporting shp files always need to provide dsn and layer (no need extension)\nfor take-home ex01, to break down folders in “data” file to “rawdata” and “rds” (for derived data) for clarity. all will not be pushed to github as long as “data/” is in .gitignore\nexamining “network” data, linear data must be in LINESTRING, cannot be MULTI-LINESTRING version - if its the latter, have to use st function to break the multi-line into single line, otherwise will have error message\nexamining “childcare” data (from Data.gov, where they convert to kml before converting to shp file hence dimension is XYZ, got Z data vs that of “network” where dimension is XY) however spNetwork can only simple feature hence have to remove z data from “childcare”\n\n\n\nWe can examine the structure of the simple features data tables in RStudio or use the code chunk below to print the content of the network and childcare simple features:\n\nChildcareNetwork\n\n\n\nchildcare\n\n\n\n\nnetwork\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nNote that spNetwork would require the geospatial data to contain complete CRS information.\n\n\nI also double check the EPSG code for both dataframes to ensure that EPSG code is correctly stated as 3414:\n\nst_crs(childcare)\n\n\nst_crs(network)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#visualising-the-geospatial-data",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#visualising-the-geospatial-data",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "Before going into analysis, it is always a good practice to visualise the geospatial data. There are two ways to do so.\nOne way is to use plot() of Base R as shown in the code chunk below:\n\nplot(st_geometry(network))\nplot(childcare,add=T,col='red',pch=19)\n\n\n\n\n\n\n\nIn-class notes from Prof Kam:\n\n\n\n\nadd=T means True (short-form)\nthe code above is plotting twice\nimportance of st_geometry: without it, will have more than 1 plot for network (see code below) because “network” has 3 columns - plot(network) will pull out individual columns and plot - so for LINK_ID, colors are mapped to LINK_ID and for ST_NAME, colors are mapped to ST_NAME. st_geometry will hence just pull the geometry (just the road network without the attributes) rather than all columns. does not matter for “childcare” cause you already indicate the color to be the same (red)\n\n\n\n\n\n\nplot(network)\nplot(childcare,add=T,col='red',pch=19)\n\nA second way is to use the mapping function of tmap package to visualise the geospatial data with high cartographic quality and in an interactive manner:\n\ntmap_mode('view')\ntm_shape(childcare)+\n  tm_dots()+\n  tm_shape(network)+\n  tm_lines()\n\n\ntmap_mode('plot')\n\n\n\n\n\n\n\nIn-class notes from Prof Kam:\n\n\n\n\nCan change the colour of the dots to red to get similar map as above. Define using the extent of the map layer. There are also other symbols that can be used beyond dots (dots vs bubble - former keep size constant when you zoom in and out) (reference):\n\n\n\n\n\ntmap_mode('view')\ntm_shape(childcare)+\n  tm_dots(col = \"red\")+\n  tm_shape(network)+\n  tm_lines()\n\n\ntmap_mode('plot')\n\n\n\n\n\n\n\nIn-class notes from Prof Kam:\n\n\n\n\nLeaflet is a lightweight application that allows one to turn on and off the different variables “childcare” and “network”\n\n\n\nCan also toggle between different views\n\n\n\nIf meet with problems rendering, to upgrade tmap\nProf tends to use tmap over plot as it provides more flexibility\nAlways change to plot mode before moving to next section, otherwise it will consume a lot of resources when rendering"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#network-kde-nkde-analysis",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#network-kde-nkde-analysis",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "In this section, we will perform NKDE analysis using appropriate functions provided in the spNetwork package.\n\n\nBefore computing NKDE, the Spatial Lines object needs to be cut into lixels with a specified minimal distance. This task can be performed using lixelize_lines() of spNetwork:\n\nlixels &lt;- lixelize_lines(network,\n                         700,\n                         mindist = 350)\n\nIn the code above,\n\nlength of a lixel, lx_length, is set to 700m and\nminimum length of a lixel, mindist, is set to 350m\n\nAfter cutting, if the length of the final lixel is shorter than the minimum distance, it is added to the previous lixel. If NULL, the mindist = maxdist/10. Also note that the segments that are already shorter than the minimum distance are not modified.\n\n\n\n\n\n\nNote\n\n\n\nThere is another function called lixelize_lines.mc() which provides multicore support.\n\n\n\n\n\n\n\n\nIn-class notes from Prof Kam:\n\n\n\n\nProf set the lixel length at 700m as based on NTU study, 700m is a reasonable walking distance based on Singapore weather while minimum distance was set at 350m by instinct. This is also based on the understanding that parents/grandparents walk their children to the childcare centre.\nat length = 700, mindist = 350, lixels generate 2645 observations while network has 2642 observations.\nfor take-home ex1, need to experiment with different length and mindist cause don’t have context for that.\n\nQuestion: what is the basis for a good cut-off? Prof says calculate the nearest neighbour, test with different distances, plot it out to see which one allows to catch accidents, don’t take a distance that don’t allow you to pick up accidents (cause that would be useless) but also also avoid a distance that captures too many\n\n\n\n\n\n\n\nNext, lines_center() of spNetwork will be used to generate a SpatialPointsDataFrame i.e. samples, with line center points as shown in the code chunk below:\n\nsamples &lt;- lines_center(lixels)\n\nThe points are located at the center of the line based on the length of the line.\n\n\n\n\n\n\nIn-class notes from Prof Kam:\n\n\n\n\n“samples” and “lixels” should have the same observations, Prof suggest to plot out\n\n\n\n\ntmap_mode('view')\ntm_shape(lixels) +\n  tm_lines() +\ntm_shape(samples) +\n  tm_dots(size=0.01)\ntmap_mode('plot')\n\n\n\n\n\ndensities &lt;- nkde(network,\n                  events = childcare,\n                  w = rep(1, nrow(childcare)),\n                  samples = samples,\n                  kernel_name = \"quartic\",\n                  bw = 300,\n                  div = \"bw\",\n                  method = \"simple\",\n                  digits = 1,\n                  tol = 1,\n                  grid_shape = c(1,1),\n                  max_depth = 8,\n                  agg = 5,\n                  sparse = TRUE,\n                  verbose = FALSE)\n\n\n\n\n\n\n\nIn-class notes from Prof Kam:\n\n\n\n\nTry not to use kernel_name = “gaussian” method if density tends to negative\noutput from above is a list of numbers (see “densities” below) which will have to be added as a new field under 3.6.3.1 Visualising NKDE:\n\nNote that if want to do the step above, do not sort the data cause the sequence will change and when you map over, will no longer map to the same point.\n\n\n\nUsing the code above gives an error message that the number of columns of arguments do not match. Comparing both dataframes, it is noted that the childcare dataframe contain points that have z coordinates aka points are 3D while network dataframe contain points in 2D format. Based on Details on NKDE, it seems like 2D points are required for the computation and hence an additional step of dropping the z-dimension of points in childcare dataframe is required. This is done using the st_zm() function:\n\nchildcare &lt;- st_zm(childcare)\n\nRerunning the NKDE computation code:\n\ndensities &lt;- nkde(network,\n                  events = childcare,\n                  w = rep(1, nrow(childcare)),\n                  samples = samples,\n                  kernel_name = \"quartic\",\n                  bw = 300,\n                  div = \"bw\",\n                  method = \"simple\",\n                  digits = 1,\n                  tol = 1,\n                  grid_shape = c(1,1),\n                  max_depth = 8,\n                  agg = 5,\n                  sparse = TRUE,\n                  verbose = FALSE)\n\nLearning lessons from the code chunk above:\n\nkernel_name argument indicates that quartic kernel is used. Other possible kernel methods supported by spNetwork are triangle, gaussian, scaled gaussian, tricube, cosine, triweight, epanechnikov or uniform\nmethod argument indicate that simple method is used to calculate the NKDE. At present, spNetwork support three popular methods:\n\nsimple: this method proposes an intuitive solution. The distances between events and sampling points are replaced by network distances, and the formula of the kernel is adapted to calculate the density over a linear unit instead of an area unit.\ndiscontinuous: this method equally divides the mass density of an event at intersections of lixels.\ncontinuous: if the discontinuous method is unbiased, it leads to a discontinuous kernel function which is counter-intuitive. The continuous method divides the mass density at the intersection but adjusts the density before the intersection to make the function continuous.\n\n\n\n\nBefore visualising NKDE values, the code chunk below will be used to insert the computed density values i.e. densities into the samples and lixel objects as density field:\n\nsamples$density &lt;- densities\nlixels$density &lt;- densities\n\nSince the SVY21 projection system is in metres, the computed density values are very small i.e. 0.0000005. The code chunk below is used to rescale the density values from the number of events per metre to number of events per kilometre, to help the mapping:\n\nsamples$density &lt;- samples$density*1000\nlixels$density &lt;- lixels$density*1000\n\n\n\n\n\n\n\nIn-class notes from Prof Kam:\n\n\n\n\nalways note your unit of measurement\n\n\n\nThe code below then uses appropriate functions of tmap package to prepare interactive and high cartographic quality map visualisation:\n\ntmap_mode('view')\ntm_shape(lixels)+\n  tm_lines(col = \"density\")+\ntm_shape(childcare)+\n  tm_dots()\n\n\ntmap_mode('plot')"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#network-constrained-g--and-k-function-analysis",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#network-constrained-g--and-k-function-analysis",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "In this section, complete spatial randomness (CSR) test will be performed using kfunctions() of spNetwork package. The null hypothesis is defined as such:\nH0: The observed spatial point events (i.e. distribution of childcare centres) are uniformly distributed over a street network in Punggol Planning Area.\nThe CSR test is based on the assumption of the binomial point process which implies the hypothesis that the childcare centres are randomly and independently distributed over the street network.\nIf the hypothesis is rejected, we may infer that the distribution of the childcare centres is spatially interacting and dependent on each other and thus, may form non-random patterns.\n\nkfun_childcare &lt;- kfunctions(network,\n                             childcare,\n                             start = 0,\n                             end = 1000,\n                             step = 50,\n                             width = 50,\n                             nsim = 49,\n                             resolution = 50,\n                             verbose = FALSE,\n                             conf_int = 0.05)\n\nLearning points from the code chunk above - there are 10 arguments used in the code chunk:\n\nlines: a SpatialLinesDataFrame with the sampling points. The geometries must be a SpatialLinesDataFrame else it may crash if there are invalid geometries\npoints: a SpatialPointsDataFrame representing the points on the network. These points will be snapped on the network.\nstart: a double, the start value for evaluating K- and G-functions\nend: a double, the last value for evaluating K- and G-functions\nstep: a double, the jump for evaluating the K- and G-functions\nwidth: width of each donut for the G-function\nnsim: indicates the number of Monte Carlo simulations required. Most of the time, more simulations are required for inference\nresolution: when simulating random points on the network, selecting a resolution will greatly reduce the calculation time. When the resolution is null, the random points can occur everywhere on the graph. If a value is specified, the edges are split according to this value and the random points will be selected vertices on the new network.\nconf_int: a double, indicating the width confidence interval (default = 0.05)\n\nThe output of kfunctions() is a list with the following values:\n\nplotkA: ggplot2 object representing the values of the k-function\nplotgA: ggplot2 object representing the values of the g-function\nvaluesA: a dataframe with the values used to build the plots\n\nThe ggplot2 object of k-function can be visualised using the code chunk below:\n\nkfun_childcare$plotk\n\nThe blue line is the empirical network K-function of the childcare centres in Punggol Planning Area. The gray envelope represents the results of the 50 simulations in the interval of 2.5% to 97.5%. As the blue line between the distances of 250m to 400m is below the gray area, we can infer that the childcare centres in Punggol Planning Area resemble regular pattern at the distance of 250m to 400m.\n\n\n\n\n\n\nIn-class notes from Prof Kam:\n\n\n\n\nnote that you can call either plotk or plotg despite the name of the function being kfunctions()\nbefore 250m and after 400m, is complete spatial randomness\nregular pattern occur between 250m to 400m means that childcare centres have a tendency to occur that distance apart within the Punggol area. contrasts with in-class exercise 2/hands-on exercise 2 finding."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#in-class-notes-on-take-home-ex01",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#in-class-notes-on-take-home-ex01",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "parameters that enable detection of behavioural or environmental factors can be used to create subset point events i.e. to determine whether caused by people drunk, people ruthless driver or whether it occurred at a junction (these are found within the accident report data)\nextent to note that its Bangkok Metropolitan Region (to select out the 6 regions that define the boundary) - note from the Wikipedia page and extract from Thailand - Subnational Administrative Boundaries on HDX (do not use the OpenStreetMap version as its much larger, more data)\nto note to categorise data to “rawdata” and “rds”\nstart the file by going to Quarto Document –&gt; create Take-home_Ex01"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#in-class-notes-from-prof-kam",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#in-class-notes-from-prof-kam",
    "title": "Take-home Exercise 1",
    "section": "In-class notes from Prof Kam:",
    "text": "In-class notes from Prof Kam:\n\nAn example is shown below to extract month and day of the incident_datetime:\n\n\nrdacc_sf &lt;- read_csv(\"data/rawdata/thai_road_accident_2019_2022.csv\") %&gt;%\n  filter(!is.na(longitude) & longitude != \"\",\n         !is.na(latitude) & latitude != \"\") %&gt;%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %&gt;%\n  st_transform(crs = 32467) %&gt;%\n  mutate(Month_num = month(incident_datetime)) %&gt;%\n  mutate(Month_fac = month(incident_datetime,\n                       label = TRUE,\n                       abbr = TRUE)) %&gt;%\n  mutate(dayofweek = day(incident_datetime))\n\n\nThe 2nd month line is more specific and has order since its a factor.\nWGS 84 got 32467 and 324648 - take a good look at it before deciding which is the right one (above is just an example)\nnote that there’s hidden problem inside the data i.e. missing values (can mutate and omit missing values in the code above)\n\n\nwrite_rds(rdacc_sf,\"data/rds/rdacc_sf.rds\")\n\n\nwrite_rds will take care of all the objects within the dataset; once you got this file “#| eval: false” to avoid running the data wrangling code\n\n\nacc &lt;- read_rds(\"data/rds/rdacc_sf.rds\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "Note\n\n\n\n\n\n\noptions(timeout = 2000)\n\n\n\n\n\n\nAccording to the World Health Organisation (WHO), road traffic accidents cause the death of approximately 1.19 million people each year and leave between 20 to 50 million people with non-fatal injuries. Vulnerable road users, such as pedestrians, cyclists and motorcyclists, make up more than half of all road traffic deaths.\nRoad traffic injuries are the leading cause of death for children and young adults aged 5 to 29, however two-thirds of road traffic fatalities occur among people of working ages, from 18 to 59 years. Further, nine in 10 fatalities on the roads occur in low- and middle-income countries, even though these countries make up only around 60% of the world’s vehicles.\nBesides human suffering, road traffic injuries also result in a heavy economic burden on victims and their families, through treatment costs for the injured and loss of productivity of those killed or disabled. More broadly, road traffic injuries have a serious impact on national economies, costing countries 3% of their annual gross domestic product.\nAccording to the WHO, Thailand’s roads are the deadliest in Southeast Asia and among the worst in the world - about 20,000 people die in road accidents each year, or about 56 deaths a day.\nBetween 2014 and 2021, Thailand experienced a notable increase in accident frequencies. Specifically, 19% of all accidents in Thailand occurred on the national highways, which make up the primary public thoroughfares connecting various regions, provinces, districts, and significant locations within a comprehensive network. Within the broader context of accidents across the country, there existed a considerable 66% likelihood of encountering accident-prone zones, often termed as ‘black spots’ which are distributed as follows: 66% on straight road segments, 13% at curves, 6% at median points of cross-shaped intersections, 5% at T-shaped intersections and Y-shaped intersections, 3% at cross-shaped intersections, 2% on bridges, and 2% on steep slopes.\n\n\n\nBy and large, road traffic accidents can be attributed by two major factors, namely behavioural and environmental factors.\n\nBehavioural factors in driving are considered to be major causes of traffic accidents either in direct or indirect manner (Lewin, 1982). These factors can be further grouped into driver behavior (driver/driving style) and driver performance (driver/driving skills) (Elander, West, & French, 1993).\nEnvironmental factors, on the other hand, includes but not limited to weather conditions such as poor visibility during heavy rain or fogs as well as road conditions such as sharp bends, slippery slopes, and blind spots.\n\nPrevious studies have demonstrated the significant potential of Spatial Point Patterns Analysis (SPPA) in exploring and identifying factors influencing road traffic accidents. However, these studies often focus solely on either behavioral or environmental factors, with limited consideration of temporal factors such as season, day of the week, or time of day.\nIn view of this, in this hands-on exercise, we will determine factors that affect road traffic accidents in the Bangkok Metropolitan Region (BMR) by employing both spatial and spatio-temporal point patterns analysis methods.\nThe specific objectives are as follows:\n\nTo visualize the spatio-temporal dynamics of road traffic accidents in BMR using appropriate statistical graphics and geovisualization methods.\nTo conduct detailed spatial analysis of road traffic accidents using appropriate Network Spatial Point Patterns Analysis methods.\nTo conduct detailed spatio-temporal analysis of road traffic accidents using appropriate Temporal Network Spatial Point Patterns Analysis methods.\n\n\n\n\nKey packages that are installed are:\n\nsf for importing, managing, and processing vector-based geospatial data, and\nspatstat, which has a wide range of useful functions for point pattern analysis. In this hands-on exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer\nraster which reads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster). In this hands-on exercise, it will be used to convert image output generate by spatstat into raster format.\nmaptools which provides a set of tools for manipulating geographic data. In this hands-on exercise, we mainly use it to convert Spatial objects into ppp format of spatstat.\ntmap which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using leaflet API.\ntidyverse for performing data science tasks such as importing, wrangling and visualising data.\nspNetwork which provides functions to perform Spatial Point Patterns Analysis such as kernel density estimation (KDE) and K-function on network. It can also be used to build spatial matrices (`listw’ objects like in ‘spdep’ package) to conduct any kind of traditional spatial analysis with spatial weights based on reticular distances.\n\nThe packages are loaded with the following code chunk:\n\npacman::p_load(sf,spatstat,raster,maptools,tmap,tidyverse,spNetwork,DT,forcats,ggthemes,plotly)\n\n\n\n\nFor the purpose of this exercise, three basic data sets are used:\n\nThailand Road Accident [2019-2022] on Kaggle - comprised records of road accidents in Thailand from ~2019 to 2022, based on information provided by the Office of the Permanent Secretary, Ministry of Transport.\nThailand - Subnational Administrative Boundaries on HDX\nThailand Roads (OpenStreetMap Export) on HDX\n\n\n\n\n\n\nThe data is imported using the code below:\n\nroadacc &lt;- read_csv(\"data/rawdata/thai_road_accident_2019_2022.csv\")\n\nTaking a glimpse at the data to determine the fields in the data:\n\nglimpse(roadacc)\n\nRows: 81,735\nColumns: 18\n$ acc_code                    &lt;dbl&gt; 571905, 3790870, 599075, 571924, 599523, 5…\n$ incident_datetime           &lt;dttm&gt; 2019-01-01 00:00:00, 2019-01-01 00:03:00,…\n$ report_datetime             &lt;dttm&gt; 2019-01-02 06:11:00, 2020-02-20 13:48:00,…\n$ province_th                 &lt;chr&gt; \"ลพบุรี\", \"อุบลราชธานี\", \"ประจวบคีรีขันธ์\", \"เชียงใ…\n$ province_en                 &lt;chr&gt; \"Loburi\", \"Ubon Ratchathani\", \"Prachuap Kh…\n$ agency                      &lt;chr&gt; \"department of rural roads\", \"department o…\n$ route                       &lt;chr&gt; \"แยกทางหลวงหมายเลข 21 (กม.ที่ 31+000) - บ้านวั…\n$ vehicle_type                &lt;chr&gt; \"motorcycle\", \"private/passenger car\", \"mo…\n$ presumed_cause              &lt;chr&gt; \"driving under the influence of alcohol\", …\n$ accident_type               &lt;chr&gt; \"other\", \"rollover/fallen on straight road…\n$ number_of_vehicles_involved &lt;dbl&gt; 1, 1, 2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, …\n$ number_of_fatalities        &lt;dbl&gt; 0, 0, 1, 0, 0, 0, 0, 1, 3, 0, 0, 1, 0, 0, …\n$ number_of_injuries          &lt;dbl&gt; 2, 2, 0, 1, 0, 2, 2, 0, 0, 1, 1, 0, 1, 1, …\n$ weather_condition           &lt;chr&gt; \"clear\", \"clear\", \"clear\", \"clear\", \"clear…\n$ latitude                    &lt;dbl&gt; 14.959105, 15.210738, 12.374259, 18.601721…\n$ longitude                   &lt;dbl&gt; 100.87346, 104.86269, 99.90795, 98.80420, …\n$ road_description            &lt;chr&gt; \"straight road\", \"straight road\", \"wide cu…\n$ slope_description           &lt;chr&gt; \"no slope\", \"no slope\", \"slope area\", \"no …\n\n\nThere are 81735 rows and 18 variables. Further details about the important variables that would be needed for analysis can be found in the dropdown box below:\n\n\n\n\n\n\nMore information about variables for analysis\n\n\n\n\n\n\n\n\n\n\n\n\n\nField\nDescription\nPurpose of data i.e. what it might indicate\n\n\n\n\nincident_datetime\nThe date and time of the accident occurrence\nwhether accidents tend to occur at specific:\n\nmonths\nday of week\ntime of the day\n\n\n\nreport_datetime\nThe date and time when the accident was reported\nefficacy at which accident was reported could indicate:\n\nhow busy the road segment is\nhow tightly the road is being monitored/ whether there is a lapse in the management of the road\n\n\n\nprovince_en\nThe name of the province in Thailand, written in English\nsupports the filtering of data to just BMR\n\n\nagency\nThe government agency responsible for the road and traffic management\npinpoints the responsible government agency, could indicate whether there is a need for government agency to take corrective actions\n\n\nroute\nThe route or road segment where the accident occurred\nwhile the data can be used to determine frequency of incident at different locations, it is not useful for our case as it’s in the Thai language\n\n\nvehicle_type\nThe type of vehicle involved in the accident\ncan determine frequency of vehicle types involved in accidents\n\n\npresumed_cause\nThe presumed cause or reason for the accident\ncan determine distribution of cause for accidents\n\n\naccident_type\nThe type or nature of the accident\ncan determine distribution of nature of accidents\n\n\nnumber_of_vehicles_involved\nThe number of vehicles involved in the accident\ncan determine the scale of accidents at different locations i.e. how severe/deadly\n\n\nnumber_of_fatalities\nThe number of fatalities resulting from the accident\ncan determine the scale of accidents at different locations i.e. how severe/deadly\n\n\nnumber_of_injuries\nThe number of injuries resulting from the accident\ncan determine the scale of accidents at different locations i.e. how severe/deadly\n\n\nweather_condition\nThe weather condition at the time of the accident\ncan determine how much weather conditions can affect the occurrence of accidents\n\n\nlatitude\nThe latitude coordinate of the accident location\nused for mapping and for analysis with other datasets\n\n\nlongitude\nThe longitude coordinate of the accident location\nused for mapping and for analysis with other datasets\n\n\nroad_description\nThe description of the road type or configuration where the accident occurred\ncan determine how road types can affect the occurrence of accidents\n\n\nslope_description\nThe description of the slope condition at the accident location\ncan determine how presence of slopes can affect the occurrence of accidents\n\n\n\n\n\n\n\n\n\nWe will first drop “province_th” as it indicates the provinces in the Thai language.\n\nroadacc &lt;- roadacc[, !names(roadacc) %in% c(\"province_th\",\"route\")]\n\n\n\n\nWe then determine the unique provinces within the dataset and scan through the province names (i.e. in case there are any entries that refer to the same province but are spelt differently/have spelling mistakes) before filtering the data to just include provinces that are within the BMR:\n\nunique_provinces &lt;- roadacc %&gt;% \n  distinct(province_en) %&gt;%\n  arrange(province_en)\n\nDT::datatable(unique_provinces,class = \"compact\")\n\n\n\n\n\nOur region of interest comprises Bangkok and five adjacent provinces of Nakhon Pathom, Nonthaburi, Pathum Thani, Samut Prakan and Samut Sakhon.\n\nroadacc &lt;- roadacc %&gt;% \n  filter(province_en %in% c(\"Bangkok\", \"Nakhon Pathom\", \"Nonthaburi\", \"Pathum Thani\",\"Samut Prakan\",\"Samut Sakhon\"))\n\nThis leaves the data with 13336 rows.\n\n\n\nWe further clean the data by removing rows with missing data:\n\nroadacc &lt;- roadacc %&gt;%\n  drop_na()\n\n\n\n\nWe also check if there are duplicate entries in the dataset:\n\nroadacc$acc_code[duplicated(roadacc$acc_code) == TRUE]\n\nnumeric(0)\n\n\nThere are no duplicate entries.\nGenerating summary statistics of roadacc:\n\nsummary(roadacc)\n\n\n\n\n\n\n\nIn-class notes from Prof Kam:\n\n\n\nDuring class, Prof Kam had advised to study the data carefully and shared that it was important to filter out data with incomplete coordinates (missing either longitude or latitude or both) and shared that one way to do it was via the code below:\n\nroadacc &lt;- roadacc %&gt;%\n  filter(!is.na(longitude) & longitude != \"\",\n         !is.na(latitude) & latitude != \"\")\n\nAs with the drop_na() code above, this way will also leave just 12986 rows of data as the missing data were found in either the longitude or latitude variables.\n\n\n\n\n\nWe convert roadacc data frame into a simple feature data frame and also transform the data from geographic coordinate system (EPSG: 4326 WGS84 Geographic Coordinate System) to projected coordinate system:\n\nroadacc &lt;- st_as_sf(roadacc, \n                    coords = c(\"longitude\", \"latitude\"),\n                    crs=4326) %&gt;%\n  st_transform(crs = 32647)\n\nBased on the summary statistics of roadacc above, it is noted that the minimum longitude is 99.85° and maximum longitude is 100.94°. While there are 2 possible projected coordinate systems for Thailand, EPSG 32647 and 32648, the appropriate projected coordinate system to transform the data to would be EPSG 32647 as the minimum and maximum longitude of roadacc falls within EPSG 32467’s area of use (between 96°E and 102°E). A comparison of the area of use for both projected coordinate systems is shown below:\n\n\n\n\nEPSG 32647\nEPSG 32648\n\n\n\n\nArea of use\nBetween 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\nBetween 102°E and 108°E, northern hemisphere between equator and 84°N, onshore and offshore. Cambodia. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Russian Federation. Singapore. Thailand. Vietnam.\n\n\n\n\n\n\nThe incident_datetime and report_datetime variables are in datetime field, we hence utilise these variables and the lubridate() function to generate new variables that represent:\n\nmonth: “inc_month”\nday of week: “inc_dayofweek”\ntime of day: “inc_time”\n\n\nroadacc &lt;- roadacc %&gt;%\n  mutate(inc_year = year(incident_datetime)) %&gt;%\n  mutate(inc_month = month(incident_datetime,\n                       label = TRUE,\n                       abbr = TRUE)) %&gt;%\n  mutate(inc_dayofweek = wday(incident_datetime,\n                              week_start = getOption(\"lubridate.week.start\", 1),\n                              label = TRUE,\n                              abbr = TRUE)) %&gt;%\n  mutate(inc_time = hour(incident_datetime))\n\n\n\n\n\n\n\nIn-class notes from Prof Kam:\n\n\n\nNote that we can generate month in numbers or in factor format via:\n\nroadacc &lt;- roadacc %&gt;%\n  mutate(Month_num = month(incident_datetime)) %&gt;%\n  mutate(Month_fac = month(incident_datetime,\n                       label = TRUE,\n                       abbr = TRUE))\n\n\n\nWe also determine the gap between the incident time and reporting time and create a new variable “timegap” in hours unit:\n\nroadacc$timegap &lt;- time_length(roadacc$report_datetime - roadacc$incident_datetime, \"hours\")\n\nLogically, the date and time when the accident was reported should be after the date and time of the accident occurrence. Looking at the summary statistics below, there are data entries that could have been erroneously recorded resulting in a negative time gap between report time and incident time (i.e. report time was earlier than incident time). As such, the data was further filtered to remove erroneous data to avoid affecting the analysis:\n\nsummary(roadacc$timegap)\n\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n   -6.917   124.183  1408.000  2200.237  3232.571 10915.750 \n\n\n\nroadacc &lt;- roadacc %&gt;%\n  filter(timegap &gt;= 0)\n\nThis leaves us with 12985 rows.\n\n\n\nWe then save this cleaned data as a rds file:\n\nwrite_rds(roadacc,\"data/rds/roadacc.rds\")\n\n\nroadacc &lt;- read_rds(\"data/rds/roadacc.rds\")\n\n\n\n\n\n\n\nIn-class notes from Prof Kam:\n\n\n\n\nIt is good practice to save cleaned file as a new rds file via write_rds() to avoid re-running the data cleaning and wrangling codes. write_rds() will take care of all the objects within the dataset. Once the file is saved, we can add “#| eval: false” to the data cleaning and wrangling codes to avoid re-running them.\n\n\n\n\n\n\nThe data has different files providing details of the administrative boundaries of Thailand at different administrative levels:\n\nLevel 0 (country)\nLevel 1 (province)\nLevel 2 (district)\nLevel 3 (sub-district, tambon)\n\nAs our area of interest is at Level 1 (province level), we will utilise “tha_admbnda_adm1_rtsd_20220121” that reflects details at province levels and import the data using the code chunk below:\n\nprovincedata = st_read(dsn = \"data/rawdata\", \n                  layer = \"tha_admbnda_adm1_rtsd_20220121\")\n\nWe note from the above that it is a multipolygon feature data frame. We note that there are 77 features and 16 fields, and the data is in WGS84 geographic coordinate system.\nWe then take a glimpse of the data:\n\nglimpse(provincedata)\n\n\n\n\nWe note from a glimpse of the data above that there are only a few pertinent fields that we require for our analysis, specifically:\n\nADM1_EN: province name in english\nShape_Leng\nShape_Area\ngeometry\n\nWe hence filter the data to only comprise these fields to make the data frame more manageable:\n\nprovincedata &lt;- provincedata %&gt;%\n  select(\"ADM1_EN\", \"Shape_Leng\",\"Shape_Area\",\"geometry\")\n\n\n\n\nWe also filter to keep only data that are relevant to our area of interest which is BMR:\n\nprovincedata &lt;- provincedata %&gt;% \n  filter(ADM1_EN %in% c(\"Bangkok\", \"Nakhon Pathom\", \"Nonthaburi\", \"Pathum Thani\",\"Samut Prakan\",\"Samut Sakhon\"))\n\nThis leaves 6 rows of data and 4 variables.\n\n\n\nFrom the code chunk below, it is noted that the EPSG code for the selectedboundaries data frame is EPSG: 4326:\n\nst_crs(provincedata)\n\nWe will need to reproject provincedata from EPSG code to EPSG: 32647 which is the projected coordinate system to use for BMR, our area of interest:\n\nprovincedata32647 &lt;- st_transform(provincedata, \n                              crs = 32647)\n\nWe check if the EPSG code has been correctly assigned:\n\nst_crs(provincedata32647)\n\n\n\n\nWe save this cleaned data as a rds file:\n\nwrite_rds(provincedata32647,\"data/rds/provincedata32647.rds\")\n\n\nprovincedata32647 &lt;- read_rds(\"data/rds/provincedata32647.rds\")\n\nWe visualise our provincedata32647:\n\ntmap_mode('view')\ntm_shape(provincedata32647)+\n  tm_polygons()\n\n\n\n\ntmap_mode('plot')\n\n\n\n\nWe import the data as follows:\n\nroadlines = st_read(dsn = \"data/rawdata\",\n                    layer = \"hotosm_tha_roads_lines_shp\")\n\nWe then glimpse at the data:\n\nglimpse(roadlines)\n\n\nst_geometry(roadlines)\n\nThe dataset is very large, with 2792590 rows and 15 variables but we only need to extract relevant information that lie within the BMR for analysis.\n\n\n\nBased on the code chunk below, it is noted that the coordinate system of the roadlines data is missing.\n\nst_crs(roadlines)\n\nBased on the values of the geometry in roadlines, the coordinates seem to be in geographic (latitude/longitude) form, in degrees, typically in a CRS like EPSG:4326 (WGS 84) used for global geographic coordinates. We hence assign the missing EPSG code using the code chunk below:\n\nroadlines4326 &lt;- st_set_crs(roadlines,4326)\n\nWe check the CRS using the code chunk below:\n\nst_crs(roadlines4326)\n\nFor analysis, we would eventually need to overlay the roadlines4326 data with the selectedboundaries32647 data to determine the roads that lie within BMR. In order to perform geoprocessing using two geospatial data, both geospatial data would need to be projected using similar coordinate systems - in this case, it its EPSG: 32647:\n\nroadlines32647 &lt;- st_transform(roadlines4326, \n                              crs = 32647)\n\nWe check the CRS code again:\n\nst_crs(roadlines32647)\n\n\n\n\nBased on the columns in the data frame roadlines32647, the columns that seem relevant/useful to retain for analysis are “highway”, “surface”, “smoothness”, “width”, “lanes”, “oneway”, “bridge” and “geometry”.\nHowever before going ahead to retain these variables, we determine the presence of missing data within roadlines32647:\n\nmissing_counts &lt;- sapply(roadlines32647, function(x) sum(is.na(x)))\nprint(missing_counts)\n\nBased on the result above, more than 60% of data is missing for the variable “source” and more than 80% of data is missing for the variables “name”, “name_en”, “surface”, “smoothness”, “width”, “lanes”, “oneway”, “bridge”, “layer”, “source” and “name_th”. Given the extent of missing data, we will omit these columns as they would not provide useful information for analysis and only retain the relevant/useful columns “highway” and “geometry” with no missing data:\n\nselectedroadlines &lt;- roadlines32647 %&gt;%\n  select(\"highway\", \"geometry\")\n\n\n\n\nThe code chunk below is used to determine the types of highways in the selectedroadlines data frame:\n\nunique_highway &lt;- unique(selectedroadlines$highway)\nunique_highway &lt;- sort(unique_highway)\n\nunique_highway\n\nTo determine which classes of highway to retain for analysis, the default access restrictions based on the interpretation of Thailand’s Road Traffic Act, 1979 was referenced (source):\n\nA detailed explanation on the type of highways and whether they are included for analysis is indicated in the table below:\n\n\n\nTypes of highway\nDetails\nIncluded for analysis?\n\n\n\n\nabandoned\nUnused/Abandoned roads that are only passable on foot/two-wheel vehicles\nNo\n\n\nbarrier\nRoadside barriers used to protect traffic from roadside obstacles or hazards (source)\nNo\n\n\nbridleway\nA bridle path, also bridleway, equestrian trail, horse riding path, ride, bridle road, or horse trail, is a trail or a thoroughfare that is used by people riding on horses. (source)\nNo\n\n\nbusway\nA dedicated, separate way for the use of public transport buses (source)\nYes\n\n\nconstruction\nNo details provided, could be a highway under construction or a highway used for construction purposes.\nNo (due to ambiguity of information)\n\n\ncorridor\nA land corridor is a type of highway or railway infrastructure that links two or more urban areas (source)\nYes\n\n\ncycleway\nBased on table above, its designated for bicycles and travel by foot is allowed\nNo (as the path is designated mainly for cyclists and might not be so useful for the scope of the exercise)\n\n\nescape\nA road, usually ending in a pile of sand, provided on a hill for drivers to drive into if their brakes fail or on a bend if they lose control of the turn (source)\nYes\n\n\nfootway\nBuilt pathways designed mainly or exclusively for pedestrian access (source)\nNo\n\n\nliving_street\nLittle information provided on use but based on table above, motorcars, motorcycles and pedestrians all have access\nYes\n\n\nmotorway\nExpressway with full access control (source)\nYes\n\n\nmotorway_link\nLink roads (slip roads/ramps) leading to and from a motorway (source) and based on above table, otorcars, motorcycles and pedestrians all have access\nYes\n\n\nparth\nNo relevant information found, assume is a spelling error and meant to be “path”.\nYes (to rename to “path” for analysis)\n\n\npath\nMulti-purpose paths intended for all non-motorized vehicles with the exception of motorcycles (source). Based on table above, motorcycles and pedestrians have access.\nYes\n\n\npaved\nGenerally indicates a road that been covered with flat blocks of stone or concrete, so that it is suitable for walking or driving on.\nYes\n\n\npedestrian\nBased on table above, access only allowed for bicycles and travel by foot\nNo\n\n\nprimary\nTop-level urban road across the city connecting trunk to trunk, or road of equal or greater importance than the primary intercity highway that runs through that city (source)\nYes\n\n\nprimary_link\nBased on table above, motorcars, motorcycles and pedestrians all have access\nYes\n\n\nproposed\nProposed cycling routes (source)\nNo\n\n\nraceway\nA course for racing (source)\nNo\n\n\nresidential\nA road within a residential area that gives the public access to one or multiple residences. Based on table above, motorcars, motorcycles and pedestrians all have access (source)\nYes\n\n\nroad\nBased on table above, motorcars, motorcycles and pedestrians all have access\nYes\n\n\nsecondary\nMain urban road connecting primary to primary or higher, or road of equal or greater importance than the secondary intercity highway that runs through that city. Based on table above, motorcars, motorcycles and pedestrians all have access (source)\nYes\n\n\nsecondary_link\nBased on table above, motorcars, motorcycles and pedestrians all have access\nYes\n\n\nservice\nA minor road that gives access to buildings/places outside a residential area such as an estate, religious site, attraction site, or a specific part of a large estate such as an industrial facility or university campus (source)\nYes\n\n\nsteps\nBased on table above, designated for travel by foot\nNo\n\n\ntertiary\nRoads that are more important than regular unclassified or residential roads, or roads that connect several unclassified or residential roads. Based on table above, motorcars, motorcycles and pedestrians all have access (source)\nYes\n\n\ntertiary_link\nBased on table above, motorcars, motorcycles and pedestrians all have access (source)\nYes\n\n\ntrack\nA road whose only function is to provide access to the surrounding land (agricultural, forestry purposes). Most of the time unpaved (source)\nYes\n\n\ntrunk\nBased on table above, motorcars, motorcycles and pedestrians all have access (source)\nYes\n\n\ntrunk_link\nBased on table above, motorcars, motorcycles and pedestrians all have access (source)\nYes\n\n\nunclassified\nA significant thru-traffic road used to reach the next settlement or another road of equal or higher importance regardless of its physical conditions. Based on table above, motorcars, motorcycles and pedestrians all have access (source)\nYes\n\n\n\n\nselectedroadlines &lt;- selectedroadlines %&gt;%\n  filter(highway %in% c(\"busway\",\"corridor\",\"escape\",\"living_street\",\"motorway\",\"motorway_link\", \"parth\", \"path\", \"paved\",\"primary\",\"primary_link\",\"residential\",\"road\",\"secondary\",\"secondary_link\",\"service\",\"tertiary\",\"tertiary_link\",\"track\",\"trunk\",\"trunk_link\",\"unclassified\")) %&gt;%\n  mutate(highway = recode(highway, \"parth\" = \"path\"))\n\n\n\n\nWe require only a subset of the selectedroadlines data to just roads within our area of interest, BMR and hence we utilise st_intersection() to find retain roads that are within the BMR boundaries given by provincedata32647:\n\nroadsbkk &lt;- st_intersection(selectedroadlines,provincedata32647)\n\nThis reduced the data to 564485 rows of data.\n\n\n\nWe save this cleaned data as a new rds file in the interim to facilitate further analysis and to avoid re-running st_intersection() function above:\n\nwrite_rds(roadsbkk,\"data/rds/roadsbkkinterim.rds\")\n\n\nroadsbkkinterim &lt;- read_rds(\"data/rds/roadsbkkinterim.rds\")\n\n\n\n\nWhile we have managed to trim the original dataset from 2792590 rows to 564485 (~20% of original dataset size), it is important that we plot the geometry of the data to determine if we would be able to meaningfully analyse it. Based on the plot below, it can be seen that there is still too much data causing overcrowding of the map.\n\nplot(st_geometry(roadsbkkinterim))\n\nWe first plot the distribution of classes of highway in the roadsbkkinterim dataset:\n\nroad_counts &lt;- roadsbkkinterim %&gt;%\n  count(highway) %&gt;%\n  mutate(percentage = n / sum(n) * 100)\n\nggplot(road_counts, aes(x = fct_reorder(highway, n))) + \n  geom_bar(aes(y = n), stat = \"identity\", fill = \"lightyellow\") +\n  geom_text(aes(label = paste0(round(percentage, 1), \"%\"), y = n + 0.5),\n            vjust = 0,\n            size = 3) +\n  labs(title = \"Distribution of classes of highways\", x = \"Class of Highway\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\nFrom the above, it is noted that service and residential highways make up 47.9% and 44.7% of the total road lines in the dataset. Beyond the information provided in the table above on highway details, we note the following about the service and residential highways:\n\nservice: denotes ways used for vehicle access to a building, parking lot, service station, business estate, beach, campsite etc. they are usually not part of the public street network and may be inaccessible to the general public (source)\nresidential: roads are typically short in length and likely to have lower speed limits and traffic calming measures in place (source)\n\nGiven the limited scale (in terms of size and potential impact to the general population) and that the sheer volume of the service and residential roads could overcrowd the other road lines in the data, we will omit them from our analysis:\nDropping service and residential highways:\n\nroadsbkk &lt;- roadsbkkinterim %&gt;%\n  filter(!(highway %in% c(\"service\",\"residential\")))\n\nWe then take a quick look at the geometry - while there are still a lot of data lines, the plot has cleaned up slightly and we will proceed with this data for now:\n\nplot(st_geometry(roadsbkk))\n\n\n\n\nWe then check the geometry of roadsbkk:\n\ngeometry_types &lt;- roadsbkk %&gt;%\n  st_geometry_type() %&gt;%\n  as.character() %&gt;%\n  unique()\n\ngeometry_types\n\nAs seen from the output above, the roadsbkk data comprises both linestring and multilinestring geometries. Linestring represents a single line, while MultiLinestring represents a collection of multiple lines. We need to simplify the data structure by converting multilinestring to linestring geometry to facilitate downstream analysis as the use of multilinestring might lead to error.\nWe utilise the st_cast() function to break down multilinestring geometries to linestring geometries:\n\nroadsbkk &lt;- st_cast(roadsbkk,\"LINESTRING\",group_or_split = TRUE)\n\nWe double check the geometry types and note from the output below that the geometry is now just linestring:\n\ngeometry_types &lt;- roadsbkk %&gt;%\n  st_geometry_type() %&gt;%\n  as.character() %&gt;%\n  unique()\n\ngeometry_types\n\n\n\n\nWe save this cleaned data as a rds file:\n\nwrite_rds(roadsbkk,\"data/rds/roadsbkk.rds\")\n\n\nroadsbkk &lt;- read_rds(\"data/rds/roadsbkk.rds\")\n\n\n\n\n\nWe carry some EDA to understand how the occurrences of road accidents could be influenced by different factors.\n\n\n\nggplot(roadacc, aes(x = fct_reorder(province_en, province_en, .fun = length))) + \n  geom_bar(fill = \"skyblue\") +\n  labs(title = \"Distribution of Road Accidents across Provinces\", x = \"Province\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\nAs noted from the plot, Bangkok has the highest occurrences of road accidents in the BMR, followed by Samut Prakan, Pathum Thani, Samut Sakhon, Nakhon Pathom and Nonthaburi.\n\n\n\n\nggplot(roadacc, aes(x = fct_reorder(agency, agency, .fun = length))) + \n  geom_bar(fill = \"lightgreen\") +\n  labs(title = \"Distribution of Road Accidents by Agency\", x = \"Agency\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\nAs noted from the plot, the Department of Highways is responsible for the most occurrences of road accidents in the BMR, followed by Department of Rural Roads and Expressway Authority of Thailand.\n\n\n\nWe also analyse the road accidents by time, namely by year, by month, by day of week and by time of day.\n\n\n\n\nBy yearBy year (at province level)\n\n\n\nggplot(roadacc, aes(x = inc_year)) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Year\", x = \"Year\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nWe note from the plot that the number of road accidents has generally been increasing from 2019 to 2022.\n\n\n\nggplot(roadacc, aes(x = inc_year)) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Year\", x = \"Year\", y = \"Count\") +\n  facet_wrap(~province_en)+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\n\nWe note from above that the number of road accidents has generally been increasing in Bangkok and Samut Prakan from 2019 to 2022.\n\nThis is with the exception of a drop in 2021 in Bangkok - this could potentially be due to the surge of COVID-19 cases in Thailand in 2021 which led to a lockdown which meant that there were less tourists, vehicles and pedestrians on the roads, and lower occurrences of road accidents.\n\nWe note that the number of road accidents in Nonthaburi and Pathum Thani increased from 2019 to 2021 and fell in 2022.\nWe note that the number of road accidents in Samut Sakhon fell from 2019 to 2021 but increased in 2022.\nOf the 6 provinces, we note that only Nakhon Pathom experienced a fall in road accidents from 2019 to 2022.\n\n\n\n\n\n\n\nWe also observe the data by month using cycle plots that would enable us to observe cyclical/seasonal patterns, if present.\n\nroadacc_month &lt;- roadacc %&gt;%\n  group_by(inc_year,inc_month) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\nWe save roadacc_month as a rds file:\n\nwrite_rds(roadacc_month,\"data/rds/roadacc_month.rds\")\n\n\nroadacc_month &lt;- read_rds(\"data/rds/roadacc_month.rds\")\n\n\n\n\n\nhline.data &lt;- roadacc_month %&gt;%\n  group_by(inc_month) %&gt;%\n  summarise(avgvalue = mean(count))\n\nggplot(data = roadacc_month, aes(x = inc_year, y = count)) +\n  geom_line(aes(group = inc_month, colour = as.factor(inc_month))) +\n  geom_hline(aes(yintercept=avgvalue),\n             data=hline.data,\n             linetype=6,\n             colour=\"red\",\n             size=0.5)+\n  facet_wrap(~inc_month,scales = \"free_x\")+\n  labs(title = \"Road accidents by month from 2019 to 2022\",\n                   colour = \"Month\") +\n  xlab(\"Year\")+\n  ylab(\"Number of Road Accidents\")+\n  scale_color_brewer(palette = \"Paired\") + \n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\nBased on the plot, we observe the following:\n\nOccurrences of road accidents in Jan and Feb seem to generally be decreasing over the years, with the number of road accidents in 2022 for both months falling below the average number of road accidents for the month across 2019 to 2022.\nOccurrences of road accidents in Jul, Aug, Oct to Dec seem to generally be increasing over the years. Based on this observation alone, the increase in road accidents could potentially be due to the rainy season between Jul to Oct and the presence of a higher population due to peak tourist seasons in Nov and Dec.\nOccurrences of road accidents in Mar to Jun and Sep generally do not fluctuate much over the years.\n\n\n\n\nWe further observe the occurrence of road accidents by month at the province level:\n\n\n\n\n\n\nNote\n\n\n\n\n\n\nroadacc_month_bkk &lt;- roadacc %&gt;%\n  filter(province_en==\"Bangkok\") %&gt;%\n  group_by(inc_year,inc_month) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\nroadacc_month_sp &lt;- roadacc %&gt;%\n  filter(province_en==\"Samut Prakan\") %&gt;%\n  group_by(inc_year,inc_month) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\nroadacc_month_n &lt;- roadacc %&gt;%\n  filter(province_en==\"Nonthaburi\") %&gt;%\n  group_by(inc_year,inc_month) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\nroadacc_month_pt &lt;- roadacc %&gt;%\n  filter(province_en==\"Pathum Thani\") %&gt;%\n  group_by(inc_year,inc_month) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\nroadacc_month_np &lt;- roadacc %&gt;%\n  filter(province_en==\"Nakhon Pathom\") %&gt;%\n  group_by(inc_year,inc_month) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\nroadacc_month_ss &lt;- roadacc %&gt;%\n  filter(province_en==\"Samut Sakhon\") %&gt;%\n  group_by(inc_year,inc_month) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\nSaving them as rds files:\n\nwrite_rds(roadacc_month_bkk,\"data/rds/roadacc_month_bkk.rds\")\nwrite_rds(roadacc_month_sp,\"data/rds/roadacc_month_sp.rds\")\nwrite_rds(roadacc_month_n,\"data/rds/roadacc_month_n.rds\")\nwrite_rds(roadacc_month_pt,\"data/rds/roadacc_month_pt.rds\")\nwrite_rds(roadacc_month_np,\"data/rds/roadacc_month_np.rds\")\nwrite_rds(roadacc_month_ss,\"data/rds/roadacc_month_ss.rds\")\n\nLoading the newly created rds files into R:\n\nroadacc_month_bkk &lt;- read_rds(\"data/rds/roadacc_month_bkk.rds\")\nroadacc_month_sp &lt;- read_rds(\"data/rds/roadacc_month_sp.rds\")\nroadacc_month_n &lt;- read_rds(\"data/rds/roadacc_month_n.rds\")\nroadacc_month_pt &lt;- read_rds(\"data/rds/roadacc_month_pt.rds\")\nroadacc_month_np &lt;- read_rds(\"data/rds/roadacc_month_np.rds\")\nroadacc_month_ss &lt;- read_rds(\"data/rds/roadacc_month_ss.rds\")\n\n\n\n\n\nBangkokSamut PrakanNonthaburiPathum ThaniNakhon PathomSamut Sakhon\n\n\n\nhline.data &lt;- roadacc_month_bkk %&gt;%\n  group_by(inc_month) %&gt;%\n  summarise(avgvalue = mean(count))\n\nggplot(data = roadacc_month_bkk, aes(x = inc_year, y = count)) +\n  geom_line(aes(group = inc_month, colour = as.factor(inc_month))) +\n  geom_hline(aes(yintercept=avgvalue),\n             data=hline.data,\n             linetype=6,\n             colour=\"red\",\n             size=0.5)+\n  facet_wrap(~inc_month,scales = \"free_x\")+\n  labs(title = \"Bangkok Road accidents by month from 2019 to 2022\",\n                   colour = \"Month\") +\n  xlab(\"Year\")+\n  ylab(\"Number of Road Accidents\")+\n  scale_color_brewer(palette = \"Paired\") + \n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\nThe following observations were made:\n\nOccurrences of road accidents in Jan seem to be fluctuating, with the number of road accidents decreasing from 2019 to 2021 then increasing in 2022.\nOccurrences of road accidents in Feb seem to generally be decreasing over the years, with the number of road accidents in 2022 falling below the average number of road accidents for the month across 2019 to 2022.\nOccurrences of road accidents in Jul to Dec seem to generally be increasing over the years. Based on this observation alone, the increase in road accidents could potentially be due to the rainy season between Jul to Oct and the presence of a higher population due to peak tourist seasons in Nov and Dec.\nOccurrences of road accidents in Mar to Jun generally do not fluctuate much over the years.\n\n\n\n\nhline.data &lt;- roadacc_month_sp %&gt;%\n  group_by(inc_month) %&gt;%\n  summarise(avgvalue = mean(count))\n\nggplot(data = roadacc_month_sp, aes(x = inc_year, y = count)) +\n  geom_line(aes(group = inc_month, colour = as.factor(inc_month))) +\n  geom_hline(aes(yintercept=avgvalue),\n             data=hline.data,\n             linetype=6,\n             colour=\"red\",\n             size=0.5)+\n  facet_wrap(~inc_month,scales = \"free_x\")+\n  labs(title = \"Samut Prakan Road accidents by month from 2019 to 2022\",\n                   colour = \"Month\") +\n  xlab(\"Year\")+\n  ylab(\"Number of Road Accidents\")+\n  scale_color_brewer(palette = \"Paired\") + \n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\nThe following observations were made:\n\nOccurrences of road accidents in Jan seem to generally be decreasing over the years, with the number of road accidents in 2022 falling below the average number of road accidents for the month across 2019 to 2022.\nOccurrences of road accidents in Apr to Aug and Nov to Dec seem to generally be increasing over the years. Based on this observation alone, the increase in road accidents could potentially be due to the hotter and rainier seasons in Apr to Aug and the presence of a higher population due to peak tourist seasons in May, Jun, Nov and Dec.\nOccurrences of road accidents in Feb to Mar and Sep to Oct increased initially then fell towards 2022.\n\n\n\n\nhline.data &lt;- roadacc_month_n %&gt;%\n  group_by(inc_month) %&gt;%\n  summarise(avgvalue = mean(count))\n\nggplot(data = roadacc_month_n, aes(x = inc_year, y = count)) +\n  geom_line(aes(group = inc_month, colour = as.factor(inc_month))) +\n  geom_hline(aes(yintercept=avgvalue),\n             data=hline.data,\n             linetype=6,\n             colour=\"red\",\n             size=0.5)+\n  facet_wrap(~inc_month,scales = \"free_x\")+\n  labs(title = \"Nonthaburi Road accidents by month from 2019 to 2022\",\n                   colour = \"Month\") +\n  xlab(\"Year\")+\n  ylab(\"Number of Road Accidents\")+\n  scale_color_brewer(palette = \"Paired\") + \n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\nThe following observations were made:\n\nOccurrences of road accidents in Feb seem to generally be decreasing over the years.\nOccurrences of road accidents in Jan seem to generally be increasing over the years.\nOccurrences of road accidents in Jul, Aug, Nov and Dec increased initially then fell towards 2022.\nOccurrences of road accidents in Mar to Jun, Sep and Oct seem to fluctuate generally around the monthly average across the years.\nAs compared to Bangkok, Samut Prakan and Pathum Thani, the number of road accidents in Nonthaburi seem to be lesser, indicating that roads are more well managed in Nonthaburi.\n\n\n\n\nhline.data &lt;- roadacc_month_pt %&gt;%\n  group_by(inc_month) %&gt;%\n  summarise(avgvalue = mean(count))\n\nggplot(data = roadacc_month_pt, aes(x = inc_year, y = count)) +\n  geom_line(aes(group = inc_month, colour = as.factor(inc_month))) +\n  geom_hline(aes(yintercept=avgvalue),\n             data=hline.data,\n             linetype=6,\n             colour=\"red\",\n             size=0.5)+\n  facet_wrap(~inc_month,scales = \"free_x\")+\n  labs(title = \"Pathum Thani Road accidents by month from 2019 to 2022\",\n                   colour = \"Month\") +\n  xlab(\"Year\")+\n  ylab(\"Number of Road Accidents\")+\n  scale_color_brewer(palette = \"Paired\") + \n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\nThe following observations were made:\n\nOccurrences of road accidents in Jun to Aug and Oct seem to generally be increasing over the years. This could be explained by the rainier seasons in Thailand during this period.\nOccurrences of road accidents in Mar, Apr, May and Nov increased initially then fell towards 2022.\nOccurrences of road accidents in Jan, Feb, Sep and Dec seem to fluctuate generally around the monthly average across the years.\n\n\n\n\nhline.data &lt;- roadacc_month_np %&gt;%\n  group_by(inc_month) %&gt;%\n  summarise(avgvalue = mean(count))\n\nggplot(data = roadacc_month_np, aes(x = inc_year, y = count)) +\n  geom_line(aes(group = inc_month, colour = as.factor(inc_month))) +\n  geom_hline(aes(yintercept=avgvalue),\n             data=hline.data,\n             linetype=6,\n             colour=\"red\",\n             size=0.5)+\n  facet_wrap(~inc_month,scales = \"free_x\")+\n  labs(title = \"Nakhon Pathom Road accidents by month from 2019 to 2022\",\n                   colour = \"Month\") +\n  xlab(\"Year\")+\n  ylab(\"Number of Road Accidents\")+\n  scale_color_brewer(palette = \"Paired\") + \n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\nThe following observations were made:\n\nOccurrences of road accidents in Jan to Mar, May, Jul to Dec seem to generally be decreasing over the years.\nOccurrences of road accidents in Apr and Jun seem to be fluctuating around the monthly average across the years.\nBased on these observations, it seems like road accidents are much lesser in Nakhon Pathom as compared to the other provinces and it is the only province with no obvious increase in occurrences of road accidents across the years, this indicates that the province is more well managed as compared to the other 5 provinces.\n\n\n\n\nhline.data &lt;- roadacc_month_ss %&gt;%\n  group_by(inc_month) %&gt;%\n  summarise(avgvalue = mean(count))\n\nggplot(data = roadacc_month_ss, aes(x = inc_year, y = count)) +\n  geom_line(aes(group = inc_month, colour = as.factor(inc_month))) +\n  geom_hline(aes(yintercept=avgvalue),\n             data=hline.data,\n             linetype=6,\n             colour=\"red\",\n             size=0.5)+\n  facet_wrap(~inc_month,scales = \"free_x\")+\n  labs(title = \"Samut Sakhon Road accidents by month from 2019 to 2022\",\n                   colour = \"Month\") +\n  xlab(\"Year\")+\n  ylab(\"Number of Road Accidents\")+\n  scale_color_brewer(palette = \"Paired\") + \n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\nThe following observations were made:\n\nOccurrences of road accidents in Jan, Feb, Apr and Jun seem to generally be decreasing over the years.\nOccurrences of road accidents in Jul to Dec seem to be increasing over the years. Based on this observation alone, the increase in road accidents could potentially be due to the hotter and rainier seasons in Jul to Oct and the presence of a higher population due to peak tourist seasons in Nov and Dec.\nOccurrences of road accidents in Mar and May seem to fluctuate generally around the monthly average across the years.\n\n\n\n\n\n\n\n\nOverallBreakdown by province\n\n\n\nggplot(roadacc, aes(x = inc_dayofweek)) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Day of Week\", x = \"Day of Week\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nWe note from the plot that road accidents occur mostly on Fri and Sat and this could be explained by these days being the start of the weekend, and more people and vehicles may be out on the roads and in public places, which increase the chances of road accidents occuring.\n\n\n\np0 &lt;- ggplot(roadacc, aes(x = inc_dayofweek)) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Day of Week\", x = \"Day of Week\", y = \"Count\") +\n  facet_wrap(~province_en, scales = \"fixed\")\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\nList of 1\n $ axis.text.x:List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : num 8\n  ..$ hjust        : num 1\n  ..$ vjust        : NULL\n  ..$ angle        : num 90\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi FALSE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n - attr(*, \"class\")= chr [1:2] \"theme\" \"gg\"\n - attr(*, \"complete\")= logi FALSE\n - attr(*, \"validate\")= logi TRUE\n\nggplotly(p0)\n\n\n\n\n\nAcross the provinces, it is obvious that road accidents occur most often on Fri and Sat in Bangkok. However, for the other provinces, the difference is not so obvious and it seems like the occurrences of road accidents are more well spread out across the week. This could be explained by Bangkok being a prime tourist destination and major urban centre, and it could attract a greater crowd from within and outside of Thailand over the weekend, hence leading to greater traffic on the road and higher chances of road accidents occurring.\n\n\n\n\n\n\n\nOverallBreakdown by province\n\n\n\nggplot(roadacc, aes(x = inc_time)) + \n  geom_histogram(binwidth = 1, fill = \"slategrey\", color = \"black\") +\n  scale_x_continuous(breaks = seq(0, 23, 1))+\n  labs(title = \"Distribution of Road Accidents by Time of Day\", \n       x = \"Time of Day\",\n       y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nBased on the chart, it is observed that road accidents occur more often between 7am to 11pm as compared to 12 midnight to 6am. This could be explained by 7am to 11pm being the time when most are awake for their daily activities and the roads are likely to have higher activity, which result in higher chances of occurrences of road accidents. The top two timings at which road accidents occur are at 9am and 7pm and this could be explained by it being the peak hour at which the general population i.e. workers, school students get to and get off work and school.\n\n\n\np1 &lt;- ggplot(roadacc, aes(x = inc_time)) + \n  geom_histogram(binwidth = 1, fill = \"slategrey\", color = \"black\") +\n  scale_x_continuous(breaks = seq(0, 23, 1))+\n  labs(title = \"Distribution of Road Accidents by Time of Day\", \n       x = \"Time of Day\",\n       y = \"Count\") +\n  facet_wrap(~province_en, scales = \"fixed\")+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\nggplotly(p1)\n\n\n\n\n\nBangkok, Samut Prakan and Pathum Thani also seem to follow the general observation seen under the overall chart for occurrences of road accidents by time day i.e. road accidents generally occur more during 7am to 11pm and peak timings are during the going to and getting off work/school hours at around 9am and 7pm. This is less obvious for the other provinces.\n\n\n\n\n\n\n\nOverallBreakdown by Province\n\n\n\nggplot(roadacc, aes(x = fct_reorder(weather_condition, weather_condition, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Weather Condition\", x = \"Weather Condition\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nBased on the plot, road accidents mostly occur in clear weather conditions, followed by rainy weather conditions and dark weather conditions. This could imply that road accidents are more heavily influenced by other behavioural or environmental factors besides the weather condition.\n\n\n\nggplot(roadacc, aes(x = fct_reorder(weather_condition, weather_condition, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Weather Condition\", x = \"Weather Condition\", y = \"Count\") +\n  facet_wrap(~province_en)+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nAcross provinces, similar observations were made as it was observed that road accidents mostly occur during clear weather conditions, followed by rainy and then dark weather conditions.\n\n\n\n\n\n\n\nOverallBreakdown by Province\n\n\n\nggplot(roadacc, aes(x = fct_reorder(road_description, road_description, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Road Description\", x = \"Road Description\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nBased on the plot, road accidents mostly occur on straight roads, roads categorised as other, followed by wide curve and then grade-separated intersection/ramps. Combining this observation with that for weather conditions - that road accidents mostly occur during clear weather conditions and straight roads - which are conditions under which one would not expect road accidents to occur, it could imply that the occurrence of road accidents are more heavily influenced by behavioural factors.\n\n\n\nggplot(roadacc, aes(x = fct_reorder(road_description, road_description, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Road Description\", x = \"Road Description\", y = \"Count\") +\n  facet_wrap(~province_en)+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nAcross provinces, similar observations were made as it was observed that road accidents mostly occur on straight roads, roads categorised as other, followed by wide curve and then grade-separated intersection/ramps.\n\n\n\n\n\n\n\nOverallBreakdown by Province\n\n\n\nggplot(roadacc, aes(x = fct_reorder(slope_description, slope_description, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Slope Description\", x = \"Slope Description\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nBased on the plot, road accidents where there are no slopes. Combining this observation with the above observations - that road accidents mostly occur during clear weather conditions and on straight roads with no slope - which are conditions under which one would not expect road accidents to occur, it could imply that the occurrence of road accidents are more heavily influenced by behavioural factors.\n\n\n\nggplot(roadacc, aes(x = fct_reorder(slope_description, slope_description, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Slope Description\", x = \"Slope Description\", y = \"Count\") +\n  facet_wrap(~province_en)+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nAcross provinces, similar observations were made as it was observed that road accidents mostly occur on roads with no slope.\n\n\n\n\n\n\n\nOverallBreakdown by Province\n\n\n\nggplot(roadacc, aes(x = fct_reorder(vehicle_type, vehicle_type, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Vehicle Type\", x = \"Vehicle Type\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nBased on the plot, road accidents mostly involve private/passenger car, followed by 4-wheel pickup truck, motorcycle as the top 3 vehicles. These are small to mid-sized vehicles.\n\n\nWe do a more detailed analysis at the province level:\n\nggplot(roadacc, aes(x = fct_reorder(vehicle_type, vehicle_type, .fun = length))) +\n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Vehicle Type\", x = \"Vehicle Type\", y = \"Count\") +\n  facet_wrap(~province_en)+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nBangkok and Samut Prakan follow the same general observation seen under the overall chart for vehicle type involved in road accidents i.e. road accidents mostly involve private/passenger car, followed by 4-wheel pickup truck, motorcycle as the top 3 vehicles. However the following were observed for the other provinces:\n\nRoad accidents in Nakhon Pathom, Pathum Thani and Samut Sakhon mostly involved 4-wheel pickup truck\n4-wheel pickup truck is not one of the top 3 vehicles involved in road accidents in Nonthaburi\n\n\n\n\n\n\n\n\nggplot(roadacc, aes(x = fct_reorder(presumed_cause, presumed_cause, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Presumed Cause\", x = \"Presumed Cause\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n\n\n\n\n\n\n\n\nThe top presumed cause for accident is speeding.\n\n\n\n\nOverallBreakdown by Province\n\n\n\nggplot(roadacc, aes(x = fct_reorder(accident_type, accident_type, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Accident Type\", x = \"Accident Type Cause\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n\n\n\n\n\n\n\n\nThe top two presumed cause for road accidents are rear-end collision and rollover/fallen on straight road.\n\n\n\nggplot(roadacc, aes(x = fct_reorder(accident_type, accident_type, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Accident Type\", x = \"Accident Type Cause\", y = \"Count\") +\n  facet_wrap(~province_en)+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n\n\n\n\n\n\n\n\nBangkok, Pathum Thani and Samut Prakan follow the same general observation seen under the overall chart that the top two presumed cause for road accidents are rear-end collision followed by rollover/fallen on straight road. For Nakhon Pathom, Nonthaburi and Samut Sakhon, the top presumed cause is rollover/fallen on straight road followed by rear-end collision.\n\n\n\n\n\n\n\nsummary_stats &lt;- roadacc %&gt;%\n  group_by(province_en) %&gt;%\n  summarise(\n    median_vehicles = median(number_of_vehicles_involved, na.rm = TRUE),\n    mean_vehicles = mean(number_of_vehicles_involved, na.rm = TRUE),\n    min_vehicles = min(number_of_vehicles_involved,na.rm = TRUE),\n    q25 = quantile(number_of_vehicles_involved, 0.25, na.rm = TRUE),\n    q75 = quantile(number_of_vehicles_involved, 0.75, na.rm = TRUE),\n    max_vehicles = max(number_of_vehicles_involved,na.rm = TRUE),\n    .groups = 'drop'\n  ) %&gt;%\n  mutate(label = paste0(\"Min: \", round(min_vehicles,1),\n                        \"\\nq25: \", round(q25,1),\n                        \"\\nMedian: \", round(median_vehicles, 1), \n                        \"\\nMean: \", round(mean_vehicles, 1),\n                        \"\\nq75: \", round(q75,1),\n                        \"\\nMax vehicles: \", round(max_vehicles,1)\n                        ))\n\nggplot(roadacc,\n       aes(x=province_en,\n           y=number_of_vehicles_involved,\n           fill = province_en))+\n  geom_boxplot(width = .20,\n               outlier.shape = NA)+\n  geom_text(data = summary_stats, \n            aes(x = province_en, y = q75, label = label), \n            vjust = -0.5, \n            size = 3)+\n  ggtitle(\"Distribution of Road Accidents by Number of Vehicles Involved\") +\n  labs(title = \"Distribution of Road Accidents by Number of Vehicles Involved\", x = \"Number of Vehicles Involved\", y = \"Count\")+\n  theme(legend.position = \"none\") +\n  scale_fill_viridis_d()\n\n\n\n\n\n\n\n\nAcross the provinces, the median number of vehicles involved in road accidents are either one or two. However, the maximum number of vehicles that had been involved in road accidents were 12 (Pathum Thani), 11 (Bangkok), 10 (Samut Prakan), 9 (Nonthaburi and Samut Sakhon) and 8 (Nakhon Pathom), indicating that while not common, there are large-scale incidents involving large number of vehicles.\n\n\n\n\nsummary_stats &lt;- roadacc %&gt;%\n  group_by(province_en) %&gt;%\n  summarise(\n    median_fatalities = median(number_of_fatalities, na.rm = TRUE),\n    mean_fatalities = mean(number_of_fatalities, na.rm = TRUE),\n    min_fatalities = min(number_of_fatalities,na.rm = TRUE),\n    q25 = quantile(number_of_fatalities, 0.25, na.rm = TRUE),\n    q75 = quantile(number_of_fatalities, 0.75, na.rm = TRUE),\n    max_fatalities = max(number_of_fatalities,na.rm = TRUE),\n    .groups = 'drop'\n  ) %&gt;%\n  mutate(label = paste0(\"Min: \", round(min_fatalities,1),\n                        \"\\nq25: \", round(q25,1),\n                        \"\\nMedian: \", round(median_fatalities, 1), \n                        \"\\nMean: \", round(mean_fatalities, 1),\n                        \"\\nq75: \", round(q75,1),\n                        \"\\nMax fatalities: \", round(max_fatalities,1)\n                        ))\n\nggplot(roadacc,\n       aes(x=province_en,\n           y=number_of_fatalities,\n           fill = province_en))+\n  geom_boxplot(width = .20,\n               outlier.shape = NA)+\n  geom_text(data = summary_stats, \n            aes(x = province_en, y = q75, label = label), \n            vjust = -0.5, \n            size = 3)+\n  ggtitle(\"Distribution of Road Accidents by Number of Fatalities\") +\n  labs(title = \"Distribution of Road Accidents by Number of Fatalities\", x = \"Number of Fatalities\", y = \"Count\")+\n  theme(legend.position = \"none\") +\n  scale_fill_viridis_d()\n\n\n\n\n\n\n\n\nAcross the provinces, the median number of fatalities is 0. However, while few, there are road accidents that occur with higher number of fatalities - the highest being 13 (Samut Prakan), followed by 6 (Pathum Thani), 3 (Bangkok, Nonthaburi) and 2 (Nakhon Pathom and Samut Sakhon).\n\n\n\n\nsummary_stats &lt;- roadacc %&gt;%\n  group_by(province_en) %&gt;%\n  summarise(\n    median_injuries = median(number_of_injuries, na.rm = TRUE),\n    mean_injuries = mean(number_of_injuries, na.rm = TRUE),\n    min_injuries = min(number_of_injuries,na.rm = TRUE),\n    q25 = quantile(number_of_injuries, 0.25, na.rm = TRUE),\n    q75 = quantile(number_of_injuries, 0.75, na.rm = TRUE),\n    max_injuries = max(number_of_injuries,na.rm = TRUE),\n    .groups = 'drop'\n  ) %&gt;%\n  mutate(label = paste0(\"Min: \", round(min_injuries,1),\n                        \"\\nq25: \", round(q25,1),\n                        \"\\nMedian: \", round(median_injuries, 1), \n                        \"\\nMean: \", round(mean_injuries, 1),\n                        \"\\nq75: \", round(q75,1),\n                        \"\\nMax injuries: \", round(max_injuries,1)\n                        ))\n\nggplot(roadacc,\n       aes(x=province_en,\n           y=number_of_injuries,\n           fill = province_en))+\n  geom_boxplot(width = .20,\n               outlier.shape = NA)+\n  geom_text(data = summary_stats, \n            aes(x = province_en, y = q75, label = label), \n            vjust = -0.5, \n            size = 3)+\n  ggtitle(\"Distribution of Road Accidents by Number of Injuries\") +\n  labs(title = \"Distribution of Road Accidents by Number of Injuries\", x = \"Number of Injuries\", y = \"Count\")+\n  theme(legend.position = \"none\") +\n  scale_fill_viridis_d()\n\n\n\n\n\n\n\n\nAcross the provinces, the median number of injuries is 0. However, while few, there are road accidents that occur with higher number of injuries - the highest being 51 (Pathum Thani), followed by 31 (Bangkok), 30 (Nakhon Pathom), 28 (Samut Prakan), 14 (Samut Sakhon) and 11 (Nonthaburi).\n\n\n\n\n\n\nTo carry out spatial point pattern analysis - the evaluation of the pattern or distribution of a set of points on a surface - we need to convert the data from sf format to ppp format:\n\nroadacc_ppp &lt;- as.ppp(roadacc)\nroadacc_ppp\n\nMarked planar point pattern: 12985 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [591277.5, 710166.1] x [1486845.7, 1576520.5] units\n\n\nThe code chunk below plots roadacc_ppp for visualisation:\n\nplot(roadacc_ppp)\n\n\n\n\n\n\n\n\nWe take a quick look at the summary statistics of the roadacc_ppp object using the code chunk below:\n\nsummary(roadacc_ppp)\n\nMarked planar point pattern:  12985 points\nAverage intensity 1.217956e-06 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 571882 3788970 3833867 4314374 6092695 7570954 \n\nWindow: rectangle = [591277.5, 710166.1] x [1486845.7, 1576520.5] units\n                    (118900 x 89670 units)\nWindow area = 10661300000 square units\n\n\n\n\n\nIn spatial point patterns analysis, a significant issue is the presence of duplicates as the statistical methodology used for spatial point patterns processes is based largely on the assumption that process are simple i.e. that the points cannot be coincident. We check for duplication in a ppp object via the code chunk below:\n\nany(duplicated(roadacc_ppp))\n\n[1] FALSE\n\n\nThe data does not have any duplicated points.\n\n\n\nWhen analysing spatial point patterns, it is a good practice to confine the analysis within a geographical area like Singapore boundary. In spatstat, an object called owin is specially designed to represent this polygonal region. The code chunk below is used to covert provincedata32647 SpatialPolygon object into owin object of spatstat:\n\nprovinceowin &lt;- as.owin(provincedata32647)\n\nThe ouput object can be displayed by using plot() function\n\nplot(provinceowin)\n\n\n\n\n\n\n\n\n\nsummary(provinceowin)\n\nWindow: polygonal boundary\nsingle connected closed polygon with 13779 vertices\nenclosing rectangle: [587893.5, 712440.5] x [1484413.7, 1579076.3] units\n                     (124500 x 94660 units)\nWindow area = 7668990000 square units\nFraction of frame area: 0.65\n\n\n\n\n\nWe extract road accident events that are located within the BMR by using the code chunk below:\n\nroadacc_owin_ppp = roadacc_ppp[provinceowin]\n\n\nplot(roadacc_owin_ppp)\n\n\n\n\n\n\n\n\n\nsummary(roadacc_owin_ppp)\n\nMarked planar point pattern:  12985 points\nAverage intensity 1.693182e-06 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 571882 3788970 3833867 4314374 6092695 7570954 \n\nWindow: polygonal boundary\nsingle connected closed polygon with 13779 vertices\nenclosing rectangle: [587893.5, 712440.5] x [1484413.7, 1579076.3] units\n                     (124500 x 94660 units)\nWindow area = 7668990000 square units\nFraction of frame area: 0.65\n\n\n\n\n\n\nWe will proceed to compute the KDE of road accidents in the BMR.\n\n\nWe will derive adaptive KDE using density.adaptive() of spatstat. Adaptive schemes adjust itself according to the density of data - shorter bandwidths are used where data are dense and longer where sparse. This helps to mitigate against highly skewed distribution of spatial point patterns.\nHowever, before we do so, we convert the unit of measurement to kilometer as the default unit of measurement of EPSG: 32647 is in metres, which would make the values hard to comprehend:\n\nroadacc_owin_ppp.km &lt;- rescale.ppp(roadacc_owin_ppp,\n                                   1000,\n                                   \"km\")\n\n\nkde_roadacc_adaptive &lt;- adaptive.density(roadacc_owin_ppp.km, method = \"kernel\")\nplot(kde_roadacc_adaptive)\n\n\n\n\n\n\n\n\n\n\n\nWe convert the KDE output for mapping purposes:\n\ngridded_kde_roadacc_adaptive &lt;- as.SpatialGridDataFrame.im(kde_roadacc_adaptive)\nspplot(gridded_kde_roadacc_adaptive)\n\n\n\n\n\n\n\n\n\n\n\nNext, we will convert the gridded KDE object into a RasterLayer object using raster() of raster package:\n\nkde_roadacc_adaptive_raster &lt;- raster(kde_roadacc_adaptive)\n\nWe view the properties of kde_roadacc_adaptive_raster RasterLayer:\n\nkde_roadacc_adaptive_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.973023, 0.7395512  (x, y)\nextent     : 587.8935, 712.4405, 1484.414, 1579.076  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : layer \nvalues     : -4.248362e-15, 233.4632  (min, max)\n\n\nNote that the CRS property is NA.\n\n\n\nWe hence assign CRS information to the kde_roadacc_adaptive_raster RasterLayer:\n\nprojection(kde_roadacc_adaptive_raster) &lt;- CRS(\"+init=EPSG:32647\")\nkde_roadacc_adaptive_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.973023, 0.7395512  (x, y)\nextent     : 587.8935, 712.4405, 1484.414, 1579.076  (xmin, xmax, ymin, ymax)\ncrs        : +proj=utm +zone=47 +datum=WGS84 +units=m +no_defs \nsource     : memory\nnames      : layer \nvalues     : -4.248362e-15, 233.4632  (min, max)\n\n\nThe CRS property is now completed.\n\n\n\nWe will display the raster in cartographic quality map using tmap package:\n\ntm_shape(kde_roadacc_adaptive_raster)+\n  tm_raster(\"layer\",palette = \"viridis\")+\n  tm_layout(legend.outside = TRUE,\n            legend.outside.position = \"right\",\n            legend.position = c(\"right\",\"bottom\"),\n            main.title = \"Distribution of road accidents (adaptive bandwidth)\",\n            main.title.size = 0.8,\n            frame = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk will be used to extract the different provinces:\n\nbkk &lt;- provincedata32647 %&gt;%\n  filter(ADM1_EN == \"Bangkok\")\nnp &lt;- provincedata32647 %&gt;%\n  filter(ADM1_EN == \"Nakhon Pathom\")\nn &lt;- provincedata32647 %&gt;%\n  filter(ADM1_EN == \"Nonthaburi\")\npt &lt;- provincedata32647 %&gt;%\n  filter(ADM1_EN == \"Pathum Thani\")\nsp &lt;- provincedata32647 %&gt;%\n  filter(ADM1_EN == \"Samut Prakan\")\nss &lt;- provincedata32647 %&gt;%\n  filter(ADM1_EN == \"Samut Sakhon\")\n\n\n\n\n\nbkk_owin = as.owin(bkk)\nnp_owin = as.owin(np)\nn_owin = as.owin(n)\npt_owin = as.owin(pt)\nsp_owin = as.owin(sp)\nss_owin = as.owin(ss)\n\n\n\n\nBy using the code chunk below, we are able to extract road accidents that is within the specific province to carry out our analysis later on.\n\nroadacc_bkk_ppp = roadacc_ppp[bkk_owin]\nroadacc_np_ppp = roadacc_ppp[np_owin]\nroadacc_n_ppp = roadacc_ppp[n_owin]\nroadacc_pt_ppp = roadacc_ppp[pt_owin]\nroadacc_sp_ppp = roadacc_ppp[sp_owin]\nroadacc_ss_ppp = roadacc_ppp[ss_owin]\n\nNext, rescale.ppp() function is used to transform the unit of measurement from metre to kilometre:\n\nroadacc_bkk_ppp.km = rescale.ppp(roadacc_bkk_ppp,1000,\"km\")\nroadacc_np_ppp.km = rescale.ppp(roadacc_np_ppp,1000,\"km\")\nroadacc_n_ppp.km = rescale.ppp(roadacc_n_ppp,1000,\"km\")\nroadacc_pt_ppp.km = rescale.ppp(roadacc_pt_ppp,1000,\"km\")\nroadacc_sp_ppp.km = rescale.ppp(roadacc_sp_ppp,1000,\"km\")\nroadacc_ss_ppp.km = rescale.ppp(roadacc_ss_ppp,1000,\"km\")\n\nWe then plot the 6 provinces and the locations of the road accidents:\n\npar(mfrow=c(3,2))\nplot(roadacc_bkk_ppp.km,main=\"Bangkok\")\nplot(roadacc_np_ppp.km,main=\"Nakhon Pathom\")\nplot(roadacc_n_ppp.km,main=\"Nonthaburi\")\nplot(roadacc_pt_ppp.km,main=\"Pathum Thani\")\nplot(roadacc_sp_ppp.km,main=\"Samut Prakan\")\nplot(roadacc_ss_ppp.km,main=\"Samut Sakhon\")\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below is used to compute the KDE of the 6 provinces:\n\noptions(repr.plot.width=12, repr.plot.height=8)\npar(mfrow=c(3,2))\nplot(density(roadacc_bkk_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Bangkok\")\nplot(density(roadacc_np_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Nakhon Pathom\")\nplot(density(roadacc_n_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Nonthaburi\")\nplot(density(roadacc_pt_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Pathum Thani\")\nplot(density(roadacc_sp_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Samut Prakan\")\nplot(density(roadacc_ss_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Samut Sakhon\")\n\n\n\n\n\n\n\n\n\n\n\n\nWe will perform the Clark-Evans test of aggregation for spatial point pattern:\nThe test hypotheses are:\nH0: The distribution of road accidents is randomly distributed.\nH1: The distribution of road accidents is not randomly distributed.\nThe 95% confidence interval will be used.\n\n\n\nOverall BMRBangkokNakhon PathomNonthaburiPathum ThaniSamut PrakanSamut Sakhon\n\n\n\nclarkevans.test(roadacc_owin_ppp.km,\n                correction = \"none\",\n                clipregion = \"province_owin\",\n                alternative = c(\"clustered\"),\n                nsim = 99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  roadacc_owin_ppp.km\nR = 0.19092, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\nSince p-value is less than 0.05, we reject the null hypothesis at 95% confidence interval. There is sufficient evidence to indicate that the distribution of road accidents is not randomly distributed.\n\n\n\nclarkevans.test(roadacc_bkk_ppp.km,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  roadacc_bkk_ppp.km\nR = 0.12057, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\n\nclarkevans.test(roadacc_np_ppp.km,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  roadacc_np_ppp.km\nR = 0.28949, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\n\nclarkevans.test(roadacc_n_ppp.km,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  roadacc_n_ppp.km\nR = 0.38919, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\n\nclarkevans.test(roadacc_pt_ppp.km,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  roadacc_pt_ppp.km\nR = 0.24798, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\n\nclarkevans.test(roadacc_sp_ppp.km,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  roadacc_sp_ppp.km\nR = 0.14367, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\n\nclarkevans.test(roadacc_ss_ppp.km,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  roadacc_ss_ppp.km\nR = 0.23989, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\n\nBased on the results above, for which p-values are less than 0.05, we reject the null hypothesis at 95% confidence interval. There is sufficient evidence to indicate that the distribution of road accidents in all provinces is not randomly distributed."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#background",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#background",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "According to the World Health Organisation (WHO), road traffic accidents cause the death of approximately 1.19 million people each year and leave between 20 to 50 million people with non-fatal injuries. Vulnerable road users, such as pedestrians, cyclists and motorcyclists, make up more than half of all road traffic deaths.\nRoad traffic injuries are the leading cause of death for children and young adults aged 5 to 29, however two-thirds of road traffic fatalities occur among people of working ages, from 18 to 59 years. Further, nine in 10 fatalities on the roads occur in low- and middle-income countries, even though these countries make up only around 60% of the world’s vehicles.\nBesides human suffering, road traffic injuries also result in a heavy economic burden on victims and their families, through treatment costs for the injured and loss of productivity of those killed or disabled. More broadly, road traffic injuries have a serious impact on national economies, costing countries 3% of their annual gross domestic product.\nAccording to the WHO, Thailand’s roads are the deadliest in Southeast Asia and among the worst in the world - about 20,000 people die in road accidents each year, or about 56 deaths a day.\nBetween 2014 and 2021, Thailand experienced a notable increase in accident frequencies. Specifically, 19% of all accidents in Thailand occurred on the national highways, which make up the primary public thoroughfares connecting various regions, provinces, districts, and significant locations within a comprehensive network. Within the broader context of accidents across the country, there existed a considerable 66% likelihood of encountering accident-prone zones, often termed as ‘black spots’ which are distributed as follows: 66% on straight road segments, 13% at curves, 6% at median points of cross-shaped intersections, 5% at T-shaped intersections and Y-shaped intersections, 3% at cross-shaped intersections, 2% on bridges, and 2% on steep slopes."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#objectives",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#objectives",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "By and large, road traffic accidents can be attributed by two major factors, namely behavioural and environmental factors.\n\nBehavioural factors in driving are considered to be major causes of traffic accidents either in direct or indirect manner (Lewin, 1982). These factors can be further grouped into driver behavior (driver/driving style) and driver performance (driver/driving skills) (Elander, West, & French, 1993).\nEnvironmental factors, on the other hand, includes but not limited to weather conditions such as poor visibility during heavy rain or fogs as well as road conditions such as sharp bends, slippery slopes, and blind spots.\n\nPrevious studies have demonstrated the significant potential of Spatial Point Patterns Analysis (SPPA) in exploring and identifying factors influencing road traffic accidents. However, these studies often focus solely on either behavioral or environmental factors, with limited consideration of temporal factors such as season, day of the week, or time of day.\nIn view of this, in this hands-on exercise, we will determine factors that affect road traffic accidents in the Bangkok Metropolitan Region (BMR) by employing both spatial and spatio-temporal point patterns analysis methods.\nThe specific objectives are as follows:\n\nTo visualize the spatio-temporal dynamics of road traffic accidents in BMR using appropriate statistical graphics and geovisualization methods.\nTo conduct detailed spatial analysis of road traffic accidents using appropriate Network Spatial Point Patterns Analysis methods.\nTo conduct detailed spatio-temporal analysis of road traffic accidents using appropriate Temporal Network Spatial Point Patterns Analysis methods."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "For the purpose of this exercise, three basic data sets are used:\n\nThailand Road Accident [2019-2022] on Kaggle - comprised records of road accidents in Thailand from ~2019 to 2022, based on information provided by the Office of the Permanent Secretary, Ministry of Transport.\nThailand - Subnational Administrative Boundaries on HDX\nThailand Roads (OpenStreetMap Export) on HDX"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-cleaning-and-wrangling-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-cleaning-and-wrangling-data",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "The data is imported using the code below:\n\nroadacc &lt;- read_csv(\"data/rawdata/thai_road_accident_2019_2022.csv\")\n\nTaking a glimpse at the data to determine the fields in the data:\n\nglimpse(roadacc)\n\nRows: 81,735\nColumns: 18\n$ acc_code                    &lt;dbl&gt; 571905, 3790870, 599075, 571924, 599523, 5…\n$ incident_datetime           &lt;dttm&gt; 2019-01-01 00:00:00, 2019-01-01 00:03:00,…\n$ report_datetime             &lt;dttm&gt; 2019-01-02 06:11:00, 2020-02-20 13:48:00,…\n$ province_th                 &lt;chr&gt; \"ลพบุรี\", \"อุบลราชธานี\", \"ประจวบคีรีขันธ์\", \"เชียงใ…\n$ province_en                 &lt;chr&gt; \"Loburi\", \"Ubon Ratchathani\", \"Prachuap Kh…\n$ agency                      &lt;chr&gt; \"department of rural roads\", \"department o…\n$ route                       &lt;chr&gt; \"แยกทางหลวงหมายเลข 21 (กม.ที่ 31+000) - บ้านวั…\n$ vehicle_type                &lt;chr&gt; \"motorcycle\", \"private/passenger car\", \"mo…\n$ presumed_cause              &lt;chr&gt; \"driving under the influence of alcohol\", …\n$ accident_type               &lt;chr&gt; \"other\", \"rollover/fallen on straight road…\n$ number_of_vehicles_involved &lt;dbl&gt; 1, 1, 2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, …\n$ number_of_fatalities        &lt;dbl&gt; 0, 0, 1, 0, 0, 0, 0, 1, 3, 0, 0, 1, 0, 0, …\n$ number_of_injuries          &lt;dbl&gt; 2, 2, 0, 1, 0, 2, 2, 0, 0, 1, 1, 0, 1, 1, …\n$ weather_condition           &lt;chr&gt; \"clear\", \"clear\", \"clear\", \"clear\", \"clear…\n$ latitude                    &lt;dbl&gt; 14.959105, 15.210738, 12.374259, 18.601721…\n$ longitude                   &lt;dbl&gt; 100.87346, 104.86269, 99.90795, 98.80420, …\n$ road_description            &lt;chr&gt; \"straight road\", \"straight road\", \"wide cu…\n$ slope_description           &lt;chr&gt; \"no slope\", \"no slope\", \"slope area\", \"no …\n\n\nThere are 81735 rows and 18 variables. Further details about the important variables that would be needed for analysis can be found in the dropdown box below:\n\n\n\n\n\n\nMore information about variables for analysis\n\n\n\n\n\n\n\n\n\n\n\n\n\nField\nDescription\nPurpose of data i.e. what it might indicate\n\n\n\n\nincident_datetime\nThe date and time of the accident occurrence\nwhether accidents tend to occur at specific:\n\nmonths\nday of week\ntime of the day\n\n\n\nreport_datetime\nThe date and time when the accident was reported\nefficacy at which accident was reported could indicate:\n\nhow busy the road segment is\nhow tightly the road is being monitored/ whether there is a lapse in the management of the road\n\n\n\nprovince_en\nThe name of the province in Thailand, written in English\nsupports the filtering of data to just BMR\n\n\nagency\nThe government agency responsible for the road and traffic management\npinpoints the responsible government agency, could indicate whether there is a need for government agency to take corrective actions\n\n\nroute\nThe route or road segment where the accident occurred\nwhile the data can be used to determine frequency of incident at different locations, it is not useful for our case as it’s in the Thai language\n\n\nvehicle_type\nThe type of vehicle involved in the accident\ncan determine frequency of vehicle types involved in accidents\n\n\npresumed_cause\nThe presumed cause or reason for the accident\ncan determine distribution of cause for accidents\n\n\naccident_type\nThe type or nature of the accident\ncan determine distribution of nature of accidents\n\n\nnumber_of_vehicles_involved\nThe number of vehicles involved in the accident\ncan determine the scale of accidents at different locations i.e. how severe/deadly\n\n\nnumber_of_fatalities\nThe number of fatalities resulting from the accident\ncan determine the scale of accidents at different locations i.e. how severe/deadly\n\n\nnumber_of_injuries\nThe number of injuries resulting from the accident\ncan determine the scale of accidents at different locations i.e. how severe/deadly\n\n\nweather_condition\nThe weather condition at the time of the accident\ncan determine how much weather conditions can affect the occurrence of accidents\n\n\nlatitude\nThe latitude coordinate of the accident location\nused for mapping and for analysis with other datasets\n\n\nlongitude\nThe longitude coordinate of the accident location\nused for mapping and for analysis with other datasets\n\n\nroad_description\nThe description of the road type or configuration where the accident occurred\ncan determine how road types can affect the occurrence of accidents\n\n\nslope_description\nThe description of the slope condition at the accident location\ncan determine how presence of slopes can affect the occurrence of accidents\n\n\n\n\n\n\n\n\n\nWe will first drop “province_th” as it indicates the provinces in the Thai language.\n\nroadacc &lt;- roadacc[, !names(roadacc) %in% c(\"province_th\",\"route\")]\n\n\n\n\nWe then determine the unique provinces within the dataset and scan through the province names (i.e. in case there are any entries that refer to the same province but are spelt differently/have spelling mistakes) before filtering the data to just include provinces that are within the BMR:\n\nunique_provinces &lt;- roadacc %&gt;% \n  distinct(province_en) %&gt;%\n  arrange(province_en)\n\nDT::datatable(unique_provinces,class = \"compact\")\n\n\n\n\n\nOur region of interest comprises Bangkok and five adjacent provinces of Nakhon Pathom, Nonthaburi, Pathum Thani, Samut Prakan and Samut Sakhon.\n\nroadacc &lt;- roadacc %&gt;% \n  filter(province_en %in% c(\"Bangkok\", \"Nakhon Pathom\", \"Nonthaburi\", \"Pathum Thani\",\"Samut Prakan\",\"Samut Sakhon\"))\n\nThis leaves the data with 13336 rows.\n\n\n\nWe further clean the data by removing rows with missing data:\n\nroadacc &lt;- roadacc %&gt;%\n  drop_na()\n\n\n\n\nWe also check if there are duplicate entries in the dataset:\n\nroadacc$acc_code[duplicated(roadacc$acc_code) == TRUE]\n\nnumeric(0)\n\n\nThere are no duplicate entries.\nGenerating summary statistics of roadacc:\n\nsummary(roadacc)\n\n\n\n\n\n\n\nIn-class notes from Prof Kam:\n\n\n\nDuring class, Prof Kam had advised to study the data carefully and shared that it was important to filter out data with incomplete coordinates (missing either longitude or latitude or both) and shared that one way to do it was via the code below:\n\nroadacc &lt;- roadacc %&gt;%\n  filter(!is.na(longitude) & longitude != \"\",\n         !is.na(latitude) & latitude != \"\")\n\nAs with the drop_na() code above, this way will also leave just 12986 rows of data as the missing data were found in either the longitude or latitude variables.\n\n\n\n\n\nWe convert roadacc data frame into a simple feature data frame and also transform the data from geographic coordinate system (EPSG: 4326 WGS84 Geographic Coordinate System) to projected coordinate system:\n\nroadacc &lt;- st_as_sf(roadacc, \n                    coords = c(\"longitude\", \"latitude\"),\n                    crs=4326) %&gt;%\n  st_transform(crs = 32647)\n\nBased on the summary statistics of roadacc above, it is noted that the minimum longitude is 99.85° and maximum longitude is 100.94°. While there are 2 possible projected coordinate systems for Thailand, EPSG 32647 and 32648, the appropriate projected coordinate system to transform the data to would be EPSG 32647 as the minimum and maximum longitude of roadacc falls within EPSG 32467’s area of use (between 96°E and 102°E). A comparison of the area of use for both projected coordinate systems is shown below:\n\n\n\n\nEPSG 32647\nEPSG 32648\n\n\n\n\nArea of use\nBetween 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\nBetween 102°E and 108°E, northern hemisphere between equator and 84°N, onshore and offshore. Cambodia. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Russian Federation. Singapore. Thailand. Vietnam.\n\n\n\n\n\n\nThe incident_datetime and report_datetime variables are in datetime field, we hence utilise these variables and the lubridate() function to generate new variables that represent:\n\nmonth: “inc_month”\nday of week: “inc_dayofweek”\ntime of day: “inc_time”\n\n\nroadacc &lt;- roadacc %&gt;%\n  mutate(inc_year = year(incident_datetime)) %&gt;%\n  mutate(inc_month = month(incident_datetime,\n                       label = TRUE,\n                       abbr = TRUE)) %&gt;%\n  mutate(inc_dayofweek = wday(incident_datetime,\n                              week_start = getOption(\"lubridate.week.start\", 1),\n                              label = TRUE,\n                              abbr = TRUE)) %&gt;%\n  mutate(inc_time = hour(incident_datetime))\n\n\n\n\n\n\n\nIn-class notes from Prof Kam:\n\n\n\nNote that we can generate month in numbers or in factor format via:\n\nroadacc &lt;- roadacc %&gt;%\n  mutate(Month_num = month(incident_datetime)) %&gt;%\n  mutate(Month_fac = month(incident_datetime,\n                       label = TRUE,\n                       abbr = TRUE))\n\n\n\nWe also determine the gap between the incident time and reporting time and create a new variable “timegap” in hours unit:\n\nroadacc$timegap &lt;- time_length(roadacc$report_datetime - roadacc$incident_datetime, \"hours\")\n\nLogically, the date and time when the accident was reported should be after the date and time of the accident occurrence. Looking at the summary statistics below, there are data entries that could have been erroneously recorded resulting in a negative time gap between report time and incident time (i.e. report time was earlier than incident time). As such, the data was further filtered to remove erroneous data to avoid affecting the analysis:\n\nsummary(roadacc$timegap)\n\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n   -6.917   124.183  1408.000  2200.237  3232.571 10915.750 \n\n\n\nroadacc &lt;- roadacc %&gt;%\n  filter(timegap &gt;= 0)\n\nThis leaves us with 12985 rows.\n\n\n\nWe then save this cleaned data as a rds file:\n\nwrite_rds(roadacc,\"data/rds/roadacc.rds\")\n\n\nroadacc &lt;- read_rds(\"data/rds/roadacc.rds\")\n\n\n\n\n\n\n\nIn-class notes from Prof Kam:\n\n\n\n\nIt is good practice to save cleaned file as a new rds file via write_rds() to avoid re-running the data cleaning and wrangling codes. write_rds() will take care of all the objects within the dataset. Once the file is saved, we can add “#| eval: false” to the data cleaning and wrangling codes to avoid re-running them.\n\n\n\n\n\n\nThe data has different files providing details of the administrative boundaries of Thailand at different administrative levels:\n\nLevel 0 (country)\nLevel 1 (province)\nLevel 2 (district)\nLevel 3 (sub-district, tambon)\n\nAs our area of interest is at Level 1 (province level), we will utilise “tha_admbnda_adm1_rtsd_20220121” that reflects details at province levels and import the data using the code chunk below:\n\nprovincedata = st_read(dsn = \"data/rawdata\", \n                  layer = \"tha_admbnda_adm1_rtsd_20220121\")\n\nWe note from the above that it is a multipolygon feature data frame. We note that there are 77 features and 16 fields, and the data is in WGS84 geographic coordinate system.\nWe then take a glimpse of the data:\n\nglimpse(provincedata)\n\n\n\n\nWe note from a glimpse of the data above that there are only a few pertinent fields that we require for our analysis, specifically:\n\nADM1_EN: province name in english\nShape_Leng\nShape_Area\ngeometry\n\nWe hence filter the data to only comprise these fields to make the data frame more manageable:\n\nprovincedata &lt;- provincedata %&gt;%\n  select(\"ADM1_EN\", \"Shape_Leng\",\"Shape_Area\",\"geometry\")\n\n\n\n\nWe also filter to keep only data that are relevant to our area of interest which is BMR:\n\nprovincedata &lt;- provincedata %&gt;% \n  filter(ADM1_EN %in% c(\"Bangkok\", \"Nakhon Pathom\", \"Nonthaburi\", \"Pathum Thani\",\"Samut Prakan\",\"Samut Sakhon\"))\n\nThis leaves 6 rows of data and 4 variables.\n\n\n\nFrom the code chunk below, it is noted that the EPSG code for the selectedboundaries data frame is EPSG: 4326:\n\nst_crs(provincedata)\n\nWe will need to reproject provincedata from EPSG code to EPSG: 32647 which is the projected coordinate system to use for BMR, our area of interest:\n\nprovincedata32647 &lt;- st_transform(provincedata, \n                              crs = 32647)\n\nWe check if the EPSG code has been correctly assigned:\n\nst_crs(provincedata32647)\n\n\n\n\nWe save this cleaned data as a rds file:\n\nwrite_rds(provincedata32647,\"data/rds/provincedata32647.rds\")\n\n\nprovincedata32647 &lt;- read_rds(\"data/rds/provincedata32647.rds\")\n\nWe visualise our provincedata32647:\n\ntmap_mode('view')\ntm_shape(provincedata32647)+\n  tm_polygons()\n\n\n\n\ntmap_mode('plot')\n\n\n\n\nWe import the data as follows:\n\nroadlines = st_read(dsn = \"data/rawdata\",\n                    layer = \"hotosm_tha_roads_lines_shp\")\n\nWe then glimpse at the data:\n\nglimpse(roadlines)\n\n\nst_geometry(roadlines)\n\nThe dataset is very large, with 2792590 rows and 15 variables but we only need to extract relevant information that lie within the BMR for analysis.\n\n\n\nBased on the code chunk below, it is noted that the coordinate system of the roadlines data is missing.\n\nst_crs(roadlines)\n\nBased on the values of the geometry in roadlines, the coordinates seem to be in geographic (latitude/longitude) form, in degrees, typically in a CRS like EPSG:4326 (WGS 84) used for global geographic coordinates. We hence assign the missing EPSG code using the code chunk below:\n\nroadlines4326 &lt;- st_set_crs(roadlines,4326)\n\nWe check the CRS using the code chunk below:\n\nst_crs(roadlines4326)\n\nFor analysis, we would eventually need to overlay the roadlines4326 data with the selectedboundaries32647 data to determine the roads that lie within BMR. In order to perform geoprocessing using two geospatial data, both geospatial data would need to be projected using similar coordinate systems - in this case, it its EPSG: 32647:\n\nroadlines32647 &lt;- st_transform(roadlines4326, \n                              crs = 32647)\n\nWe check the CRS code again:\n\nst_crs(roadlines32647)\n\n\n\n\nBased on the columns in the data frame roadlines32647, the columns that seem relevant/useful to retain for analysis are “highway”, “surface”, “smoothness”, “width”, “lanes”, “oneway”, “bridge” and “geometry”.\nHowever before going ahead to retain these variables, we determine the presence of missing data within roadlines32647:\n\nmissing_counts &lt;- sapply(roadlines32647, function(x) sum(is.na(x)))\nprint(missing_counts)\n\nBased on the result above, more than 60% of data is missing for the variable “source” and more than 80% of data is missing for the variables “name”, “name_en”, “surface”, “smoothness”, “width”, “lanes”, “oneway”, “bridge”, “layer”, “source” and “name_th”. Given the extent of missing data, we will omit these columns as they would not provide useful information for analysis and only retain the relevant/useful columns “highway” and “geometry” with no missing data:\n\nselectedroadlines &lt;- roadlines32647 %&gt;%\n  select(\"highway\", \"geometry\")\n\n\n\n\nThe code chunk below is used to determine the types of highways in the selectedroadlines data frame:\n\nunique_highway &lt;- unique(selectedroadlines$highway)\nunique_highway &lt;- sort(unique_highway)\n\nunique_highway\n\nTo determine which classes of highway to retain for analysis, the default access restrictions based on the interpretation of Thailand’s Road Traffic Act, 1979 was referenced (source):\n\nA detailed explanation on the type of highways and whether they are included for analysis is indicated in the table below:\n\n\n\nTypes of highway\nDetails\nIncluded for analysis?\n\n\n\n\nabandoned\nUnused/Abandoned roads that are only passable on foot/two-wheel vehicles\nNo\n\n\nbarrier\nRoadside barriers used to protect traffic from roadside obstacles or hazards (source)\nNo\n\n\nbridleway\nA bridle path, also bridleway, equestrian trail, horse riding path, ride, bridle road, or horse trail, is a trail or a thoroughfare that is used by people riding on horses. (source)\nNo\n\n\nbusway\nA dedicated, separate way for the use of public transport buses (source)\nYes\n\n\nconstruction\nNo details provided, could be a highway under construction or a highway used for construction purposes.\nNo (due to ambiguity of information)\n\n\ncorridor\nA land corridor is a type of highway or railway infrastructure that links two or more urban areas (source)\nYes\n\n\ncycleway\nBased on table above, its designated for bicycles and travel by foot is allowed\nNo (as the path is designated mainly for cyclists and might not be so useful for the scope of the exercise)\n\n\nescape\nA road, usually ending in a pile of sand, provided on a hill for drivers to drive into if their brakes fail or on a bend if they lose control of the turn (source)\nYes\n\n\nfootway\nBuilt pathways designed mainly or exclusively for pedestrian access (source)\nNo\n\n\nliving_street\nLittle information provided on use but based on table above, motorcars, motorcycles and pedestrians all have access\nYes\n\n\nmotorway\nExpressway with full access control (source)\nYes\n\n\nmotorway_link\nLink roads (slip roads/ramps) leading to and from a motorway (source) and based on above table, otorcars, motorcycles and pedestrians all have access\nYes\n\n\nparth\nNo relevant information found, assume is a spelling error and meant to be “path”.\nYes (to rename to “path” for analysis)\n\n\npath\nMulti-purpose paths intended for all non-motorized vehicles with the exception of motorcycles (source). Based on table above, motorcycles and pedestrians have access.\nYes\n\n\npaved\nGenerally indicates a road that been covered with flat blocks of stone or concrete, so that it is suitable for walking or driving on.\nYes\n\n\npedestrian\nBased on table above, access only allowed for bicycles and travel by foot\nNo\n\n\nprimary\nTop-level urban road across the city connecting trunk to trunk, or road of equal or greater importance than the primary intercity highway that runs through that city (source)\nYes\n\n\nprimary_link\nBased on table above, motorcars, motorcycles and pedestrians all have access\nYes\n\n\nproposed\nProposed cycling routes (source)\nNo\n\n\nraceway\nA course for racing (source)\nNo\n\n\nresidential\nA road within a residential area that gives the public access to one or multiple residences. Based on table above, motorcars, motorcycles and pedestrians all have access (source)\nYes\n\n\nroad\nBased on table above, motorcars, motorcycles and pedestrians all have access\nYes\n\n\nsecondary\nMain urban road connecting primary to primary or higher, or road of equal or greater importance than the secondary intercity highway that runs through that city. Based on table above, motorcars, motorcycles and pedestrians all have access (source)\nYes\n\n\nsecondary_link\nBased on table above, motorcars, motorcycles and pedestrians all have access\nYes\n\n\nservice\nA minor road that gives access to buildings/places outside a residential area such as an estate, religious site, attraction site, or a specific part of a large estate such as an industrial facility or university campus (source)\nYes\n\n\nsteps\nBased on table above, designated for travel by foot\nNo\n\n\ntertiary\nRoads that are more important than regular unclassified or residential roads, or roads that connect several unclassified or residential roads. Based on table above, motorcars, motorcycles and pedestrians all have access (source)\nYes\n\n\ntertiary_link\nBased on table above, motorcars, motorcycles and pedestrians all have access (source)\nYes\n\n\ntrack\nA road whose only function is to provide access to the surrounding land (agricultural, forestry purposes). Most of the time unpaved (source)\nYes\n\n\ntrunk\nBased on table above, motorcars, motorcycles and pedestrians all have access (source)\nYes\n\n\ntrunk_link\nBased on table above, motorcars, motorcycles and pedestrians all have access (source)\nYes\n\n\nunclassified\nA significant thru-traffic road used to reach the next settlement or another road of equal or higher importance regardless of its physical conditions. Based on table above, motorcars, motorcycles and pedestrians all have access (source)\nYes\n\n\n\n\nselectedroadlines &lt;- selectedroadlines %&gt;%\n  filter(highway %in% c(\"busway\",\"corridor\",\"escape\",\"living_street\",\"motorway\",\"motorway_link\", \"parth\", \"path\", \"paved\",\"primary\",\"primary_link\",\"residential\",\"road\",\"secondary\",\"secondary_link\",\"service\",\"tertiary\",\"tertiary_link\",\"track\",\"trunk\",\"trunk_link\",\"unclassified\")) %&gt;%\n  mutate(highway = recode(highway, \"parth\" = \"path\"))\n\n\n\n\nWe require only a subset of the selectedroadlines data to just roads within our area of interest, BMR and hence we utilise st_intersection() to find retain roads that are within the BMR boundaries given by provincedata32647:\n\nroadsbkk &lt;- st_intersection(selectedroadlines,provincedata32647)\n\nThis reduced the data to 564485 rows of data.\n\n\n\nWe save this cleaned data as a new rds file in the interim to facilitate further analysis and to avoid re-running st_intersection() function above:\n\nwrite_rds(roadsbkk,\"data/rds/roadsbkkinterim.rds\")\n\n\nroadsbkkinterim &lt;- read_rds(\"data/rds/roadsbkkinterim.rds\")\n\n\n\n\nWhile we have managed to trim the original dataset from 2792590 rows to 564485 (~20% of original dataset size), it is important that we plot the geometry of the data to determine if we would be able to meaningfully analyse it. Based on the plot below, it can be seen that there is still too much data causing overcrowding of the map.\n\nplot(st_geometry(roadsbkkinterim))\n\nWe first plot the distribution of classes of highway in the roadsbkkinterim dataset:\n\nroad_counts &lt;- roadsbkkinterim %&gt;%\n  count(highway) %&gt;%\n  mutate(percentage = n / sum(n) * 100)\n\nggplot(road_counts, aes(x = fct_reorder(highway, n))) + \n  geom_bar(aes(y = n), stat = \"identity\", fill = \"lightyellow\") +\n  geom_text(aes(label = paste0(round(percentage, 1), \"%\"), y = n + 0.5),\n            vjust = 0,\n            size = 3) +\n  labs(title = \"Distribution of classes of highways\", x = \"Class of Highway\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\nFrom the above, it is noted that service and residential highways make up 47.9% and 44.7% of the total road lines in the dataset. Beyond the information provided in the table above on highway details, we note the following about the service and residential highways:\n\nservice: denotes ways used for vehicle access to a building, parking lot, service station, business estate, beach, campsite etc. they are usually not part of the public street network and may be inaccessible to the general public (source)\nresidential: roads are typically short in length and likely to have lower speed limits and traffic calming measures in place (source)\n\nGiven the limited scale (in terms of size and potential impact to the general population) and that the sheer volume of the service and residential roads could overcrowd the other road lines in the data, we will omit them from our analysis:\nDropping service and residential highways:\n\nroadsbkk &lt;- roadsbkkinterim %&gt;%\n  filter(!(highway %in% c(\"service\",\"residential\")))\n\nWe then take a quick look at the geometry - while there are still a lot of data lines, the plot has cleaned up slightly and we will proceed with this data for now:\n\nplot(st_geometry(roadsbkk))\n\n\n\n\nWe then check the geometry of roadsbkk:\n\ngeometry_types &lt;- roadsbkk %&gt;%\n  st_geometry_type() %&gt;%\n  as.character() %&gt;%\n  unique()\n\ngeometry_types\n\nAs seen from the output above, the roadsbkk data comprises both linestring and multilinestring geometries. Linestring represents a single line, while MultiLinestring represents a collection of multiple lines. We need to simplify the data structure by converting multilinestring to linestring geometry to facilitate downstream analysis as the use of multilinestring might lead to error.\nWe utilise the st_cast() function to break down multilinestring geometries to linestring geometries:\n\nroadsbkk &lt;- st_cast(roadsbkk,\"LINESTRING\",group_or_split = TRUE)\n\nWe double check the geometry types and note from the output below that the geometry is now just linestring:\n\ngeometry_types &lt;- roadsbkk %&gt;%\n  st_geometry_type() %&gt;%\n  as.character() %&gt;%\n  unique()\n\ngeometry_types\n\n\n\n\nWe save this cleaned data as a rds file:\n\nwrite_rds(roadsbkk,\"data/rds/roadsbkk.rds\")\n\n\nroadsbkk &lt;- read_rds(\"data/rds/roadsbkk.rds\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#exploratory-data-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#exploratory-data-analysis",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "Factors to study:\n\nvehicle type\npresumed cause\nnumber of vehicles\nnumber of fatalities\nnumber of injuries\nweather conditions\nroad_description\nslope_description\nmonth\nday of week\ntime of day\ntime gap between incident occurrence and reporting\n\n\nggplot(roadacc, aes(x = province_en)) + \n  geom_bar(fill = \"skyblue\") +\n  labs(title = \"Distribution of Road Accidents across Provinces\", x = \"Province\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\nwhen file is read in sf, can easily convert to ppp"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "In this hands-on exercise, I will compute spatial weights using R. By the end to this hands-on exercise, the aim is to be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute spatial weights using appropriate functions of spdep package, and\ncalculate spatially lagged variables using appropriate functions of spdep package.\n\n\n\n\nTwo data sets will be used in this hands-on exercise:\n\nHunan county boundary layer. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\n\n\nTo carry out the analysis, we install and load the following R packages:\n\npacman::p_load(sf, spdep, tmap, tidyverse, knitr)\n\n\n\n\nThe geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.\n\n\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be a simple features object of sf.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\",\n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex04\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n\nNext, we will import Hunan_2012.csv into R using read_csv() of readr package. The output is R dataframe class.\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n\nThe code chunk below is used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 data frame. This is performed using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan,hunan2012) %&gt;%\n  select(1:4,7,15)\n\n\n\n\n\nWe then prepare a basemap and a choropleth map showing the distribution of GDP per capita (GDPPC) 2012 by using qtm() of tmap package.\n\nbasemap &lt;- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\nIn this section, poly2nb()of spdep package will be used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. Based on the documentation, note that the “queen” argument takes TRUE or FALSE as options. If not specified, the default is set to TRUE and the function will return a list of first order neighbours using the Queen criteria.\n\n\nThe code chunk below is used to compute the Queen contiguity weight matrix:\n\nwm_q &lt;- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report shows that there are 88 regions in Hunan. The most connected region has 11 neighbours. There are two regions with only one neighbour.\nFor each polygon in the polygon object, wm_q lists all neighboring polygons. For example, to see the neighbors for the first polygon in the object:\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\nThis indicates that Polygon 1 has five neighbours. The numbers represent the polygon IDs stored in hunan SpatialPolygons Data Frame class.\nThe county name of Polygon ID = 1 can be retrieved as follows:\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\nThe output reveals that Polygon ID = 1 is Anxiang county.\nTo reveal the names of the five neighbouring counties, the code chunk below is used:\n\nhunan$NAME_3[c(2,3,4,57,85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nThe GDPPC of these counties can be obtained via the following code chunk:\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nThe output indicates that the GDPPC of the five nearest neighbours of Anxiang county, based on the Queen’s method, are 20981, 34592, 24473, 21311 and 22879.\nThe complete weight matrix can be displayed using str():\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\n\nThe code chunk below is used to compute the ROOK contiguity weight matrix:\n\nwm_r &lt;- poly2nb(hunan,queen = FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nThe summary report indicates that there are 88 regions in Hunan. The most connected region has 10 neighbours and there are two regions with just one neighbour.\n\n\n\nA connectivity graph takes a point and displays a line to each neighboring point. As we are currently working with polygons, we will need to get points in order to make connectivity graphs. The most typical method for this is polygon centroids, which can be calculated using the sf package before moving onto the graphs.\n\n\nWe will need points to associate with each polygon before making the connectivity graph. It will be a little more complicated than just running st_centroid() on the sf object: us.bound.\nWe need the coordinates in a separate data frame. To do this we will use a mapping function which applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid(). We will use a map_dbl variation of map from the purrr package.\nTo get our longitude values we map the st_centroid() function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nWe do the same for latitude with one key difference - we access the second value for each centroid with [[2]]:\n\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nWith latitude and longitude, we use cbind to put longitude and latitude into the same object:\n\ncoords &lt;- cbind(longitude, latitude)\n\nWe check the first few observations to see if things are formatted correctly:\n\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\n\n\n\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\n\n\n\n\n\n\n\n\n\n\n\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n\n\n\n\n\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"Queen Contiguity\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\nplot(hunan$geometry, border=\"lightgrey\", main=\"ROOK Contiguity\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn this section, we will derive distance-based weight matrices using dnearneigh() of spdep package.\nThe function identifies neighbours of region points by Euclidean distance with a distance band of lower d1= and upper d2= bounds controlled by the bounds= argument. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in km will be calculated assuming the WGS84 reference ellipsoid.\n\n\nFirstly, the upper limit for distance band is determined using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() to a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, or otherwise in km.\nRemove the list structure of the returned object by using unlist().\n\n\n#coords &lt;- coordinates(hunan)\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\n\nThe distance weight matrix is then computed using dnearneigh() as shown in the code chunk below:\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nThe average number of links refer to the average number of neighbours each region has in a spatial network.\nstr() is then used to display the content of the wm_d62 weight matrix:\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\nAn alternative way to display the structure of the weight matrix is to combine table() and card() of spdep:\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\n\nn_comp &lt;- n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\n\nThe n.comb.nb() function is used to analyze the connectivity components of the spatial weights object. The output of 1 indicates that the entire spatial network consists of a single connected component i.e. is a path between any two regions in the spatial network, meaning that all regions are interconnected directly or indirectly.\nFurther details below:\n\nIf n_comp$nc returns a value of 1, it means that all regions in wm_d62 form a single connected component—i.e., every region is reachable from every other region through neighboring connections.\nIf n_comp$nc returns a value greater than 1, it means there are multiple disconnected groups of regions, where regions in one group cannot be reached from regions in another group through the neighbor links.\n\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\nThe code above then generates a frequency table of the connected components and the output indicates that all 88 regions in Hunan are part of a unique connected component (ID = 1).\n\n\nThe distance weight matrix is plotted using the following code chunk:\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\n\n\n\n\nThe red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.\nAlternatively, both lines can be plotted in adjacent charts uing the code chunk below:\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"1st nearest neighbours\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\nplot(hunan$geometry, border=\"lightgrey\", main=\"Distance link\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)\n\n\n\n\n\n\n\n\n\n\n\n\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below:\n\nknn6 &lt;- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\nThe content of the matrix can be displayed by using str():\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\nNote that each county has six neighbours.\n\n\nThe weight matrix can be plotted using the code chunk below:\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn this section, a spatial weight matrix will be derived based on Inversed Distance method.\nFirst, we will compute the distances between areas by using nbdists() of spdep:\n\ndist &lt;- nbdists(wm_q, coords, longlat = TRUE)\nids &lt;- lapply(dist, function(x) 1/(x))\nids\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034\n\n\n\n\n\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values.\nWhile this is the most intuitive way to summarise the neighbors’ values, it has one drawback in that the polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but there are other more robust options are available, notably style=“B”.\n\nrswm_q &lt;- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe zero.policy=TRUE option allows for lists of non-neighbors. Note that this should be used with caution as the user may not be aware of missing neighbors in their dataset however, a zero.policy=FALSE would return an error.\n\n\n\n\n\n\nS0, S1 and S2 are used to compute measures of spatial autocorrelation like Moran’s I.\n\n\n\n\nS0 = 88\n\nS0 is the sum of the weights. In the case of row-standardized weights, this equals the number of regions (88), because the sum of the weights for each region is 1.\n\nS1 = 37.86334\n\nS1 is a measure of the sum of the squared weights. It is used in the calculation of spatial autocorrelation statistics like Moran’s I to adjust for differences in the number of neighbors each region has.\n\nS2 = 365.9147\n\nS2 is another constant used in spatial autocorrelation calculations. It involves the sum of squared differences in the weights between regions and their neighbors, giving insight into the variation of the weighting structure across the spatial units.\n\n\n\n\nTo see the weight of the first polygon’s eight neighbors type:\n\nrswm_q$weights[1]\n\n[[1]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n\nEach neighbor is assigned a 0.2 of the total weight. This means that when R computes the average neighboring income values, each neighbor’s income will be multiplied by 0.2 before being tallied.\nUsing the same method, we can also derive a row standardised distance weight matrix by using the code chunk below:\n\nrswm_ids &lt;- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\n\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338 \n\n\n\n\n\n\n\n\nCode Breakdown:\n\n\n\n\nnb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE):\n\nnb2listw(): This function from the spdep package in R converts a neighbor list object (wm_q) into a spatial weights matrix (also known as a weights list object). The weights describe the spatial relationships between regions, where each region is assigned weights corresponding to its neighbors.\nwm_q: This is the neighbor list object, which defines the spatial neighbors for each region. It specifies which regions are neighbors to each other (e.g., through contiguity, distance, or k-nearest neighbors).\nglist=ids: This specifies the weights to be applied to the neighbors in wm_q. The ids list contains inverse distance weights for each region’s neighbors. Inverse distance weights mean that the strength of the spatial relationship between two regions is inversely proportional to the distance between them (i.e., closer regions have higher weights, and farther regions have lower weights).\nstyle=\"B\": The \"B\" style stands for binary weights. However, in this case, it means that the weights will not be normalized or row-standardized. Each weight will be based on the raw values provided in the glist (inverse distance values). The weight matrix will reflect the exact values in glist=ids.\nzero.policy=TRUE: This option ensures that regions with no neighbors (isolated regions) are handled properly. If zero.policy=TRUE, isolated regions will be assigned a weight of 0 instead of causing an error.\n\nrswm_ids: This stores the resulting spatial weights matrix (weights list object) created by nb2listw().\n\n\n\n\n\n\nIn this section, four different spatial lagged variables will be created:\n\nspatial lag with row-standardized weights,\nspatial lag as a sum of neighbouring values,\nspatial window average, and\nspatial window sum.\n\n\n\nWe will compute the average neighbor GDPPC value for each polygon. These values are often referred to as spatially lagged values.\n\nGDPPC.lag &lt;- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nRecall that in the previous section, the GDPPC of five counties were retrieved using the code chunk below:\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nWe can append the spatially lag GDPPC values onto hunan sf data frame by using the code chunk below:\n\nlag.list &lt;- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag.list)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag GDPPC\")\nhunan &lt;- left_join(hunan,lag.res)\n\nThe following shows the average neighboring income values (stored in the Inc.lag object) for each county:\n\nhead(hunan)\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25\n4 Changde 21102      Li      County      Li 24473  27737.50\n5 Changde 21103   Linli      County   Linli 25554  27270.25\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nNext, we will plot both the GDPPC and spatial lag GDPPC for comparison using the code chunk below:\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_gdppc &lt;- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\nWe can calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbors list, then apply a function that will assign binary weights, then we use glist = in the nb2listw function to explicitly assign these weights.\nWe start by applying a function that will assign a value of 1 per neighbor. This is done with lapply which applies a function across each value in the neighbors structure.\n\nb_weights &lt;- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 &lt;- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nWith the proper weights assigned, we can use lag.listw to compute a lag variable from our weight and GDPPC:\n\nlag_sum &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag_sum)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag_sum GDPPC\")\n\nWe examine the results using the code chunk below:\n\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nNext, we will append the lag_sum GDPPC field into the hunan sf data frame by using the code chunk below:\n\nhunan &lt;- left_join(hunan, lag.res)\n\nWe then plot both the GDPPC and Spatial Lag Sum GDPPC for comparison using the code chunk below:\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc &lt;- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\nThe spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights.\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep:\n\nwm_qs &lt;- include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nThe number of nonzero links, % nonzero weights and average number of links are 536, 6.921488 and 6.090909 respectively as compared to wm_q of 448, 5.785124 and 5.090909\nLet us take a good look at the neighbour list of area [1] by using the code chunk below:\n\nwm_qs[[1]]\n\n[1]  1  2  3  4 57 85\n\n\nNote that ID = 1 now has six instead of five neighbours.\nWe then obtain the weights with nb2listw():\n\nwm_qs &lt;- nb2listw(wm_qs)\nwm_qs\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\nLastly, we just need to create the lag variable from our weight structure and GDPPC variable:\n\nlag_w_avg_gpdpc &lt;- lag.listw(wm_qs, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame():\n\nlag.list.wm_qs &lt;- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))\nlag_wm_qs.res &lt;- as.data.frame(lag.list.wm_qs)\ncolnames(lag_wm_qs.res) &lt;- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\nNote that the third command line of the code chunk above renames the field names of lag_wm_q.res object into NAME_3 and lag_window_avg GDPPC respectively.\nNext, the code chunk below will be used to append lag_window_avg GDPPC values onto hunan sf data.frame by using left_join() of dplyr package:\n\nhunan &lt;- left_join(hunan, lag_wm_qs.res)\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below:\n\nhunan %&gt;%\n  select(\"County\", \n         \"lag GDPPC\", \n         \"lag_window_avg GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag GDPPC\nlag_window_avg GDPPC\ngeometry\n\n\n\n\nAnxiang\n24847.20\n24650.50\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n22724.80\n22434.17\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n24143.25\n26233.00\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n27737.50\n27084.60\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n27270.25\n26927.00\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n21248.80\n22230.17\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n43747.00\n47621.20\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n33582.71\n37160.12\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n45651.17\n49224.71\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n32027.62\n29886.89\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n32671.00\n26627.50\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n20810.00\n22690.17\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n25711.50\n25366.40\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n30672.33\n25825.75\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n33457.75\n30329.00\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n31689.20\n32682.83\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n20269.00\n25948.62\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n23901.60\n23987.67\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n25126.17\n25463.14\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n21903.43\n21904.38\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n22718.60\n23127.50\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n25918.80\n25949.83\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n20307.00\n20018.75\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n20023.80\n19524.17\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n16576.80\n18955.00\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n18667.00\n17800.40\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n14394.67\n15883.00\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n19848.80\n18831.33\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n15516.33\n14832.50\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518.00\n17965.00\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n17572.00\n17159.89\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n15200.12\n16199.44\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n18413.80\n18764.50\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n14419.33\n26878.75\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n24094.50\n23188.86\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n22019.83\n20788.14\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n12923.50\n12365.20\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n14756.00\n15985.00\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n13869.80\n13764.83\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n12296.67\n11907.43\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n15775.17\n17128.14\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n14382.86\n14593.62\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n11566.33\n11644.29\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n13199.50\n12706.00\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n23412.00\n21712.29\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n39541.00\n43548.25\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n36186.60\n35049.00\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n16559.60\n16226.83\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n20772.50\n19294.40\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n19471.20\n18156.00\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n19827.33\n19954.75\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n15466.80\n18145.17\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n12925.67\n12132.75\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n18577.17\n18419.29\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n14943.00\n14050.83\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n24913.00\n23619.75\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n25093.00\n24552.71\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n24428.80\n24733.67\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n17003.00\n16762.60\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n21143.75\n20932.60\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n20435.00\n19467.75\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n17131.33\n18334.00\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n24569.75\n22541.00\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n23835.50\n26028.00\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360.00\n29128.50\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n47383.40\n46569.00\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n55157.75\n47576.60\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n37058.00\n36545.50\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n21546.67\n20838.50\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n23348.67\n22531.00\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n42323.67\n42115.50\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n28938.60\n27619.00\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n25880.80\n27611.33\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n47345.67\n44523.29\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n18711.33\n18127.43\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n29087.29\n28746.38\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n20748.29\n20734.50\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n35933.71\n33880.62\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n15439.71\n14716.38\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n29787.50\n28516.22\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n18145.00\n18086.14\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n21617.00\n21244.50\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n29203.89\n29568.80\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n41363.67\n48119.71\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n22259.09\n22310.75\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n44939.56\n43151.60\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n16902.00\n17133.40\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n16930.00\n17009.33\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_gdppc and w_ave_gdppc maps next to each other for quick comparison:\n\nw_avg_gdppc &lt;- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\nThe spatial window sum is the counter part of the window average, but without using row-standardized weights.\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep:\n\nwm_qs &lt;- include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nNext, we will assign binary weights to the neighbour structure that includes the diagonal element:\n\nb_weights &lt;- lapply(wm_qs, function(x) 0*x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1 1\n\n\nNote that now [1] has six instead of five neighbours .\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\n\nb_weights2 &lt;- nb2listw(wm_qs, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 536 1072 14160\n\n\nWith our new weight structure, we can compute the lag variable with lag.listw():\n\nw_sum_gdppc &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 147903 134605 131165 135423 134635 133381 238106 297281 344573 268982\n[11] 106510 136141 126832 103303 151645 196097 207589 143926 178242 175235\n[21] 138765 155699 160150 117145 113730  89002  63532 112988  59330  35930\n[31] 154439 145795 112587 107515 162322 145517  61826  79925  82589  83352\n[41] 119897 116749  81510  63530 151986 174193 210294  97361  96472 108936\n[51]  79819 108871  48531 128935  84305 188958 171869 148402  83813 104663\n[61] 155742  73336 112705  78084  58257 279414 237883 219273  83354  90124\n[71] 168462 165714 165668 311663 126892 229971 165876 271045 117731 256646\n[81] 126603 127467 295688 336838 267729 431516  85667  51028\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame():\n\nw_sum_gdppc.res &lt;- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) &lt;- c(\"NAME_3\", \"w_sum GDPPC\")\n\nNote that te second command line on the code chunk above renames the field names of w_sum_gdppc.res object into NAME_3 and w_sum GDPPC respectively.\nNext, the code chunk below will be used to append w_sum GDPPC values onto hunan sf data.frame by using left_join() of dplyr package:\n\nhunan &lt;- left_join(hunan, w_sum_gdppc.res)\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below:\n\nhunan %&gt;%\n  select(\"County\", \"lag_sum GDPPC\", \"w_sum GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag_sum GDPPC\nw_sum GDPPC\ngeometry\n\n\n\n\nAnxiang\n124236\n147903\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n113624\n134605\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n96573\n131165\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n110950\n135423\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n109081\n134635\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n106244\n133381\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n174988\n238106\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n235079\n297281\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n273907\n344573\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n256221\n268982\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n98013\n106510\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n104050\n136141\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n102846\n126832\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n92017\n103303\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n133831\n151645\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n158446\n196097\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n141883\n207589\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n119508\n143926\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n150757\n178242\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n153324\n175235\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n113593\n138765\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n129594\n155699\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n142149\n160150\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n100119\n117145\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n82884\n113730\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n74668\n89002\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n43184\n63532\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n99244\n112988\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n46549\n59330\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518\n35930\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n140576\n154439\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n121601\n145795\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n92069\n112587\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n43258\n107515\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n144567\n162322\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n132119\n145517\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n51694\n61826\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n59024\n79925\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n69349\n82589\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n73780\n83352\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n94651\n119897\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n100680\n116749\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n69398\n81510\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n52798\n63530\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n140472\n151986\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n118623\n174193\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n180933\n210294\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n82798\n97361\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n83090\n96472\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n97356\n108936\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n59482\n79819\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n77334\n108871\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n38777\n48531\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n111463\n128935\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n74715\n84305\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n174391\n188958\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n150558\n171869\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n122144\n148402\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n68012\n83813\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n84575\n104663\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n143045\n155742\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n51394\n73336\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n98279\n112705\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n47671\n78084\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360\n58257\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n236917\n279414\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n220631\n237883\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n185290\n219273\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n64640\n83354\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n70046\n90124\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n126971\n168462\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n144693\n165714\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n129404\n165668\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n284074\n311663\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n112268\n126892\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n203611\n229971\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n145238\n165876\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n251536\n271045\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n108078\n117731\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n238300\n256646\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n108870\n126603\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n108085\n127467\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n262835\n295688\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n248182\n336838\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n244850\n267729\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n404456\n431516\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n67608\n85667\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n33860\n51028\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_sum GDPPC and w_sum_gdppc maps next to each other for quick comparison:\n\nw_sum_gdppc &lt;- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreating Neighbours using sf objects"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#overview",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "In this hands-on exercise, I will compute spatial weights using R. By the end to this hands-on exercise, the aim is to be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute spatial weights using appropriate functions of spdep package, and\ncalculate spatially lagged variables using appropriate functions of spdep package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#study-area-and-data",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#study-area-and-data",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "Two data sets will be used in this hands-on exercise:\n\nHunan county boundary layer. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#installing-and-loading-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#installing-and-loading-r-packages",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "To carry out the analysis, we install and load the following R packages:\n\npacman::p_load(sf, spdep, tmap, tidyverse, knitr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#getting-the-data-into-r-environment",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#getting-the-data-into-r-environment",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.\n\n\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be a simple features object of sf.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\",\n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex04\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n\nNext, we will import Hunan_2012.csv into R using read_csv() of readr package. The output is R dataframe class.\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n\nThe code chunk below is used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 data frame. This is performed using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan,hunan2012) %&gt;%\n  select(1:4,7,15)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-regional-development-indicator",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-regional-development-indicator",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "We then prepare a basemap and a choropleth map showing the distribution of GDP per capita (GDPPC) 2012 by using qtm() of tmap package.\n\nbasemap &lt;- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#computing-contiguity-spatial-weights",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#computing-contiguity-spatial-weights",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "In this section, poly2nb()of spdep package will be used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. Based on the documentation, note that the “queen” argument takes TRUE or FALSE as options. If not specified, the default is set to TRUE and the function will return a list of first order neighbours using the Queen criteria.\n\n\nThe code chunk below is used to compute the Queen contiguity weight matrix:\n\nwm_q &lt;- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report shows that there are 88 regions in Hunan. The most connected region has 11 neighbours. There are two regions with only one neighbour.\nFor each polygon in the polygon object, wm_q lists all neighboring polygons. For example, to see the neighbors for the first polygon in the object:\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\nThis indicates that Polygon 1 has five neighbours. The numbers represent the polygon IDs stored in hunan SpatialPolygons Data Frame class.\nThe county name of Polygon ID = 1 can be retrieved as follows:\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\nThe output reveals that Polygon ID = 1 is Anxiang county.\nTo reveal the names of the five neighbouring counties, the code chunk below is used:\n\nhunan$NAME_3[c(2,3,4,57,85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nThe GDPPC of these counties can be obtained via the following code chunk:\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nThe output indicates that the GDPPC of the five nearest neighbours of Anxiang county, based on the Queen’s method, are 20981, 34592, 24473, 21311 and 22879.\nThe complete weight matrix can be displayed using str():\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\n\nThe code chunk below is used to compute the ROOK contiguity weight matrix:\n\nwm_r &lt;- poly2nb(hunan,queen = FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nThe summary report indicates that there are 88 regions in Hunan. The most connected region has 10 neighbours and there are two regions with just one neighbour.\n\n\n\nA connectivity graph takes a point and displays a line to each neighboring point. As we are currently working with polygons, we will need to get points in order to make connectivity graphs. The most typical method for this is polygon centroids, which can be calculated using the sf package before moving onto the graphs.\n\n\nWe will need points to associate with each polygon before making the connectivity graph. It will be a little more complicated than just running st_centroid() on the sf object: us.bound.\nWe need the coordinates in a separate data frame. To do this we will use a mapping function which applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid(). We will use a map_dbl variation of map from the purrr package.\nTo get our longitude values we map the st_centroid() function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nWe do the same for latitude with one key difference - we access the second value for each centroid with [[2]]:\n\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nWith latitude and longitude, we use cbind to put longitude and latitude into the same object:\n\ncoords &lt;- cbind(longitude, latitude)\n\nWe check the first few observations to see if things are formatted correctly:\n\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\n\n\n\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\n\n\n\n\n\n\n\n\n\n\n\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n\n\n\n\n\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"Queen Contiguity\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\nplot(hunan$geometry, border=\"lightgrey\", main=\"ROOK Contiguity\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#computing-distanced-based-neighbours",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#computing-distanced-based-neighbours",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "In this section, we will derive distance-based weight matrices using dnearneigh() of spdep package.\nThe function identifies neighbours of region points by Euclidean distance with a distance band of lower d1= and upper d2= bounds controlled by the bounds= argument. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in km will be calculated assuming the WGS84 reference ellipsoid.\n\n\nFirstly, the upper limit for distance band is determined using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() to a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, or otherwise in km.\nRemove the list structure of the returned object by using unlist().\n\n\n#coords &lt;- coordinates(hunan)\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\n\nThe distance weight matrix is then computed using dnearneigh() as shown in the code chunk below:\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nThe average number of links refer to the average number of neighbours each region has in a spatial network.\nstr() is then used to display the content of the wm_d62 weight matrix:\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\nAn alternative way to display the structure of the weight matrix is to combine table() and card() of spdep:\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\n\nn_comp &lt;- n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\n\nThe n.comb.nb() function is used to analyze the connectivity components of the spatial weights object. The output of 1 indicates that the entire spatial network consists of a single connected component i.e. is a path between any two regions in the spatial network, meaning that all regions are interconnected directly or indirectly.\nFurther details below:\n\nIf n_comp$nc returns a value of 1, it means that all regions in wm_d62 form a single connected component—i.e., every region is reachable from every other region through neighboring connections.\nIf n_comp$nc returns a value greater than 1, it means there are multiple disconnected groups of regions, where regions in one group cannot be reached from regions in another group through the neighbor links.\n\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\nThe code above then generates a frequency table of the connected components and the output indicates that all 88 regions in Hunan are part of a unique connected component (ID = 1).\n\n\nThe distance weight matrix is plotted using the following code chunk:\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\n\n\n\n\nThe red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.\nAlternatively, both lines can be plotted in adjacent charts uing the code chunk below:\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"1st nearest neighbours\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\nplot(hunan$geometry, border=\"lightgrey\", main=\"Distance link\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)\n\n\n\n\n\n\n\n\n\n\n\n\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below:\n\nknn6 &lt;- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\nThe content of the matrix can be displayed by using str():\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\nNote that each county has six neighbours.\n\n\nThe weight matrix can be plotted using the code chunk below:\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#weights-based-on-idw",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#weights-based-on-idw",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "In this section, a spatial weight matrix will be derived based on Inversed Distance method.\nFirst, we will compute the distances between areas by using nbdists() of spdep:\n\ndist &lt;- nbdists(wm_q, coords, longlat = TRUE)\nids &lt;- lapply(dist, function(x) 1/(x))\nids\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#row-standardised-weight-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#row-standardised-weight-matrix",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "Next, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values.\nWhile this is the most intuitive way to summarise the neighbors’ values, it has one drawback in that the polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but there are other more robust options are available, notably style=“B”.\n\nrswm_q &lt;- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe zero.policy=TRUE option allows for lists of non-neighbors. Note that this should be used with caution as the user may not be aware of missing neighbors in their dataset however, a zero.policy=FALSE would return an error.\n\n\n\n\n\n\nS0, S1 and S2 are used to compute measures of spatial autocorrelation like Moran’s I.\n\n\n\n\nS0 = 88\n\nS0 is the sum of the weights. In the case of row-standardized weights, this equals the number of regions (88), because the sum of the weights for each region is 1.\n\nS1 = 37.86334\n\nS1 is a measure of the sum of the squared weights. It is used in the calculation of spatial autocorrelation statistics like Moran’s I to adjust for differences in the number of neighbors each region has.\n\nS2 = 365.9147\n\nS2 is another constant used in spatial autocorrelation calculations. It involves the sum of squared differences in the weights between regions and their neighbors, giving insight into the variation of the weighting structure across the spatial units.\n\n\n\n\nTo see the weight of the first polygon’s eight neighbors type:\n\nrswm_q$weights[1]\n\n[[1]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n\nEach neighbor is assigned a 0.2 of the total weight. This means that when R computes the average neighboring income values, each neighbor’s income will be multiplied by 0.2 before being tallied.\nUsing the same method, we can also derive a row standardised distance weight matrix by using the code chunk below:\n\nrswm_ids &lt;- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\n\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338 \n\n\n\n\n\n\n\n\nCode Breakdown:\n\n\n\n\nnb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE):\n\nnb2listw(): This function from the spdep package in R converts a neighbor list object (wm_q) into a spatial weights matrix (also known as a weights list object). The weights describe the spatial relationships between regions, where each region is assigned weights corresponding to its neighbors.\nwm_q: This is the neighbor list object, which defines the spatial neighbors for each region. It specifies which regions are neighbors to each other (e.g., through contiguity, distance, or k-nearest neighbors).\nglist=ids: This specifies the weights to be applied to the neighbors in wm_q. The ids list contains inverse distance weights for each region’s neighbors. Inverse distance weights mean that the strength of the spatial relationship between two regions is inversely proportional to the distance between them (i.e., closer regions have higher weights, and farther regions have lower weights).\nstyle=\"B\": The \"B\" style stands for binary weights. However, in this case, it means that the weights will not be normalized or row-standardized. Each weight will be based on the raw values provided in the glist (inverse distance values). The weight matrix will reflect the exact values in glist=ids.\nzero.policy=TRUE: This option ensures that regions with no neighbors (isolated regions) are handled properly. If zero.policy=TRUE, isolated regions will be assigned a weight of 0 instead of causing an error.\n\nrswm_ids: This stores the resulting spatial weights matrix (weights list object) created by nb2listw()."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#application-of-spatial-weight-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#application-of-spatial-weight-matrix",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "In this section, four different spatial lagged variables will be created:\n\nspatial lag with row-standardized weights,\nspatial lag as a sum of neighbouring values,\nspatial window average, and\nspatial window sum.\n\n\n\nWe will compute the average neighbor GDPPC value for each polygon. These values are often referred to as spatially lagged values.\n\nGDPPC.lag &lt;- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nRecall that in the previous section, the GDPPC of five counties were retrieved using the code chunk below:\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nWe can append the spatially lag GDPPC values onto hunan sf data frame by using the code chunk below:\n\nlag.list &lt;- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag.list)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag GDPPC\")\nhunan &lt;- left_join(hunan,lag.res)\n\nThe following shows the average neighboring income values (stored in the Inc.lag object) for each county:\n\nhead(hunan)\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25\n4 Changde 21102      Li      County      Li 24473  27737.50\n5 Changde 21103   Linli      County   Linli 25554  27270.25\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nNext, we will plot both the GDPPC and spatial lag GDPPC for comparison using the code chunk below:\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_gdppc &lt;- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\nWe can calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbors list, then apply a function that will assign binary weights, then we use glist = in the nb2listw function to explicitly assign these weights.\nWe start by applying a function that will assign a value of 1 per neighbor. This is done with lapply which applies a function across each value in the neighbors structure.\n\nb_weights &lt;- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 &lt;- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nWith the proper weights assigned, we can use lag.listw to compute a lag variable from our weight and GDPPC:\n\nlag_sum &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag_sum)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag_sum GDPPC\")\n\nWe examine the results using the code chunk below:\n\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nNext, we will append the lag_sum GDPPC field into the hunan sf data frame by using the code chunk below:\n\nhunan &lt;- left_join(hunan, lag.res)\n\nWe then plot both the GDPPC and Spatial Lag Sum GDPPC for comparison using the code chunk below:\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc &lt;- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\nThe spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights.\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep:\n\nwm_qs &lt;- include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nThe number of nonzero links, % nonzero weights and average number of links are 536, 6.921488 and 6.090909 respectively as compared to wm_q of 448, 5.785124 and 5.090909\nLet us take a good look at the neighbour list of area [1] by using the code chunk below:\n\nwm_qs[[1]]\n\n[1]  1  2  3  4 57 85\n\n\nNote that ID = 1 now has six instead of five neighbours.\nWe then obtain the weights with nb2listw():\n\nwm_qs &lt;- nb2listw(wm_qs)\nwm_qs\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\nLastly, we just need to create the lag variable from our weight structure and GDPPC variable:\n\nlag_w_avg_gpdpc &lt;- lag.listw(wm_qs, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame():\n\nlag.list.wm_qs &lt;- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))\nlag_wm_qs.res &lt;- as.data.frame(lag.list.wm_qs)\ncolnames(lag_wm_qs.res) &lt;- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\nNote that the third command line of the code chunk above renames the field names of lag_wm_q.res object into NAME_3 and lag_window_avg GDPPC respectively.\nNext, the code chunk below will be used to append lag_window_avg GDPPC values onto hunan sf data.frame by using left_join() of dplyr package:\n\nhunan &lt;- left_join(hunan, lag_wm_qs.res)\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below:\n\nhunan %&gt;%\n  select(\"County\", \n         \"lag GDPPC\", \n         \"lag_window_avg GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag GDPPC\nlag_window_avg GDPPC\ngeometry\n\n\n\n\nAnxiang\n24847.20\n24650.50\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n22724.80\n22434.17\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n24143.25\n26233.00\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n27737.50\n27084.60\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n27270.25\n26927.00\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n21248.80\n22230.17\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n43747.00\n47621.20\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n33582.71\n37160.12\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n45651.17\n49224.71\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n32027.62\n29886.89\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n32671.00\n26627.50\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n20810.00\n22690.17\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n25711.50\n25366.40\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n30672.33\n25825.75\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n33457.75\n30329.00\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n31689.20\n32682.83\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n20269.00\n25948.62\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n23901.60\n23987.67\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n25126.17\n25463.14\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n21903.43\n21904.38\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n22718.60\n23127.50\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n25918.80\n25949.83\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n20307.00\n20018.75\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n20023.80\n19524.17\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n16576.80\n18955.00\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n18667.00\n17800.40\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n14394.67\n15883.00\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n19848.80\n18831.33\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n15516.33\n14832.50\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518.00\n17965.00\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n17572.00\n17159.89\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n15200.12\n16199.44\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n18413.80\n18764.50\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n14419.33\n26878.75\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n24094.50\n23188.86\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n22019.83\n20788.14\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n12923.50\n12365.20\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n14756.00\n15985.00\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n13869.80\n13764.83\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n12296.67\n11907.43\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n15775.17\n17128.14\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n14382.86\n14593.62\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n11566.33\n11644.29\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n13199.50\n12706.00\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n23412.00\n21712.29\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n39541.00\n43548.25\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n36186.60\n35049.00\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n16559.60\n16226.83\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n20772.50\n19294.40\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n19471.20\n18156.00\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n19827.33\n19954.75\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n15466.80\n18145.17\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n12925.67\n12132.75\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n18577.17\n18419.29\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n14943.00\n14050.83\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n24913.00\n23619.75\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n25093.00\n24552.71\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n24428.80\n24733.67\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n17003.00\n16762.60\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n21143.75\n20932.60\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n20435.00\n19467.75\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n17131.33\n18334.00\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n24569.75\n22541.00\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n23835.50\n26028.00\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360.00\n29128.50\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n47383.40\n46569.00\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n55157.75\n47576.60\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n37058.00\n36545.50\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n21546.67\n20838.50\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n23348.67\n22531.00\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n42323.67\n42115.50\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n28938.60\n27619.00\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n25880.80\n27611.33\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n47345.67\n44523.29\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n18711.33\n18127.43\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n29087.29\n28746.38\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n20748.29\n20734.50\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n35933.71\n33880.62\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n15439.71\n14716.38\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n29787.50\n28516.22\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n18145.00\n18086.14\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n21617.00\n21244.50\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n29203.89\n29568.80\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n41363.67\n48119.71\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n22259.09\n22310.75\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n44939.56\n43151.60\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n16902.00\n17133.40\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n16930.00\n17009.33\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_gdppc and w_ave_gdppc maps next to each other for quick comparison:\n\nw_avg_gdppc &lt;- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\nThe spatial window sum is the counter part of the window average, but without using row-standardized weights.\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep:\n\nwm_qs &lt;- include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nNext, we will assign binary weights to the neighbour structure that includes the diagonal element:\n\nb_weights &lt;- lapply(wm_qs, function(x) 0*x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1 1\n\n\nNote that now [1] has six instead of five neighbours .\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\n\nb_weights2 &lt;- nb2listw(wm_qs, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 536 1072 14160\n\n\nWith our new weight structure, we can compute the lag variable with lag.listw():\n\nw_sum_gdppc &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 147903 134605 131165 135423 134635 133381 238106 297281 344573 268982\n[11] 106510 136141 126832 103303 151645 196097 207589 143926 178242 175235\n[21] 138765 155699 160150 117145 113730  89002  63532 112988  59330  35930\n[31] 154439 145795 112587 107515 162322 145517  61826  79925  82589  83352\n[41] 119897 116749  81510  63530 151986 174193 210294  97361  96472 108936\n[51]  79819 108871  48531 128935  84305 188958 171869 148402  83813 104663\n[61] 155742  73336 112705  78084  58257 279414 237883 219273  83354  90124\n[71] 168462 165714 165668 311663 126892 229971 165876 271045 117731 256646\n[81] 126603 127467 295688 336838 267729 431516  85667  51028\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame():\n\nw_sum_gdppc.res &lt;- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) &lt;- c(\"NAME_3\", \"w_sum GDPPC\")\n\nNote that te second command line on the code chunk above renames the field names of w_sum_gdppc.res object into NAME_3 and w_sum GDPPC respectively.\nNext, the code chunk below will be used to append w_sum GDPPC values onto hunan sf data.frame by using left_join() of dplyr package:\n\nhunan &lt;- left_join(hunan, w_sum_gdppc.res)\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below:\n\nhunan %&gt;%\n  select(\"County\", \"lag_sum GDPPC\", \"w_sum GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag_sum GDPPC\nw_sum GDPPC\ngeometry\n\n\n\n\nAnxiang\n124236\n147903\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n113624\n134605\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n96573\n131165\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n110950\n135423\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n109081\n134635\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n106244\n133381\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n174988\n238106\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n235079\n297281\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n273907\n344573\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n256221\n268982\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n98013\n106510\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n104050\n136141\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n102846\n126832\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n92017\n103303\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n133831\n151645\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n158446\n196097\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n141883\n207589\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n119508\n143926\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n150757\n178242\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n153324\n175235\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n113593\n138765\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n129594\n155699\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n142149\n160150\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n100119\n117145\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n82884\n113730\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n74668\n89002\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n43184\n63532\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n99244\n112988\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n46549\n59330\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518\n35930\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n140576\n154439\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n121601\n145795\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n92069\n112587\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n43258\n107515\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n144567\n162322\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n132119\n145517\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n51694\n61826\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n59024\n79925\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n69349\n82589\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n73780\n83352\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n94651\n119897\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n100680\n116749\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n69398\n81510\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n52798\n63530\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n140472\n151986\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n118623\n174193\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n180933\n210294\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n82798\n97361\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n83090\n96472\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n97356\n108936\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n59482\n79819\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n77334\n108871\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n38777\n48531\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n111463\n128935\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n74715\n84305\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n174391\n188958\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n150558\n171869\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n122144\n148402\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n68012\n83813\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n84575\n104663\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n143045\n155742\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n51394\n73336\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n98279\n112705\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n47671\n78084\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360\n58257\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n236917\n279414\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n220631\n237883\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n185290\n219273\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n64640\n83354\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n70046\n90124\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n126971\n168462\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n144693\n165714\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n129404\n165668\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n284074\n311663\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n112268\n126892\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n203611\n229971\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n145238\n165876\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n251536\n271045\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n108078\n117731\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n238300\n256646\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n108870\n126603\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n108085\n127467\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n262835\n295688\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n248182\n336838\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n244850\n267729\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n404456\n431516\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n67608\n85667\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n33860\n51028\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_sum GDPPC and w_sum_gdppc maps next to each other for quick comparison:\n\nw_sum_gdppc &lt;- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#references",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "Creating Neighbours using sf objects"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "title": "In-class Exercise 4",
    "section": "",
    "text": "Two data sets will be used in this hands-on exercise:\n\nHunan county boundary layer. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\n\n\nTo carry out the analysis, we install and load the following R packages:\n\npacman::p_load(sf, ggstatsplot, spdep, tmap, tidyverse, knitr,GWmodel)\n\n\n\n\nThe geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.\n\nImport Hunan shapefileImport Hunan 2012Joining Hunan and Hunan 2012\n\n\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be a simple features object of sf.\n\nhunan_sf &lt;- st_read(dsn = \"data/geospatial\",\n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\In-class_Ex\\In-class_Ex04\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\nnote that above data has not been transformed - this is intentional for this use case so that know that there are packages that have provision for projection\nnote that geometry type is single polygon - always note that administrative boundaries can be captured as polygon or multipolygon\n\n\n\nNext, we will import Hunan_2012.csv into R using read_csv() of readr package. The output is R dataframe class.\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\ndo not use read.csv (Base R)\n\n\n\nThe code chunk below is used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 data frame. This is performed using left_join() of dplyr package.\n\nhunan_sf &lt;- left_join(hunan_sf,hunan2012) %&gt;%\n  select(1:3,7,15,16,31,32)\n\n\ncombining spatial data with aspatial data - use dplyr left_join() function but in reality, not so straightforward as need common identifier between the datasets i.e. value in a particular variable must be the same - need to carefully check through the names and actual values in the datasets to make sure they are the same else might not be able to join (recall hands-on ex01 where administrative boundary of singapore is in uppercase while that in singstat data is a mix of upper and lowercase)\nboth datasets have “County” column hence while code chunk did not define the join field, the code automatically uses the “County” column to join. if hunan_sf did not have “County” column, would have mention the join argument by as “NAME_3” in hunan_sf and “County” in hunan2012.\nif there’s a lot of names in the field, can do a unique match to compare\nSelect chooses these columns: “NAME_2”, “ID_3”, “NAME_3”, “County”,“GDPPC”, “GIO”,“Agri”,“Service”, “geometry”\n\n\n\n\n\n\n\n\nhunan_sp &lt;- hunan_sf %&gt;%\n  as_Spatial()\n\n\n\nsp separates the components of data under sf:\n\ndata contains all data except geometry data\nunder polygons, geometry data\n\n\nTyping the below into console, we note the data object type:\n\n\n\n\n\n\n\nboth CV and AIC methods produce the same results - that the optimum number of neighbours is 22 but note that this is not always the case i.e. can produce different results\n\n\nCross-validationAIC\n\n\n\nbw_CV &lt;- bw.gwr(GDPPC ~ 1,\n                data = hunan_sp,\n                approach = \"CV\",\n                adaptive = TRUE,\n                kernel = \"bisquare\",\n                longlat = T)\n\nAdaptive bandwidth: 62 CV score: 15515442343 \nAdaptive bandwidth: 46 CV score: 14937956887 \nAdaptive bandwidth: 36 CV score: 14408561608 \nAdaptive bandwidth: 29 CV score: 14198527496 \nAdaptive bandwidth: 26 CV score: 13898800611 \nAdaptive bandwidth: 22 CV score: 13662299974 \nAdaptive bandwidth: 22 CV score: 13662299974 \n\n\n\nfirst line is dependent variable ~ independent variable (put an arbitrary number 1 if don’t have independent variable), else without formula, won’t work and give error message –&gt; this is a global model\nsecond line is hunan_sp data\napproach either CV or AIC (see next tab)\nadaptive = FALSE means calculating fixed bandwith, TRUE means adaptive bandwidth –&gt; in this case, indicate the number of neighbours (note that it starts with 62 then slowly bury the number of neighbours)\nkernel is the same as spatial point pattern analysis, can change to other methods, not likely to affect much\nlonglat = T, indicate that its in decimal degree - great circle distances will be calculated\nnote that the results are in km\nbased on GDPPC, optimum number of neighbours is 22\n\n\nbw_CV\n\n[1] 22\n\n\n\n\n\nsmaller AIC value, the better. at some point, AIC points will converge and no longer change/change rate very small - that would be optimal value\n\n\nbw_AIC &lt;- bw.gwr(GDPPC ~ 1,\n                data = hunan_sp,\n                approach = \"AIC\",\n                adaptive = TRUE,\n                kernel = \"bisquare\",\n                longlat = T)\n\nAdaptive bandwidth (number of nearest neighbours): 62 AICc value: 1923.156 \nAdaptive bandwidth (number of nearest neighbours): 46 AICc value: 1920.469 \nAdaptive bandwidth (number of nearest neighbours): 36 AICc value: 1917.324 \nAdaptive bandwidth (number of nearest neighbours): 29 AICc value: 1916.661 \nAdaptive bandwidth (number of nearest neighbours): 26 AICc value: 1914.897 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \n\n\n\nnote that the change in AIC becomes very small and eventually stops\nbased on GDPPC, optimum number of neighbours is 22\n\n\nbw_AIC\n\n[1] 22\n\n\n\n\n\n\n\n\n\ngwstat &lt;- gwss(data = hunan_sp,\n               vars = \"GDPPC\",\n               bw = bw_AIC,\n               kernel = \"bisquare\",\n               adaptive = TRUE,\n               longlat = T)\n\n\nneed to make sure that the bottom 3 fields are the same as the above in 4.5.1 Determine adaptive bandwidth\n is a gwss object (specially customised object - list that contains many things)\n\nmostly are metadata\nwhat is of interest is SDF - spatialdataframe - contains all spatial information + data information\n\ncan click on logo:\n\n\n\nGDPPC_LM: local mean (have 88 local means that is based on average of 22 neighbours)\nGDPPC_LSD: local standard deviation\nGDPPC_LSKe: local standard estimations\nGDPPC_LCV: local co-variance\n\nAll are taking the average of 22 neighbours\n\n\n\n\nCode chunk below is used to extract SDF data table from gwss object output from gwss(). It will be converted into data.frame by using as.data.frame():\n\ngwstat_df &lt;- as.data.frame(gwstat$SDF)\n\nNext, cbind() is used to append the newly derived data.frame onto hunan_sf sf data frame:\n\nhunan_gstat &lt;- cbind(hunan_sf,gwstat_df)\n\n\nnote that only able to use cbind() with the understanding that there’s no change in sequence of data in both dataframes\n\n\n\n\n\nGeographically Weighted MeanThe code\n\n\n\n\n\n\n\n\n\n\n\n\nhelp to generalise the pattern\ntm_fill n=5 sets the number of gradient\ntm_borders draw the border around polygon, =1 is full black, closer to 0 - greater transparency\ntm_layout add in other details\n\n\n\n\ntm_shape(hunan_gstat)+\n  tm_fill(\"GDPPC_LM\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Distribution of geographically weighted mean\",\n            main.title.position = \"center\",\n            main.title.size = 1.0,\n            legend.text.size = 0.6,\n            legend.height = 1.20,\n            legend.width = 1.20,\n            frame = TRUE)+\n  tm_text(\"County\", size = 0.5)\n\n\n\n\n\n\n\n\nConventional statistical solutionThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnote that results for CV and AIC are not the same - AIC optimum is 160.5517, almost twice of CV optimum of 76.29126 (longer bandwidth have smoother output, shorter bandwidth have more details)\n\n\nCross-validationAIC\n\n\n\nbw_CV &lt;- bw.gwr(GDPPC ~ 1,\n                data = hunan_sp,\n                approach = \"CV\",\n                adaptive = FALSE,\n                kernel = \"bisquare\",\n                longlat = T)\n\nFixed bandwidth: 357.4897 CV score: 16265191728 \nFixed bandwidth: 220.985 CV score: 14954930931 \nFixed bandwidth: 136.6204 CV score: 14134185837 \nFixed bandwidth: 84.48025 CV score: 13693362460 \nFixed bandwidth: 52.25585 CV score: Inf \nFixed bandwidth: 104.396 CV score: 13891052305 \nFixed bandwidth: 72.17162 CV score: 13577893677 \nFixed bandwidth: 64.56447 CV score: 14681160609 \nFixed bandwidth: 76.8731 CV score: 13444716890 \nFixed bandwidth: 79.77877 CV score: 13503296834 \nFixed bandwidth: 75.07729 CV score: 13452450771 \nFixed bandwidth: 77.98296 CV score: 13457916138 \nFixed bandwidth: 76.18716 CV score: 13442911302 \nFixed bandwidth: 75.76323 CV score: 13444600639 \nFixed bandwidth: 76.44916 CV score: 13442994078 \nFixed bandwidth: 76.02523 CV score: 13443285248 \nFixed bandwidth: 76.28724 CV score: 13442844774 \nFixed bandwidth: 76.34909 CV score: 13442864995 \nFixed bandwidth: 76.24901 CV score: 13442855596 \nFixed bandwidth: 76.31086 CV score: 13442847019 \nFixed bandwidth: 76.27264 CV score: 13442846793 \nFixed bandwidth: 76.29626 CV score: 13442844829 \nFixed bandwidth: 76.28166 CV score: 13442845238 \nFixed bandwidth: 76.29068 CV score: 13442844678 \nFixed bandwidth: 76.29281 CV score: 13442844691 \nFixed bandwidth: 76.28937 CV score: 13442844698 \nFixed bandwidth: 76.2915 CV score: 13442844676 \nFixed bandwidth: 76.292 CV score: 13442844679 \nFixed bandwidth: 76.29119 CV score: 13442844676 \nFixed bandwidth: 76.29099 CV score: 13442844676 \nFixed bandwidth: 76.29131 CV score: 13442844676 \nFixed bandwidth: 76.29138 CV score: 13442844676 \nFixed bandwidth: 76.29126 CV score: 13442844676 \nFixed bandwidth: 76.29123 CV score: 13442844676 \n\n\n\nbw_CV\n\n[1] 76.29126\n\n\n\n\n\nbw_AIC &lt;- bw.gwr(GDPPC ~ 1,\n                data = hunan_sp,\n                approach = \"AIC\",\n                adaptive = FALSE,\n                kernel = \"bisquare\",\n                longlat = T)\n\nFixed bandwidth: 357.4897 AICc value: 1927.631 \nFixed bandwidth: 220.985 AICc value: 1921.547 \nFixed bandwidth: 136.6204 AICc value: 1919.993 \nFixed bandwidth: 84.48025 AICc value: 1940.603 \nFixed bandwidth: 168.8448 AICc value: 1919.457 \nFixed bandwidth: 188.7606 AICc value: 1920.007 \nFixed bandwidth: 156.5362 AICc value: 1919.41 \nFixed bandwidth: 148.929 AICc value: 1919.527 \nFixed bandwidth: 161.2377 AICc value: 1919.392 \nFixed bandwidth: 164.1433 AICc value: 1919.403 \nFixed bandwidth: 159.4419 AICc value: 1919.393 \nFixed bandwidth: 162.3475 AICc value: 1919.394 \nFixed bandwidth: 160.5517 AICc value: 1919.391 \n\n\n\nbw_AIC\n\n[1] 160.5517\n\n\n\n\n\n\n\n\n\nneed to note how many neighbours you are using to define the correlation\nCorr: parametric vs Spearman: non-parametric - indicate how well each correlate with neighbour\n\n== end ==\n\n\n\n\n\n\nIn-class notes from Prof Kam:\n\n\n\n\nclean environment, save data image when closing session can help to prevent upload of temporary files\nGWmodel package: bw.gwr recommend optimum number of neighbours"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#study-area-and-data",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#study-area-and-data",
    "title": "In-class Exercise 4",
    "section": "",
    "text": "Two data sets will be used in this hands-on exercise:\n\nHunan county boundary layer. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#installing-and-loading-r-packages",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#installing-and-loading-r-packages",
    "title": "In-class Exercise 4",
    "section": "",
    "text": "To carry out the analysis, we install and load the following R packages:\n\npacman::p_load(sf, ggstatsplot, spdep, tmap, tidyverse, knitr,GWmodel)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#preparing-the-data",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#preparing-the-data",
    "title": "In-class Exercise 4",
    "section": "",
    "text": "The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.\n\nImport Hunan shapefileImport Hunan 2012Joining Hunan and Hunan 2012\n\n\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be a simple features object of sf.\n\nhunan_sf &lt;- st_read(dsn = \"data/geospatial\",\n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\In-class_Ex\\In-class_Ex04\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\nnote that above data has not been transformed - this is intentional for this use case so that know that there are packages that have provision for projection\nnote that geometry type is single polygon - always note that administrative boundaries can be captured as polygon or multipolygon\n\n\n\nNext, we will import Hunan_2012.csv into R using read_csv() of readr package. The output is R dataframe class.\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\ndo not use read.csv (Base R)\n\n\n\nThe code chunk below is used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 data frame. This is performed using left_join() of dplyr package.\n\nhunan_sf &lt;- left_join(hunan_sf,hunan2012) %&gt;%\n  select(1:3,7,15,16,31,32)\n\n\ncombining spatial data with aspatial data - use dplyr left_join() function but in reality, not so straightforward as need common identifier between the datasets i.e. value in a particular variable must be the same - need to carefully check through the names and actual values in the datasets to make sure they are the same else might not be able to join (recall hands-on ex01 where administrative boundary of singapore is in uppercase while that in singstat data is a mix of upper and lowercase)\nboth datasets have “County” column hence while code chunk did not define the join field, the code automatically uses the “County” column to join. if hunan_sf did not have “County” column, would have mention the join argument by as “NAME_3” in hunan_sf and “County” in hunan2012.\nif there’s a lot of names in the field, can do a unique match to compare\nSelect chooses these columns: “NAME_2”, “ID_3”, “NAME_3”, “County”,“GDPPC”, “GIO”,“Agri”,“Service”, “geometry”"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#converting-to-spatialpolygondataframe",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#converting-to-spatialpolygondataframe",
    "title": "In-class Exercise 4",
    "section": "",
    "text": "hunan_sp &lt;- hunan_sf %&gt;%\n  as_Spatial()\n\n\n\nsp separates the components of data under sf:\n\ndata contains all data except geometry data\nunder polygons, geometry data\n\n\nTyping the below into console, we note the data object type:"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#geographically-weighted-summary-statistics-with-adaptive-bandwidth",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#geographically-weighted-summary-statistics-with-adaptive-bandwidth",
    "title": "In-class Exercise 4",
    "section": "",
    "text": "both CV and AIC methods produce the same results - that the optimum number of neighbours is 22 but note that this is not always the case i.e. can produce different results\n\n\nCross-validationAIC\n\n\n\nbw_CV &lt;- bw.gwr(GDPPC ~ 1,\n                data = hunan_sp,\n                approach = \"CV\",\n                adaptive = TRUE,\n                kernel = \"bisquare\",\n                longlat = T)\n\nAdaptive bandwidth: 62 CV score: 15515442343 \nAdaptive bandwidth: 46 CV score: 14937956887 \nAdaptive bandwidth: 36 CV score: 14408561608 \nAdaptive bandwidth: 29 CV score: 14198527496 \nAdaptive bandwidth: 26 CV score: 13898800611 \nAdaptive bandwidth: 22 CV score: 13662299974 \nAdaptive bandwidth: 22 CV score: 13662299974 \n\n\n\nfirst line is dependent variable ~ independent variable (put an arbitrary number 1 if don’t have independent variable), else without formula, won’t work and give error message –&gt; this is a global model\nsecond line is hunan_sp data\napproach either CV or AIC (see next tab)\nadaptive = FALSE means calculating fixed bandwith, TRUE means adaptive bandwidth –&gt; in this case, indicate the number of neighbours (note that it starts with 62 then slowly bury the number of neighbours)\nkernel is the same as spatial point pattern analysis, can change to other methods, not likely to affect much\nlonglat = T, indicate that its in decimal degree - great circle distances will be calculated\nnote that the results are in km\nbased on GDPPC, optimum number of neighbours is 22\n\n\nbw_CV\n\n[1] 22\n\n\n\n\n\nsmaller AIC value, the better. at some point, AIC points will converge and no longer change/change rate very small - that would be optimal value\n\n\nbw_AIC &lt;- bw.gwr(GDPPC ~ 1,\n                data = hunan_sp,\n                approach = \"AIC\",\n                adaptive = TRUE,\n                kernel = \"bisquare\",\n                longlat = T)\n\nAdaptive bandwidth (number of nearest neighbours): 62 AICc value: 1923.156 \nAdaptive bandwidth (number of nearest neighbours): 46 AICc value: 1920.469 \nAdaptive bandwidth (number of nearest neighbours): 36 AICc value: 1917.324 \nAdaptive bandwidth (number of nearest neighbours): 29 AICc value: 1916.661 \nAdaptive bandwidth (number of nearest neighbours): 26 AICc value: 1914.897 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \n\n\n\nnote that the change in AIC becomes very small and eventually stops\nbased on GDPPC, optimum number of neighbours is 22\n\n\nbw_AIC\n\n[1] 22\n\n\n\n\n\n\n\n\n\ngwstat &lt;- gwss(data = hunan_sp,\n               vars = \"GDPPC\",\n               bw = bw_AIC,\n               kernel = \"bisquare\",\n               adaptive = TRUE,\n               longlat = T)\n\n\nneed to make sure that the bottom 3 fields are the same as the above in 4.5.1 Determine adaptive bandwidth\n is a gwss object (specially customised object - list that contains many things)\n\nmostly are metadata\nwhat is of interest is SDF - spatialdataframe - contains all spatial information + data information\n\ncan click on logo:\n\n\n\nGDPPC_LM: local mean (have 88 local means that is based on average of 22 neighbours)\nGDPPC_LSD: local standard deviation\nGDPPC_LSKe: local standard estimations\nGDPPC_LCV: local co-variance\n\nAll are taking the average of 22 neighbours\n\n\n\n\nCode chunk below is used to extract SDF data table from gwss object output from gwss(). It will be converted into data.frame by using as.data.frame():\n\ngwstat_df &lt;- as.data.frame(gwstat$SDF)\n\nNext, cbind() is used to append the newly derived data.frame onto hunan_sf sf data frame:\n\nhunan_gstat &lt;- cbind(hunan_sf,gwstat_df)\n\n\nnote that only able to use cbind() with the understanding that there’s no change in sequence of data in both dataframes\n\n\n\n\n\nGeographically Weighted MeanThe code\n\n\n\n\n\n\n\n\n\n\n\n\nhelp to generalise the pattern\ntm_fill n=5 sets the number of gradient\ntm_borders draw the border around polygon, =1 is full black, closer to 0 - greater transparency\ntm_layout add in other details\n\n\n\n\ntm_shape(hunan_gstat)+\n  tm_fill(\"GDPPC_LM\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Distribution of geographically weighted mean\",\n            main.title.position = \"center\",\n            main.title.size = 1.0,\n            legend.text.size = 0.6,\n            legend.height = 1.20,\n            legend.width = 1.20,\n            frame = TRUE)+\n  tm_text(\"County\", size = 0.5)\n\n\n\n\n\n\n\n\nConventional statistical solutionThe code"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#geographically-weighted-summary-statistics-with-fixed-bandwidth",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#geographically-weighted-summary-statistics-with-fixed-bandwidth",
    "title": "In-class Exercise 4",
    "section": "",
    "text": "note that results for CV and AIC are not the same - AIC optimum is 160.5517, almost twice of CV optimum of 76.29126 (longer bandwidth have smoother output, shorter bandwidth have more details)\n\n\nCross-validationAIC\n\n\n\nbw_CV &lt;- bw.gwr(GDPPC ~ 1,\n                data = hunan_sp,\n                approach = \"CV\",\n                adaptive = FALSE,\n                kernel = \"bisquare\",\n                longlat = T)\n\nFixed bandwidth: 357.4897 CV score: 16265191728 \nFixed bandwidth: 220.985 CV score: 14954930931 \nFixed bandwidth: 136.6204 CV score: 14134185837 \nFixed bandwidth: 84.48025 CV score: 13693362460 \nFixed bandwidth: 52.25585 CV score: Inf \nFixed bandwidth: 104.396 CV score: 13891052305 \nFixed bandwidth: 72.17162 CV score: 13577893677 \nFixed bandwidth: 64.56447 CV score: 14681160609 \nFixed bandwidth: 76.8731 CV score: 13444716890 \nFixed bandwidth: 79.77877 CV score: 13503296834 \nFixed bandwidth: 75.07729 CV score: 13452450771 \nFixed bandwidth: 77.98296 CV score: 13457916138 \nFixed bandwidth: 76.18716 CV score: 13442911302 \nFixed bandwidth: 75.76323 CV score: 13444600639 \nFixed bandwidth: 76.44916 CV score: 13442994078 \nFixed bandwidth: 76.02523 CV score: 13443285248 \nFixed bandwidth: 76.28724 CV score: 13442844774 \nFixed bandwidth: 76.34909 CV score: 13442864995 \nFixed bandwidth: 76.24901 CV score: 13442855596 \nFixed bandwidth: 76.31086 CV score: 13442847019 \nFixed bandwidth: 76.27264 CV score: 13442846793 \nFixed bandwidth: 76.29626 CV score: 13442844829 \nFixed bandwidth: 76.28166 CV score: 13442845238 \nFixed bandwidth: 76.29068 CV score: 13442844678 \nFixed bandwidth: 76.29281 CV score: 13442844691 \nFixed bandwidth: 76.28937 CV score: 13442844698 \nFixed bandwidth: 76.2915 CV score: 13442844676 \nFixed bandwidth: 76.292 CV score: 13442844679 \nFixed bandwidth: 76.29119 CV score: 13442844676 \nFixed bandwidth: 76.29099 CV score: 13442844676 \nFixed bandwidth: 76.29131 CV score: 13442844676 \nFixed bandwidth: 76.29138 CV score: 13442844676 \nFixed bandwidth: 76.29126 CV score: 13442844676 \nFixed bandwidth: 76.29123 CV score: 13442844676 \n\n\n\nbw_CV\n\n[1] 76.29126\n\n\n\n\n\nbw_AIC &lt;- bw.gwr(GDPPC ~ 1,\n                data = hunan_sp,\n                approach = \"AIC\",\n                adaptive = FALSE,\n                kernel = \"bisquare\",\n                longlat = T)\n\nFixed bandwidth: 357.4897 AICc value: 1927.631 \nFixed bandwidth: 220.985 AICc value: 1921.547 \nFixed bandwidth: 136.6204 AICc value: 1919.993 \nFixed bandwidth: 84.48025 AICc value: 1940.603 \nFixed bandwidth: 168.8448 AICc value: 1919.457 \nFixed bandwidth: 188.7606 AICc value: 1920.007 \nFixed bandwidth: 156.5362 AICc value: 1919.41 \nFixed bandwidth: 148.929 AICc value: 1919.527 \nFixed bandwidth: 161.2377 AICc value: 1919.392 \nFixed bandwidth: 164.1433 AICc value: 1919.403 \nFixed bandwidth: 159.4419 AICc value: 1919.393 \nFixed bandwidth: 162.3475 AICc value: 1919.394 \nFixed bandwidth: 160.5517 AICc value: 1919.391 \n\n\n\nbw_AIC\n\n[1] 160.5517\n\n\n\n\n\n\n\n\n\nneed to note how many neighbours you are using to define the correlation\nCorr: parametric vs Spearman: non-parametric - indicate how well each correlate with neighbour\n\n== end ==\n\n\n\n\n\n\nIn-class notes from Prof Kam:\n\n\n\n\nclean environment, save data image when closing session can help to prevent upload of temporary files\nGWmodel package: bw.gwr recommend optimum number of neighbours"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05A.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05A.html",
    "title": "Hands-on Exercise 5A",
    "section": "",
    "text": "In this hands-on exercise, we will compute Global Measures of Spatial Autocorrelation (GMSA) using spdep package. The learning points of this hands-on exercise are to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of spdep package,\n\nplot Moran scatterplot,\ncompute and plot spatial correlogram using appropriate function of spdep package.\n\nprovide statistically correct interpretation of GSA statistics.\n\n\n\n\n\n\nIn spatial policy, one of the main development objective of the local government and planners is to ensure equal distribution of development in the province. Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically. If the answer is No. Then, our next question will be “is there sign of spatial clustering?”. And, if the answer for this question is yes, then our next question will be “where are these clusters?”\nIn this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Provice, People Republic of China.\n\n\n\nTwo data sets will be used in this hands-on exercise, they are:\n\nHunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\n\n\nBefore we get started, we need to ensure that spdep, sf, tmap and tidyverse packages of R are installed in R.\n\nsf is use for importing and handling geospatial data in R,\ntidyverse is mainly use for wrangling attribute data in R,\nspdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and\ntmap will be used to prepare cartographic quality chropleth map.\n\nThe code chunk below is used to perform the following tasks:\n\ncreating a package list containing the necessary R packages,\nchecking if the R packages in the package list have been installed in R,\n\nif they have yet to be installed, RStudio will installed the missing packages,\n\nlaunching the packages into R environment.\n\n\npacman::p_load(sf,tidyverse,spdep,tmap)\n\n\n\n\n\nIn this section, we will bring a geospatial data and its associated attribute table into R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.\n\n\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be a simple features object of sf.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\",\n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex05\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\nWe note that the simple features data has a polygon geometry and has 88 features and 7 fields. It is in WGS84 geographic coordinate system.\n\n\n\nNext, we will import Hunan_2012.csv into R using read_csv() of readr package. The output is in R data frame class.\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package:\n\nhunan &lt;- left_join(hunan,hunan2012)%&gt;%\n  select(1:4,7,15)\n\n\n\n\nNow, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\nequal &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\",\n            main.title.size = 1,\n            legend.text.size = 0.6,\n            legend.height = 1.20,\n            legend.width = 1.20,\n            frame = TRUE)\n\nquantile &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\",\n            main.title.size = 1,\n            legend.text.size = 0.6,\n            legend.height = 1.20,\n            legend.width = 1.20,\n            frame = TRUE)\n\ntmap_arrange(equal,\n             quantile,\n             asp = 1,\n             ncol = 2)\n\n\n\n\n\n\n\n\n\n\n\n\nIn this section, we will compute global spatial autocorrelation statistics and perform spatial complete randomness test for global spatial autocorrelation.\n\n\nBefore we can compute the global spatial autocorrelation statistics, we need to construct spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.\nIn the code chunk below, poly2nb() of spdep package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. Based on the documentation, note that the “queen” argument can take TRUE or FALSE as options. If not specified, the default is set to TRUE and the function will return a list of first order neighbours using the Queen criteria (which is on the basis of shared boundaries):\nThe code chunk below is used to compute Queen contiguity weight matrix:\n\nwm_q &lt;- poly2nb(hunan,\n                queen = TRUE)\n\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours and there are two ara units with only one neighbour.\n\n\n\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summarise the neighbors’ values, it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrswm_q &lt;- nb2listw(wm_q,\n                   style = \"W\",\n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\n\n\n\n\n\nWhat can we learn from the code chunk above?\n\n\n\n\nThe input of nb2listw() must be an object of class nb. The syntax of the function has two major arguments, namely style and zero.policy.\nstyle can take values “W”, “B”, “C”, “U”, “minmax” and “S”.\n\nB is the basic binary coding\nW is row standardised (sums over all links to n)\nC is globally standardised (sums over all links to n)\nU is equal to C divided by the number of neighbours (sums over all links to unity)\nS is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\n\nIf zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nMoran’s I and Geary’s C are two common measures used in spatial statistics to assess the degree of spatial autocorrelation—that is, how spatially similar or dissimilar neighboring regions are to one another based on a given variable. Both are used to analyze whether similar values cluster together in space or if there is a random or dispersed pattern.\n\nMoran’s I is a global measure of spatial autocorrelation. It compares the similarity of values across neighboring regions and indicates whether similar or dissimilar values are spatially clustered.\nGeary’s C focuses more on local differences between pairs of neighboring regions. It tends to be more sensitive to local variations than Moran’s I.\n\n\n\n\n\n\n\nIn this section, we will perform Moran’s I statistics testing using moran.test() of spdep.\n\n\nThe code chunk below performs Moran’s I statistical testing using moran.test() of spdep.\n\nmoran.test(hunan$GDPPC,\n           listw = rswm_q,\n           zero.policy = TRUE,\n           na.action = na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\n\n\n\nThe code chunk below performs the permutation test for Moran’s I statistic using moran.mc() of spdep. A total of 1000 simulations will be performed.\n\nset.seed(1234)\nbperm = moran.mc(hunan$GDPPC,\n                 listw = rswm_q,\n                 nsim = 999,\n                 zero.policy = TRUE,\n                 na.action = na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\n\nIt is always a good practice to examine the simulated Moran’s I test statistics in greater detail. This can be achieved by plotting the distribution of the statistical values as a histogram by using the code chunk below.\nIn the code chunk below hist() and abline() of R Graphics are used.\n\nmean(bperm$res[1:999])\n\n[1] -0.01504572\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\n\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\nhist(bperm$res,\n     freq = TRUE,\n     breaks = 20,\n     xlab = \"Simulated Moran's I\")\nabline(v = 0,\n       col = \"red\")\n\n\n\n\n\n\n\n\nAlternatively, we can use ggplot2 to plot the graph:\n\nggplot(data.frame(res = bperm$res),aes(x=res)) +\n  geom_histogram(bins = 20,\n                 color=\"black\", \n                 fill=\"grey\") +\n  geom_vline(xintercept = 0,\n             color=\"red\",\n             linetype=\"dashed\")+\n  labs(x = \"Simulated Moran's I\", y=\"Frequency\")+\n  ggtitle(\"Distribution of Moran's I test statistical values\")\n\n\n\n\n\n\n\n\n\n\n\n\nIn this section, we will perform Geary’s C statistics testing using appropriate functions of spdep package.\n\n\nThe code chunk below performs Geary’s C test for spatial autocorrelation using geary.test() of spdep.\n\ngeary.test(hunan$GDPPC,listw = rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q   \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\n\n\n\nThe code chunk below performs permutation test for Geary’s C statistic using geary.mc() of spdep.\n\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC,\n               listw = rswm_q,\n               nsim = 999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\n\nNext, we will plot a histogram to reveal the distribution of the simulated values by using the code chunk below.\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\n\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nhist(bperm$res,\n     freq=TRUE,\n     breaks=20,\n     xlab=\"Simulated Geary's C\")\nabline(v = 1,\n       col = \"red\")\n\n\n\n\n\n\n\n\n\n\n\n\nSpatial correlograms are great for examining patterns of spatial autocorrelation in your data or model residuals. They show how correlated pairs of spatial observations are when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran’s I or Geary’s c) against distance. Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.\n\n\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used is Moran’s I (note method = “I” in code below). The plot() of base Graph is then used to plot the output.\n\nMI_corr &lt;- sp.correlogram(wm_q,\n                          hunan$GDPPC,\n                          order = 6,\n                          method = \"I\",\n                          style = \"W\")\nplot(MI_corr)\n\n\n\n\n\n\n\n\nPlotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\n\n\n\n\nNote\n\n\n\nInterpretation:\n\nLag 1 shows significant positive spatial autocorrelation, meaning nearby regions tend to have similar GDPPC values.\nAs the lags increase, spatial autocorrelation diminishes and eventually becomes slightly negative (indicating dissimilarity between regions further apart), but with wider error bars indicating less significance.\n\n\n\n\n\n\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary’s C (note method = “C” in code below). The plot() of base Graph is then used to plot the output.\n\nGC_corr &lt;- sp.correlogram(wm_q,\n                          hunan$GDPPC,\n                          order = 6,\n                          method = \"C\",\n                          style = \"W\")\nplot(GC_corr)\n\n\n\n\n\n\n\n\nSimilar to the previous step, we will print out the analysis report by using the code chunk below:\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\n\n\n\n\nNote\n\n\n\nInterpretation:\n\nThe Geary’s C plot supports the conclusion that there is initial positive spatial autocorrelation at short distances (e.g., Lag 1).\nHowever, as you move to greater distances (Lags 2 through 4), it suggests the spatial relationships become weaker, approaching random distribution.\nFinally, at Lags 5 and 6, there’s evidence of negative spatial autocorrelation.\n\n\n\n\n\n\n\n\n\nOwn notes on why wm_q is used in correlogram rather than rswm_q\n\n\n\n\nThe primary goal of a spatial correlogram is to examine how spatial autocorrelation (e.g., Moran’s I or Geary’s C) changes over different spatial lags or distances. Using the original spatial weights matrix allows the correlogram to reflect the true intensity of spatial autocorrelation at various distances.\nRow-standardizing weights can distort the actual spatial influence by giving an equal contribution to all neighboring observations, regardless of their spatial closeness or the intensity of their spatial relationship. This could obscure patterns of spatial autocorrelation that are distance-dependent."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05A.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05A.html#overview",
    "title": "Hands-on Exercise 5A",
    "section": "",
    "text": "In this hands-on exercise, we will compute Global Measures of Spatial Autocorrelation (GMSA) using spdep package. The learning points of this hands-on exercise are to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of spdep package,\n\nplot Moran scatterplot,\ncompute and plot spatial correlogram using appropriate function of spdep package.\n\nprovide statistically correct interpretation of GSA statistics."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05A.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05A.html#getting-started",
    "title": "Hands-on Exercise 5A",
    "section": "",
    "text": "In spatial policy, one of the main development objective of the local government and planners is to ensure equal distribution of development in the province. Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically. If the answer is No. Then, our next question will be “is there sign of spatial clustering?”. And, if the answer for this question is yes, then our next question will be “where are these clusters?”\nIn this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Provice, People Republic of China.\n\n\n\nTwo data sets will be used in this hands-on exercise, they are:\n\nHunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\n\n\nBefore we get started, we need to ensure that spdep, sf, tmap and tidyverse packages of R are installed in R.\n\nsf is use for importing and handling geospatial data in R,\ntidyverse is mainly use for wrangling attribute data in R,\nspdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and\ntmap will be used to prepare cartographic quality chropleth map.\n\nThe code chunk below is used to perform the following tasks:\n\ncreating a package list containing the necessary R packages,\nchecking if the R packages in the package list have been installed in R,\n\nif they have yet to be installed, RStudio will installed the missing packages,\n\nlaunching the packages into R environment.\n\n\npacman::p_load(sf,tidyverse,spdep,tmap)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05A.html#getting-the-data-into-r-environment",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05A.html#getting-the-data-into-r-environment",
    "title": "Hands-on Exercise 5A",
    "section": "",
    "text": "In this section, we will bring a geospatial data and its associated attribute table into R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.\n\n\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be a simple features object of sf.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\",\n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex05\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\nWe note that the simple features data has a polygon geometry and has 88 features and 7 fields. It is in WGS84 geographic coordinate system.\n\n\n\nNext, we will import Hunan_2012.csv into R using read_csv() of readr package. The output is in R data frame class.\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package:\n\nhunan &lt;- left_join(hunan,hunan2012)%&gt;%\n  select(1:4,7,15)\n\n\n\n\nNow, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\nequal &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\",\n            main.title.size = 1,\n            legend.text.size = 0.6,\n            legend.height = 1.20,\n            legend.width = 1.20,\n            frame = TRUE)\n\nquantile &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\",\n            main.title.size = 1,\n            legend.text.size = 0.6,\n            legend.height = 1.20,\n            legend.width = 1.20,\n            frame = TRUE)\n\ntmap_arrange(equal,\n             quantile,\n             asp = 1,\n             ncol = 2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05A.html#global-measures-of-spatial-autocorrelation-1",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05A.html#global-measures-of-spatial-autocorrelation-1",
    "title": "Hands-on Exercise 5A",
    "section": "",
    "text": "In this section, we will compute global spatial autocorrelation statistics and perform spatial complete randomness test for global spatial autocorrelation.\n\n\nBefore we can compute the global spatial autocorrelation statistics, we need to construct spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.\nIn the code chunk below, poly2nb() of spdep package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. Based on the documentation, note that the “queen” argument can take TRUE or FALSE as options. If not specified, the default is set to TRUE and the function will return a list of first order neighbours using the Queen criteria (which is on the basis of shared boundaries):\nThe code chunk below is used to compute Queen contiguity weight matrix:\n\nwm_q &lt;- poly2nb(hunan,\n                queen = TRUE)\n\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours and there are two ara units with only one neighbour.\n\n\n\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summarise the neighbors’ values, it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrswm_q &lt;- nb2listw(wm_q,\n                   style = \"W\",\n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\n\n\n\n\n\nWhat can we learn from the code chunk above?\n\n\n\n\nThe input of nb2listw() must be an object of class nb. The syntax of the function has two major arguments, namely style and zero.policy.\nstyle can take values “W”, “B”, “C”, “U”, “minmax” and “S”.\n\nB is the basic binary coding\nW is row standardised (sums over all links to n)\nC is globally standardised (sums over all links to n)\nU is equal to C divided by the number of neighbours (sums over all links to unity)\nS is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\n\nIf zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nMoran’s I and Geary’s C are two common measures used in spatial statistics to assess the degree of spatial autocorrelation—that is, how spatially similar or dissimilar neighboring regions are to one another based on a given variable. Both are used to analyze whether similar values cluster together in space or if there is a random or dispersed pattern.\n\nMoran’s I is a global measure of spatial autocorrelation. It compares the similarity of values across neighboring regions and indicates whether similar or dissimilar values are spatially clustered.\nGeary’s C focuses more on local differences between pairs of neighboring regions. It tends to be more sensitive to local variations than Moran’s I."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05A.html#global-measures-of-spatial-autocorrelation-morans-i-statistic-testing",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05A.html#global-measures-of-spatial-autocorrelation-morans-i-statistic-testing",
    "title": "Hands-on Exercise 5A",
    "section": "",
    "text": "In this section, we will perform Moran’s I statistics testing using moran.test() of spdep.\n\n\nThe code chunk below performs Moran’s I statistical testing using moran.test() of spdep.\n\nmoran.test(hunan$GDPPC,\n           listw = rswm_q,\n           zero.policy = TRUE,\n           na.action = na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\n\n\n\nThe code chunk below performs the permutation test for Moran’s I statistic using moran.mc() of spdep. A total of 1000 simulations will be performed.\n\nset.seed(1234)\nbperm = moran.mc(hunan$GDPPC,\n                 listw = rswm_q,\n                 nsim = 999,\n                 zero.policy = TRUE,\n                 na.action = na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\n\nIt is always a good practice to examine the simulated Moran’s I test statistics in greater detail. This can be achieved by plotting the distribution of the statistical values as a histogram by using the code chunk below.\nIn the code chunk below hist() and abline() of R Graphics are used.\n\nmean(bperm$res[1:999])\n\n[1] -0.01504572\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\n\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\nhist(bperm$res,\n     freq = TRUE,\n     breaks = 20,\n     xlab = \"Simulated Moran's I\")\nabline(v = 0,\n       col = \"red\")\n\n\n\n\n\n\n\n\nAlternatively, we can use ggplot2 to plot the graph:\n\nggplot(data.frame(res = bperm$res),aes(x=res)) +\n  geom_histogram(bins = 20,\n                 color=\"black\", \n                 fill=\"grey\") +\n  geom_vline(xintercept = 0,\n             color=\"red\",\n             linetype=\"dashed\")+\n  labs(x = \"Simulated Moran's I\", y=\"Frequency\")+\n  ggtitle(\"Distribution of Moran's I test statistical values\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05A.html#global-measures-of-spatial-autocorrelation-gearys-c",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05A.html#global-measures-of-spatial-autocorrelation-gearys-c",
    "title": "Hands-on Exercise 5A",
    "section": "",
    "text": "In this section, we will perform Geary’s C statistics testing using appropriate functions of spdep package.\n\n\nThe code chunk below performs Geary’s C test for spatial autocorrelation using geary.test() of spdep.\n\ngeary.test(hunan$GDPPC,listw = rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q   \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\n\n\n\nThe code chunk below performs permutation test for Geary’s C statistic using geary.mc() of spdep.\n\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC,\n               listw = rswm_q,\n               nsim = 999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\n\nNext, we will plot a histogram to reveal the distribution of the simulated values by using the code chunk below.\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\n\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nhist(bperm$res,\n     freq=TRUE,\n     breaks=20,\n     xlab=\"Simulated Geary's C\")\nabline(v = 1,\n       col = \"red\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05A.html#spatial-correlogram",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05A.html#spatial-correlogram",
    "title": "Hands-on Exercise 5A",
    "section": "",
    "text": "Spatial correlograms are great for examining patterns of spatial autocorrelation in your data or model residuals. They show how correlated pairs of spatial observations are when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran’s I or Geary’s c) against distance. Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.\n\n\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used is Moran’s I (note method = “I” in code below). The plot() of base Graph is then used to plot the output.\n\nMI_corr &lt;- sp.correlogram(wm_q,\n                          hunan$GDPPC,\n                          order = 6,\n                          method = \"I\",\n                          style = \"W\")\nplot(MI_corr)\n\n\n\n\n\n\n\n\nPlotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\n\n\n\n\nNote\n\n\n\nInterpretation:\n\nLag 1 shows significant positive spatial autocorrelation, meaning nearby regions tend to have similar GDPPC values.\nAs the lags increase, spatial autocorrelation diminishes and eventually becomes slightly negative (indicating dissimilarity between regions further apart), but with wider error bars indicating less significance.\n\n\n\n\n\n\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary’s C (note method = “C” in code below). The plot() of base Graph is then used to plot the output.\n\nGC_corr &lt;- sp.correlogram(wm_q,\n                          hunan$GDPPC,\n                          order = 6,\n                          method = \"C\",\n                          style = \"W\")\nplot(GC_corr)\n\n\n\n\n\n\n\n\nSimilar to the previous step, we will print out the analysis report by using the code chunk below:\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\n\n\n\n\nNote\n\n\n\nInterpretation:\n\nThe Geary’s C plot supports the conclusion that there is initial positive spatial autocorrelation at short distances (e.g., Lag 1).\nHowever, as you move to greater distances (Lags 2 through 4), it suggests the spatial relationships become weaker, approaching random distribution.\nFinally, at Lags 5 and 6, there’s evidence of negative spatial autocorrelation.\n\n\n\n\n\n\n\n\n\nOwn notes on why wm_q is used in correlogram rather than rswm_q\n\n\n\n\nThe primary goal of a spatial correlogram is to examine how spatial autocorrelation (e.g., Moran’s I or Geary’s C) changes over different spatial lags or distances. Using the original spatial weights matrix allows the correlogram to reflect the true intensity of spatial autocorrelation at various distances.\nRow-standardizing weights can distort the actual spatial influence by giving an equal contribution to all neighboring observations, regardless of their spatial closeness or the intensity of their spatial relationship. This could obscure patterns of spatial autocorrelation that are distance-dependent."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05B.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05B.html",
    "title": "Hands-on Exercise 5B",
    "section": "",
    "text": "Local Measures of Spatial Autocorrelation (LMSA) focus on the relationships between each observation and its surroundings, rather than providing a single summary of these relationships across the map. In this sense, they are not summary statistics but scores that allow us to learn more about the spatial structure in our data. The general intuition behind the metrics however is similar to that of global ones. Some of them are even mathematically connected, where the global version can be decomposed into a collection of local ones. One such example is Local Indicators of Spatial Association (LISA). Beside LISA, Getis-Ord’s Gi-statistics will be introduce as an alternative LMSA statistics that present complementary information or allow us to obtain similar insights for geographically referenced data.\nIn this hands-on exercise, we will compute Local Measures of Spatial Autocorrelation (LMSA) using spdep package. By the end to this hands-on exercise, we will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers by using appropriate functions spdep package;\ncompute Getis-Ord’s Gi-statistics for detecting hot spot or/and cold spot area by using appropriate functions of spdep package; and\nto visualise the analysis output by using tmap package.\n\n\n\n\n\n\nIn spatial policy, one of the main development objective of the local govenment and planners is to ensure equal distribution of development in the province. Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically. If the answer is No. Then, our next question will be “is there sign of spatial clustering?”. And, if the answer for this question is yes, then our next question will be “where are these clusters?”\nIn this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Province, People Republic of China.\n\n\n\nTwo data sets will be used in this hands-on exercise, they are:\n\nHunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\n\n\nBefore we get started, we need to ensure that spdep, sf, tmap and tidyverse packages of R are currently installed in R.\n\nsf is use for importing and handling geospatial data in R,\ntidyverse is mainly use for wrangling attribute data in R,\nspdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and\ntmap will be used to prepare cartographic quality chropleth map.\n\nThe code chunk below is used to perform the following tasks:\n\ncreating a package list containing the necessary R packages,\nchecking if the R packages in the package list have been installed in R,\n\nif they have yet to be installed, RStudio will installed the missing packages,\n\nlaunching the packages into R environment.\n\n\npacman::p_load(sf,spdep,tmap,tidyverse)\n\n\n\n\n\nIn this section, you will learn how to bring a geospatial data and its associated attribute table into R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.\n\n\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be a simple features object of sf.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\",\n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex05\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\nWe note that the simple features data has a polygon geometry and has 88 features and 7 fields. It is in WGS84 geographic coordinate system.\n\n\n\nNext, we will import Hunan_2012.csv into R using read_csv() of readr package. The output is in R data frame class.\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package:\n\nhunan &lt;- left_join(hunan,hunan2012)%&gt;%\n  select(1:4,7,15)\n\n\n\n\nNow, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\nequal &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\",\n            main.title.size = 1,\n            legend.text.size = 0.6,\n            legend.height = 1.20,\n            legend.width = 1.20,\n            frame = TRUE)\n\nquantile &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\",\n            main.title.size = 1,\n            legend.text.size = 0.6,\n            legend.height = 1.20,\n            legend.width = 1.20,\n            frame = TRUE)\n\ntmap_arrange(equal,\n             quantile,\n             asp = 1,\n             ncol = 2)\n\n\n\n\n\n\n\n\n\n\n\n\nLocal Indicators of Spatial Association or LISA are statistics that evaluate the existence of clusters and/or outliers in the spatial arrangement of a given variable. For instance if we are studying distribution of GDP per capita of Hunan Provice, People Republic of China, local clusters in GDP per capita mean that there are counties that have higher or lower rates than is to be expected by chance alone; that is, the values occurring are above or below those of a random distribution in space.\nIn this section, we will apply appropriate Local Indicators for Spatial Association (LISA), especially local Moran’s I to detect cluster and/or outlier from GDP per capita 2012 of Hunan Province, PRC.\n\n\nBefore we can compute the global spatial autocorrelation statistics, we need to construct spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.\nIn the code chunk below, poly2nb() of spdep package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. Based on the documentation, note that the “queen” argument can take TRUE or FALSE as options. If not specified, the default is set to TRUE and the function will return a list of first order neighbours using the Queen criteria (which is on the basis of shared boundaries):\nThe code chunk below is used to compute Queen contiguity weight matrix:\n\nwm_q &lt;- poly2nb(hunan,\n                queen = TRUE)\n\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours and there are two ara units with only one neighbour.\n\n\n\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summarise the neighbors’ values, it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrswm_q &lt;- nb2listw(wm_q,\n                   style = \"W\",\n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\n\n\n\n\n\nWhat can we learn from the code chunk above?\n\n\n\n\nThe input of nb2listw() must be an object of class nb. The syntax of the function has two major arguments, namely style and zero.policy.\nstyle can take values “W”, “B”, “C”, “U”, “minmax” and “S”.\n\nB is the basic binary coding\nW is row standardised (sums over all links to n)\nC is globally standardised (sums over all links to n)\nU is equal to C divided by the number of neighbours (sums over all links to unity)\nS is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\n\nIf zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.\n\n\n\n\n\n\nTo compute local Moran’s I, the localmoran() function of spdep will be used. It computes Ii values, given a set of zi values and a listw object providing neighbour weighting information for the polygon associated with the zi values.\nThe code chunks below are used to compute local Moran’s I of GDPPC2012 at the county level.\n\nfips &lt;- order(hunan$County)\nlocalMI &lt;- localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\nlocalmoran() function returns a matrix of values whose columns are:\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local moran statistic under the randomisation hypothesis\nZ.Ii: the standard deviate of local moran statistic\nPr(): the p-value of local moran statistic\n\nThe code chunk below list the content of the local Moran matrix derived by using printCoefmat().\n\nprintCoefmat(data.frame(\n  localMI[fips,], \n  row.names=hunan$County[fips]),\n  check.names=FALSE)\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n\n\n\n\n\nBefore mapping the local Moran’s I map, it is wise to append the local Moran’s I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame. The code chunks below can be used to perform the task. The out SpatialPolygonDataFrame is called hunan.localMI.\n\nhunan.localMI &lt;- cbind(hunan,localMI) %&gt;%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\n\nUsing choropleth mapping functions of tmap package, we can plot the local Moran’s I values by using the code chunk below.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\nThe choropleth shows there is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values, as considered above.\nThe code chunk below produce a choropleth map of Moran’s I p-values by using functions of tmap package.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualisation.\n\nlocalMI.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\n\nThe LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.\n\n\nThe Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.\nThe code chunk below plots the Moran scatterplot of GDPPC 2012 by using moran.plot() of spdep.\n\nnci &lt;- moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\n\n\n\n\nNotice that the plot is split in 4 quadrants. The top right corner belongs to areas that have high GDPPC and are surrounded by other areas that have the average level of GDPPC. These are the high-high locations in the lesson slides.\n\n\n\nFirst we will use scale() to center and scale the variable. Here centering is done by subtracting the mean (omitting NAs) of the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.\n\nhunan$Z.GDPPC &lt;- scale(hunan$GDPPC) %&gt;% \n  as.vector \n\nThe as.vector() added to the end is to make sure that the data type we get out of this is a vector, that maps neatly into out dataframe.\nNow, we are ready to plot the Moran scatterplot again by using the code chunk below.\n\nnci2 &lt;- moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")\n\n\n\n\n\n\n\n\n\n\n\nThe code chunks below show the steps to prepare a LISA cluster map.\n\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(localMI))\n\nNext, we derive the spatially lagged variable of interest (i.e. GDPPC) and center the spatially lagged variable around its mean.\n\nhunan$lag_GDPPC &lt;- lag.listw(rswm_q, hunan$GDPPC)\nDV &lt;- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \n\nThis is follow by centering the local Moran’s around the mean.\n\nLM_I &lt;- localMI[,1] - mean(localMI[,1])    \n\nNext, we will set a statistical significance level for the local Moran.\n\nsignif &lt;- 0.05       \n\nThese four command lines define the low-low (1), low-high (2), high-low (3) and high-high (4) categories:\n\nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4      \n\nLastly, we place non-significant Moran in the category 0:\n\nquadrant[localMI[,5]&gt;signif] &lt;- 0\n\nIn fact, we can combined all the steps into one single code chunk as shown below:\n\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(localMI))\nhunan$lag_GDPPC &lt;- lag.listw(rswm_q, hunan$GDPPC)\nDV &lt;- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \nLM_I &lt;- localMI[,1]   \nsignif &lt;- 0.05       \nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4    \nquadrant[localMI[,5]&gt;signif] &lt;- 0\n\n\n\n\nNow, we can build the LISA map by using the code chunk below.\n\nhunan.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualisation.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, \n             asp=1, ncol=2)\n\n\n\n\n\n\n\n\nWe can also include the local Moran’s I map and p-value map as shown below for easy comparison.\n\n\n\n\n\n\n\n\n\n\n\n\n\nBeside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.\nThe term ‘hot spot’ has been used generically across disciplines to describe a region or value that is higher relative to its surroundings (Lepers et al 2005, Aben et al 2012, Isobe et al 2015).\n\n\nAn alternative spatial statistics to detect spatial anomalies is the Getis and Ord’s G-statistics (Getis and Ord, 1972; Ord and Getis, 1995). It looks at neighbours within a defined proximity to identify where either high or low values cluster spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.\nThe analysis consists of three steps:\n\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics\n\n\n\n\nFirst, we need to define a new set of neighbours. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.\nThere are two type of distance-based proximity matrix, they are:\n\nfixed distance weight matrix; and\nadaptive distance weight matrix.\n\n\n\n\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid() on the sf object: us.bound. We need the coordinates in a separate data frame for this to work.\nTo do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid(). We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation\nTo get our longitude values we map the st_centroid() function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\ncoords &lt;- cbind(longitude, latitude)\n\n\n\n\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n#coords &lt;- coordinates(hunan)\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\n\nNow, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nwm62_lw &lt;- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\nThe output spatial weights object is called wm62_lw.\n\n\n\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn &lt;- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nknn_lw &lt;- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014\n\n\n\n\n\n\n\n\n\nfips &lt;- order(hunan$County)\ngi.fixed &lt;- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"internals\")\n               Gi      E(Gi)        V(Gi)        Z(Gi) Pr(z != E(Gi))\n [1,] 0.064192949 0.05747126 2.375922e-04  0.436075843   6.627817e-01\n [2,] 0.042300020 0.04597701 1.917951e-04 -0.265505650   7.906200e-01\n [3,] 0.044961480 0.04597701 1.933486e-04 -0.073033665   9.417793e-01\n [4,] 0.039475779 0.03448276 1.461473e-04  0.413017033   6.795941e-01\n [5,] 0.049767939 0.04597701 1.927263e-04  0.273070579   7.847990e-01\n [6,] 0.008825335 0.01149425 4.998177e-05 -0.377510776   7.057941e-01\n [7,] 0.050807266 0.02298851 9.435398e-05  2.863898821   4.184617e-03\n [8,] 0.083966739 0.04597701 1.848292e-04  2.794350420   5.200409e-03\n [9,] 0.115751554 0.04597701 1.789361e-04  5.216125401   1.827045e-07\n[10,] 0.049115587 0.04597701 1.891013e-04  0.228236603   8.194623e-01\n[11,] 0.045819180 0.03448276 1.420884e-04  0.951035346   3.415864e-01\n[12,] 0.049183846 0.05747126 2.387633e-04 -0.536334231   5.917276e-01\n[13,] 0.048429181 0.04597701 1.924532e-04  0.176761556   8.596957e-01\n[14,] 0.034733752 0.02298851 9.651140e-05  1.195564020   2.318667e-01\n[15,] 0.011262043 0.01149425 4.945294e-05 -0.033020610   9.736582e-01\n[16,] 0.065131196 0.04597701 1.931870e-04  1.378081093   1.681783e-01\n[17,] 0.027587075 0.03448276 1.385862e-04 -0.585756761   5.580390e-01\n[18,] 0.029409313 0.03448276 1.461397e-04 -0.419680565   6.747188e-01\n[19,] 0.061466754 0.05747126 2.383385e-04  0.258805141   7.957856e-01\n[20,] 0.057656917 0.05747126 2.371303e-04  0.012056111   9.903808e-01\n[21,] 0.066518379 0.06896552 2.820326e-04 -0.145716531   8.841452e-01\n[22,] 0.045599896 0.04597701 1.928108e-04 -0.027158687   9.783332e-01\n[23,] 0.030646753 0.03448276 1.449523e-04 -0.318615290   7.500183e-01\n[24,] 0.035635552 0.04597701 1.906613e-04 -0.748946051   4.538897e-01\n[25,] 0.032606647 0.04597701 1.932888e-04 -0.961700582   3.362000e-01\n[26,] 0.035001352 0.04597701 1.897172e-04 -0.796851342   4.255374e-01\n[27,] 0.012746354 0.02298851 9.812587e-05 -1.033949773   3.011596e-01\n[28,] 0.061287917 0.06896552 2.773884e-04 -0.460979158   6.448136e-01\n[29,] 0.014277403 0.02298851 9.683314e-05 -0.885240161   3.760271e-01\n[30,] 0.009622875 0.01149425 4.924586e-05 -0.266671512   7.897221e-01\n[31,] 0.014258398 0.02298851 9.705244e-05 -0.886168613   3.755267e-01\n[32,] 0.005453443 0.01149425 4.986245e-05 -0.855476971   3.922871e-01\n[33,] 0.043283712 0.05747126 2.367109e-04 -0.922143185   3.564539e-01\n[34,] 0.020763514 0.03448276 1.393165e-04 -1.162328599   2.451020e-01\n[35,] 0.081261843 0.06896552 2.794398e-04  0.735582222   4.619850e-01\n[36,] 0.057419907 0.05747126 2.338437e-04 -0.003358489   9.973203e-01\n[37,] 0.013497133 0.02298851 9.624821e-05 -0.967459309   3.333145e-01\n[38,] 0.019289310 0.03448276 1.455643e-04 -1.259299080   2.079223e-01\n[39,] 0.025996272 0.04597701 1.892938e-04 -1.452256513   1.464303e-01\n[40,] 0.016092694 0.03448276 1.424776e-04 -1.540671121   1.233968e-01\n[41,] 0.035952614 0.05747126 2.379439e-04 -1.395011407   1.630124e-01\n[42,] 0.031690963 0.05747126 2.350604e-04 -1.681505286   9.266481e-02\n[43,] 0.018750079 0.03448276 1.433314e-04 -1.314110709   1.888090e-01\n[44,] 0.015449080 0.02298851 9.638666e-05 -0.767944457   4.425202e-01\n[45,] 0.065760689 0.06896552 2.760533e-04 -0.192889342   8.470456e-01\n[46,] 0.098966900 0.05747126 2.326002e-04  2.720804542   6.512325e-03\n[47,] 0.085415780 0.05747126 2.385746e-04  1.809191360   7.042128e-02\n[48,] 0.038816536 0.05747126 2.343951e-04 -1.218469473   2.230456e-01\n[49,] 0.038931873 0.04597701 1.893501e-04 -0.511984469   6.086619e-01\n[50,] 0.055098610 0.06896552 2.760948e-04 -0.834546363   4.039732e-01\n[51,] 0.033405005 0.04597701 1.916312e-04 -0.908179070   3.637836e-01\n[52,] 0.043040784 0.06896552 2.829941e-04 -1.541081516   1.232969e-01\n[53,] 0.011297699 0.02298851 9.615920e-05 -1.192199867   2.331829e-01\n[54,] 0.040968457 0.05747126 2.356318e-04 -1.075080164   2.823388e-01\n[55,] 0.023629663 0.04597701 1.877170e-04 -1.631075961   1.028743e-01\n[56,] 0.006281129 0.01149425 4.916619e-05 -0.743472246   4.571958e-01\n[57,] 0.063918654 0.05747126 2.369553e-04  0.418842387   6.753313e-01\n[58,] 0.070325003 0.05747126 2.381374e-04  0.832943753   4.048765e-01\n[59,] 0.025947288 0.03448276 1.444058e-04 -0.710289083   4.775249e-01\n[60,] 0.039752578 0.04597701 1.915656e-04 -0.449718820   6.529132e-01\n[61,] 0.049934283 0.05747126 2.334965e-04 -0.493238743   6.218439e-01\n[62,] 0.030964195 0.04597701 1.920248e-04 -1.083386776   2.786368e-01\n[63,] 0.058129184 0.05747126 2.343319e-04  0.042979051   9.657182e-01\n[64,] 0.046096514 0.04597701 1.932637e-04  0.008596093   9.931414e-01\n[65,] 0.012459080 0.01149425 5.008051e-05  0.136337469   8.915545e-01\n[66,] 0.091447733 0.05747126 2.377744e-04  2.203411744   2.756574e-02\n[67,] 0.049575872 0.02298851 9.766513e-05  2.690329952   7.138140e-03\n[68,] 0.107907212 0.04597701 1.933581e-04  4.453703219   8.440175e-06\n[69,] 0.019616151 0.02298851 9.789454e-05 -0.340842743   7.332220e-01\n[70,] 0.032923393 0.03448276 1.454032e-04 -0.129318589   8.971056e-01\n[71,] 0.030317663 0.02298851 9.867859e-05  0.737806634   4.606320e-01\n[72,] 0.019437582 0.03448276 1.455870e-04 -1.246912658   2.124295e-01\n[73,] 0.055245460 0.04597701 1.932838e-04  0.666667559   5.049845e-01\n[74,] 0.074278054 0.05747126 2.383538e-04  1.088613505   2.763244e-01\n[75,] 0.013269580 0.02298851 9.719982e-05 -0.985792573   3.242349e-01\n[76,] 0.049407829 0.03448276 1.463785e-04  1.233609606   2.173484e-01\n[77,] 0.028605749 0.03448276 1.455139e-04 -0.487196415   6.261191e-01\n[78,] 0.039087662 0.02298851 9.801040e-05  1.626174042   1.039126e-01\n[79,] 0.031447120 0.04597701 1.877464e-04 -1.060416797   2.889550e-01\n[80,] 0.064005294 0.05747126 2.359641e-04  0.425361422   6.705732e-01\n[81,] 0.044606529 0.05747126 2.357330e-04 -0.837897118   4.020885e-01\n[82,] 0.063700493 0.06896552 2.801427e-04 -0.314565243   7.530918e-01\n[83,] 0.051142205 0.04597701 1.933560e-04  0.371456331   7.102977e-01\n[84,] 0.102121112 0.04597701 1.610278e-04  4.424392623   9.671399e-06\n[85,] 0.021901462 0.02298851 9.843172e-05 -0.109566928   9.127528e-01\n[86,] 0.064931813 0.04597701 1.929430e-04  1.364597995   1.723794e-01\n[87,] 0.031747344 0.04597701 1.909867e-04 -1.029658605   3.031703e-01\n[88,] 0.015893319 0.02298851 9.765131e-05 -0.718000620   4.727569e-01\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe output of localG() is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\nNext, we will join the Gi values to their corresponding hunan sf data frame by using the code chunk below.\n\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.fixed)) %&gt;%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\nThe code chunk above performs three tasks:\n\nFirst, it convert the output vector (i.e. gi.fixed) into r matrix object by using as.matrix().\nNext, cbind() is used to join hunan data and gi.fixed matrix to produce a new SpatialPolygonDataFrame called hunan.gi.\nLastly, the field name of the gi values is renamed to gstat_fixed by using rename().\n\n\n\n\nThe code chunk below shows the functions used to map Gi values derived using fixed distance weight matrix.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below is used to compute the Gi values for GDPPC2012 by using an adaptive distance weight matrix (i.e knb_lw).\n\nfips &lt;- order(hunan$County)\ngi.adaptive &lt;- localG(hunan$GDPPC, knn_lw)\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.adaptive)) %&gt;%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\n\n\nIt is time for us to visualise the locations of hot spot and cold spot areas. The choropleth mapping functions of tmap package will be used to map the Gi values.\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\ngdppc&lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#overview",
    "title": "Hands-on Exercise 5B",
    "section": "",
    "text": "Local Measures of Spatial Autocorrelation (LMSA) focus on the relationships between each observation and its surroundings, rather than providing a single summary of these relationships across the map. In this sense, they are not summary statistics but scores that allow us to learn more about the spatial structure in our data. The general intuition behind the metrics however is similar to that of global ones. Some of them are even mathematically connected, where the global version can be decomposed into a collection of local ones. One such example is Local Indicators of Spatial Association (LISA). Beside LISA, Getis-Ord’s Gi-statistics will be introduce as an alternative LMSA statistics that present complementary information or allow us to obtain similar insights for geographically referenced data.\nIn this hands-on exercise, we will compute Local Measures of Spatial Autocorrelation (LMSA) using spdep package. By the end to this hands-on exercise, we will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers by using appropriate functions spdep package;\ncompute Getis-Ord’s Gi-statistics for detecting hot spot or/and cold spot area by using appropriate functions of spdep package; and\nto visualise the analysis output by using tmap package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#getting-started",
    "title": "Hands-on Exercise 5B",
    "section": "",
    "text": "In spatial policy, one of the main development objective of the local govenment and planners is to ensure equal distribution of development in the province. Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically. If the answer is No. Then, our next question will be “is there sign of spatial clustering?”. And, if the answer for this question is yes, then our next question will be “where are these clusters?”\nIn this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Province, People Republic of China.\n\n\n\nTwo data sets will be used in this hands-on exercise, they are:\n\nHunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\n\n\nBefore we get started, we need to ensure that spdep, sf, tmap and tidyverse packages of R are currently installed in R.\n\nsf is use for importing and handling geospatial data in R,\ntidyverse is mainly use for wrangling attribute data in R,\nspdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and\ntmap will be used to prepare cartographic quality chropleth map.\n\nThe code chunk below is used to perform the following tasks:\n\ncreating a package list containing the necessary R packages,\nchecking if the R packages in the package list have been installed in R,\n\nif they have yet to be installed, RStudio will installed the missing packages,\n\nlaunching the packages into R environment.\n\n\npacman::p_load(sf,spdep,tmap,tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#getting-the-data-into-r-environment",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#getting-the-data-into-r-environment",
    "title": "Hands-on Exercise 5B",
    "section": "",
    "text": "In this section, you will learn how to bring a geospatial data and its associated attribute table into R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.\n\n\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be a simple features object of sf.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\",\n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex05\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\nWe note that the simple features data has a polygon geometry and has 88 features and 7 fields. It is in WGS84 geographic coordinate system.\n\n\n\nNext, we will import Hunan_2012.csv into R using read_csv() of readr package. The output is in R data frame class.\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package:\n\nhunan &lt;- left_join(hunan,hunan2012)%&gt;%\n  select(1:4,7,15)\n\n\n\n\nNow, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\nequal &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\",\n            main.title.size = 1,\n            legend.text.size = 0.6,\n            legend.height = 1.20,\n            legend.width = 1.20,\n            frame = TRUE)\n\nquantile &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\",\n            main.title.size = 1,\n            legend.text.size = 0.6,\n            legend.height = 1.20,\n            legend.width = 1.20,\n            frame = TRUE)\n\ntmap_arrange(equal,\n             quantile,\n             asp = 1,\n             ncol = 2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#local-indicators-of-spatial-association-lisa",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#local-indicators-of-spatial-association-lisa",
    "title": "Hands-on Exercise 5B",
    "section": "",
    "text": "Local Indicators of Spatial Association or LISA are statistics that evaluate the existence of clusters and/or outliers in the spatial arrangement of a given variable. For instance if we are studying distribution of GDP per capita of Hunan Provice, People Republic of China, local clusters in GDP per capita mean that there are counties that have higher or lower rates than is to be expected by chance alone; that is, the values occurring are above or below those of a random distribution in space.\nIn this section, we will apply appropriate Local Indicators for Spatial Association (LISA), especially local Moran’s I to detect cluster and/or outlier from GDP per capita 2012 of Hunan Province, PRC.\n\n\nBefore we can compute the global spatial autocorrelation statistics, we need to construct spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.\nIn the code chunk below, poly2nb() of spdep package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. Based on the documentation, note that the “queen” argument can take TRUE or FALSE as options. If not specified, the default is set to TRUE and the function will return a list of first order neighbours using the Queen criteria (which is on the basis of shared boundaries):\nThe code chunk below is used to compute Queen contiguity weight matrix:\n\nwm_q &lt;- poly2nb(hunan,\n                queen = TRUE)\n\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours and there are two ara units with only one neighbour.\n\n\n\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summarise the neighbors’ values, it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrswm_q &lt;- nb2listw(wm_q,\n                   style = \"W\",\n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\n\n\n\n\n\nWhat can we learn from the code chunk above?\n\n\n\n\nThe input of nb2listw() must be an object of class nb. The syntax of the function has two major arguments, namely style and zero.policy.\nstyle can take values “W”, “B”, “C”, “U”, “minmax” and “S”.\n\nB is the basic binary coding\nW is row standardised (sums over all links to n)\nC is globally standardised (sums over all links to n)\nU is equal to C divided by the number of neighbours (sums over all links to unity)\nS is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\n\nIf zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.\n\n\n\n\n\n\nTo compute local Moran’s I, the localmoran() function of spdep will be used. It computes Ii values, given a set of zi values and a listw object providing neighbour weighting information for the polygon associated with the zi values.\nThe code chunks below are used to compute local Moran’s I of GDPPC2012 at the county level.\n\nfips &lt;- order(hunan$County)\nlocalMI &lt;- localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\nlocalmoran() function returns a matrix of values whose columns are:\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local moran statistic under the randomisation hypothesis\nZ.Ii: the standard deviate of local moran statistic\nPr(): the p-value of local moran statistic\n\nThe code chunk below list the content of the local Moran matrix derived by using printCoefmat().\n\nprintCoefmat(data.frame(\n  localMI[fips,], \n  row.names=hunan$County[fips]),\n  check.names=FALSE)\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n\n\n\n\n\nBefore mapping the local Moran’s I map, it is wise to append the local Moran’s I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame. The code chunks below can be used to perform the task. The out SpatialPolygonDataFrame is called hunan.localMI.\n\nhunan.localMI &lt;- cbind(hunan,localMI) %&gt;%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\n\nUsing choropleth mapping functions of tmap package, we can plot the local Moran’s I values by using the code chunk below.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\nThe choropleth shows there is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values, as considered above.\nThe code chunk below produce a choropleth map of Moran’s I p-values by using functions of tmap package.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualisation.\n\nlocalMI.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#creating-a-lisa-cluster-map",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#creating-a-lisa-cluster-map",
    "title": "Hands-on Exercise 5B",
    "section": "",
    "text": "The LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.\n\n\nThe Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.\nThe code chunk below plots the Moran scatterplot of GDPPC 2012 by using moran.plot() of spdep.\n\nnci &lt;- moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\n\n\n\n\nNotice that the plot is split in 4 quadrants. The top right corner belongs to areas that have high GDPPC and are surrounded by other areas that have the average level of GDPPC. These are the high-high locations in the lesson slides.\n\n\n\nFirst we will use scale() to center and scale the variable. Here centering is done by subtracting the mean (omitting NAs) of the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.\n\nhunan$Z.GDPPC &lt;- scale(hunan$GDPPC) %&gt;% \n  as.vector \n\nThe as.vector() added to the end is to make sure that the data type we get out of this is a vector, that maps neatly into out dataframe.\nNow, we are ready to plot the Moran scatterplot again by using the code chunk below.\n\nnci2 &lt;- moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")\n\n\n\n\n\n\n\n\n\n\n\nThe code chunks below show the steps to prepare a LISA cluster map.\n\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(localMI))\n\nNext, we derive the spatially lagged variable of interest (i.e. GDPPC) and center the spatially lagged variable around its mean.\n\nhunan$lag_GDPPC &lt;- lag.listw(rswm_q, hunan$GDPPC)\nDV &lt;- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \n\nThis is follow by centering the local Moran’s around the mean.\n\nLM_I &lt;- localMI[,1] - mean(localMI[,1])    \n\nNext, we will set a statistical significance level for the local Moran.\n\nsignif &lt;- 0.05       \n\nThese four command lines define the low-low (1), low-high (2), high-low (3) and high-high (4) categories:\n\nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4      \n\nLastly, we place non-significant Moran in the category 0:\n\nquadrant[localMI[,5]&gt;signif] &lt;- 0\n\nIn fact, we can combined all the steps into one single code chunk as shown below:\n\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(localMI))\nhunan$lag_GDPPC &lt;- lag.listw(rswm_q, hunan$GDPPC)\nDV &lt;- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \nLM_I &lt;- localMI[,1]   \nsignif &lt;- 0.05       \nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4    \nquadrant[localMI[,5]&gt;signif] &lt;- 0\n\n\n\n\nNow, we can build the LISA map by using the code chunk below.\n\nhunan.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualisation.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, \n             asp=1, ncol=2)\n\n\n\n\n\n\n\n\nWe can also include the local Moran’s I map and p-value map as shown below for easy comparison."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#hot-spot-and-cold-spot-area-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#hot-spot-and-cold-spot-area-analysis",
    "title": "Hands-on Exercise 5B",
    "section": "",
    "text": "Beside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.\nThe term ‘hot spot’ has been used generically across disciplines to describe a region or value that is higher relative to its surroundings (Lepers et al 2005, Aben et al 2012, Isobe et al 2015).\n\n\nAn alternative spatial statistics to detect spatial anomalies is the Getis and Ord’s G-statistics (Getis and Ord, 1972; Ord and Getis, 1995). It looks at neighbours within a defined proximity to identify where either high or low values cluster spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.\nThe analysis consists of three steps:\n\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics\n\n\n\n\nFirst, we need to define a new set of neighbours. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.\nThere are two type of distance-based proximity matrix, they are:\n\nfixed distance weight matrix; and\nadaptive distance weight matrix.\n\n\n\n\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid() on the sf object: us.bound. We need the coordinates in a separate data frame for this to work.\nTo do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid(). We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation\nTo get our longitude values we map the st_centroid() function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\ncoords &lt;- cbind(longitude, latitude)\n\n\n\n\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n#coords &lt;- coordinates(hunan)\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\n\nNow, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nwm62_lw &lt;- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\nThe output spatial weights object is called wm62_lw.\n\n\n\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn &lt;- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nknn_lw &lt;- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#computing-gi-statistics",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#computing-gi-statistics",
    "title": "Hands-on Exercise 5B",
    "section": "",
    "text": "fips &lt;- order(hunan$County)\ngi.fixed &lt;- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"internals\")\n               Gi      E(Gi)        V(Gi)        Z(Gi) Pr(z != E(Gi))\n [1,] 0.064192949 0.05747126 2.375922e-04  0.436075843   6.627817e-01\n [2,] 0.042300020 0.04597701 1.917951e-04 -0.265505650   7.906200e-01\n [3,] 0.044961480 0.04597701 1.933486e-04 -0.073033665   9.417793e-01\n [4,] 0.039475779 0.03448276 1.461473e-04  0.413017033   6.795941e-01\n [5,] 0.049767939 0.04597701 1.927263e-04  0.273070579   7.847990e-01\n [6,] 0.008825335 0.01149425 4.998177e-05 -0.377510776   7.057941e-01\n [7,] 0.050807266 0.02298851 9.435398e-05  2.863898821   4.184617e-03\n [8,] 0.083966739 0.04597701 1.848292e-04  2.794350420   5.200409e-03\n [9,] 0.115751554 0.04597701 1.789361e-04  5.216125401   1.827045e-07\n[10,] 0.049115587 0.04597701 1.891013e-04  0.228236603   8.194623e-01\n[11,] 0.045819180 0.03448276 1.420884e-04  0.951035346   3.415864e-01\n[12,] 0.049183846 0.05747126 2.387633e-04 -0.536334231   5.917276e-01\n[13,] 0.048429181 0.04597701 1.924532e-04  0.176761556   8.596957e-01\n[14,] 0.034733752 0.02298851 9.651140e-05  1.195564020   2.318667e-01\n[15,] 0.011262043 0.01149425 4.945294e-05 -0.033020610   9.736582e-01\n[16,] 0.065131196 0.04597701 1.931870e-04  1.378081093   1.681783e-01\n[17,] 0.027587075 0.03448276 1.385862e-04 -0.585756761   5.580390e-01\n[18,] 0.029409313 0.03448276 1.461397e-04 -0.419680565   6.747188e-01\n[19,] 0.061466754 0.05747126 2.383385e-04  0.258805141   7.957856e-01\n[20,] 0.057656917 0.05747126 2.371303e-04  0.012056111   9.903808e-01\n[21,] 0.066518379 0.06896552 2.820326e-04 -0.145716531   8.841452e-01\n[22,] 0.045599896 0.04597701 1.928108e-04 -0.027158687   9.783332e-01\n[23,] 0.030646753 0.03448276 1.449523e-04 -0.318615290   7.500183e-01\n[24,] 0.035635552 0.04597701 1.906613e-04 -0.748946051   4.538897e-01\n[25,] 0.032606647 0.04597701 1.932888e-04 -0.961700582   3.362000e-01\n[26,] 0.035001352 0.04597701 1.897172e-04 -0.796851342   4.255374e-01\n[27,] 0.012746354 0.02298851 9.812587e-05 -1.033949773   3.011596e-01\n[28,] 0.061287917 0.06896552 2.773884e-04 -0.460979158   6.448136e-01\n[29,] 0.014277403 0.02298851 9.683314e-05 -0.885240161   3.760271e-01\n[30,] 0.009622875 0.01149425 4.924586e-05 -0.266671512   7.897221e-01\n[31,] 0.014258398 0.02298851 9.705244e-05 -0.886168613   3.755267e-01\n[32,] 0.005453443 0.01149425 4.986245e-05 -0.855476971   3.922871e-01\n[33,] 0.043283712 0.05747126 2.367109e-04 -0.922143185   3.564539e-01\n[34,] 0.020763514 0.03448276 1.393165e-04 -1.162328599   2.451020e-01\n[35,] 0.081261843 0.06896552 2.794398e-04  0.735582222   4.619850e-01\n[36,] 0.057419907 0.05747126 2.338437e-04 -0.003358489   9.973203e-01\n[37,] 0.013497133 0.02298851 9.624821e-05 -0.967459309   3.333145e-01\n[38,] 0.019289310 0.03448276 1.455643e-04 -1.259299080   2.079223e-01\n[39,] 0.025996272 0.04597701 1.892938e-04 -1.452256513   1.464303e-01\n[40,] 0.016092694 0.03448276 1.424776e-04 -1.540671121   1.233968e-01\n[41,] 0.035952614 0.05747126 2.379439e-04 -1.395011407   1.630124e-01\n[42,] 0.031690963 0.05747126 2.350604e-04 -1.681505286   9.266481e-02\n[43,] 0.018750079 0.03448276 1.433314e-04 -1.314110709   1.888090e-01\n[44,] 0.015449080 0.02298851 9.638666e-05 -0.767944457   4.425202e-01\n[45,] 0.065760689 0.06896552 2.760533e-04 -0.192889342   8.470456e-01\n[46,] 0.098966900 0.05747126 2.326002e-04  2.720804542   6.512325e-03\n[47,] 0.085415780 0.05747126 2.385746e-04  1.809191360   7.042128e-02\n[48,] 0.038816536 0.05747126 2.343951e-04 -1.218469473   2.230456e-01\n[49,] 0.038931873 0.04597701 1.893501e-04 -0.511984469   6.086619e-01\n[50,] 0.055098610 0.06896552 2.760948e-04 -0.834546363   4.039732e-01\n[51,] 0.033405005 0.04597701 1.916312e-04 -0.908179070   3.637836e-01\n[52,] 0.043040784 0.06896552 2.829941e-04 -1.541081516   1.232969e-01\n[53,] 0.011297699 0.02298851 9.615920e-05 -1.192199867   2.331829e-01\n[54,] 0.040968457 0.05747126 2.356318e-04 -1.075080164   2.823388e-01\n[55,] 0.023629663 0.04597701 1.877170e-04 -1.631075961   1.028743e-01\n[56,] 0.006281129 0.01149425 4.916619e-05 -0.743472246   4.571958e-01\n[57,] 0.063918654 0.05747126 2.369553e-04  0.418842387   6.753313e-01\n[58,] 0.070325003 0.05747126 2.381374e-04  0.832943753   4.048765e-01\n[59,] 0.025947288 0.03448276 1.444058e-04 -0.710289083   4.775249e-01\n[60,] 0.039752578 0.04597701 1.915656e-04 -0.449718820   6.529132e-01\n[61,] 0.049934283 0.05747126 2.334965e-04 -0.493238743   6.218439e-01\n[62,] 0.030964195 0.04597701 1.920248e-04 -1.083386776   2.786368e-01\n[63,] 0.058129184 0.05747126 2.343319e-04  0.042979051   9.657182e-01\n[64,] 0.046096514 0.04597701 1.932637e-04  0.008596093   9.931414e-01\n[65,] 0.012459080 0.01149425 5.008051e-05  0.136337469   8.915545e-01\n[66,] 0.091447733 0.05747126 2.377744e-04  2.203411744   2.756574e-02\n[67,] 0.049575872 0.02298851 9.766513e-05  2.690329952   7.138140e-03\n[68,] 0.107907212 0.04597701 1.933581e-04  4.453703219   8.440175e-06\n[69,] 0.019616151 0.02298851 9.789454e-05 -0.340842743   7.332220e-01\n[70,] 0.032923393 0.03448276 1.454032e-04 -0.129318589   8.971056e-01\n[71,] 0.030317663 0.02298851 9.867859e-05  0.737806634   4.606320e-01\n[72,] 0.019437582 0.03448276 1.455870e-04 -1.246912658   2.124295e-01\n[73,] 0.055245460 0.04597701 1.932838e-04  0.666667559   5.049845e-01\n[74,] 0.074278054 0.05747126 2.383538e-04  1.088613505   2.763244e-01\n[75,] 0.013269580 0.02298851 9.719982e-05 -0.985792573   3.242349e-01\n[76,] 0.049407829 0.03448276 1.463785e-04  1.233609606   2.173484e-01\n[77,] 0.028605749 0.03448276 1.455139e-04 -0.487196415   6.261191e-01\n[78,] 0.039087662 0.02298851 9.801040e-05  1.626174042   1.039126e-01\n[79,] 0.031447120 0.04597701 1.877464e-04 -1.060416797   2.889550e-01\n[80,] 0.064005294 0.05747126 2.359641e-04  0.425361422   6.705732e-01\n[81,] 0.044606529 0.05747126 2.357330e-04 -0.837897118   4.020885e-01\n[82,] 0.063700493 0.06896552 2.801427e-04 -0.314565243   7.530918e-01\n[83,] 0.051142205 0.04597701 1.933560e-04  0.371456331   7.102977e-01\n[84,] 0.102121112 0.04597701 1.610278e-04  4.424392623   9.671399e-06\n[85,] 0.021901462 0.02298851 9.843172e-05 -0.109566928   9.127528e-01\n[86,] 0.064931813 0.04597701 1.929430e-04  1.364597995   1.723794e-01\n[87,] 0.031747344 0.04597701 1.909867e-04 -1.029658605   3.031703e-01\n[88,] 0.015893319 0.02298851 9.765131e-05 -0.718000620   4.727569e-01\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe output of localG() is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\nNext, we will join the Gi values to their corresponding hunan sf data frame by using the code chunk below.\n\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.fixed)) %&gt;%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\nThe code chunk above performs three tasks:\n\nFirst, it convert the output vector (i.e. gi.fixed) into r matrix object by using as.matrix().\nNext, cbind() is used to join hunan data and gi.fixed matrix to produce a new SpatialPolygonDataFrame called hunan.gi.\nLastly, the field name of the gi values is renamed to gstat_fixed by using rename().\n\n\n\n\nThe code chunk below shows the functions used to map Gi values derived using fixed distance weight matrix.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below is used to compute the Gi values for GDPPC2012 by using an adaptive distance weight matrix (i.e knb_lw).\n\nfips &lt;- order(hunan$County)\ngi.adaptive &lt;- localG(hunan$GDPPC, knn_lw)\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.adaptive)) %&gt;%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\n\n\nIt is time for us to visualise the locations of hot spot and cold spot areas. The choropleth mapping functions of tmap package will be used to map the Gi values.\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\ngdppc&lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#exploratory-data-analysis-eda",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#exploratory-data-analysis-eda",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "We carry some EDA to understand how the occurrences of road accidents could be influenced by different factors.\n\n\n\nggplot(roadacc, aes(x = fct_reorder(province_en, province_en, .fun = length))) + \n  geom_bar(fill = \"skyblue\") +\n  labs(title = \"Distribution of Road Accidents across Provinces\", x = \"Province\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\nAs noted from the plot, Bangkok has the highest occurrences of road accidents in the BMR, followed by Samut Prakan, Pathum Thani, Samut Sakhon, Nakhon Pathom and Nonthaburi.\n\n\n\n\nggplot(roadacc, aes(x = fct_reorder(agency, agency, .fun = length))) + \n  geom_bar(fill = \"lightgreen\") +\n  labs(title = \"Distribution of Road Accidents by Agency\", x = \"Agency\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\nAs noted from the plot, the Department of Highways is responsible for the most occurrences of road accidents in the BMR, followed by Department of Rural Roads and Expressway Authority of Thailand.\n\n\n\nWe also analyse the road accidents by time, namely by year, by month, by day of week and by time of day.\n\n\n\n\nBy yearBy year (at province level)\n\n\n\nggplot(roadacc, aes(x = inc_year)) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Year\", x = \"Year\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nWe note from the plot that the number of road accidents has generally been increasing from 2019 to 2022.\n\n\n\nggplot(roadacc, aes(x = inc_year)) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Year\", x = \"Year\", y = \"Count\") +\n  facet_wrap(~province_en)+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\n\nWe note from above that the number of road accidents has generally been increasing in Bangkok and Samut Prakan from 2019 to 2022.\n\nThis is with the exception of a drop in 2021 in Bangkok - this could potentially be due to the surge of COVID-19 cases in Thailand in 2021 which led to a lockdown which meant that there were less tourists, vehicles and pedestrians on the roads, and lower occurrences of road accidents.\n\nWe note that the number of road accidents in Nonthaburi and Pathum Thani increased from 2019 to 2021 and fell in 2022.\nWe note that the number of road accidents in Samut Sakhon fell from 2019 to 2021 but increased in 2022.\nOf the 6 provinces, we note that only Nakhon Pathom experienced a fall in road accidents from 2019 to 2022.\n\n\n\n\n\n\n\nWe also observe the data by month using cycle plots that would enable us to observe cyclical/seasonal patterns, if present.\n\nroadacc_month &lt;- roadacc %&gt;%\n  group_by(inc_year,inc_month) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\nWe save roadacc_month as a rds file:\n\nwrite_rds(roadacc_month,\"data/rds/roadacc_month.rds\")\n\n\nroadacc_month &lt;- read_rds(\"data/rds/roadacc_month.rds\")\n\n\n\n\n\nhline.data &lt;- roadacc_month %&gt;%\n  group_by(inc_month) %&gt;%\n  summarise(avgvalue = mean(count))\n\nggplot(data = roadacc_month, aes(x = inc_year, y = count)) +\n  geom_line(aes(group = inc_month, colour = as.factor(inc_month))) +\n  geom_hline(aes(yintercept=avgvalue),\n             data=hline.data,\n             linetype=6,\n             colour=\"red\",\n             size=0.5)+\n  facet_wrap(~inc_month,scales = \"free_x\")+\n  labs(title = \"Road accidents by month from 2019 to 2022\",\n                   colour = \"Month\") +\n  xlab(\"Year\")+\n  ylab(\"Number of Road Accidents\")+\n  scale_color_brewer(palette = \"Paired\") + \n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\nBased on the plot, we observe the following:\n\nOccurrences of road accidents in Jan and Feb seem to generally be decreasing over the years, with the number of road accidents in 2022 for both months falling below the average number of road accidents for the month across 2019 to 2022.\nOccurrences of road accidents in Jul, Aug, Oct to Dec seem to generally be increasing over the years. Based on this observation alone, the increase in road accidents could potentially be due to the rainy season between Jul to Oct and the presence of a higher population due to peak tourist seasons in Nov and Dec.\nOccurrences of road accidents in Mar to Jun and Sep generally do not fluctuate much over the years.\n\n\n\n\nWe further observe the occurrence of road accidents by month at the province level:\n\n\n\n\n\n\nNote\n\n\n\n\n\n\nroadacc_month_bkk &lt;- roadacc %&gt;%\n  filter(province_en==\"Bangkok\") %&gt;%\n  group_by(inc_year,inc_month) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\nroadacc_month_sp &lt;- roadacc %&gt;%\n  filter(province_en==\"Samut Prakan\") %&gt;%\n  group_by(inc_year,inc_month) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\nroadacc_month_n &lt;- roadacc %&gt;%\n  filter(province_en==\"Nonthaburi\") %&gt;%\n  group_by(inc_year,inc_month) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\nroadacc_month_pt &lt;- roadacc %&gt;%\n  filter(province_en==\"Pathum Thani\") %&gt;%\n  group_by(inc_year,inc_month) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\nroadacc_month_np &lt;- roadacc %&gt;%\n  filter(province_en==\"Nakhon Pathom\") %&gt;%\n  group_by(inc_year,inc_month) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\nroadacc_month_ss &lt;- roadacc %&gt;%\n  filter(province_en==\"Samut Sakhon\") %&gt;%\n  group_by(inc_year,inc_month) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\nSaving them as rds files:\n\nwrite_rds(roadacc_month_bkk,\"data/rds/roadacc_month_bkk.rds\")\nwrite_rds(roadacc_month_sp,\"data/rds/roadacc_month_sp.rds\")\nwrite_rds(roadacc_month_n,\"data/rds/roadacc_month_n.rds\")\nwrite_rds(roadacc_month_pt,\"data/rds/roadacc_month_pt.rds\")\nwrite_rds(roadacc_month_np,\"data/rds/roadacc_month_np.rds\")\nwrite_rds(roadacc_month_ss,\"data/rds/roadacc_month_ss.rds\")\n\nLoading the newly created rds files into R:\n\nroadacc_month_bkk &lt;- read_rds(\"data/rds/roadacc_month_bkk.rds\")\nroadacc_month_sp &lt;- read_rds(\"data/rds/roadacc_month_sp.rds\")\nroadacc_month_n &lt;- read_rds(\"data/rds/roadacc_month_n.rds\")\nroadacc_month_pt &lt;- read_rds(\"data/rds/roadacc_month_pt.rds\")\nroadacc_month_np &lt;- read_rds(\"data/rds/roadacc_month_np.rds\")\nroadacc_month_ss &lt;- read_rds(\"data/rds/roadacc_month_ss.rds\")\n\n\n\n\n\nBangkokSamut PrakanNonthaburiPathum ThaniNakhon PathomSamut Sakhon\n\n\n\nhline.data &lt;- roadacc_month_bkk %&gt;%\n  group_by(inc_month) %&gt;%\n  summarise(avgvalue = mean(count))\n\nggplot(data = roadacc_month_bkk, aes(x = inc_year, y = count)) +\n  geom_line(aes(group = inc_month, colour = as.factor(inc_month))) +\n  geom_hline(aes(yintercept=avgvalue),\n             data=hline.data,\n             linetype=6,\n             colour=\"red\",\n             size=0.5)+\n  facet_wrap(~inc_month,scales = \"free_x\")+\n  labs(title = \"Bangkok Road accidents by month from 2019 to 2022\",\n                   colour = \"Month\") +\n  xlab(\"Year\")+\n  ylab(\"Number of Road Accidents\")+\n  scale_color_brewer(palette = \"Paired\") + \n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\nThe following observations were made:\n\nOccurrences of road accidents in Jan seem to be fluctuating, with the number of road accidents decreasing from 2019 to 2021 then increasing in 2022.\nOccurrences of road accidents in Feb seem to generally be decreasing over the years, with the number of road accidents in 2022 falling below the average number of road accidents for the month across 2019 to 2022.\nOccurrences of road accidents in Jul to Dec seem to generally be increasing over the years. Based on this observation alone, the increase in road accidents could potentially be due to the rainy season between Jul to Oct and the presence of a higher population due to peak tourist seasons in Nov and Dec.\nOccurrences of road accidents in Mar to Jun generally do not fluctuate much over the years.\n\n\n\n\nhline.data &lt;- roadacc_month_sp %&gt;%\n  group_by(inc_month) %&gt;%\n  summarise(avgvalue = mean(count))\n\nggplot(data = roadacc_month_sp, aes(x = inc_year, y = count)) +\n  geom_line(aes(group = inc_month, colour = as.factor(inc_month))) +\n  geom_hline(aes(yintercept=avgvalue),\n             data=hline.data,\n             linetype=6,\n             colour=\"red\",\n             size=0.5)+\n  facet_wrap(~inc_month,scales = \"free_x\")+\n  labs(title = \"Samut Prakan Road accidents by month from 2019 to 2022\",\n                   colour = \"Month\") +\n  xlab(\"Year\")+\n  ylab(\"Number of Road Accidents\")+\n  scale_color_brewer(palette = \"Paired\") + \n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\nThe following observations were made:\n\nOccurrences of road accidents in Jan seem to generally be decreasing over the years, with the number of road accidents in 2022 falling below the average number of road accidents for the month across 2019 to 2022.\nOccurrences of road accidents in Apr to Aug and Nov to Dec seem to generally be increasing over the years. Based on this observation alone, the increase in road accidents could potentially be due to the hotter and rainier seasons in Apr to Aug and the presence of a higher population due to peak tourist seasons in May, Jun, Nov and Dec.\nOccurrences of road accidents in Feb to Mar and Sep to Oct increased initially then fell towards 2022.\n\n\n\n\nhline.data &lt;- roadacc_month_n %&gt;%\n  group_by(inc_month) %&gt;%\n  summarise(avgvalue = mean(count))\n\nggplot(data = roadacc_month_n, aes(x = inc_year, y = count)) +\n  geom_line(aes(group = inc_month, colour = as.factor(inc_month))) +\n  geom_hline(aes(yintercept=avgvalue),\n             data=hline.data,\n             linetype=6,\n             colour=\"red\",\n             size=0.5)+\n  facet_wrap(~inc_month,scales = \"free_x\")+\n  labs(title = \"Nonthaburi Road accidents by month from 2019 to 2022\",\n                   colour = \"Month\") +\n  xlab(\"Year\")+\n  ylab(\"Number of Road Accidents\")+\n  scale_color_brewer(palette = \"Paired\") + \n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\nThe following observations were made:\n\nOccurrences of road accidents in Feb seem to generally be decreasing over the years.\nOccurrences of road accidents in Jan seem to generally be increasing over the years.\nOccurrences of road accidents in Jul, Aug, Nov and Dec increased initially then fell towards 2022.\nOccurrences of road accidents in Mar to Jun, Sep and Oct seem to fluctuate generally around the monthly average across the years.\nAs compared to Bangkok, Samut Prakan and Pathum Thani, the number of road accidents in Nonthaburi seem to be lesser, indicating that roads are more well managed in Nonthaburi.\n\n\n\n\nhline.data &lt;- roadacc_month_pt %&gt;%\n  group_by(inc_month) %&gt;%\n  summarise(avgvalue = mean(count))\n\nggplot(data = roadacc_month_pt, aes(x = inc_year, y = count)) +\n  geom_line(aes(group = inc_month, colour = as.factor(inc_month))) +\n  geom_hline(aes(yintercept=avgvalue),\n             data=hline.data,\n             linetype=6,\n             colour=\"red\",\n             size=0.5)+\n  facet_wrap(~inc_month,scales = \"free_x\")+\n  labs(title = \"Pathum Thani Road accidents by month from 2019 to 2022\",\n                   colour = \"Month\") +\n  xlab(\"Year\")+\n  ylab(\"Number of Road Accidents\")+\n  scale_color_brewer(palette = \"Paired\") + \n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\nThe following observations were made:\n\nOccurrences of road accidents in Jun to Aug and Oct seem to generally be increasing over the years. This could be explained by the rainier seasons in Thailand during this period.\nOccurrences of road accidents in Mar, Apr, May and Nov increased initially then fell towards 2022.\nOccurrences of road accidents in Jan, Feb, Sep and Dec seem to fluctuate generally around the monthly average across the years.\n\n\n\n\nhline.data &lt;- roadacc_month_np %&gt;%\n  group_by(inc_month) %&gt;%\n  summarise(avgvalue = mean(count))\n\nggplot(data = roadacc_month_np, aes(x = inc_year, y = count)) +\n  geom_line(aes(group = inc_month, colour = as.factor(inc_month))) +\n  geom_hline(aes(yintercept=avgvalue),\n             data=hline.data,\n             linetype=6,\n             colour=\"red\",\n             size=0.5)+\n  facet_wrap(~inc_month,scales = \"free_x\")+\n  labs(title = \"Nakhon Pathom Road accidents by month from 2019 to 2022\",\n                   colour = \"Month\") +\n  xlab(\"Year\")+\n  ylab(\"Number of Road Accidents\")+\n  scale_color_brewer(palette = \"Paired\") + \n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\nThe following observations were made:\n\nOccurrences of road accidents in Jan to Mar, May, Jul to Dec seem to generally be decreasing over the years.\nOccurrences of road accidents in Apr and Jun seem to be fluctuating around the monthly average across the years.\nBased on these observations, it seems like road accidents are much lesser in Nakhon Pathom as compared to the other provinces and it is the only province with no obvious increase in occurrences of road accidents across the years, this indicates that the province is more well managed as compared to the other 5 provinces.\n\n\n\n\nhline.data &lt;- roadacc_month_ss %&gt;%\n  group_by(inc_month) %&gt;%\n  summarise(avgvalue = mean(count))\n\nggplot(data = roadacc_month_ss, aes(x = inc_year, y = count)) +\n  geom_line(aes(group = inc_month, colour = as.factor(inc_month))) +\n  geom_hline(aes(yintercept=avgvalue),\n             data=hline.data,\n             linetype=6,\n             colour=\"red\",\n             size=0.5)+\n  facet_wrap(~inc_month,scales = \"free_x\")+\n  labs(title = \"Samut Sakhon Road accidents by month from 2019 to 2022\",\n                   colour = \"Month\") +\n  xlab(\"Year\")+\n  ylab(\"Number of Road Accidents\")+\n  scale_color_brewer(palette = \"Paired\") + \n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\nThe following observations were made:\n\nOccurrences of road accidents in Jan, Feb, Apr and Jun seem to generally be decreasing over the years.\nOccurrences of road accidents in Jul to Dec seem to be increasing over the years. Based on this observation alone, the increase in road accidents could potentially be due to the hotter and rainier seasons in Jul to Oct and the presence of a higher population due to peak tourist seasons in Nov and Dec.\nOccurrences of road accidents in Mar and May seem to fluctuate generally around the monthly average across the years.\n\n\n\n\n\n\n\n\nOverallBreakdown by province\n\n\n\nggplot(roadacc, aes(x = inc_dayofweek)) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Day of Week\", x = \"Day of Week\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nWe note from the plot that road accidents occur mostly on Fri and Sat and this could be explained by these days being the start of the weekend, and more people and vehicles may be out on the roads and in public places, which increase the chances of road accidents occuring.\n\n\n\np0 &lt;- ggplot(roadacc, aes(x = inc_dayofweek)) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Day of Week\", x = \"Day of Week\", y = \"Count\") +\n  facet_wrap(~province_en, scales = \"fixed\")\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\nList of 1\n $ axis.text.x:List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : num 8\n  ..$ hjust        : num 1\n  ..$ vjust        : NULL\n  ..$ angle        : num 90\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi FALSE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n - attr(*, \"class\")= chr [1:2] \"theme\" \"gg\"\n - attr(*, \"complete\")= logi FALSE\n - attr(*, \"validate\")= logi TRUE\n\nggplotly(p0)\n\n\n\n\n\nAcross the provinces, it is obvious that road accidents occur most often on Fri and Sat in Bangkok. However, for the other provinces, the difference is not so obvious and it seems like the occurrences of road accidents are more well spread out across the week. This could be explained by Bangkok being a prime tourist destination and major urban centre, and it could attract a greater crowd from within and outside of Thailand over the weekend, hence leading to greater traffic on the road and higher chances of road accidents occurring.\n\n\n\n\n\n\n\nOverallBreakdown by province\n\n\n\nggplot(roadacc, aes(x = inc_time)) + \n  geom_histogram(binwidth = 1, fill = \"slategrey\", color = \"black\") +\n  scale_x_continuous(breaks = seq(0, 23, 1))+\n  labs(title = \"Distribution of Road Accidents by Time of Day\", \n       x = \"Time of Day\",\n       y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nBased on the chart, it is observed that road accidents occur more often between 7am to 11pm as compared to 12 midnight to 6am. This could be explained by 7am to 11pm being the time when most are awake for their daily activities and the roads are likely to have higher activity, which result in higher chances of occurrences of road accidents. The top two timings at which road accidents occur are at 9am and 7pm and this could be explained by it being the peak hour at which the general population i.e. workers, school students get to and get off work and school.\n\n\n\np1 &lt;- ggplot(roadacc, aes(x = inc_time)) + \n  geom_histogram(binwidth = 1, fill = \"slategrey\", color = \"black\") +\n  scale_x_continuous(breaks = seq(0, 23, 1))+\n  labs(title = \"Distribution of Road Accidents by Time of Day\", \n       x = \"Time of Day\",\n       y = \"Count\") +\n  facet_wrap(~province_en, scales = \"fixed\")+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\nggplotly(p1)\n\n\n\n\n\nBangkok, Samut Prakan and Pathum Thani also seem to follow the general observation seen under the overall chart for occurrences of road accidents by time day i.e. road accidents generally occur more during 7am to 11pm and peak timings are during the going to and getting off work/school hours at around 9am and 7pm. This is less obvious for the other provinces.\n\n\n\n\n\n\n\nOverallBreakdown by Province\n\n\n\nggplot(roadacc, aes(x = fct_reorder(weather_condition, weather_condition, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Weather Condition\", x = \"Weather Condition\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nBased on the plot, road accidents mostly occur in clear weather conditions, followed by rainy weather conditions and dark weather conditions. This could imply that road accidents are more heavily influenced by other behavioural or environmental factors besides the weather condition.\n\n\n\nggplot(roadacc, aes(x = fct_reorder(weather_condition, weather_condition, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Weather Condition\", x = \"Weather Condition\", y = \"Count\") +\n  facet_wrap(~province_en)+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nAcross provinces, similar observations were made as it was observed that road accidents mostly occur during clear weather conditions, followed by rainy and then dark weather conditions.\n\n\n\n\n\n\n\nOverallBreakdown by Province\n\n\n\nggplot(roadacc, aes(x = fct_reorder(road_description, road_description, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Road Description\", x = \"Road Description\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nBased on the plot, road accidents mostly occur on straight roads, roads categorised as other, followed by wide curve and then grade-separated intersection/ramps. Combining this observation with that for weather conditions - that road accidents mostly occur during clear weather conditions and straight roads - which are conditions under which one would not expect road accidents to occur, it could imply that the occurrence of road accidents are more heavily influenced by behavioural factors.\n\n\n\nggplot(roadacc, aes(x = fct_reorder(road_description, road_description, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Road Description\", x = \"Road Description\", y = \"Count\") +\n  facet_wrap(~province_en)+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nAcross provinces, similar observations were made as it was observed that road accidents mostly occur on straight roads, roads categorised as other, followed by wide curve and then grade-separated intersection/ramps.\n\n\n\n\n\n\n\nOverallBreakdown by Province\n\n\n\nggplot(roadacc, aes(x = fct_reorder(slope_description, slope_description, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Slope Description\", x = \"Slope Description\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nBased on the plot, road accidents where there are no slopes. Combining this observation with the above observations - that road accidents mostly occur during clear weather conditions and on straight roads with no slope - which are conditions under which one would not expect road accidents to occur, it could imply that the occurrence of road accidents are more heavily influenced by behavioural factors.\n\n\n\nggplot(roadacc, aes(x = fct_reorder(slope_description, slope_description, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Slope Description\", x = \"Slope Description\", y = \"Count\") +\n  facet_wrap(~province_en)+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nAcross provinces, similar observations were made as it was observed that road accidents mostly occur on roads with no slope.\n\n\n\n\n\n\n\nOverallBreakdown by Province\n\n\n\nggplot(roadacc, aes(x = fct_reorder(vehicle_type, vehicle_type, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Vehicle Type\", x = \"Vehicle Type\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nBased on the plot, road accidents mostly involve private/passenger car, followed by 4-wheel pickup truck, motorcycle as the top 3 vehicles. These are small to mid-sized vehicles.\n\n\nWe do a more detailed analysis at the province level:\n\nggplot(roadacc, aes(x = fct_reorder(vehicle_type, vehicle_type, .fun = length))) +\n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Vehicle Type\", x = \"Vehicle Type\", y = \"Count\") +\n  facet_wrap(~province_en)+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nBangkok and Samut Prakan follow the same general observation seen under the overall chart for vehicle type involved in road accidents i.e. road accidents mostly involve private/passenger car, followed by 4-wheel pickup truck, motorcycle as the top 3 vehicles. However the following were observed for the other provinces:\n\nRoad accidents in Nakhon Pathom, Pathum Thani and Samut Sakhon mostly involved 4-wheel pickup truck\n4-wheel pickup truck is not one of the top 3 vehicles involved in road accidents in Nonthaburi\n\n\n\n\n\n\n\n\nggplot(roadacc, aes(x = fct_reorder(presumed_cause, presumed_cause, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Presumed Cause\", x = \"Presumed Cause\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n\n\n\n\n\n\n\n\nThe top presumed cause for accident is speeding.\n\n\n\n\nOverallBreakdown by Province\n\n\n\nggplot(roadacc, aes(x = fct_reorder(accident_type, accident_type, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Accident Type\", x = \"Accident Type Cause\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n\n\n\n\n\n\n\n\nThe top two presumed cause for road accidents are rear-end collision and rollover/fallen on straight road.\n\n\n\nggplot(roadacc, aes(x = fct_reorder(accident_type, accident_type, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Accident Type\", x = \"Accident Type Cause\", y = \"Count\") +\n  facet_wrap(~province_en)+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n\n\n\n\n\n\n\n\nBangkok, Pathum Thani and Samut Prakan follow the same general observation seen under the overall chart that the top two presumed cause for road accidents are rear-end collision followed by rollover/fallen on straight road. For Nakhon Pathom, Nonthaburi and Samut Sakhon, the top presumed cause is rollover/fallen on straight road followed by rear-end collision.\n\n\n\n\n\n\n\nsummary_stats &lt;- roadacc %&gt;%\n  group_by(province_en) %&gt;%\n  summarise(\n    median_vehicles = median(number_of_vehicles_involved, na.rm = TRUE),\n    mean_vehicles = mean(number_of_vehicles_involved, na.rm = TRUE),\n    min_vehicles = min(number_of_vehicles_involved,na.rm = TRUE),\n    q25 = quantile(number_of_vehicles_involved, 0.25, na.rm = TRUE),\n    q75 = quantile(number_of_vehicles_involved, 0.75, na.rm = TRUE),\n    max_vehicles = max(number_of_vehicles_involved,na.rm = TRUE),\n    .groups = 'drop'\n  ) %&gt;%\n  mutate(label = paste0(\"Min: \", round(min_vehicles,1),\n                        \"\\nq25: \", round(q25,1),\n                        \"\\nMedian: \", round(median_vehicles, 1), \n                        \"\\nMean: \", round(mean_vehicles, 1),\n                        \"\\nq75: \", round(q75,1),\n                        \"\\nMax vehicles: \", round(max_vehicles,1)\n                        ))\n\nggplot(roadacc,\n       aes(x=province_en,\n           y=number_of_vehicles_involved,\n           fill = province_en))+\n  geom_boxplot(width = .20,\n               outlier.shape = NA)+\n  geom_text(data = summary_stats, \n            aes(x = province_en, y = q75, label = label), \n            vjust = -0.5, \n            size = 3)+\n  ggtitle(\"Distribution of Road Accidents by Number of Vehicles Involved\") +\n  labs(title = \"Distribution of Road Accidents by Number of Vehicles Involved\", x = \"Number of Vehicles Involved\", y = \"Count\")+\n  theme(legend.position = \"none\") +\n  scale_fill_viridis_d()\n\n\n\n\n\n\n\n\nAcross the provinces, the median number of vehicles involved in road accidents are either one or two. However, the maximum number of vehicles that had been involved in road accidents were 12 (Pathum Thani), 11 (Bangkok), 10 (Samut Prakan), 9 (Nonthaburi and Samut Sakhon) and 8 (Nakhon Pathom), indicating that while not common, there are large-scale incidents involving large number of vehicles.\n\n\n\n\nsummary_stats &lt;- roadacc %&gt;%\n  group_by(province_en) %&gt;%\n  summarise(\n    median_fatalities = median(number_of_fatalities, na.rm = TRUE),\n    mean_fatalities = mean(number_of_fatalities, na.rm = TRUE),\n    min_fatalities = min(number_of_fatalities,na.rm = TRUE),\n    q25 = quantile(number_of_fatalities, 0.25, na.rm = TRUE),\n    q75 = quantile(number_of_fatalities, 0.75, na.rm = TRUE),\n    max_fatalities = max(number_of_fatalities,na.rm = TRUE),\n    .groups = 'drop'\n  ) %&gt;%\n  mutate(label = paste0(\"Min: \", round(min_fatalities,1),\n                        \"\\nq25: \", round(q25,1),\n                        \"\\nMedian: \", round(median_fatalities, 1), \n                        \"\\nMean: \", round(mean_fatalities, 1),\n                        \"\\nq75: \", round(q75,1),\n                        \"\\nMax fatalities: \", round(max_fatalities,1)\n                        ))\n\nggplot(roadacc,\n       aes(x=province_en,\n           y=number_of_fatalities,\n           fill = province_en))+\n  geom_boxplot(width = .20,\n               outlier.shape = NA)+\n  geom_text(data = summary_stats, \n            aes(x = province_en, y = q75, label = label), \n            vjust = -0.5, \n            size = 3)+\n  ggtitle(\"Distribution of Road Accidents by Number of Fatalities\") +\n  labs(title = \"Distribution of Road Accidents by Number of Fatalities\", x = \"Number of Fatalities\", y = \"Count\")+\n  theme(legend.position = \"none\") +\n  scale_fill_viridis_d()\n\n\n\n\n\n\n\n\nAcross the provinces, the median number of fatalities is 0. However, while few, there are road accidents that occur with higher number of fatalities - the highest being 13 (Samut Prakan), followed by 6 (Pathum Thani), 3 (Bangkok, Nonthaburi) and 2 (Nakhon Pathom and Samut Sakhon).\n\n\n\n\nsummary_stats &lt;- roadacc %&gt;%\n  group_by(province_en) %&gt;%\n  summarise(\n    median_injuries = median(number_of_injuries, na.rm = TRUE),\n    mean_injuries = mean(number_of_injuries, na.rm = TRUE),\n    min_injuries = min(number_of_injuries,na.rm = TRUE),\n    q25 = quantile(number_of_injuries, 0.25, na.rm = TRUE),\n    q75 = quantile(number_of_injuries, 0.75, na.rm = TRUE),\n    max_injuries = max(number_of_injuries,na.rm = TRUE),\n    .groups = 'drop'\n  ) %&gt;%\n  mutate(label = paste0(\"Min: \", round(min_injuries,1),\n                        \"\\nq25: \", round(q25,1),\n                        \"\\nMedian: \", round(median_injuries, 1), \n                        \"\\nMean: \", round(mean_injuries, 1),\n                        \"\\nq75: \", round(q75,1),\n                        \"\\nMax injuries: \", round(max_injuries,1)\n                        ))\n\nggplot(roadacc,\n       aes(x=province_en,\n           y=number_of_injuries,\n           fill = province_en))+\n  geom_boxplot(width = .20,\n               outlier.shape = NA)+\n  geom_text(data = summary_stats, \n            aes(x = province_en, y = q75, label = label), \n            vjust = -0.5, \n            size = 3)+\n  ggtitle(\"Distribution of Road Accidents by Number of Injuries\") +\n  labs(title = \"Distribution of Road Accidents by Number of Injuries\", x = \"Number of Injuries\", y = \"Count\")+\n  theme(legend.position = \"none\") +\n  scale_fill_viridis_d()\n\n\n\n\n\n\n\n\nAcross the provinces, the median number of injuries is 0. However, while few, there are road accidents that occur with higher number of injuries - the highest being 51 (Pathum Thani), followed by 31 (Bangkok), 30 (Nakhon Pathom), 28 (Samut Prakan), 14 (Samut Sakhon) and 11 (Nonthaburi)."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-wrangling-for-spatial-point-pattern-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-wrangling-for-spatial-point-pattern-analysis",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "To carry out spatial point pattern analysis - the evaluation of the pattern or distribution of a set of points on a surface - we need to convert the data from sf format to ppp format:\n\nroadacc_ppp &lt;- as.ppp(roadacc)\nroadacc_ppp\n\nMarked planar point pattern: 12985 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [591277.5, 710166.1] x [1486845.7, 1576520.5] units\n\n\nThe code chunk below plots roadacc_ppp for visualisation:\n\nplot(roadacc_ppp)\n\n\n\n\n\n\n\n\nWe take a quick look at the summary statistics of the roadacc_ppp object using the code chunk below:\n\nsummary(roadacc_ppp)\n\nMarked planar point pattern:  12985 points\nAverage intensity 1.217956e-06 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 571882 3788970 3833867 4314374 6092695 7570954 \n\nWindow: rectangle = [591277.5, 710166.1] x [1486845.7, 1576520.5] units\n                    (118900 x 89670 units)\nWindow area = 10661300000 square units\n\n\n\n\n\nIn spatial point patterns analysis, a significant issue is the presence of duplicates as the statistical methodology used for spatial point patterns processes is based largely on the assumption that process are simple i.e. that the points cannot be coincident. We check for duplication in a ppp object via the code chunk below:\n\nany(duplicated(roadacc_ppp))\n\n[1] FALSE\n\n\nThe data does not have any duplicated points.\n\n\n\nWhen analysing spatial point patterns, it is a good practice to confine the analysis within a geographical area like Singapore boundary. In spatstat, an object called owin is specially designed to represent this polygonal region. The code chunk below is used to covert provincedata32647 SpatialPolygon object into owin object of spatstat:\n\nprovinceowin &lt;- as.owin(provincedata32647)\n\nThe ouput object can be displayed by using plot() function\n\nplot(provinceowin)\n\n\n\n\n\n\n\n\n\nsummary(provinceowin)\n\nWindow: polygonal boundary\nsingle connected closed polygon with 13779 vertices\nenclosing rectangle: [587893.5, 712440.5] x [1484413.7, 1579076.3] units\n                     (124500 x 94660 units)\nWindow area = 7668990000 square units\nFraction of frame area: 0.65\n\n\n\n\n\nWe extract road accident events that are located within the BMR by using the code chunk below:\n\nroadacc_owin_ppp = roadacc_ppp[provinceowin]\n\n\nplot(roadacc_owin_ppp)\n\n\n\n\n\n\n\n\n\nsummary(roadacc_owin_ppp)\n\nMarked planar point pattern:  12985 points\nAverage intensity 1.693182e-06 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 571882 3788970 3833867 4314374 6092695 7570954 \n\nWindow: polygonal boundary\nsingle connected closed polygon with 13779 vertices\nenclosing rectangle: [587893.5, 712440.5] x [1484413.7, 1579076.3] units\n                     (124500 x 94660 units)\nWindow area = 7668990000 square units\nFraction of frame area: 0.65"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#kernel-density-estimation-kde",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#kernel-density-estimation-kde",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "We will proceed to compute the KDE of road accidents in the BMR.\n\n\nWe will derive adaptive KDE using density.adaptive() of spatstat. Adaptive schemes adjust itself according to the density of data - shorter bandwidths are used where data are dense and longer where sparse. This helps to mitigate against highly skewed distribution of spatial point patterns.\nHowever, before we do so, we convert the unit of measurement to kilometer as the default unit of measurement of EPSG: 32647 is in metres, which would make the values hard to comprehend:\n\nroadacc_owin_ppp.km &lt;- rescale.ppp(roadacc_owin_ppp,\n                                   1000,\n                                   \"km\")\n\n\nkde_roadacc_adaptive &lt;- adaptive.density(roadacc_owin_ppp.km, method = \"kernel\")\nplot(kde_roadacc_adaptive)\n\n\n\n\n\n\n\n\n\n\n\nWe convert the KDE output for mapping purposes:\n\ngridded_kde_roadacc_adaptive &lt;- as.SpatialGridDataFrame.im(kde_roadacc_adaptive)\nspplot(gridded_kde_roadacc_adaptive)\n\n\n\n\n\n\n\n\n\n\n\nNext, we will convert the gridded KDE object into a RasterLayer object using raster() of raster package:\n\nkde_roadacc_adaptive_raster &lt;- raster(kde_roadacc_adaptive)\n\nWe view the properties of kde_roadacc_adaptive_raster RasterLayer:\n\nkde_roadacc_adaptive_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.973023, 0.7395512  (x, y)\nextent     : 587.8935, 712.4405, 1484.414, 1579.076  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : layer \nvalues     : -4.248362e-15, 233.4632  (min, max)\n\n\nNote that the CRS property is NA.\n\n\n\nWe hence assign CRS information to the kde_roadacc_adaptive_raster RasterLayer:\n\nprojection(kde_roadacc_adaptive_raster) &lt;- CRS(\"+init=EPSG:32647\")\nkde_roadacc_adaptive_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.973023, 0.7395512  (x, y)\nextent     : 587.8935, 712.4405, 1484.414, 1579.076  (xmin, xmax, ymin, ymax)\ncrs        : +proj=utm +zone=47 +datum=WGS84 +units=m +no_defs \nsource     : memory\nnames      : layer \nvalues     : -4.248362e-15, 233.4632  (min, max)\n\n\nThe CRS property is now completed.\n\n\n\nWe will display the raster in cartographic quality map using tmap package:\n\ntm_shape(kde_roadacc_adaptive_raster)+\n  tm_raster(\"layer\",palette = \"viridis\")+\n  tm_layout(legend.outside = TRUE,\n            legend.outside.position = \"right\",\n            legend.position = c(\"right\",\"bottom\"),\n            main.title = \"Distribution of road accidents (adaptive bandwidth)\",\n            main.title.size = 0.8,\n            frame = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk will be used to extract the different provinces:\n\nbkk &lt;- provincedata32647 %&gt;%\n  filter(ADM1_EN == \"Bangkok\")\nnp &lt;- provincedata32647 %&gt;%\n  filter(ADM1_EN == \"Nakhon Pathom\")\nn &lt;- provincedata32647 %&gt;%\n  filter(ADM1_EN == \"Nonthaburi\")\npt &lt;- provincedata32647 %&gt;%\n  filter(ADM1_EN == \"Pathum Thani\")\nsp &lt;- provincedata32647 %&gt;%\n  filter(ADM1_EN == \"Samut Prakan\")\nss &lt;- provincedata32647 %&gt;%\n  filter(ADM1_EN == \"Samut Sakhon\")\n\n\n\n\n\nbkk_owin = as.owin(bkk)\nnp_owin = as.owin(np)\nn_owin = as.owin(n)\npt_owin = as.owin(pt)\nsp_owin = as.owin(sp)\nss_owin = as.owin(ss)\n\n\n\n\nBy using the code chunk below, we are able to extract road accidents that is within the specific province to carry out our analysis later on.\n\nroadacc_bkk_ppp = roadacc_ppp[bkk_owin]\nroadacc_np_ppp = roadacc_ppp[np_owin]\nroadacc_n_ppp = roadacc_ppp[n_owin]\nroadacc_pt_ppp = roadacc_ppp[pt_owin]\nroadacc_sp_ppp = roadacc_ppp[sp_owin]\nroadacc_ss_ppp = roadacc_ppp[ss_owin]\n\nNext, rescale.ppp() function is used to transform the unit of measurement from metre to kilometre:\n\nroadacc_bkk_ppp.km = rescale.ppp(roadacc_bkk_ppp,1000,\"km\")\nroadacc_np_ppp.km = rescale.ppp(roadacc_np_ppp,1000,\"km\")\nroadacc_n_ppp.km = rescale.ppp(roadacc_n_ppp,1000,\"km\")\nroadacc_pt_ppp.km = rescale.ppp(roadacc_pt_ppp,1000,\"km\")\nroadacc_sp_ppp.km = rescale.ppp(roadacc_sp_ppp,1000,\"km\")\nroadacc_ss_ppp.km = rescale.ppp(roadacc_ss_ppp,1000,\"km\")\n\nWe then plot the 6 provinces and the locations of the road accidents:\n\npar(mfrow=c(3,2))\nplot(roadacc_bkk_ppp.km,main=\"Bangkok\")\nplot(roadacc_np_ppp.km,main=\"Nakhon Pathom\")\nplot(roadacc_n_ppp.km,main=\"Nonthaburi\")\nplot(roadacc_pt_ppp.km,main=\"Pathum Thani\")\nplot(roadacc_sp_ppp.km,main=\"Samut Prakan\")\nplot(roadacc_ss_ppp.km,main=\"Samut Sakhon\")\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below is used to compute the KDE of the 6 provinces:\n\noptions(repr.plot.width=12, repr.plot.height=8)\npar(mfrow=c(3,2))\nplot(density(roadacc_bkk_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Bangkok\")\nplot(density(roadacc_np_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Nakhon Pathom\")\nplot(density(roadacc_n_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Nonthaburi\")\nplot(density(roadacc_pt_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Pathum Thani\")\nplot(density(roadacc_sp_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Samut Prakan\")\nplot(density(roadacc_ss_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Samut Sakhon\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#nearest-neighbour-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#nearest-neighbour-analysis",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "We will perform the Clark-Evans test of aggregation for spatial point pattern:\nThe test hypotheses are:\nH0: The distribution of road accidents is randomly distributed.\nH1: The distribution of road accidents is not randomly distributed.\nThe 95% confidence interval will be used.\n\n\n\nOverall BMRBangkokNakhon PathomNonthaburiPathum ThaniSamut PrakanSamut Sakhon\n\n\n\nclarkevans.test(roadacc_owin_ppp.km,\n                correction = \"none\",\n                clipregion = \"province_owin\",\n                alternative = c(\"clustered\"),\n                nsim = 99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  roadacc_owin_ppp.km\nR = 0.19092, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\nSince p-value is less than 0.05, we reject the null hypothesis at 95% confidence interval. There is sufficient evidence to indicate that the distribution of road accidents is not randomly distributed.\n\n\n\nclarkevans.test(roadacc_bkk_ppp.km,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  roadacc_bkk_ppp.km\nR = 0.12057, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\n\nclarkevans.test(roadacc_np_ppp.km,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  roadacc_np_ppp.km\nR = 0.28949, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\n\nclarkevans.test(roadacc_n_ppp.km,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  roadacc_n_ppp.km\nR = 0.38919, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\n\nclarkevans.test(roadacc_pt_ppp.km,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  roadacc_pt_ppp.km\nR = 0.24798, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\n\nclarkevans.test(roadacc_sp_ppp.km,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  roadacc_sp_ppp.km\nR = 0.14367, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\n\nclarkevans.test(roadacc_ss_ppp.km,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  roadacc_ss_ppp.km\nR = 0.23989, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\n\nBased on the results above, for which p-values are less than 0.05, we reject the null hypothesis at 95% confidence interval. There is sufficient evidence to indicate that the distribution of road accidents in all provinces is not randomly distributed."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_EDA.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_EDA.html",
    "title": "Take-home Exercise 1 (Additional EDA)",
    "section": "",
    "text": "Increasing timeout to mitigate error issues during rendering\n\n\n\n\n\n\noptions(timeout = 3000)\n\n\n\n\npacman::p_load(sf,spatstat,raster,maptools,tmap,tidyverse,spNetwork,DT,forcats,ggthemes,plotly)\n\n\n\n\n\nroadacc &lt;- read_rds(\"data/rds/roadacc.rds\")\n\n\n\n\n\n\n\nWe carry some EDA to understand how the occurrences of road accidents could be influenced by different factors.\n\n\n\nggplot(roadacc, aes(x = fct_reorder(province_en, province_en, .fun = length))) + \n  geom_bar(fill = \"skyblue\") +\n  labs(title = \"Distribution of Road Accidents across Provinces\", x = \"Province\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\nAs noted from the plot, Bangkok has the highest occurrences of road accidents in the BMR, followed by Samut Prakan, Pathum Thani, Samut Sakhon, Nakhon Pathom and Nonthaburi.\n\n\n\n\nggplot(roadacc, aes(x = fct_reorder(agency, agency, .fun = length))) + \n  geom_bar(fill = \"lightgreen\") +\n  labs(title = \"Distribution of Road Accidents by Agency\", x = \"Agency\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\nAs noted from the plot, the Department of Highways is responsible for the most occurrences of road accidents in the BMR, followed by Department of Rural Roads and Expressway Authority of Thailand.\n\n\n\nWe also analyse the road accidents by time, namely by year, by month, by day of week and by time of day.\n\n\n\n\nBy yearBy year (at province level)\n\n\n\nggplot(roadacc, aes(x = inc_year)) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Year\", x = \"Year\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nWe note from the plot that the number of road accidents has generally been increasing from 2019 to 2022.\n\n\n\nggplot(roadacc, aes(x = inc_year)) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Year\", x = \"Year\", y = \"Count\") +\n  facet_wrap(~province_en)+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\n\nWe note from above that the number of road accidents has generally been increasing in Bangkok and Samut Prakan from 2019 to 2022.\n\nThis is with the exception of a drop in 2021 in Bangkok - this could potentially be due to the surge of COVID-19 cases in Thailand in 2021 which led to a lockdown which meant that there were less tourists, vehicles and pedestrians on the roads, and lower occurrences of road accidents.\n\nWe note that the number of road accidents in Nonthaburi and Pathum Thani increased from 2019 to 2021 and fell in 2022.\nWe note that the number of road accidents in Samut Sakhon fell from 2019 to 2021 but increased in 2022.\nOf the 6 provinces, we note that only Nakhon Pathom experienced a fall in road accidents from 2019 to 2022.\n\n\n\n\n\n\n\nWe also observe the data by month using cycle plots that would enable us to observe cyclical/seasonal patterns, if present.\n\nroadacc_month &lt;- roadacc %&gt;%\n  group_by(inc_year,inc_month) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\nWe save roadacc_month as a rds file:\n\nwrite_rds(roadacc_month,\"data/rds/roadacc_month.rds\")\n\n\nroadacc_month &lt;- read_rds(\"data/rds/roadacc_month.rds\")\n\n\n\n\n\nhline.data &lt;- roadacc_month %&gt;%\n  group_by(inc_month) %&gt;%\n  summarise(avgvalue = mean(count))\n\nggplot(data = roadacc_month, aes(x = inc_year, y = count)) +\n  geom_line(aes(group = inc_month, colour = as.factor(inc_month))) +\n  geom_hline(aes(yintercept=avgvalue),\n             data=hline.data,\n             linetype=6,\n             colour=\"red\",\n             size=0.5)+\n  facet_wrap(~inc_month,scales = \"free_x\")+\n  labs(title = \"Road accidents by month from 2019 to 2022\",\n                   colour = \"Month\") +\n  xlab(\"Year\")+\n  ylab(\"Number of Road Accidents\")+\n  scale_color_brewer(palette = \"Paired\") + \n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\nBased on the plot, we observe the following:\n\nOccurrences of road accidents in Jan and Feb seem to generally be decreasing over the years, with the number of road accidents in 2022 for both months falling below the average number of road accidents for the month across 2019 to 2022.\nOccurrences of road accidents in Jul, Aug, Oct to Dec seem to generally be increasing over the years. Based on this observation alone, the increase in road accidents could potentially be due to the rainy season between Jul to Oct and the presence of a higher population due to peak tourist seasons in Nov and Dec.\nOccurrences of road accidents in Mar to Jun and Sep generally do not fluctuate much over the years.\n\n\n\n\nWe further observe the occurrence of road accidents by month at the province level:\n\n\n\n\n\n\nNote\n\n\n\n\n\n\nroadacc_month_bkk &lt;- roadacc %&gt;%\n  filter(province_en==\"Bangkok\") %&gt;%\n  group_by(inc_year,inc_month) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\nroadacc_month_sp &lt;- roadacc %&gt;%\n  filter(province_en==\"Samut Prakan\") %&gt;%\n  group_by(inc_year,inc_month) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\nroadacc_month_n &lt;- roadacc %&gt;%\n  filter(province_en==\"Nonthaburi\") %&gt;%\n  group_by(inc_year,inc_month) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\nroadacc_month_pt &lt;- roadacc %&gt;%\n  filter(province_en==\"Pathum Thani\") %&gt;%\n  group_by(inc_year,inc_month) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\nroadacc_month_np &lt;- roadacc %&gt;%\n  filter(province_en==\"Nakhon Pathom\") %&gt;%\n  group_by(inc_year,inc_month) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\nroadacc_month_ss &lt;- roadacc %&gt;%\n  filter(province_en==\"Samut Sakhon\") %&gt;%\n  group_by(inc_year,inc_month) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\nSaving them as rds files:\n\nwrite_rds(roadacc_month_bkk,\"data/rds/roadacc_month_bkk.rds\")\nwrite_rds(roadacc_month_sp,\"data/rds/roadacc_month_sp.rds\")\nwrite_rds(roadacc_month_n,\"data/rds/roadacc_month_n.rds\")\nwrite_rds(roadacc_month_pt,\"data/rds/roadacc_month_pt.rds\")\nwrite_rds(roadacc_month_np,\"data/rds/roadacc_month_np.rds\")\nwrite_rds(roadacc_month_ss,\"data/rds/roadacc_month_ss.rds\")\n\nLoading the newly created rds files into R:\n\nroadacc_month_bkk &lt;- read_rds(\"data/rds/roadacc_month_bkk.rds\")\nroadacc_month_sp &lt;- read_rds(\"data/rds/roadacc_month_sp.rds\")\nroadacc_month_n &lt;- read_rds(\"data/rds/roadacc_month_n.rds\")\nroadacc_month_pt &lt;- read_rds(\"data/rds/roadacc_month_pt.rds\")\nroadacc_month_np &lt;- read_rds(\"data/rds/roadacc_month_np.rds\")\nroadacc_month_ss &lt;- read_rds(\"data/rds/roadacc_month_ss.rds\")\n\n\n\n\n\nBangkokSamut PrakanNonthaburiPathum ThaniNakhon PathomSamut Sakhon\n\n\n\nhline.data &lt;- roadacc_month_bkk %&gt;%\n  group_by(inc_month) %&gt;%\n  summarise(avgvalue = mean(count))\n\nggplot(data = roadacc_month_bkk, aes(x = inc_year, y = count)) +\n  geom_line(aes(group = inc_month, colour = as.factor(inc_month))) +\n  geom_hline(aes(yintercept=avgvalue),\n             data=hline.data,\n             linetype=6,\n             colour=\"red\",\n             size=0.5)+\n  facet_wrap(~inc_month,scales = \"free_x\")+\n  labs(title = \"Bangkok Road accidents by month from 2019 to 2022\",\n                   colour = \"Month\") +\n  xlab(\"Year\")+\n  ylab(\"Number of Road Accidents\")+\n  scale_color_brewer(palette = \"Paired\") + \n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\nThe following observations were made:\n\nOccurrences of road accidents in Jan seem to be fluctuating, with the number of road accidents decreasing from 2019 to 2021 then increasing in 2022.\nOccurrences of road accidents in Feb seem to generally be decreasing over the years, with the number of road accidents in 2022 falling below the average number of road accidents for the month across 2019 to 2022.\nOccurrences of road accidents in Jul to Dec seem to generally be increasing over the years. Based on this observation alone, the increase in road accidents could potentially be due to the rainy season between Jul to Oct and the presence of a higher population due to peak tourist seasons in Nov and Dec.\nOccurrences of road accidents in Mar to Jun generally do not fluctuate much over the years.\n\n\n\n\nhline.data &lt;- roadacc_month_sp %&gt;%\n  group_by(inc_month) %&gt;%\n  summarise(avgvalue = mean(count))\n\nggplot(data = roadacc_month_sp, aes(x = inc_year, y = count)) +\n  geom_line(aes(group = inc_month, colour = as.factor(inc_month))) +\n  geom_hline(aes(yintercept=avgvalue),\n             data=hline.data,\n             linetype=6,\n             colour=\"red\",\n             size=0.5)+\n  facet_wrap(~inc_month,scales = \"free_x\")+\n  labs(title = \"Samut Prakan Road accidents by month from 2019 to 2022\",\n                   colour = \"Month\") +\n  xlab(\"Year\")+\n  ylab(\"Number of Road Accidents\")+\n  scale_color_brewer(palette = \"Paired\") + \n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\nThe following observations were made:\n\nOccurrences of road accidents in Jan seem to generally be decreasing over the years, with the number of road accidents in 2022 falling below the average number of road accidents for the month across 2019 to 2022.\nOccurrences of road accidents in Apr to Aug and Nov to Dec seem to generally be increasing over the years. Based on this observation alone, the increase in road accidents could potentially be due to the hotter and rainier seasons in Apr to Aug and the presence of a higher population due to peak tourist seasons in May, Jun, Nov and Dec.\nOccurrences of road accidents in Feb to Mar and Sep to Oct increased initially then fell towards 2022.\n\n\n\n\nhline.data &lt;- roadacc_month_n %&gt;%\n  group_by(inc_month) %&gt;%\n  summarise(avgvalue = mean(count))\n\nggplot(data = roadacc_month_n, aes(x = inc_year, y = count)) +\n  geom_line(aes(group = inc_month, colour = as.factor(inc_month))) +\n  geom_hline(aes(yintercept=avgvalue),\n             data=hline.data,\n             linetype=6,\n             colour=\"red\",\n             size=0.5)+\n  facet_wrap(~inc_month,scales = \"free_x\")+\n  labs(title = \"Nonthaburi Road accidents by month from 2019 to 2022\",\n                   colour = \"Month\") +\n  xlab(\"Year\")+\n  ylab(\"Number of Road Accidents\")+\n  scale_color_brewer(palette = \"Paired\") + \n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\nThe following observations were made:\n\nOccurrences of road accidents in Feb seem to generally be decreasing over the years.\nOccurrences of road accidents in Jan seem to generally be increasing over the years.\nOccurrences of road accidents in Jul, Aug, Nov and Dec increased initially then fell towards 2022.\nOccurrences of road accidents in Mar to Jun, Sep and Oct seem to fluctuate generally around the monthly average across the years.\nAs compared to Bangkok, Samut Prakan and Pathum Thani, the number of road accidents in Nonthaburi seem to be lesser, indicating that roads are more well managed in Nonthaburi.\n\n\n\n\nhline.data &lt;- roadacc_month_pt %&gt;%\n  group_by(inc_month) %&gt;%\n  summarise(avgvalue = mean(count))\n\nggplot(data = roadacc_month_pt, aes(x = inc_year, y = count)) +\n  geom_line(aes(group = inc_month, colour = as.factor(inc_month))) +\n  geom_hline(aes(yintercept=avgvalue),\n             data=hline.data,\n             linetype=6,\n             colour=\"red\",\n             size=0.5)+\n  facet_wrap(~inc_month,scales = \"free_x\")+\n  labs(title = \"Pathum Thani Road accidents by month from 2019 to 2022\",\n                   colour = \"Month\") +\n  xlab(\"Year\")+\n  ylab(\"Number of Road Accidents\")+\n  scale_color_brewer(palette = \"Paired\") + \n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\nThe following observations were made:\n\nOccurrences of road accidents in Jun to Aug and Oct seem to generally be increasing over the years. This could be explained by the rainier seasons in Thailand during this period.\nOccurrences of road accidents in Mar, Apr, May and Nov increased initially then fell towards 2022.\nOccurrences of road accidents in Jan, Feb, Sep and Dec seem to fluctuate generally around the monthly average across the years.\n\n\n\n\nhline.data &lt;- roadacc_month_np %&gt;%\n  group_by(inc_month) %&gt;%\n  summarise(avgvalue = mean(count))\n\nggplot(data = roadacc_month_np, aes(x = inc_year, y = count)) +\n  geom_line(aes(group = inc_month, colour = as.factor(inc_month))) +\n  geom_hline(aes(yintercept=avgvalue),\n             data=hline.data,\n             linetype=6,\n             colour=\"red\",\n             size=0.5)+\n  facet_wrap(~inc_month,scales = \"free_x\")+\n  labs(title = \"Nakhon Pathom Road accidents by month from 2019 to 2022\",\n                   colour = \"Month\") +\n  xlab(\"Year\")+\n  ylab(\"Number of Road Accidents\")+\n  scale_color_brewer(palette = \"Paired\") + \n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\nThe following observations were made:\n\nOccurrences of road accidents in Jan to Mar, May, Jul to Dec seem to generally be decreasing over the years.\nOccurrences of road accidents in Apr and Jun seem to be fluctuating around the monthly average across the years.\nBased on these observations, it seems like road accidents are much lesser in Nakhon Pathom as compared to the other provinces and it is the only province with no obvious increase in occurrences of road accidents across the years, this indicates that the province is more well managed as compared to the other 5 provinces.\n\n\n\n\nhline.data &lt;- roadacc_month_ss %&gt;%\n  group_by(inc_month) %&gt;%\n  summarise(avgvalue = mean(count))\n\nggplot(data = roadacc_month_ss, aes(x = inc_year, y = count)) +\n  geom_line(aes(group = inc_month, colour = as.factor(inc_month))) +\n  geom_hline(aes(yintercept=avgvalue),\n             data=hline.data,\n             linetype=6,\n             colour=\"red\",\n             size=0.5)+\n  facet_wrap(~inc_month,scales = \"free_x\")+\n  labs(title = \"Samut Sakhon Road accidents by month from 2019 to 2022\",\n                   colour = \"Month\") +\n  xlab(\"Year\")+\n  ylab(\"Number of Road Accidents\")+\n  scale_color_brewer(palette = \"Paired\") + \n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\nThe following observations were made:\n\nOccurrences of road accidents in Jan, Feb, Apr and Jun seem to generally be decreasing over the years.\nOccurrences of road accidents in Jul to Dec seem to be increasing over the years. Based on this observation alone, the increase in road accidents could potentially be due to the hotter and rainier seasons in Jul to Oct and the presence of a higher population due to peak tourist seasons in Nov and Dec.\nOccurrences of road accidents in Mar and May seem to fluctuate generally around the monthly average across the years.\n\n\n\n\n\n\n\n\nOverallBreakdown by province\n\n\n\nggplot(roadacc, aes(x = inc_dayofweek)) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Day of Week\", x = \"Day of Week\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nWe note from the plot that road accidents occur mostly on Fri and Sat and this could be explained by these days being the start of the weekend, and more people and vehicles may be out on the roads and in public places, which increase the chances of road accidents occuring.\n\n\n\np0 &lt;- ggplot(roadacc, aes(x = inc_dayofweek)) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Day of Week\", x = \"Day of Week\", y = \"Count\") +\n  facet_wrap(~province_en, scales = \"fixed\")\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\nList of 1\n $ axis.text.x:List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : num 8\n  ..$ hjust        : num 1\n  ..$ vjust        : NULL\n  ..$ angle        : num 90\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi FALSE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n - attr(*, \"class\")= chr [1:2] \"theme\" \"gg\"\n - attr(*, \"complete\")= logi FALSE\n - attr(*, \"validate\")= logi TRUE\n\nggplotly(p0)\n\n\n\n\n\nAcross the provinces, it is obvious that road accidents occur most often on Fri and Sat in Bangkok. However, for the other provinces, the difference is not so obvious and it seems like the occurrences of road accidents are more well spread out across the week. This could be explained by Bangkok being a prime tourist destination and major urban centre, and it could attract a greater crowd from within and outside of Thailand over the weekend, hence leading to greater traffic on the road and higher chances of road accidents occurring.\n\n\n\n\n\n\n\nOverallBreakdown by province\n\n\n\nggplot(roadacc, aes(x = inc_time)) + \n  geom_histogram(binwidth = 1, fill = \"slategrey\", color = \"black\") +\n  scale_x_continuous(breaks = seq(0, 23, 1))+\n  labs(title = \"Distribution of Road Accidents by Time of Day\", \n       x = \"Time of Day\",\n       y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nBased on the chart, it is observed that road accidents occur more often between 7am to 11pm as compared to 12 midnight to 6am. This could be explained by 7am to 11pm being the time when most are awake for their daily activities and the roads are likely to have higher activity, which result in higher chances of occurrences of road accidents. The top two timings at which road accidents occur are at 9am and 7pm and this could be explained by it being the peak hour at which the general population i.e. workers, school students get to and get off work and school.\n\n\n\np1 &lt;- ggplot(roadacc, aes(x = inc_time)) + \n  geom_histogram(binwidth = 1, fill = \"slategrey\", color = \"black\") +\n  scale_x_continuous(breaks = seq(0, 23, 1))+\n  labs(title = \"Distribution of Road Accidents by Time of Day\", \n       x = \"Time of Day\",\n       y = \"Count\") +\n  facet_wrap(~province_en, scales = \"fixed\")+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\nggplotly(p1)\n\n\n\n\n\nBangkok, Samut Prakan and Pathum Thani also seem to follow the general observation seen under the overall chart for occurrences of road accidents by time day i.e. road accidents generally occur more during 7am to 11pm and peak timings are during the going to and getting off work/school hours at around 9am and 7pm. This is less obvious for the other provinces.\n\n\n\n\n\n\n\nOverallBreakdown by Province\n\n\n\nggplot(roadacc, aes(x = fct_reorder(weather_condition, weather_condition, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Weather Condition\", x = \"Weather Condition\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nBased on the plot, road accidents mostly occur in clear weather conditions, followed by rainy weather conditions and dark weather conditions. This could imply that road accidents are more heavily influenced by other behavioural or environmental factors besides the weather condition.\n\n\n\nggplot(roadacc, aes(x = fct_reorder(weather_condition, weather_condition, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Weather Condition\", x = \"Weather Condition\", y = \"Count\") +\n  facet_wrap(~province_en)+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nAcross provinces, similar observations were made as it was observed that road accidents mostly occur during clear weather conditions, followed by rainy and then dark weather conditions.\n\n\n\n\n\n\n\nOverallBreakdown by Province\n\n\n\nggplot(roadacc, aes(x = fct_reorder(road_description, road_description, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Road Description\", x = \"Road Description\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nBased on the plot, road accidents mostly occur on straight roads, roads categorised as other, followed by wide curve and then grade-separated intersection/ramps. Combining this observation with that for weather conditions - that road accidents mostly occur during clear weather conditions and straight roads - which are conditions under which one would not expect road accidents to occur, it could imply that the occurrence of road accidents are more heavily influenced by behavioural factors.\n\n\n\nggplot(roadacc, aes(x = fct_reorder(road_description, road_description, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Road Description\", x = \"Road Description\", y = \"Count\") +\n  facet_wrap(~province_en)+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nAcross provinces, similar observations were made as it was observed that road accidents mostly occur on straight roads, roads categorised as other, followed by wide curve and then grade-separated intersection/ramps.\n\n\n\n\n\n\n\nOverallBreakdown by Province\n\n\n\nggplot(roadacc, aes(x = fct_reorder(slope_description, slope_description, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Slope Description\", x = \"Slope Description\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nBased on the plot, road accidents where there are no slopes. Combining this observation with the above observations - that road accidents mostly occur during clear weather conditions and on straight roads with no slope - which are conditions under which one would not expect road accidents to occur, it could imply that the occurrence of road accidents are more heavily influenced by behavioural factors.\n\n\n\nggplot(roadacc, aes(x = fct_reorder(slope_description, slope_description, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Slope Description\", x = \"Slope Description\", y = \"Count\") +\n  facet_wrap(~province_en)+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nAcross provinces, similar observations were made as it was observed that road accidents mostly occur on roads with no slope.\n\n\n\n\n\n\n\nOverallBreakdown by Province\n\n\n\nggplot(roadacc, aes(x = fct_reorder(vehicle_type, vehicle_type, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Vehicle Type\", x = \"Vehicle Type\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nBased on the plot, road accidents mostly involve private/passenger car, followed by 4-wheel pickup truck, motorcycle as the top 3 vehicles. These are small to mid-sized vehicles.\n\n\nWe do a more detailed analysis at the province level:\n\nggplot(roadacc, aes(x = fct_reorder(vehicle_type, vehicle_type, .fun = length))) +\n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Vehicle Type\", x = \"Vehicle Type\", y = \"Count\") +\n  facet_wrap(~province_en)+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nBangkok and Samut Prakan follow the same general observation seen under the overall chart for vehicle type involved in road accidents i.e. road accidents mostly involve private/passenger car, followed by 4-wheel pickup truck, motorcycle as the top 3 vehicles. However the following were observed for the other provinces:\n\nRoad accidents in Nakhon Pathom, Pathum Thani and Samut Sakhon mostly involved 4-wheel pickup truck\n4-wheel pickup truck is not one of the top 3 vehicles involved in road accidents in Nonthaburi\n\n\n\n\n\n\n\n\nggplot(roadacc, aes(x = fct_reorder(presumed_cause, presumed_cause, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Presumed Cause\", x = \"Presumed Cause\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n\n\n\n\n\n\n\n\nThe top presumed cause for accident is speeding.\n\n\n\n\nOverallBreakdown by Province\n\n\n\nggplot(roadacc, aes(x = fct_reorder(accident_type, accident_type, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Accident Type\", x = \"Accident Type Cause\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n\n\n\n\n\n\n\n\nThe top two presumed cause for road accidents are rear-end collision and rollover/fallen on straight road.\n\n\n\nggplot(roadacc, aes(x = fct_reorder(accident_type, accident_type, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Accident Type\", x = \"Accident Type Cause\", y = \"Count\") +\n  facet_wrap(~province_en)+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n\n\n\n\n\n\n\n\nBangkok, Pathum Thani and Samut Prakan follow the same general observation seen under the overall chart that the top two presumed cause for road accidents are rear-end collision followed by rollover/fallen on straight road. For Nakhon Pathom, Nonthaburi and Samut Sakhon, the top presumed cause is rollover/fallen on straight road followed by rear-end collision.\n\n\n\n\n\n\n\nsummary_stats &lt;- roadacc %&gt;%\n  group_by(province_en) %&gt;%\n  summarise(\n    median_vehicles = median(number_of_vehicles_involved, na.rm = TRUE),\n    mean_vehicles = mean(number_of_vehicles_involved, na.rm = TRUE),\n    min_vehicles = min(number_of_vehicles_involved,na.rm = TRUE),\n    q25 = quantile(number_of_vehicles_involved, 0.25, na.rm = TRUE),\n    q75 = quantile(number_of_vehicles_involved, 0.75, na.rm = TRUE),\n    max_vehicles = max(number_of_vehicles_involved,na.rm = TRUE),\n    .groups = 'drop'\n  ) %&gt;%\n  mutate(label = paste0(\"Min: \", round(min_vehicles,1),\n                        \"\\nq25: \", round(q25,1),\n                        \"\\nMedian: \", round(median_vehicles, 1), \n                        \"\\nMean: \", round(mean_vehicles, 1),\n                        \"\\nq75: \", round(q75,1),\n                        \"\\nMax vehicles: \", round(max_vehicles,1)\n                        ))\n\nggplot(roadacc,\n       aes(x=province_en,\n           y=number_of_vehicles_involved,\n           fill = province_en))+\n  geom_boxplot(width = .20,\n               outlier.shape = NA)+\n  geom_text(data = summary_stats, \n            aes(x = province_en, y = q75, label = label), \n            vjust = -0.5, \n            size = 3)+\n  ggtitle(\"Distribution of Road Accidents by Number of Vehicles Involved\") +\n  labs(title = \"Distribution of Road Accidents by Number of Vehicles Involved\", x = \"Number of Vehicles Involved\", y = \"Count\")+\n  theme(legend.position = \"none\") +\n  scale_fill_viridis_d()\n\n\n\n\n\n\n\n\nAcross the provinces, the median number of vehicles involved in road accidents are either one or two. However, the maximum number of vehicles that had been involved in road accidents were 12 (Pathum Thani), 11 (Bangkok), 10 (Samut Prakan), 9 (Nonthaburi and Samut Sakhon) and 8 (Nakhon Pathom), indicating that while not common, there are large-scale incidents involving large number of vehicles.\n\n\n\n\nsummary_stats &lt;- roadacc %&gt;%\n  group_by(province_en) %&gt;%\n  summarise(\n    median_fatalities = median(number_of_fatalities, na.rm = TRUE),\n    mean_fatalities = mean(number_of_fatalities, na.rm = TRUE),\n    min_fatalities = min(number_of_fatalities,na.rm = TRUE),\n    q25 = quantile(number_of_fatalities, 0.25, na.rm = TRUE),\n    q75 = quantile(number_of_fatalities, 0.75, na.rm = TRUE),\n    max_fatalities = max(number_of_fatalities,na.rm = TRUE),\n    .groups = 'drop'\n  ) %&gt;%\n  mutate(label = paste0(\"Min: \", round(min_fatalities,1),\n                        \"\\nq25: \", round(q25,1),\n                        \"\\nMedian: \", round(median_fatalities, 1), \n                        \"\\nMean: \", round(mean_fatalities, 1),\n                        \"\\nq75: \", round(q75,1),\n                        \"\\nMax fatalities: \", round(max_fatalities,1)\n                        ))\n\nggplot(roadacc,\n       aes(x=province_en,\n           y=number_of_fatalities,\n           fill = province_en))+\n  geom_boxplot(width = .20,\n               outlier.shape = NA)+\n  geom_text(data = summary_stats, \n            aes(x = province_en, y = q75, label = label), \n            vjust = -0.5, \n            size = 3)+\n  ggtitle(\"Distribution of Road Accidents by Number of Fatalities\") +\n  labs(title = \"Distribution of Road Accidents by Number of Fatalities\", x = \"Number of Fatalities\", y = \"Count\")+\n  theme(legend.position = \"none\") +\n  scale_fill_viridis_d()\n\n\n\n\n\n\n\n\nAcross the provinces, the median number of fatalities is 0. However, while few, there are road accidents that occur with higher number of fatalities - the highest being 13 (Samut Prakan), followed by 6 (Pathum Thani), 3 (Bangkok, Nonthaburi) and 2 (Nakhon Pathom and Samut Sakhon).\n\n\n\n\nsummary_stats &lt;- roadacc %&gt;%\n  group_by(province_en) %&gt;%\n  summarise(\n    median_injuries = median(number_of_injuries, na.rm = TRUE),\n    mean_injuries = mean(number_of_injuries, na.rm = TRUE),\n    min_injuries = min(number_of_injuries,na.rm = TRUE),\n    q25 = quantile(number_of_injuries, 0.25, na.rm = TRUE),\n    q75 = quantile(number_of_injuries, 0.75, na.rm = TRUE),\n    max_injuries = max(number_of_injuries,na.rm = TRUE),\n    .groups = 'drop'\n  ) %&gt;%\n  mutate(label = paste0(\"Min: \", round(min_injuries,1),\n                        \"\\nq25: \", round(q25,1),\n                        \"\\nMedian: \", round(median_injuries, 1), \n                        \"\\nMean: \", round(mean_injuries, 1),\n                        \"\\nq75: \", round(q75,1),\n                        \"\\nMax injuries: \", round(max_injuries,1)\n                        ))\n\nggplot(roadacc,\n       aes(x=province_en,\n           y=number_of_injuries,\n           fill = province_en))+\n  geom_boxplot(width = .20,\n               outlier.shape = NA)+\n  geom_text(data = summary_stats, \n            aes(x = province_en, y = q75, label = label), \n            vjust = -0.5, \n            size = 3)+\n  ggtitle(\"Distribution of Road Accidents by Number of Injuries\") +\n  labs(title = \"Distribution of Road Accidents by Number of Injuries\", x = \"Number of Injuries\", y = \"Count\")+\n  theme(legend.position = \"none\") +\n  scale_fill_viridis_d()\n\n\n\n\n\n\n\n\nAcross the provinces, the median number of injuries is 0. However, while few, there are road accidents that occur with higher number of injuries - the highest being 51 (Pathum Thani), followed by 31 (Bangkok), 30 (Nakhon Pathom), 28 (Samut Prakan), 14 (Samut Sakhon) and 11 (Nonthaburi)."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_EDA.html#exploratory-data-analysis-eda",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_EDA.html#exploratory-data-analysis-eda",
    "title": "Take-home Exercise 1 (Additional EDA)",
    "section": "",
    "text": "We carry some EDA to understand how the occurrences of road accidents could be influenced by different factors.\n\n\n\nggplot(roadacc, aes(x = fct_reorder(province_en, province_en, .fun = length))) + \n  geom_bar(fill = \"skyblue\") +\n  labs(title = \"Distribution of Road Accidents across Provinces\", x = \"Province\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\nAs noted from the plot, Bangkok has the highest occurrences of road accidents in the BMR, followed by Samut Prakan, Pathum Thani, Samut Sakhon, Nakhon Pathom and Nonthaburi.\n\n\n\n\nggplot(roadacc, aes(x = fct_reorder(agency, agency, .fun = length))) + \n  geom_bar(fill = \"lightgreen\") +\n  labs(title = \"Distribution of Road Accidents by Agency\", x = \"Agency\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\nAs noted from the plot, the Department of Highways is responsible for the most occurrences of road accidents in the BMR, followed by Department of Rural Roads and Expressway Authority of Thailand.\n\n\n\nWe also analyse the road accidents by time, namely by year, by month, by day of week and by time of day.\n\n\n\n\nBy yearBy year (at province level)\n\n\n\nggplot(roadacc, aes(x = inc_year)) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Year\", x = \"Year\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nWe note from the plot that the number of road accidents has generally been increasing from 2019 to 2022.\n\n\n\nggplot(roadacc, aes(x = inc_year)) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Year\", x = \"Year\", y = \"Count\") +\n  facet_wrap(~province_en)+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\n\nWe note from above that the number of road accidents has generally been increasing in Bangkok and Samut Prakan from 2019 to 2022.\n\nThis is with the exception of a drop in 2021 in Bangkok - this could potentially be due to the surge of COVID-19 cases in Thailand in 2021 which led to a lockdown which meant that there were less tourists, vehicles and pedestrians on the roads, and lower occurrences of road accidents.\n\nWe note that the number of road accidents in Nonthaburi and Pathum Thani increased from 2019 to 2021 and fell in 2022.\nWe note that the number of road accidents in Samut Sakhon fell from 2019 to 2021 but increased in 2022.\nOf the 6 provinces, we note that only Nakhon Pathom experienced a fall in road accidents from 2019 to 2022.\n\n\n\n\n\n\n\nWe also observe the data by month using cycle plots that would enable us to observe cyclical/seasonal patterns, if present.\n\nroadacc_month &lt;- roadacc %&gt;%\n  group_by(inc_year,inc_month) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\nWe save roadacc_month as a rds file:\n\nwrite_rds(roadacc_month,\"data/rds/roadacc_month.rds\")\n\n\nroadacc_month &lt;- read_rds(\"data/rds/roadacc_month.rds\")\n\n\n\n\n\nhline.data &lt;- roadacc_month %&gt;%\n  group_by(inc_month) %&gt;%\n  summarise(avgvalue = mean(count))\n\nggplot(data = roadacc_month, aes(x = inc_year, y = count)) +\n  geom_line(aes(group = inc_month, colour = as.factor(inc_month))) +\n  geom_hline(aes(yintercept=avgvalue),\n             data=hline.data,\n             linetype=6,\n             colour=\"red\",\n             size=0.5)+\n  facet_wrap(~inc_month,scales = \"free_x\")+\n  labs(title = \"Road accidents by month from 2019 to 2022\",\n                   colour = \"Month\") +\n  xlab(\"Year\")+\n  ylab(\"Number of Road Accidents\")+\n  scale_color_brewer(palette = \"Paired\") + \n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\nBased on the plot, we observe the following:\n\nOccurrences of road accidents in Jan and Feb seem to generally be decreasing over the years, with the number of road accidents in 2022 for both months falling below the average number of road accidents for the month across 2019 to 2022.\nOccurrences of road accidents in Jul, Aug, Oct to Dec seem to generally be increasing over the years. Based on this observation alone, the increase in road accidents could potentially be due to the rainy season between Jul to Oct and the presence of a higher population due to peak tourist seasons in Nov and Dec.\nOccurrences of road accidents in Mar to Jun and Sep generally do not fluctuate much over the years.\n\n\n\n\nWe further observe the occurrence of road accidents by month at the province level:\n\n\n\n\n\n\nNote\n\n\n\n\n\n\nroadacc_month_bkk &lt;- roadacc %&gt;%\n  filter(province_en==\"Bangkok\") %&gt;%\n  group_by(inc_year,inc_month) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\nroadacc_month_sp &lt;- roadacc %&gt;%\n  filter(province_en==\"Samut Prakan\") %&gt;%\n  group_by(inc_year,inc_month) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\nroadacc_month_n &lt;- roadacc %&gt;%\n  filter(province_en==\"Nonthaburi\") %&gt;%\n  group_by(inc_year,inc_month) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\nroadacc_month_pt &lt;- roadacc %&gt;%\n  filter(province_en==\"Pathum Thani\") %&gt;%\n  group_by(inc_year,inc_month) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\nroadacc_month_np &lt;- roadacc %&gt;%\n  filter(province_en==\"Nakhon Pathom\") %&gt;%\n  group_by(inc_year,inc_month) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\nroadacc_month_ss &lt;- roadacc %&gt;%\n  filter(province_en==\"Samut Sakhon\") %&gt;%\n  group_by(inc_year,inc_month) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\nSaving them as rds files:\n\nwrite_rds(roadacc_month_bkk,\"data/rds/roadacc_month_bkk.rds\")\nwrite_rds(roadacc_month_sp,\"data/rds/roadacc_month_sp.rds\")\nwrite_rds(roadacc_month_n,\"data/rds/roadacc_month_n.rds\")\nwrite_rds(roadacc_month_pt,\"data/rds/roadacc_month_pt.rds\")\nwrite_rds(roadacc_month_np,\"data/rds/roadacc_month_np.rds\")\nwrite_rds(roadacc_month_ss,\"data/rds/roadacc_month_ss.rds\")\n\nLoading the newly created rds files into R:\n\nroadacc_month_bkk &lt;- read_rds(\"data/rds/roadacc_month_bkk.rds\")\nroadacc_month_sp &lt;- read_rds(\"data/rds/roadacc_month_sp.rds\")\nroadacc_month_n &lt;- read_rds(\"data/rds/roadacc_month_n.rds\")\nroadacc_month_pt &lt;- read_rds(\"data/rds/roadacc_month_pt.rds\")\nroadacc_month_np &lt;- read_rds(\"data/rds/roadacc_month_np.rds\")\nroadacc_month_ss &lt;- read_rds(\"data/rds/roadacc_month_ss.rds\")\n\n\n\n\n\nBangkokSamut PrakanNonthaburiPathum ThaniNakhon PathomSamut Sakhon\n\n\n\nhline.data &lt;- roadacc_month_bkk %&gt;%\n  group_by(inc_month) %&gt;%\n  summarise(avgvalue = mean(count))\n\nggplot(data = roadacc_month_bkk, aes(x = inc_year, y = count)) +\n  geom_line(aes(group = inc_month, colour = as.factor(inc_month))) +\n  geom_hline(aes(yintercept=avgvalue),\n             data=hline.data,\n             linetype=6,\n             colour=\"red\",\n             size=0.5)+\n  facet_wrap(~inc_month,scales = \"free_x\")+\n  labs(title = \"Bangkok Road accidents by month from 2019 to 2022\",\n                   colour = \"Month\") +\n  xlab(\"Year\")+\n  ylab(\"Number of Road Accidents\")+\n  scale_color_brewer(palette = \"Paired\") + \n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\nThe following observations were made:\n\nOccurrences of road accidents in Jan seem to be fluctuating, with the number of road accidents decreasing from 2019 to 2021 then increasing in 2022.\nOccurrences of road accidents in Feb seem to generally be decreasing over the years, with the number of road accidents in 2022 falling below the average number of road accidents for the month across 2019 to 2022.\nOccurrences of road accidents in Jul to Dec seem to generally be increasing over the years. Based on this observation alone, the increase in road accidents could potentially be due to the rainy season between Jul to Oct and the presence of a higher population due to peak tourist seasons in Nov and Dec.\nOccurrences of road accidents in Mar to Jun generally do not fluctuate much over the years.\n\n\n\n\nhline.data &lt;- roadacc_month_sp %&gt;%\n  group_by(inc_month) %&gt;%\n  summarise(avgvalue = mean(count))\n\nggplot(data = roadacc_month_sp, aes(x = inc_year, y = count)) +\n  geom_line(aes(group = inc_month, colour = as.factor(inc_month))) +\n  geom_hline(aes(yintercept=avgvalue),\n             data=hline.data,\n             linetype=6,\n             colour=\"red\",\n             size=0.5)+\n  facet_wrap(~inc_month,scales = \"free_x\")+\n  labs(title = \"Samut Prakan Road accidents by month from 2019 to 2022\",\n                   colour = \"Month\") +\n  xlab(\"Year\")+\n  ylab(\"Number of Road Accidents\")+\n  scale_color_brewer(palette = \"Paired\") + \n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\nThe following observations were made:\n\nOccurrences of road accidents in Jan seem to generally be decreasing over the years, with the number of road accidents in 2022 falling below the average number of road accidents for the month across 2019 to 2022.\nOccurrences of road accidents in Apr to Aug and Nov to Dec seem to generally be increasing over the years. Based on this observation alone, the increase in road accidents could potentially be due to the hotter and rainier seasons in Apr to Aug and the presence of a higher population due to peak tourist seasons in May, Jun, Nov and Dec.\nOccurrences of road accidents in Feb to Mar and Sep to Oct increased initially then fell towards 2022.\n\n\n\n\nhline.data &lt;- roadacc_month_n %&gt;%\n  group_by(inc_month) %&gt;%\n  summarise(avgvalue = mean(count))\n\nggplot(data = roadacc_month_n, aes(x = inc_year, y = count)) +\n  geom_line(aes(group = inc_month, colour = as.factor(inc_month))) +\n  geom_hline(aes(yintercept=avgvalue),\n             data=hline.data,\n             linetype=6,\n             colour=\"red\",\n             size=0.5)+\n  facet_wrap(~inc_month,scales = \"free_x\")+\n  labs(title = \"Nonthaburi Road accidents by month from 2019 to 2022\",\n                   colour = \"Month\") +\n  xlab(\"Year\")+\n  ylab(\"Number of Road Accidents\")+\n  scale_color_brewer(palette = \"Paired\") + \n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\nThe following observations were made:\n\nOccurrences of road accidents in Feb seem to generally be decreasing over the years.\nOccurrences of road accidents in Jan seem to generally be increasing over the years.\nOccurrences of road accidents in Jul, Aug, Nov and Dec increased initially then fell towards 2022.\nOccurrences of road accidents in Mar to Jun, Sep and Oct seem to fluctuate generally around the monthly average across the years.\nAs compared to Bangkok, Samut Prakan and Pathum Thani, the number of road accidents in Nonthaburi seem to be lesser, indicating that roads are more well managed in Nonthaburi.\n\n\n\n\nhline.data &lt;- roadacc_month_pt %&gt;%\n  group_by(inc_month) %&gt;%\n  summarise(avgvalue = mean(count))\n\nggplot(data = roadacc_month_pt, aes(x = inc_year, y = count)) +\n  geom_line(aes(group = inc_month, colour = as.factor(inc_month))) +\n  geom_hline(aes(yintercept=avgvalue),\n             data=hline.data,\n             linetype=6,\n             colour=\"red\",\n             size=0.5)+\n  facet_wrap(~inc_month,scales = \"free_x\")+\n  labs(title = \"Pathum Thani Road accidents by month from 2019 to 2022\",\n                   colour = \"Month\") +\n  xlab(\"Year\")+\n  ylab(\"Number of Road Accidents\")+\n  scale_color_brewer(palette = \"Paired\") + \n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\nThe following observations were made:\n\nOccurrences of road accidents in Jun to Aug and Oct seem to generally be increasing over the years. This could be explained by the rainier seasons in Thailand during this period.\nOccurrences of road accidents in Mar, Apr, May and Nov increased initially then fell towards 2022.\nOccurrences of road accidents in Jan, Feb, Sep and Dec seem to fluctuate generally around the monthly average across the years.\n\n\n\n\nhline.data &lt;- roadacc_month_np %&gt;%\n  group_by(inc_month) %&gt;%\n  summarise(avgvalue = mean(count))\n\nggplot(data = roadacc_month_np, aes(x = inc_year, y = count)) +\n  geom_line(aes(group = inc_month, colour = as.factor(inc_month))) +\n  geom_hline(aes(yintercept=avgvalue),\n             data=hline.data,\n             linetype=6,\n             colour=\"red\",\n             size=0.5)+\n  facet_wrap(~inc_month,scales = \"free_x\")+\n  labs(title = \"Nakhon Pathom Road accidents by month from 2019 to 2022\",\n                   colour = \"Month\") +\n  xlab(\"Year\")+\n  ylab(\"Number of Road Accidents\")+\n  scale_color_brewer(palette = \"Paired\") + \n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\nThe following observations were made:\n\nOccurrences of road accidents in Jan to Mar, May, Jul to Dec seem to generally be decreasing over the years.\nOccurrences of road accidents in Apr and Jun seem to be fluctuating around the monthly average across the years.\nBased on these observations, it seems like road accidents are much lesser in Nakhon Pathom as compared to the other provinces and it is the only province with no obvious increase in occurrences of road accidents across the years, this indicates that the province is more well managed as compared to the other 5 provinces.\n\n\n\n\nhline.data &lt;- roadacc_month_ss %&gt;%\n  group_by(inc_month) %&gt;%\n  summarise(avgvalue = mean(count))\n\nggplot(data = roadacc_month_ss, aes(x = inc_year, y = count)) +\n  geom_line(aes(group = inc_month, colour = as.factor(inc_month))) +\n  geom_hline(aes(yintercept=avgvalue),\n             data=hline.data,\n             linetype=6,\n             colour=\"red\",\n             size=0.5)+\n  facet_wrap(~inc_month,scales = \"free_x\")+\n  labs(title = \"Samut Sakhon Road accidents by month from 2019 to 2022\",\n                   colour = \"Month\") +\n  xlab(\"Year\")+\n  ylab(\"Number of Road Accidents\")+\n  scale_color_brewer(palette = \"Paired\") + \n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\nThe following observations were made:\n\nOccurrences of road accidents in Jan, Feb, Apr and Jun seem to generally be decreasing over the years.\nOccurrences of road accidents in Jul to Dec seem to be increasing over the years. Based on this observation alone, the increase in road accidents could potentially be due to the hotter and rainier seasons in Jul to Oct and the presence of a higher population due to peak tourist seasons in Nov and Dec.\nOccurrences of road accidents in Mar and May seem to fluctuate generally around the monthly average across the years.\n\n\n\n\n\n\n\n\nOverallBreakdown by province\n\n\n\nggplot(roadacc, aes(x = inc_dayofweek)) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Day of Week\", x = \"Day of Week\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nWe note from the plot that road accidents occur mostly on Fri and Sat and this could be explained by these days being the start of the weekend, and more people and vehicles may be out on the roads and in public places, which increase the chances of road accidents occuring.\n\n\n\np0 &lt;- ggplot(roadacc, aes(x = inc_dayofweek)) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Day of Week\", x = \"Day of Week\", y = \"Count\") +\n  facet_wrap(~province_en, scales = \"fixed\")\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\nList of 1\n $ axis.text.x:List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : num 8\n  ..$ hjust        : num 1\n  ..$ vjust        : NULL\n  ..$ angle        : num 90\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi FALSE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n - attr(*, \"class\")= chr [1:2] \"theme\" \"gg\"\n - attr(*, \"complete\")= logi FALSE\n - attr(*, \"validate\")= logi TRUE\n\nggplotly(p0)\n\n\n\n\n\nAcross the provinces, it is obvious that road accidents occur most often on Fri and Sat in Bangkok. However, for the other provinces, the difference is not so obvious and it seems like the occurrences of road accidents are more well spread out across the week. This could be explained by Bangkok being a prime tourist destination and major urban centre, and it could attract a greater crowd from within and outside of Thailand over the weekend, hence leading to greater traffic on the road and higher chances of road accidents occurring.\n\n\n\n\n\n\n\nOverallBreakdown by province\n\n\n\nggplot(roadacc, aes(x = inc_time)) + \n  geom_histogram(binwidth = 1, fill = \"slategrey\", color = \"black\") +\n  scale_x_continuous(breaks = seq(0, 23, 1))+\n  labs(title = \"Distribution of Road Accidents by Time of Day\", \n       x = \"Time of Day\",\n       y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nBased on the chart, it is observed that road accidents occur more often between 7am to 11pm as compared to 12 midnight to 6am. This could be explained by 7am to 11pm being the time when most are awake for their daily activities and the roads are likely to have higher activity, which result in higher chances of occurrences of road accidents. The top two timings at which road accidents occur are at 9am and 7pm and this could be explained by it being the peak hour at which the general population i.e. workers, school students get to and get off work and school.\n\n\n\np1 &lt;- ggplot(roadacc, aes(x = inc_time)) + \n  geom_histogram(binwidth = 1, fill = \"slategrey\", color = \"black\") +\n  scale_x_continuous(breaks = seq(0, 23, 1))+\n  labs(title = \"Distribution of Road Accidents by Time of Day\", \n       x = \"Time of Day\",\n       y = \"Count\") +\n  facet_wrap(~province_en, scales = \"fixed\")+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\nggplotly(p1)\n\n\n\n\n\nBangkok, Samut Prakan and Pathum Thani also seem to follow the general observation seen under the overall chart for occurrences of road accidents by time day i.e. road accidents generally occur more during 7am to 11pm and peak timings are during the going to and getting off work/school hours at around 9am and 7pm. This is less obvious for the other provinces.\n\n\n\n\n\n\n\nOverallBreakdown by Province\n\n\n\nggplot(roadacc, aes(x = fct_reorder(weather_condition, weather_condition, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Weather Condition\", x = \"Weather Condition\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nBased on the plot, road accidents mostly occur in clear weather conditions, followed by rainy weather conditions and dark weather conditions. This could imply that road accidents are more heavily influenced by other behavioural or environmental factors besides the weather condition.\n\n\n\nggplot(roadacc, aes(x = fct_reorder(weather_condition, weather_condition, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Weather Condition\", x = \"Weather Condition\", y = \"Count\") +\n  facet_wrap(~province_en)+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nAcross provinces, similar observations were made as it was observed that road accidents mostly occur during clear weather conditions, followed by rainy and then dark weather conditions.\n\n\n\n\n\n\n\nOverallBreakdown by Province\n\n\n\nggplot(roadacc, aes(x = fct_reorder(road_description, road_description, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Road Description\", x = \"Road Description\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nBased on the plot, road accidents mostly occur on straight roads, roads categorised as other, followed by wide curve and then grade-separated intersection/ramps. Combining this observation with that for weather conditions - that road accidents mostly occur during clear weather conditions and straight roads - which are conditions under which one would not expect road accidents to occur, it could imply that the occurrence of road accidents are more heavily influenced by behavioural factors.\n\n\n\nggplot(roadacc, aes(x = fct_reorder(road_description, road_description, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Road Description\", x = \"Road Description\", y = \"Count\") +\n  facet_wrap(~province_en)+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nAcross provinces, similar observations were made as it was observed that road accidents mostly occur on straight roads, roads categorised as other, followed by wide curve and then grade-separated intersection/ramps.\n\n\n\n\n\n\n\nOverallBreakdown by Province\n\n\n\nggplot(roadacc, aes(x = fct_reorder(slope_description, slope_description, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Slope Description\", x = \"Slope Description\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nBased on the plot, road accidents where there are no slopes. Combining this observation with the above observations - that road accidents mostly occur during clear weather conditions and on straight roads with no slope - which are conditions under which one would not expect road accidents to occur, it could imply that the occurrence of road accidents are more heavily influenced by behavioural factors.\n\n\n\nggplot(roadacc, aes(x = fct_reorder(slope_description, slope_description, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Slope Description\", x = \"Slope Description\", y = \"Count\") +\n  facet_wrap(~province_en)+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nAcross provinces, similar observations were made as it was observed that road accidents mostly occur on roads with no slope.\n\n\n\n\n\n\n\nOverallBreakdown by Province\n\n\n\nggplot(roadacc, aes(x = fct_reorder(vehicle_type, vehicle_type, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Vehicle Type\", x = \"Vehicle Type\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nBased on the plot, road accidents mostly involve private/passenger car, followed by 4-wheel pickup truck, motorcycle as the top 3 vehicles. These are small to mid-sized vehicles.\n\n\nWe do a more detailed analysis at the province level:\n\nggplot(roadacc, aes(x = fct_reorder(vehicle_type, vehicle_type, .fun = length))) +\n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Vehicle Type\", x = \"Vehicle Type\", y = \"Count\") +\n  facet_wrap(~province_en)+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\nBangkok and Samut Prakan follow the same general observation seen under the overall chart for vehicle type involved in road accidents i.e. road accidents mostly involve private/passenger car, followed by 4-wheel pickup truck, motorcycle as the top 3 vehicles. However the following were observed for the other provinces:\n\nRoad accidents in Nakhon Pathom, Pathum Thani and Samut Sakhon mostly involved 4-wheel pickup truck\n4-wheel pickup truck is not one of the top 3 vehicles involved in road accidents in Nonthaburi\n\n\n\n\n\n\n\n\nggplot(roadacc, aes(x = fct_reorder(presumed_cause, presumed_cause, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Presumed Cause\", x = \"Presumed Cause\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n\n\n\n\n\n\n\n\nThe top presumed cause for accident is speeding.\n\n\n\n\nOverallBreakdown by Province\n\n\n\nggplot(roadacc, aes(x = fct_reorder(accident_type, accident_type, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Accident Type\", x = \"Accident Type Cause\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n\n\n\n\n\n\n\n\nThe top two presumed cause for road accidents are rear-end collision and rollover/fallen on straight road.\n\n\n\nggplot(roadacc, aes(x = fct_reorder(accident_type, accident_type, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Accident Type\", x = \"Accident Type Cause\", y = \"Count\") +\n  facet_wrap(~province_en)+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n\n\n\n\n\n\n\n\nBangkok, Pathum Thani and Samut Prakan follow the same general observation seen under the overall chart that the top two presumed cause for road accidents are rear-end collision followed by rollover/fallen on straight road. For Nakhon Pathom, Nonthaburi and Samut Sakhon, the top presumed cause is rollover/fallen on straight road followed by rear-end collision.\n\n\n\n\n\n\n\nsummary_stats &lt;- roadacc %&gt;%\n  group_by(province_en) %&gt;%\n  summarise(\n    median_vehicles = median(number_of_vehicles_involved, na.rm = TRUE),\n    mean_vehicles = mean(number_of_vehicles_involved, na.rm = TRUE),\n    min_vehicles = min(number_of_vehicles_involved,na.rm = TRUE),\n    q25 = quantile(number_of_vehicles_involved, 0.25, na.rm = TRUE),\n    q75 = quantile(number_of_vehicles_involved, 0.75, na.rm = TRUE),\n    max_vehicles = max(number_of_vehicles_involved,na.rm = TRUE),\n    .groups = 'drop'\n  ) %&gt;%\n  mutate(label = paste0(\"Min: \", round(min_vehicles,1),\n                        \"\\nq25: \", round(q25,1),\n                        \"\\nMedian: \", round(median_vehicles, 1), \n                        \"\\nMean: \", round(mean_vehicles, 1),\n                        \"\\nq75: \", round(q75,1),\n                        \"\\nMax vehicles: \", round(max_vehicles,1)\n                        ))\n\nggplot(roadacc,\n       aes(x=province_en,\n           y=number_of_vehicles_involved,\n           fill = province_en))+\n  geom_boxplot(width = .20,\n               outlier.shape = NA)+\n  geom_text(data = summary_stats, \n            aes(x = province_en, y = q75, label = label), \n            vjust = -0.5, \n            size = 3)+\n  ggtitle(\"Distribution of Road Accidents by Number of Vehicles Involved\") +\n  labs(title = \"Distribution of Road Accidents by Number of Vehicles Involved\", x = \"Number of Vehicles Involved\", y = \"Count\")+\n  theme(legend.position = \"none\") +\n  scale_fill_viridis_d()\n\n\n\n\n\n\n\n\nAcross the provinces, the median number of vehicles involved in road accidents are either one or two. However, the maximum number of vehicles that had been involved in road accidents were 12 (Pathum Thani), 11 (Bangkok), 10 (Samut Prakan), 9 (Nonthaburi and Samut Sakhon) and 8 (Nakhon Pathom), indicating that while not common, there are large-scale incidents involving large number of vehicles.\n\n\n\n\nsummary_stats &lt;- roadacc %&gt;%\n  group_by(province_en) %&gt;%\n  summarise(\n    median_fatalities = median(number_of_fatalities, na.rm = TRUE),\n    mean_fatalities = mean(number_of_fatalities, na.rm = TRUE),\n    min_fatalities = min(number_of_fatalities,na.rm = TRUE),\n    q25 = quantile(number_of_fatalities, 0.25, na.rm = TRUE),\n    q75 = quantile(number_of_fatalities, 0.75, na.rm = TRUE),\n    max_fatalities = max(number_of_fatalities,na.rm = TRUE),\n    .groups = 'drop'\n  ) %&gt;%\n  mutate(label = paste0(\"Min: \", round(min_fatalities,1),\n                        \"\\nq25: \", round(q25,1),\n                        \"\\nMedian: \", round(median_fatalities, 1), \n                        \"\\nMean: \", round(mean_fatalities, 1),\n                        \"\\nq75: \", round(q75,1),\n                        \"\\nMax fatalities: \", round(max_fatalities,1)\n                        ))\n\nggplot(roadacc,\n       aes(x=province_en,\n           y=number_of_fatalities,\n           fill = province_en))+\n  geom_boxplot(width = .20,\n               outlier.shape = NA)+\n  geom_text(data = summary_stats, \n            aes(x = province_en, y = q75, label = label), \n            vjust = -0.5, \n            size = 3)+\n  ggtitle(\"Distribution of Road Accidents by Number of Fatalities\") +\n  labs(title = \"Distribution of Road Accidents by Number of Fatalities\", x = \"Number of Fatalities\", y = \"Count\")+\n  theme(legend.position = \"none\") +\n  scale_fill_viridis_d()\n\n\n\n\n\n\n\n\nAcross the provinces, the median number of fatalities is 0. However, while few, there are road accidents that occur with higher number of fatalities - the highest being 13 (Samut Prakan), followed by 6 (Pathum Thani), 3 (Bangkok, Nonthaburi) and 2 (Nakhon Pathom and Samut Sakhon).\n\n\n\n\nsummary_stats &lt;- roadacc %&gt;%\n  group_by(province_en) %&gt;%\n  summarise(\n    median_injuries = median(number_of_injuries, na.rm = TRUE),\n    mean_injuries = mean(number_of_injuries, na.rm = TRUE),\n    min_injuries = min(number_of_injuries,na.rm = TRUE),\n    q25 = quantile(number_of_injuries, 0.25, na.rm = TRUE),\n    q75 = quantile(number_of_injuries, 0.75, na.rm = TRUE),\n    max_injuries = max(number_of_injuries,na.rm = TRUE),\n    .groups = 'drop'\n  ) %&gt;%\n  mutate(label = paste0(\"Min: \", round(min_injuries,1),\n                        \"\\nq25: \", round(q25,1),\n                        \"\\nMedian: \", round(median_injuries, 1), \n                        \"\\nMean: \", round(mean_injuries, 1),\n                        \"\\nq75: \", round(q75,1),\n                        \"\\nMax injuries: \", round(max_injuries,1)\n                        ))\n\nggplot(roadacc,\n       aes(x=province_en,\n           y=number_of_injuries,\n           fill = province_en))+\n  geom_boxplot(width = .20,\n               outlier.shape = NA)+\n  geom_text(data = summary_stats, \n            aes(x = province_en, y = q75, label = label), \n            vjust = -0.5, \n            size = 3)+\n  ggtitle(\"Distribution of Road Accidents by Number of Injuries\") +\n  labs(title = \"Distribution of Road Accidents by Number of Injuries\", x = \"Number of Injuries\", y = \"Count\")+\n  theme(legend.position = \"none\") +\n  scale_fill_viridis_d()\n\n\n\n\n\n\n\n\nAcross the provinces, the median number of injuries is 0. However, while few, there are road accidents that occur with higher number of injuries - the highest being 51 (Pathum Thani), followed by 31 (Bangkok), 30 (Nakhon Pathom), 28 (Samut Prakan), 14 (Samut Sakhon) and 11 (Nonthaburi)."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01A.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01A.html",
    "title": "Take-home Exercise 1A",
    "section": "",
    "text": "According to the World Health Organisation (WHO), road traffic accidents cause the death of approximately 1.19 million people each year and leave between 20 to 50 million people with non-fatal injuries. Vulnerable road users, such as pedestrians, cyclists and motorcyclists, make up more than half of all road traffic deaths.\nRoad traffic injuries are the leading cause of death for children and young adults aged 5 to 29, however two-thirds of road traffic fatalities occur among people of working ages, from 18 to 59 years. Further, nine in 10 fatalities on the roads occur in low- and middle-income countries, even though these countries make up only around 60% of the world’s vehicles.\nBesides human suffering, road traffic injuries also result in a heavy economic burden on victims and their families, through treatment costs for the injured and loss of productivity of those killed or disabled. More broadly, road traffic injuries have a serious impact on national economies, costing countries 3% of their annual gross domestic product.\nAccording to the WHO, Thailand’s roads are the deadliest in Southeast Asia and among the worst in the world - about 20,000 people die in road accidents each year, or about 56 deaths a day.\nBetween 2014 and 2021, Thailand experienced a notable increase in accident frequencies. Specifically, 19% of all accidents in Thailand occurred on the national highways, which make up the primary public thoroughfares connecting various regions, provinces, districts, and significant locations within a comprehensive network. Within the broader context of accidents across the country, there existed a considerable 66% likelihood of encountering accident-prone zones, often termed as ‘black spots’ which are distributed as follows: 66% on straight road segments, 13% at curves, 6% at median points of cross-shaped intersections, 5% at T-shaped intersections and Y-shaped intersections, 3% at cross-shaped intersections, 2% on bridges, and 2% on steep slopes.\n\n\n\nBy and large, road traffic accidents can be attributed by two major factors, namely behavioural and environmental factors.\n\nBehavioural factors in driving are considered to be major causes of traffic accidents either in direct or indirect manner (Lewin, 1982). These factors can be further grouped into driver behavior (driver/driving style) and driver performance (driver/driving skills) (Elander, West, & French, 1993).\nEnvironmental factors, on the other hand, includes but not limited to weather conditions such as poor visibility during heavy rain or fogs as well as road conditions such as sharp bends, slippery slopes, and blind spots.\n\nPrevious studies have demonstrated the significant potential of Spatial Point Patterns Analysis (SPPA) in exploring and identifying factors influencing road traffic accidents. However, these studies often focus solely on either behavioral or environmental factors, with limited consideration of temporal factors such as season, day of the week, or time of day.\nIn view of this, in this hands-on exercise, we will determine factors that affect road traffic accidents in the Bangkok Metropolitan Region (BMR) by employing both spatial and spatio-temporal point patterns analysis methods.\nThe specific objectives are as follows:\n\nTo visualize the spatio-temporal dynamics of road traffic accidents in BMR using appropriate statistical graphics and geovisualization methods.\nTo conduct detailed spatial analysis of road traffic accidents using appropriate Network Spatial Point Patterns Analysis methods.\nTo conduct detailed spatio-temporal analysis of road traffic accidents using appropriate Temporal Network Spatial Point Patterns Analysis methods.\n\n\n\n\nKey packages that are installed are:\n\nsf for importing, managing, and processing vector-based geospatial data, and\nspatstat, which has a wide range of useful functions for point pattern analysis. In this hands-on exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer\nraster which reads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster). In this hands-on exercise, it will be used to convert image output generate by spatstat into raster format.\nmaptools which provides a set of tools for manipulating geographic data. In this hands-on exercise, we mainly use it to convert Spatial objects into ppp format of spatstat.\ntmap which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using leaflet API.\ntidyverse for performing data science tasks such as importing, wrangling and visualising data.\nspNetwork which provides functions to perform Spatial Point Patterns Analysis such as kernel density estimation (KDE) and K-function on network. It can also be used to build spatial matrices (`listw’ objects like in ‘spdep’ package) to conduct any kind of traditional spatial analysis with spatial weights based on reticular distances.\n\nThe packages are loaded with the following code chunk:\n\npacman::p_load(sf,spatstat,raster,maptools,tmap,tidyverse,spNetwork,DT,forcats,ggthemes,plotly)\n\nFor any simulation steps carried out in this exercise, we set a seed to ensure reproducibility:\n\nset.seed(1234)\n\n\n\n\nFor the purpose of this exercise, three basic data sets are used:\n\nThailand Road Accident [2019-2022] on Kaggle - comprised records of road accidents in Thailand from ~2019 to 2022, based on information provided by the Office of the Permanent Secretary, Ministry of Transport.\nThailand - Subnational Administrative Boundaries on HDX\nThailand Roads (OpenStreetMap Export) on HDX\n\n\n\n\n\n\nThe data is imported using the code below:\n\nroadacc &lt;- read_csv(\"data/rawdata/thai_road_accident_2019_2022.csv\")\n\nTaking a glimpse at the data to determine the fields in the data:\n\nglimpse(roadacc)\n\nThere are 81735 rows and 18 variables. Further details about the important variables that would be needed for analysis can be found in the dropdown box below:\n\n\n\n\n\n\nMore information about variables for analysis\n\n\n\n\n\n\n\n\n\n\n\n\n\nField\nDescription\nPurpose of data i.e. what it might indicate\n\n\n\n\nincident_datetime\nThe date and time of the accident occurrence\nwhether accidents tend to occur at specific:\n\nmonths\nday of week\ntime of the day\n\n\n\nreport_datetime\nThe date and time when the accident was reported\nefficacy at which accident was reported could indicate:\n\nhow busy the road segment is\nhow tightly the road is being monitored/ whether there is a lapse in the management of the road\n\n\n\nprovince_en\nThe name of the province in Thailand, written in English\nsupports the filtering of data to just BMR\n\n\nagency\nThe government agency responsible for the road and traffic management\npinpoints the responsible government agency, could indicate whether there is a need for government agency to take corrective actions\n\n\nroute\nThe route or road segment where the accident occurred\nwhile the data can be used to determine frequency of incident at different locations, it is not useful for our case as it’s in the Thai language\n\n\nvehicle_type\nThe type of vehicle involved in the accident\ncan determine frequency of vehicle types involved in accidents\n\n\npresumed_cause\nThe presumed cause or reason for the accident\ncan determine distribution of cause for accidents\n\n\naccident_type\nThe type or nature of the accident\ncan determine distribution of nature of accidents\n\n\nnumber_of_vehicles_involved\nThe number of vehicles involved in the accident\ncan determine the scale of accidents at different locations i.e. how severe/deadly\n\n\nnumber_of_fatalities\nThe number of fatalities resulting from the accident\ncan determine the scale of accidents at different locations i.e. how severe/deadly\n\n\nnumber_of_injuries\nThe number of injuries resulting from the accident\ncan determine the scale of accidents at different locations i.e. how severe/deadly\n\n\nweather_condition\nThe weather condition at the time of the accident\ncan determine how much weather conditions can affect the occurrence of accidents\n\n\nlatitude\nThe latitude coordinate of the accident location\nused for mapping and for analysis with other datasets\n\n\nlongitude\nThe longitude coordinate of the accident location\nused for mapping and for analysis with other datasets\n\n\nroad_description\nThe description of the road type or configuration where the accident occurred\ncan determine how road types can affect the occurrence of accidents\n\n\nslope_description\nThe description of the slope condition at the accident location\ncan determine how presence of slopes can affect the occurrence of accidents\n\n\n\n\n\n\n\n\n\nWe will first drop “province_th” as it indicates the provinces in the Thai language.\n\nroadacc &lt;- roadacc[, !names(roadacc) %in% c(\"province_th\",\"route\")]\n\n\n\n\nWe then determine the unique provinces within the dataset and scan through the province names (i.e. in case there are any entries that refer to the same province but are spelt differently/have spelling mistakes) before filtering the data to just include provinces that are within the BMR:\n\nunique_provinces &lt;- roadacc %&gt;% \n  distinct(province_en) %&gt;%\n  arrange(province_en)\n\nBased on observations, there were no spelling mistakes. As such we can proceed with filtering the data to keep our region of interest which comprises Bangkok and five adjacent provinces of Nakhon Pathom, Nonthaburi, Pathum Thani, Samut Prakan and Samut Sakhon:\n\nroadacc &lt;- roadacc %&gt;% \n  filter(province_en %in% c(\"Bangkok\", \"Nakhon Pathom\", \"Nonthaburi\", \"Pathum Thani\",\"Samut Prakan\",\"Samut Sakhon\"))\n\nThis leaves the data with 13336 rows.\n\n\n\nWe further clean the data by removing rows with missing data:\n\nroadacc &lt;- roadacc %&gt;%\n  drop_na()\n\n\n\n\nWe also check if there are duplicate entries in the dataset:\n\nroadacc$acc_code[duplicated(roadacc$acc_code) == TRUE]\n\nThere are no duplicate entries.\n\n\n\n\n\n\nIn-class notes from Prof Kam:\n\n\n\nDuring class, Prof Kam had advised to study the data carefully and shared that it was important to filter out data with incomplete coordinates (missing either longitude or latitude or both) and shared that one way to do it was via the code below:\n\nroadacc &lt;- roadacc %&gt;%\n  filter(!is.na(longitude) & longitude != \"\",\n         !is.na(latitude) & latitude != \"\")\n\nAs with the drop_na() code above, this way will also leave just 12986 rows of data as the missing data were found in either the longitude or latitude variables.\n\n\n\n\n\nWe convert roadacc data frame into a simple feature data frame and also transform the data from geographic coordinate system (EPSG: 4326 WGS84 Geographic Coordinate System) to projected coordinate system:\n\nroadacc &lt;- st_as_sf(roadacc, \n                    coords = c(\"longitude\", \"latitude\"),\n                    crs=4326) %&gt;%\n  st_transform(crs = 32647)\n\nBased on the summary statistics of roadacc above, it is noted that the minimum longitude is 99.85° and maximum longitude is 100.94°. While there are 2 possible projected coordinate systems for Thailand, EPSG 32647 and 32648, the appropriate projected coordinate system to transform the data to would be EPSG 32647 as the minimum and maximum longitude of roadacc falls within EPSG 32467’s area of use (between 96°E and 102°E). A comparison of the area of use for both projected coordinate systems is shown below:\n\n\n\n\nEPSG 32647\nEPSG 32648\n\n\n\n\nArea of use\nBetween 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\nBetween 102°E and 108°E, northern hemisphere between equator and 84°N, onshore and offshore. Cambodia. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Russian Federation. Singapore. Thailand. Vietnam.\n\n\n\n\n\n\nThe incident_datetime and report_datetime variables are in datetime field, we hence utilise these variables and the lubridate() function to generate new variables that represent:\n\nmonth: “inc_month”\nday of week: “inc_dayofweek”\ntime of day: “inc_time”\n\n\nroadacc &lt;- roadacc %&gt;%\n  mutate(inc_year = year(incident_datetime)) %&gt;%\n  mutate(inc_month = month(incident_datetime,\n                       label = TRUE,\n                       abbr = TRUE)) %&gt;%\n  mutate(inc_dayofweek = wday(incident_datetime,\n                              week_start = getOption(\"lubridate.week.start\", 1),\n                              label = TRUE,\n                              abbr = TRUE)) %&gt;%\n  mutate(inc_time = hour(incident_datetime))\n\n\n\n\n\n\n\nIn-class notes from Prof Kam:\n\n\n\nNote that we can generate month in numbers or in factor format via:\n\nroadacc &lt;- roadacc %&gt;%\n  mutate(Month_num = month(incident_datetime)) %&gt;%\n  mutate(Month_fac = month(incident_datetime,\n                       label = TRUE,\n                       abbr = TRUE))\n\n\n\nWe also determine the gap between the incident time and reporting time and create a new variable “timegap” in hours unit:\n\nroadacc$timegap &lt;- time_length(roadacc$report_datetime - roadacc$incident_datetime, \"hours\")\n\nLogically, the date and time when the accident was reported should be after the date and time of the accident occurrence. Looking at the summary statistics below, there are data entries that could have been erroneously recorded resulting in a negative time gap between report time and incident time (i.e. report time was earlier than incident time). As such, the data was further filtered to remove erroneous data to avoid affecting the analysis:\n\nsummary(roadacc$timegap)\n\n\nroadacc &lt;- roadacc %&gt;%\n  filter(timegap &gt;= 0)\n\nThis leaves us with 12985 rows.\n\n\n\nWe then save this cleaned data as a rds file:\n\nwrite_rds(roadacc,\"data/rds/roadacc.rds\")\n\n\nroadacc &lt;- read_rds(\"data/rds/roadacc.rds\")\n\n\n\n\n\n\n\nIn-class notes from Prof Kam:\n\n\n\n\nIt is good practice to save cleaned file as a new rds file via write_rds() to avoid re-running the data cleaning and wrangling codes. write_rds() will take care of all the objects within the dataset. Once the file is saved, we can add “#| eval: false” to the data cleaning and wrangling codes to avoid re-running them.\n\n\n\n\n\n\nThe data has different files providing details of the administrative boundaries of Thailand at different administrative levels:\n\nLevel 0 (country)\nLevel 1 (province)\nLevel 2 (district)\nLevel 3 (sub-district, tambon)\n\nAs our area of interest is at Level 1 (province level), we will utilise “tha_admbnda_adm1_rtsd_20220121” that reflects details at province levels and import the data using the code chunk below:\n\nprovincedata = st_read(dsn = \"data/rawdata\", \n                  layer = \"tha_admbnda_adm1_rtsd_20220121\")\n\nWe note from the above that it is a multipolygon feature data frame. We note that there are 77 features and 16 fields, and the data is in WGS84 geographic coordinate system.\nWe then take a glimpse of the data:\n\nglimpse(provincedata)\n\n\n\n\nWe note from a glimpse of the data above that there are only a few pertinent fields that we require for our analysis, specifically:\n\nADM1_EN: province name in english\nShape_Leng\nShape_Area\ngeometry\n\nWe hence filter the data to only comprise these fields to make the data frame more manageable:\n\nprovincedata &lt;- provincedata %&gt;%\n  select(\"ADM1_EN\", \"Shape_Leng\",\"Shape_Area\",\"geometry\")\n\n\n\n\nWe also filter to keep only data that are relevant to our area of interest which is BMR:\n\nprovincedata &lt;- provincedata %&gt;% \n  filter(ADM1_EN %in% c(\"Bangkok\", \"Nakhon Pathom\", \"Nonthaburi\", \"Pathum Thani\",\"Samut Prakan\",\"Samut Sakhon\"))\n\nThis leaves 6 rows of data and 4 variables.\n\n\n\nFrom the code chunk below, it is noted that the EPSG code for the selectedboundaries data frame is EPSG: 4326:\n\nst_crs(provincedata)\n\nWe will need to reproject provincedata from EPSG code to EPSG: 32647 which is the projected coordinate system to use for BMR, our area of interest:\n\nprovincedata32647 &lt;- st_transform(provincedata, \n                              crs = 32647)\n\nWe check if the EPSG code has been correctly assigned:\n\nst_crs(provincedata32647)\n\n\n\n\nWe save this cleaned data as a rds file:\n\nwrite_rds(provincedata32647,\"data/rds/provincedata32647.rds\")\n\n\nprovincedata32647 &lt;- read_rds(\"data/rds/provincedata32647.rds\")\n\nWe visualise our provincedata32647:\n\ntmap_mode('plot')\ntm_shape(provincedata32647)+\n  tm_polygons()\n\n\n\n\n\n\n\n\n\n\n\nWe import the data as follows:\n\nroadlines = st_read(dsn = \"data/rawdata\",\n                    layer = \"hotosm_tha_roads_lines_shp\")\n\nWe then glimpse at the data:\n\nglimpse(roadlines)\n\n\nst_geometry(roadlines)\n\nThe dataset is of the multilinestring geometry and is very large, with 2792590 rows and 15 variables but we only need to extract relevant information that lie within the BMR for analysis.\n\n\n\nBased on the code chunk below, it is noted that the coordinate system of the roadlines data is missing.\n\nst_crs(roadlines)\n\nBased on the values of the geometry in roadlines, the coordinates seem to be in geographic (latitude/longitude) form, in degrees, typically in a CRS like EPSG:4326 (WGS 84) used for global geographic coordinates. We hence assign the missing EPSG code using the code chunk below:\n\nroadlines4326 &lt;- st_set_crs(roadlines,4326)\n\nWe check the CRS using the code chunk below:\n\nst_crs(roadlines4326)\n\nFor analysis, we would eventually need to overlay the roadlines4326 data with the selectedboundaries32647 data to determine the roads that lie within BMR. In order to perform geoprocessing using two geospatial data, both geospatial data would need to be projected using similar coordinate systems - in this case, it its EPSG: 32647:\n\nroadlines32647 &lt;- st_transform(roadlines4326, crs = 32647)\n\nWe check the CRS code again:\n\nst_crs(roadlines32647)\n\n\n\n\nBased on the columns in the data frame roadlines32647, the columns that seem relevant/useful to retain for analysis are “highway”, “surface”, “smoothness”, “width”, “lanes”, “oneway”, “bridge” and “geometry”.\nHowever before going ahead to retain these variables, we determine the presence of missing data within roadlines32647:\n\nmissing_counts &lt;- sapply(roadlines32647, function(x) sum(is.na(x)))\nprint(missing_counts)\n\nBased on the result we obtained, more than 60% of data is missing for the variable “source” and more than 80% of data is missing for the variables “name”, “name_en”, “surface”, “smoothness”, “width”, “lanes”, “oneway”, “bridge”, “layer”, “source” and “name_th”. Given the extent of missing data, we will omit these columns as they would not provide useful information for analysis and only retain the relevant/useful columns “highway” and “geometry” with no missing data:\n\nselectedroadlines &lt;- roadlines32647 %&gt;%\n  select(\"highway\", \"geometry\")\n\n\n\n\nThe code chunk below is used to determine the types of highways in the selectedroadlines data frame:\n\nunique_highway &lt;- unique(selectedroadlines$highway)\nunique_highway &lt;- sort(unique_highway)\n\nunique_highway\n\nWhile there are several classes of highway, our analysis will focus on the major classes of highway as stated on Thailand Highway Classification, otherwise the map will be too overcrowded for analysis and we might also experience lags in rendering the Quarto document.\nA detailed explanation on the selected major highways is indicated in the table below:\n\n\n\nTypes of highway\nDetails\nIncluded for analysis?\n\n\n\n\nmotorway\nExpressway with full access control (source)\nYes\n\n\nprimary\nTop-level urban road across the city connecting trunk to trunk, or road of equal or greater importance than the primary intercity highway that runs through that city (source)\nYes\n\n\nsecondary\nMain urban road connecting primary to primary or higher, or road of equal or greater importance than the secondary intercity highway that runs through that city. Based on table above, motorcars, motorcycles and pedestrians all have access (source)\nYes\n\n\ntertiary\nRoads that are more important than regular unclassified or residential roads, or roads that connect several unclassified or residential roads. Based on table above, motorcars, motorcycles and pedestrians all have access (source)\nYes\n\n\ntrunk\nBased on table above, motorcars, motorcycles and pedestrians all have access (source)\nYes\n\n\n\n\nselectedroadlines &lt;- selectedroadlines %&gt;%\n  filter(highway %in% c(\"motorway\",\"primary\",\"secondary\",\"tertiary\",\"trunk\"))\n\n\n\n\nWe require only a subset of the selectedroadlines data to just roads within our area of interest, BMR and hence we utilise st_intersection() to find retain roads that are within the BMR boundaries given by provincedata32647:\n\nroadsbkk &lt;- st_intersection(selectedroadlines,provincedata32647)\n\nThis reduced the data to 19386 rows of data.\nWe take a quick look at the geometry and note that the plot has cleaned up significantly. We will proceed with this data:\n\nplot(st_geometry(roadsbkk))\n\n\n\n\n\nWe then check the geometry of roadsbkk:\n\ngeometry_types &lt;- roadsbkk %&gt;%\n  st_geometry_type() %&gt;%\n  as.character() %&gt;%\n  unique()\n\ngeometry_types\n\nBased on the output from above, the roadsbkk data comprises both linestring and multilinestring geometries. Linestring represents a single line, while MultiLinestring represents a collection of multiple lines. We need to simplify the data structure by converting multilinestring to linestring geometry to facilitate downstream analysis as the use of multilinestring might lead to error.\nWe utilise the st_cast() function to break down multilinestring geometries to linestring geometries:\n\nroadsbkk &lt;- st_cast(roadsbkk,\"LINESTRING\",group_or_split = TRUE)\n\nWe double check the geometry types and note from the output below that the geometry is now just linestring:\n\ngeometry_types &lt;- roadsbkk %&gt;%\n  st_geometry_type() %&gt;%\n  as.character() %&gt;%\n  unique()\n\ngeometry_types\n\n\n\n\nWe save this cleaned data as a rds file:\n\nwrite_rds(roadsbkk,\"data/rds/roadsbkk.rds\")\n\n\nroadsbkk &lt;- read_rds(\"data/rds/roadsbkk.rds\")\n\n\n\n\n\nWe carry some EDA to understand how the occurrences of road accidents could be influenced by different factors.\n\n\n\n\nCode\ntmap_mode('plot')\ntm_shape(provincedata32647) + \n  tm_polygons() +           \n  tm_shape(roadacc) + \n  tm_dots(col ='red') +\n  tm_shape(roadsbkk)+\n  tm_lines(col = 'black')\n\n\n\n\n\n\n\n\n\nAs seen from the map above, road accidents within the BMR seem to be more concentrated within the provinces on the right side (Bangkok, Pathum Thani and Samut Prakan). Plotting the distribution of road accidents across provinces, we note from the plot below that Bangkok has the highest occurrences of road accidents in the BMR, followed by Samut Prakan, Pathum Thani, Samut Sakhon, Nakhon Pathom and Nonthaburi.\n\n\nCode\nggplot(roadacc, aes(x = fct_reorder(province_en, province_en, .fun = length))) + \n  geom_bar(fill = \"skyblue\") +\n  labs(title = \"Distribution of Road Accidents across Provinces\", x = \"Province\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(roadacc, aes(x = fct_reorder(agency, agency, .fun = length))) + \n  geom_bar(fill = \"lightgreen\") +\n  labs(title = \"Distribution of Road Accidents by Agency\", x = \"Agency\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\nAs noted from the plot, the Department of Highways is responsible for the most occurrences of road accidents in the BMR, followed by Department of Rural Roads and Expressway Authority of Thailand.\n\n\n\nWe also analyse the road accidents by time, namely by year, by month, by day of week and by time of day.\n\n\n\n\n\nCode\nggplot(roadacc, aes(x = inc_year)) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Year\", x = \"Year\", y = \"Count\") +\n  facet_wrap(~province_en)+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\n\n\nWe note from above that the number of road accidents has generally been increasing in Bangkok and Samut Prakan from 2019 to 2022.\n\nThis is with the exception of a drop in 2021 in Bangkok - this could potentially be due to the surge of COVID-19 cases in Thailand in 2021 which led to a lockdown which meant that there were less tourists, vehicles and pedestrians on the roads, and lower occurrences of road accidents.\n\nWe note that the number of road accidents in Nonthaburi and Pathum Thani increased from 2019 to 2021 and fell in 2022.\nWe note that the number of road accidents in Samut Sakhon fell from 2019 to 2021 but increased in 2022.\nOf the 6 provinces, we note that only Nakhon Pathom experienced a fall in road accidents from 2019 to 2022.\n\n\n\n\n\n\n\n\n\nCode\nggplot(roadacc, aes(x = inc_month)) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Month\", x = \"Month\", y = \"Count\")+\n  scale_x_discrete(limits = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\")) +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\n\nBased on the plot above, most road accidents occur in Jan, Apr, Oct and Dec.\nWe also observe the data by month across the years using cycle plots that would enable us to observe cyclical/seasonal patterns, if present.\n\n\n\nTo plot the distribution of road accidents by months across the years, we create a roadacc_month file that groups the road accidents per month for each year.\n\n\nCode\nroadacc_month &lt;- roadacc %&gt;%\n  group_by(inc_year,inc_month) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\n\n\n\nCode\nwrite_rds(roadacc_month,\"data/rds/roadacc_month.rds\")\n\n\n\n\nCode\nroadacc_month &lt;- read_rds(\"data/rds/roadacc_month.rds\")\n\n\n\n\nCode\nhline.data &lt;- roadacc_month %&gt;%\n  group_by(inc_month) %&gt;%\n  summarise(avgvalue = mean(count))\n\nggplot(data = roadacc_month, aes(x = inc_year, y = count)) +\n  geom_line(aes(group = inc_month, colour = as.factor(inc_month))) +\n  geom_hline(aes(yintercept=avgvalue),\n             data=hline.data,\n             linetype=6,\n             colour=\"red\",\n             size=0.5)+\n  facet_wrap(~inc_month,scales = \"free_x\")+\n  labs(title = \"Road accidents by month from 2019 to 2022\",\n                   colour = \"Month\") +\n  xlab(\"Year\")+\n  ylab(\"Number of Road Accidents\")+\n  scale_color_brewer(palette = \"Paired\") + \n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nBased on the plot, we observe the following:\n\nApr, Oct and Dec have the highest average number of road accidents across the years\nOccurrences of road accidents in Jan and Feb seem to generally be decreasing over the years, with the number of road accidents in 2022 for both months falling below the average number of road accidents for the month across 2019 to 2022.\nOccurrences of road accidents in Jul, Aug, Oct to Dec seem to generally be increasing over the years. Based on this observation alone, the increase in road accidents could potentially be due to the rainy season between Jul to Oct and the presence of a higher population due to peak tourist seasons in Nov and Dec.\nOccurrences of road accidents in Mar to Jun and Sep generally do not fluctuate much over the years.\n\n\n\n\n\n\nCode\nroadacc_month_bkk &lt;- roadacc %&gt;%\n  filter(province_en==\"Bangkok\") %&gt;%\n  group_by(inc_year,inc_month) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\nroadacc_month_sp &lt;- roadacc %&gt;%\n  filter(province_en==\"Samut Prakan\") %&gt;%\n  group_by(inc_year,inc_month) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\nroadacc_month_n &lt;- roadacc %&gt;%\n  filter(province_en==\"Nonthaburi\") %&gt;%\n  group_by(inc_year,inc_month) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\nroadacc_month_pt &lt;- roadacc %&gt;%\n  filter(province_en==\"Pathum Thani\") %&gt;%\n  group_by(inc_year,inc_month) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\nroadacc_month_np &lt;- roadacc %&gt;%\n  filter(province_en==\"Nakhon Pathom\") %&gt;%\n  group_by(inc_year,inc_month) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\nroadacc_month_ss &lt;- roadacc %&gt;%\n  filter(province_en==\"Samut Sakhon\") %&gt;%\n  group_by(inc_year,inc_month) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\n\nSaving them as rds files:\n\n\nCode\nwrite_rds(roadacc_month_bkk,\"data/rds/roadacc_month_bkk.rds\")\nwrite_rds(roadacc_month_sp,\"data/rds/roadacc_month_sp.rds\")\nwrite_rds(roadacc_month_n,\"data/rds/roadacc_month_n.rds\")\nwrite_rds(roadacc_month_pt,\"data/rds/roadacc_month_pt.rds\")\nwrite_rds(roadacc_month_np,\"data/rds/roadacc_month_np.rds\")\nwrite_rds(roadacc_month_ss,\"data/rds/roadacc_month_ss.rds\")\n\n\nLoading the newly created rds files into R:\n\n\nCode\nroadacc_month_bkk &lt;- read_rds(\"data/rds/roadacc_month_bkk.rds\")\nroadacc_month_sp &lt;- read_rds(\"data/rds/roadacc_month_sp.rds\")\nroadacc_month_n &lt;- read_rds(\"data/rds/roadacc_month_n.rds\")\nroadacc_month_pt &lt;- read_rds(\"data/rds/roadacc_month_pt.rds\")\nroadacc_month_np &lt;- read_rds(\"data/rds/roadacc_month_np.rds\")\nroadacc_month_ss &lt;- read_rds(\"data/rds/roadacc_month_ss.rds\")\n\n\n\nBangkokSamut PrakanNonthaburiPathum ThaniNakhon PathomSamut Sakhon\n\n\n\n\nCode\nhline.data &lt;- roadacc_month_bkk %&gt;%\n  group_by(inc_month) %&gt;%\n  summarise(avgvalue = mean(count))\n\nggplot(data = roadacc_month_bkk, aes(x = inc_year, y = count)) +\n  geom_line(aes(group = inc_month, colour = as.factor(inc_month))) +\n  geom_hline(aes(yintercept=avgvalue),\n             data=hline.data,\n             linetype=6,\n             colour=\"red\",\n             size=0.5)+\n  facet_wrap(~inc_month,scales = \"free_x\")+\n  labs(title = \"Bangkok Road accidents by month from 2019 to 2022\",\n                   colour = \"Month\") +\n  xlab(\"Year\")+\n  ylab(\"Number of Road Accidents\")+\n  scale_color_brewer(palette = \"Paired\") + \n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nThe following observations were made:\n\nOccurrences of road accidents in Jan seem to be fluctuating, with the number of road accidents decreasing from 2019 to 2021 then increasing in 2022.\nOccurrences of road accidents in Feb seem to generally be decreasing over the years, with the number of road accidents in 2022 falling below the average number of road accidents for the month across 2019 to 2022.\nOccurrences of road accidents in Jul to Dec seem to generally be increasing over the years. Based on this observation alone, the increase in road accidents could potentially be due to the rainy season between Jul to Oct and the presence of a higher population due to peak tourist seasons in Nov and Dec.\nOccurrences of road accidents in Mar to Jun generally do not fluctuate much over the years.\n\n\n\n\n\nCode\nhline.data &lt;- roadacc_month_sp %&gt;%\n  group_by(inc_month) %&gt;%\n  summarise(avgvalue = mean(count))\n\nggplot(data = roadacc_month_sp, aes(x = inc_year, y = count)) +\n  geom_line(aes(group = inc_month, colour = as.factor(inc_month))) +\n  geom_hline(aes(yintercept=avgvalue),\n             data=hline.data,\n             linetype=6,\n             colour=\"red\",\n             size=0.5)+\n  facet_wrap(~inc_month,scales = \"free_x\")+\n  labs(title = \"Samut Prakan Road accidents by month from 2019 to 2022\",\n                   colour = \"Month\") +\n  xlab(\"Year\")+\n  ylab(\"Number of Road Accidents\")+\n  scale_color_brewer(palette = \"Paired\") + \n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nThe following observations were made:\n\nOccurrences of road accidents in Jan seem to generally be decreasing over the years, with the number of road accidents in 2022 falling below the average number of road accidents for the month across 2019 to 2022.\nOccurrences of road accidents in Apr to Aug and Nov to Dec seem to generally be increasing over the years. Based on this observation alone, the increase in road accidents could potentially be due to the hotter and rainier seasons in Apr to Aug and the presence of a higher population due to peak tourist seasons in May, Jun, Nov and Dec.\nOccurrences of road accidents in Feb to Mar and Sep to Oct increased initially then fell towards 2022.\n\n\n\n\n\nCode\nhline.data &lt;- roadacc_month_n %&gt;%\n  group_by(inc_month) %&gt;%\n  summarise(avgvalue = mean(count))\n\nggplot(data = roadacc_month_n, aes(x = inc_year, y = count)) +\n  geom_line(aes(group = inc_month, colour = as.factor(inc_month))) +\n  geom_hline(aes(yintercept=avgvalue),\n             data=hline.data,\n             linetype=6,\n             colour=\"red\",\n             size=0.5)+\n  facet_wrap(~inc_month,scales = \"free_x\")+\n  labs(title = \"Nonthaburi Road accidents by month from 2019 to 2022\",\n                   colour = \"Month\") +\n  xlab(\"Year\")+\n  ylab(\"Number of Road Accidents\")+\n  scale_color_brewer(palette = \"Paired\") + \n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nThe following observations were made:\n\nOccurrences of road accidents in Feb seem to generally be decreasing over the years.\nOccurrences of road accidents in Jan seem to generally be increasing over the years.\nOccurrences of road accidents in Jul, Aug, Nov and Dec increased initially then fell towards 2022.\nOccurrences of road accidents in Mar to Jun, Sep and Oct seem to fluctuate generally around the monthly average across the years.\nAs compared to Bangkok, Samut Prakan and Pathum Thani, the number of road accidents in Nonthaburi seem to be lesser, indicating that roads are more well managed in Nonthaburi.\n\n\n\n\n\nCode\nhline.data &lt;- roadacc_month_pt %&gt;%\n  group_by(inc_month) %&gt;%\n  summarise(avgvalue = mean(count))\n\nggplot(data = roadacc_month_pt, aes(x = inc_year, y = count)) +\n  geom_line(aes(group = inc_month, colour = as.factor(inc_month))) +\n  geom_hline(aes(yintercept=avgvalue),\n             data=hline.data,\n             linetype=6,\n             colour=\"red\",\n             size=0.5)+\n  facet_wrap(~inc_month,scales = \"free_x\")+\n  labs(title = \"Pathum Thani Road accidents by month from 2019 to 2022\",\n                   colour = \"Month\") +\n  xlab(\"Year\")+\n  ylab(\"Number of Road Accidents\")+\n  scale_color_brewer(palette = \"Paired\") + \n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nThe following observations were made:\n\nOccurrences of road accidents in Jun to Aug and Oct seem to generally be increasing over the years. This could be explained by the rainier seasons in Thailand during this period.\nOccurrences of road accidents in Mar, Apr, May and Nov increased initially then fell towards 2022.\nOccurrences of road accidents in Jan, Feb, Sep and Dec seem to fluctuate generally around the monthly average across the years.\n\n\n\n\n\nCode\nhline.data &lt;- roadacc_month_np %&gt;%\n  group_by(inc_month) %&gt;%\n  summarise(avgvalue = mean(count))\n\nggplot(data = roadacc_month_np, aes(x = inc_year, y = count)) +\n  geom_line(aes(group = inc_month, colour = as.factor(inc_month))) +\n  geom_hline(aes(yintercept=avgvalue),\n             data=hline.data,\n             linetype=6,\n             colour=\"red\",\n             size=0.5)+\n  facet_wrap(~inc_month,scales = \"free_x\")+\n  labs(title = \"Nakhon Pathom Road accidents by month from 2019 to 2022\",\n                   colour = \"Month\") +\n  xlab(\"Year\")+\n  ylab(\"Number of Road Accidents\")+\n  scale_color_brewer(palette = \"Paired\") + \n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nThe following observations were made:\n\nOccurrences of road accidents in Jan to Mar, May, Jul to Dec seem to generally be decreasing over the years.\nOccurrences of road accidents in Apr and Jun seem to be fluctuating around the monthly average across the years.\nBased on these observations, it seems like road accidents are much lesser in Nakhon Pathom as compared to the other provinces and it is the only province with no obvious increase in occurrences of road accidents across the years, this indicates that the province is more well managed as compared to the other 5 provinces.\n\n\n\n\n\nCode\nhline.data &lt;- roadacc_month_ss %&gt;%\n  group_by(inc_month) %&gt;%\n  summarise(avgvalue = mean(count))\n\nggplot(data = roadacc_month_ss, aes(x = inc_year, y = count)) +\n  geom_line(aes(group = inc_month, colour = as.factor(inc_month))) +\n  geom_hline(aes(yintercept=avgvalue),\n             data=hline.data,\n             linetype=6,\n             colour=\"red\",\n             size=0.5)+\n  facet_wrap(~inc_month,scales = \"free_x\")+\n  labs(title = \"Samut Sakhon Road accidents by month from 2019 to 2022\",\n                   colour = \"Month\") +\n  xlab(\"Year\")+\n  ylab(\"Number of Road Accidents\")+\n  scale_color_brewer(palette = \"Paired\") + \n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nThe following observations were made:\n\nOccurrences of road accidents in Jan, Feb, Apr and Jun seem to generally be decreasing over the years.\nOccurrences of road accidents in Jul to Dec seem to be increasing over the years. Based on this observation alone, the increase in road accidents could potentially be due to the hotter and rainier seasons in Jul to Oct and the presence of a higher population due to peak tourist seasons in Nov and Dec.\nOccurrences of road accidents in Mar and May seem to fluctuate generally around the monthly average across the years.\n\n\n\n\n\n\n\n\nOverallBreakdown by province\n\n\n\n\nCode\nggplot(roadacc, aes(x = inc_dayofweek)) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Day of Week\", x = \"Day of Week\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\n\nWe note from the plot that road accidents occur mostly on Fri and Sat and this could be explained by these days being the start of the weekend, and more people and vehicles may be out on the roads and in public places, which increase the chances of road accidents occuring.\n\n\n\n\nCode\nggplot(roadacc, aes(x = inc_dayofweek)) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Day of Week\", x = \"Day of Week\", y = \"Count\") +\n  facet_wrap(~province_en, scales = \"fixed\")\n\n\n\n\n\n\n\n\n\nCode\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\nList of 1\n $ axis.text.x:List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : num 8\n  ..$ hjust        : num 1\n  ..$ vjust        : NULL\n  ..$ angle        : num 90\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi FALSE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n - attr(*, \"class\")= chr [1:2] \"theme\" \"gg\"\n - attr(*, \"complete\")= logi FALSE\n - attr(*, \"validate\")= logi TRUE\n\n\nAcross the provinces, it is obvious that road accidents occur most often on Fri and Sat in Bangkok. However, for the other provinces, the difference is not so obvious and it seems like the occurrences of road accidents are more well spread out across the week. This could be explained by Bangkok being a prime tourist destination and major urban centre, and it could attract a greater crowd from within and outside of Thailand over the weekend, hence leading to greater traffic on the road and higher chances of road accidents occurring.\n\n\n\n\n\n\n\nOverallBreakdown by province\n\n\n\n\nCode\nggplot(roadacc, aes(x = inc_time)) + \n  geom_histogram(binwidth = 1, fill = \"slategrey\", color = \"black\") +\n  scale_x_continuous(breaks = seq(0, 23, 1))+\n  labs(title = \"Distribution of Road Accidents by Time of Day\", \n       x = \"Time of Day\",\n       y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\n\nBased on the chart, it is observed that road accidents occur more often between 7am to 11pm as compared to 12 midnight to 6am. This could be explained by 7am to 11pm being the time when most are awake for their daily activities and the roads are likely to have higher activity, which result in higher chances of occurrences of road accidents. The top two timings at which road accidents occur are at 9am and 7pm and this could be explained by it being the peak hour at which the general population i.e. workers, school students get to and get off work and school.\n\n\n\n\nCode\nggplot(roadacc, aes(x = inc_time)) + \n  geom_histogram(binwidth = 1, fill = \"slategrey\", color = \"black\") +\n  scale_x_continuous(breaks = seq(0, 23, 1))+\n  labs(title = \"Distribution of Road Accidents by Time of Day\", \n       x = \"Time of Day\",\n       y = \"Count\") +\n  facet_wrap(~province_en, scales = \"fixed\")+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\n\nBangkok, Samut Prakan and Pathum Thani also seem to follow the general observation seen under the overall chart for occurrences of road accidents by time day i.e. road accidents generally occur more during 7am to 11pm and peak timings are during the going to and getting off work/school hours at around 9am and 7pm. This is less obvious for the other provinces.\n\n\n\n\n\n\n\nOverallBreakdown by Province\n\n\n\n\nCode\nggplot(roadacc, aes(x = fct_reorder(weather_condition, weather_condition, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Weather Condition\", x = \"Weather Condition\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\n\nBased on the plot, it can be seen that road accidents most frequently occur during clear weather conditions followed by rainy and then dark conditions. This could imply that road accidents are more heavily influenced by other behavioural or environmental factors besides the weather condition.\n\n\n\n\nCode\nggplot(roadacc, aes(x = fct_reorder(weather_condition, weather_condition, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Weather Condition\", x = \"Weather Condition\", y = \"Count\") +\n  facet_wrap(~province_en)+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\n\nAcross provinces, similar observations were made as it was observed that road accidents mostly occur during clear weather conditions, followed by rainy and then dark weather conditions.\n\n\n\n\n\n\n\nOverallBreakdown by Province\n\n\n\n\nCode\nggplot(roadacc, aes(x = fct_reorder(road_description, road_description, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Road Description\", x = \"Road Description\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\n\nBased on the plot, road accidents mostly occur on straight roads, roads categorised as other, followed by wide curve and then grade-separated intersection/ramps. Combining this observation with that for weather conditions - that road accidents mostly occur during clear weather conditions and straight roads - which are conditions under which one would not expect road accidents to occur, it could imply that the occurrence of road accidents are more heavily influenced by behavioural factors.\n\n\n\n\nCode\nggplot(roadacc, aes(x = fct_reorder(road_description, road_description, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Road Description\", x = \"Road Description\", y = \"Count\") +\n  facet_wrap(~province_en)+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\n\nAcross provinces, similar observations were made as it was observed that road accidents mostly occur on straight roads, roads categorised as other, followed by wide curve and then grade-separated intersection/ramps.\n\n\n\n\n\n\n\nOverallBreakdown by Province\n\n\n\n\nCode\nggplot(roadacc, aes(x = fct_reorder(slope_description, slope_description, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Slope Description\", x = \"Slope Description\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\n\nBased on the plot, road accidents where there are no slopes. Combining this observation with the above observations - that road accidents mostly occur during clear weather conditions and on straight roads with no slope - which are conditions under which one would not expect road accidents to occur, it could imply that the occurrence of road accidents are more heavily influenced by behavioural factors.\n\n\n\n\nCode\nggplot(roadacc, aes(x = fct_reorder(slope_description, slope_description, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Slope Description\", x = \"Slope Description\", y = \"Count\") +\n  facet_wrap(~province_en)+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\n\nAcross provinces, similar observations were made as it was observed that road accidents mostly occur on roads with no slope.\n\n\n\n\n\n\n\nOverallBreakdown by Province\n\n\n\n\nCode\nggplot(roadacc, aes(x = fct_reorder(vehicle_type, vehicle_type, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Vehicle Type\", x = \"Vehicle Type\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\n\nBased on the plot, road accidents mostly involve private/passenger car, followed by 4-wheel pickup truck, motorcycle as the top 3 vehicles. These are small to mid-sized vehicles.\n\n\nWe do a more detailed analysis at the province level:\n\n\nCode\nggplot(roadacc, aes(x = fct_reorder(vehicle_type, vehicle_type, .fun = length))) +\n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Vehicle Type\", x = \"Vehicle Type\", y = \"Count\") +\n  facet_wrap(~province_en)+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\n\nBangkok and Samut Prakan follow the same general observation seen under the overall chart for vehicle type involved in road accidents i.e. road accidents mostly involve private/passenger car, followed by 4-wheel pickup truck, motorcycle as the top 3 vehicles. However the following were observed for the other provinces:\n\nRoad accidents in Nakhon Pathom, Pathum Thani and Samut Sakhon mostly involved 4-wheel pickup truck\n4-wheel pickup truck is not one of the top 3 vehicles involved in road accidents in Nonthaburi\n\n\n\n\n\n\n\n\n\nCode\nggplot(roadacc, aes(x = fct_reorder(presumed_cause, presumed_cause, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Presumed Cause\", x = \"Presumed Cause\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n\n\n\n\n\n\n\n\n\nThe top presumed cause for accident is speeding.\n\n\n\n\nOverallBreakdown by Province\n\n\n\n\nCode\nggplot(roadacc, aes(x = fct_reorder(accident_type, accident_type, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Accident Type\", x = \"Accident Type Cause\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n\n\n\n\n\n\n\n\n\nThe top two accident type for road accidents are rear-end collision and rollover/fallen on straight road.\n\n\n\n\nCode\nggplot(roadacc, aes(x = fct_reorder(accident_type, accident_type, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Accident Type\", x = \"Accident Type Cause\", y = \"Count\") +\n  facet_wrap(~province_en)+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n\n\n\n\n\n\n\n\n\nBangkok, Pathum Thani and Samut Prakan follow the same general observation seen under the overall chart that the top two accident type for road accidents are rear-end collision followed by rollover/fallen on straight road. For Nakhon Pathom, Nonthaburi and Samut Sakhon, the top accident type is rollover/fallen on straight road followed by rear-end collision.\n\n\n\n\n\n\n\n\nCode\nsummary_stats &lt;- roadacc %&gt;%\n  group_by(province_en) %&gt;%\n  summarise(\n    median_vehicles = median(number_of_vehicles_involved, na.rm = TRUE),\n    mean_vehicles = mean(number_of_vehicles_involved, na.rm = TRUE),\n    min_vehicles = min(number_of_vehicles_involved,na.rm = TRUE),\n    q25 = quantile(number_of_vehicles_involved, 0.25, na.rm = TRUE),\n    q75 = quantile(number_of_vehicles_involved, 0.75, na.rm = TRUE),\n    max_vehicles = max(number_of_vehicles_involved,na.rm = TRUE),\n    .groups = 'drop'\n  ) %&gt;%\n  mutate(label = paste0(\"Min: \", round(min_vehicles,1),\n                        \"\\nq25: \", round(q25,1),\n                        \"\\nMedian: \", round(median_vehicles, 1), \n                        \"\\nMean: \", round(mean_vehicles, 1),\n                        \"\\nq75: \", round(q75,1),\n                        \"\\nMax vehicles: \", round(max_vehicles,1)\n                        ))\n\nggplot(roadacc,\n       aes(x=province_en,\n           y=number_of_vehicles_involved,\n           fill = province_en))+\n  geom_boxplot(width = .20,\n               outlier.shape = NA)+\n  geom_text(data = summary_stats, \n            aes(x = province_en, y = q75, label = label), \n            vjust = -0.5, \n            size = 3)+\n  ggtitle(\"Distribution of Road Accidents by Number of Vehicles Involved\") +\n  labs(title = \"Distribution of Road Accidents by Number of Vehicles Involved\", x = \"Number of Vehicles Involved\", y = \"Count\")+\n  theme(legend.position = \"none\") +\n  scale_fill_viridis_d()\n\n\n\n\n\n\n\n\n\nAcross the provinces, the median number of vehicles involved in road accidents are either one or two. However, the maximum number of vehicles that had been involved in road accidents were 12 (Pathum Thani), 11 (Bangkok), 10 (Samut Prakan), 9 (Nonthaburi and Samut Sakhon) and 8 (Nakhon Pathom), indicating that while not common, there are large-scale incidents involving large number of vehicles.\n\n\n\n\n\nCode\nsummary_stats &lt;- roadacc %&gt;%\n  group_by(province_en) %&gt;%\n  summarise(\n    median_fatalities = median(number_of_fatalities, na.rm = TRUE),\n    mean_fatalities = mean(number_of_fatalities, na.rm = TRUE),\n    min_fatalities = min(number_of_fatalities,na.rm = TRUE),\n    q25 = quantile(number_of_fatalities, 0.25, na.rm = TRUE),\n    q75 = quantile(number_of_fatalities, 0.75, na.rm = TRUE),\n    max_fatalities = max(number_of_fatalities,na.rm = TRUE),\n    .groups = 'drop'\n  ) %&gt;%\n  mutate(label = paste0(\"Min: \", round(min_fatalities,1),\n                        \"\\nq25: \", round(q25,1),\n                        \"\\nMedian: \", round(median_fatalities, 1), \n                        \"\\nMean: \", round(mean_fatalities, 1),\n                        \"\\nq75: \", round(q75,1),\n                        \"\\nMax fatalities: \", round(max_fatalities,1)\n                        ))\n\nggplot(roadacc,\n       aes(x=province_en,\n           y=number_of_fatalities,\n           fill = province_en))+\n  geom_boxplot(width = .20,\n               outlier.shape = NA)+\n  geom_text(data = summary_stats, \n            aes(x = province_en, y = q75, label = label), \n            vjust = -0.5, \n            size = 3)+\n  ggtitle(\"Distribution of Road Accidents by Number of Fatalities\") +\n  labs(title = \"Distribution of Road Accidents by Number of Fatalities\", x = \"Number of Fatalities\", y = \"Count\")+\n  theme(legend.position = \"none\") +\n  scale_fill_viridis_d()\n\n\n\n\n\n\n\n\n\nAcross the provinces, the median number of fatalities is 0. However, while few, there are road accidents that occur with higher number of fatalities - the highest being 13 (Samut Prakan), followed by 6 (Pathum Thani), 3 (Bangkok, Nonthaburi) and 2 (Nakhon Pathom and Samut Sakhon).\n\n\n\n\n\nCode\nsummary_stats &lt;- roadacc %&gt;%\n  group_by(province_en) %&gt;%\n  summarise(\n    median_injuries = median(number_of_injuries, na.rm = TRUE),\n    mean_injuries = mean(number_of_injuries, na.rm = TRUE),\n    min_injuries = min(number_of_injuries,na.rm = TRUE),\n    q25 = quantile(number_of_injuries, 0.25, na.rm = TRUE),\n    q75 = quantile(number_of_injuries, 0.75, na.rm = TRUE),\n    max_injuries = max(number_of_injuries,na.rm = TRUE),\n    .groups = 'drop'\n  ) %&gt;%\n  mutate(label = paste0(\"Min: \", round(min_injuries,1),\n                        \"\\nq25: \", round(q25,1),\n                        \"\\nMedian: \", round(median_injuries, 1), \n                        \"\\nMean: \", round(mean_injuries, 1),\n                        \"\\nq75: \", round(q75,1),\n                        \"\\nMax injuries: \", round(max_injuries,1)\n                        ))\n\nggplot(roadacc,\n       aes(x=province_en,\n           y=number_of_injuries,\n           fill = province_en))+\n  geom_boxplot(width = .20,\n               outlier.shape = NA)+\n  geom_text(data = summary_stats, \n            aes(x = province_en, y = q75, label = label), \n            vjust = -0.5, \n            size = 3)+\n  ggtitle(\"Distribution of Road Accidents by Number of Injuries\") +\n  labs(title = \"Distribution of Road Accidents by Number of Injuries\", x = \"Number of Injuries\", y = \"Count\")+\n  theme(legend.position = \"none\") +\n  scale_fill_viridis_d()\n\n\n\n\n\n\n\n\n\nAcross the provinces, the median number of injuries is 0. However, while few, there are road accidents that occur with higher number of injuries - the highest being 51 (Pathum Thani), followed by 31 (Bangkok), 30 (Nakhon Pathom), 28 (Samut Prakan), 14 (Samut Sakhon) and 11 (Nonthaburi).\nTo minimise the slow loading of the page, the Take-home Exercise 1 has been divided into 2 parts - please refer to Part 1B which covers spatial point pattern analysis."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01A.html#background",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01A.html#background",
    "title": "Take-home Exercise 1A",
    "section": "",
    "text": "According to the World Health Organisation (WHO), road traffic accidents cause the death of approximately 1.19 million people each year and leave between 20 to 50 million people with non-fatal injuries. Vulnerable road users, such as pedestrians, cyclists and motorcyclists, make up more than half of all road traffic deaths.\nRoad traffic injuries are the leading cause of death for children and young adults aged 5 to 29, however two-thirds of road traffic fatalities occur among people of working ages, from 18 to 59 years. Further, nine in 10 fatalities on the roads occur in low- and middle-income countries, even though these countries make up only around 60% of the world’s vehicles.\nBesides human suffering, road traffic injuries also result in a heavy economic burden on victims and their families, through treatment costs for the injured and loss of productivity of those killed or disabled. More broadly, road traffic injuries have a serious impact on national economies, costing countries 3% of their annual gross domestic product.\nAccording to the WHO, Thailand’s roads are the deadliest in Southeast Asia and among the worst in the world - about 20,000 people die in road accidents each year, or about 56 deaths a day.\nBetween 2014 and 2021, Thailand experienced a notable increase in accident frequencies. Specifically, 19% of all accidents in Thailand occurred on the national highways, which make up the primary public thoroughfares connecting various regions, provinces, districts, and significant locations within a comprehensive network. Within the broader context of accidents across the country, there existed a considerable 66% likelihood of encountering accident-prone zones, often termed as ‘black spots’ which are distributed as follows: 66% on straight road segments, 13% at curves, 6% at median points of cross-shaped intersections, 5% at T-shaped intersections and Y-shaped intersections, 3% at cross-shaped intersections, 2% on bridges, and 2% on steep slopes."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01A.html#objectives",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01A.html#objectives",
    "title": "Take-home Exercise 1A",
    "section": "",
    "text": "By and large, road traffic accidents can be attributed by two major factors, namely behavioural and environmental factors.\n\nBehavioural factors in driving are considered to be major causes of traffic accidents either in direct or indirect manner (Lewin, 1982). These factors can be further grouped into driver behavior (driver/driving style) and driver performance (driver/driving skills) (Elander, West, & French, 1993).\nEnvironmental factors, on the other hand, includes but not limited to weather conditions such as poor visibility during heavy rain or fogs as well as road conditions such as sharp bends, slippery slopes, and blind spots.\n\nPrevious studies have demonstrated the significant potential of Spatial Point Patterns Analysis (SPPA) in exploring and identifying factors influencing road traffic accidents. However, these studies often focus solely on either behavioral or environmental factors, with limited consideration of temporal factors such as season, day of the week, or time of day.\nIn view of this, in this hands-on exercise, we will determine factors that affect road traffic accidents in the Bangkok Metropolitan Region (BMR) by employing both spatial and spatio-temporal point patterns analysis methods.\nThe specific objectives are as follows:\n\nTo visualize the spatio-temporal dynamics of road traffic accidents in BMR using appropriate statistical graphics and geovisualization methods.\nTo conduct detailed spatial analysis of road traffic accidents using appropriate Network Spatial Point Patterns Analysis methods.\nTo conduct detailed spatio-temporal analysis of road traffic accidents using appropriate Temporal Network Spatial Point Patterns Analysis methods."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01A.html#installing-and-launching-r-packages",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01A.html#installing-and-launching-r-packages",
    "title": "Take-home Exercise 1A",
    "section": "",
    "text": "Key packages that are installed are:\n\nsf for importing, managing, and processing vector-based geospatial data, and\nspatstat, which has a wide range of useful functions for point pattern analysis. In this hands-on exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer\nraster which reads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster). In this hands-on exercise, it will be used to convert image output generate by spatstat into raster format.\nmaptools which provides a set of tools for manipulating geographic data. In this hands-on exercise, we mainly use it to convert Spatial objects into ppp format of spatstat.\ntmap which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using leaflet API.\ntidyverse for performing data science tasks such as importing, wrangling and visualising data.\nspNetwork which provides functions to perform Spatial Point Patterns Analysis such as kernel density estimation (KDE) and K-function on network. It can also be used to build spatial matrices (`listw’ objects like in ‘spdep’ package) to conduct any kind of traditional spatial analysis with spatial weights based on reticular distances.\n\nThe packages are loaded with the following code chunk:\n\npacman::p_load(sf,spatstat,raster,maptools,tmap,tidyverse,spNetwork,DT,forcats,ggthemes,plotly)\n\nFor any simulation steps carried out in this exercise, we set a seed to ensure reproducibility:\n\nset.seed(1234)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01A.html#data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01A.html#data",
    "title": "Take-home Exercise 1A",
    "section": "",
    "text": "For the purpose of this exercise, three basic data sets are used:\n\nThailand Road Accident [2019-2022] on Kaggle - comprised records of road accidents in Thailand from ~2019 to 2022, based on information provided by the Office of the Permanent Secretary, Ministry of Transport.\nThailand - Subnational Administrative Boundaries on HDX\nThailand Roads (OpenStreetMap Export) on HDX"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01A.html#importing-cleaning-and-wrangling-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01A.html#importing-cleaning-and-wrangling-data",
    "title": "Take-home Exercise 1A",
    "section": "",
    "text": "The data is imported using the code below:\n\nroadacc &lt;- read_csv(\"data/rawdata/thai_road_accident_2019_2022.csv\")\n\nTaking a glimpse at the data to determine the fields in the data:\n\nglimpse(roadacc)\n\nThere are 81735 rows and 18 variables. Further details about the important variables that would be needed for analysis can be found in the dropdown box below:\n\n\n\n\n\n\nMore information about variables for analysis\n\n\n\n\n\n\n\n\n\n\n\n\n\nField\nDescription\nPurpose of data i.e. what it might indicate\n\n\n\n\nincident_datetime\nThe date and time of the accident occurrence\nwhether accidents tend to occur at specific:\n\nmonths\nday of week\ntime of the day\n\n\n\nreport_datetime\nThe date and time when the accident was reported\nefficacy at which accident was reported could indicate:\n\nhow busy the road segment is\nhow tightly the road is being monitored/ whether there is a lapse in the management of the road\n\n\n\nprovince_en\nThe name of the province in Thailand, written in English\nsupports the filtering of data to just BMR\n\n\nagency\nThe government agency responsible for the road and traffic management\npinpoints the responsible government agency, could indicate whether there is a need for government agency to take corrective actions\n\n\nroute\nThe route or road segment where the accident occurred\nwhile the data can be used to determine frequency of incident at different locations, it is not useful for our case as it’s in the Thai language\n\n\nvehicle_type\nThe type of vehicle involved in the accident\ncan determine frequency of vehicle types involved in accidents\n\n\npresumed_cause\nThe presumed cause or reason for the accident\ncan determine distribution of cause for accidents\n\n\naccident_type\nThe type or nature of the accident\ncan determine distribution of nature of accidents\n\n\nnumber_of_vehicles_involved\nThe number of vehicles involved in the accident\ncan determine the scale of accidents at different locations i.e. how severe/deadly\n\n\nnumber_of_fatalities\nThe number of fatalities resulting from the accident\ncan determine the scale of accidents at different locations i.e. how severe/deadly\n\n\nnumber_of_injuries\nThe number of injuries resulting from the accident\ncan determine the scale of accidents at different locations i.e. how severe/deadly\n\n\nweather_condition\nThe weather condition at the time of the accident\ncan determine how much weather conditions can affect the occurrence of accidents\n\n\nlatitude\nThe latitude coordinate of the accident location\nused for mapping and for analysis with other datasets\n\n\nlongitude\nThe longitude coordinate of the accident location\nused for mapping and for analysis with other datasets\n\n\nroad_description\nThe description of the road type or configuration where the accident occurred\ncan determine how road types can affect the occurrence of accidents\n\n\nslope_description\nThe description of the slope condition at the accident location\ncan determine how presence of slopes can affect the occurrence of accidents\n\n\n\n\n\n\n\n\n\nWe will first drop “province_th” as it indicates the provinces in the Thai language.\n\nroadacc &lt;- roadacc[, !names(roadacc) %in% c(\"province_th\",\"route\")]\n\n\n\n\nWe then determine the unique provinces within the dataset and scan through the province names (i.e. in case there are any entries that refer to the same province but are spelt differently/have spelling mistakes) before filtering the data to just include provinces that are within the BMR:\n\nunique_provinces &lt;- roadacc %&gt;% \n  distinct(province_en) %&gt;%\n  arrange(province_en)\n\nBased on observations, there were no spelling mistakes. As such we can proceed with filtering the data to keep our region of interest which comprises Bangkok and five adjacent provinces of Nakhon Pathom, Nonthaburi, Pathum Thani, Samut Prakan and Samut Sakhon:\n\nroadacc &lt;- roadacc %&gt;% \n  filter(province_en %in% c(\"Bangkok\", \"Nakhon Pathom\", \"Nonthaburi\", \"Pathum Thani\",\"Samut Prakan\",\"Samut Sakhon\"))\n\nThis leaves the data with 13336 rows.\n\n\n\nWe further clean the data by removing rows with missing data:\n\nroadacc &lt;- roadacc %&gt;%\n  drop_na()\n\n\n\n\nWe also check if there are duplicate entries in the dataset:\n\nroadacc$acc_code[duplicated(roadacc$acc_code) == TRUE]\n\nThere are no duplicate entries.\n\n\n\n\n\n\nIn-class notes from Prof Kam:\n\n\n\nDuring class, Prof Kam had advised to study the data carefully and shared that it was important to filter out data with incomplete coordinates (missing either longitude or latitude or both) and shared that one way to do it was via the code below:\n\nroadacc &lt;- roadacc %&gt;%\n  filter(!is.na(longitude) & longitude != \"\",\n         !is.na(latitude) & latitude != \"\")\n\nAs with the drop_na() code above, this way will also leave just 12986 rows of data as the missing data were found in either the longitude or latitude variables.\n\n\n\n\n\nWe convert roadacc data frame into a simple feature data frame and also transform the data from geographic coordinate system (EPSG: 4326 WGS84 Geographic Coordinate System) to projected coordinate system:\n\nroadacc &lt;- st_as_sf(roadacc, \n                    coords = c(\"longitude\", \"latitude\"),\n                    crs=4326) %&gt;%\n  st_transform(crs = 32647)\n\nBased on the summary statistics of roadacc above, it is noted that the minimum longitude is 99.85° and maximum longitude is 100.94°. While there are 2 possible projected coordinate systems for Thailand, EPSG 32647 and 32648, the appropriate projected coordinate system to transform the data to would be EPSG 32647 as the minimum and maximum longitude of roadacc falls within EPSG 32467’s area of use (between 96°E and 102°E). A comparison of the area of use for both projected coordinate systems is shown below:\n\n\n\n\nEPSG 32647\nEPSG 32648\n\n\n\n\nArea of use\nBetween 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\nBetween 102°E and 108°E, northern hemisphere between equator and 84°N, onshore and offshore. Cambodia. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Russian Federation. Singapore. Thailand. Vietnam.\n\n\n\n\n\n\nThe incident_datetime and report_datetime variables are in datetime field, we hence utilise these variables and the lubridate() function to generate new variables that represent:\n\nmonth: “inc_month”\nday of week: “inc_dayofweek”\ntime of day: “inc_time”\n\n\nroadacc &lt;- roadacc %&gt;%\n  mutate(inc_year = year(incident_datetime)) %&gt;%\n  mutate(inc_month = month(incident_datetime,\n                       label = TRUE,\n                       abbr = TRUE)) %&gt;%\n  mutate(inc_dayofweek = wday(incident_datetime,\n                              week_start = getOption(\"lubridate.week.start\", 1),\n                              label = TRUE,\n                              abbr = TRUE)) %&gt;%\n  mutate(inc_time = hour(incident_datetime))\n\n\n\n\n\n\n\nIn-class notes from Prof Kam:\n\n\n\nNote that we can generate month in numbers or in factor format via:\n\nroadacc &lt;- roadacc %&gt;%\n  mutate(Month_num = month(incident_datetime)) %&gt;%\n  mutate(Month_fac = month(incident_datetime,\n                       label = TRUE,\n                       abbr = TRUE))\n\n\n\nWe also determine the gap between the incident time and reporting time and create a new variable “timegap” in hours unit:\n\nroadacc$timegap &lt;- time_length(roadacc$report_datetime - roadacc$incident_datetime, \"hours\")\n\nLogically, the date and time when the accident was reported should be after the date and time of the accident occurrence. Looking at the summary statistics below, there are data entries that could have been erroneously recorded resulting in a negative time gap between report time and incident time (i.e. report time was earlier than incident time). As such, the data was further filtered to remove erroneous data to avoid affecting the analysis:\n\nsummary(roadacc$timegap)\n\n\nroadacc &lt;- roadacc %&gt;%\n  filter(timegap &gt;= 0)\n\nThis leaves us with 12985 rows.\n\n\n\nWe then save this cleaned data as a rds file:\n\nwrite_rds(roadacc,\"data/rds/roadacc.rds\")\n\n\nroadacc &lt;- read_rds(\"data/rds/roadacc.rds\")\n\n\n\n\n\n\n\nIn-class notes from Prof Kam:\n\n\n\n\nIt is good practice to save cleaned file as a new rds file via write_rds() to avoid re-running the data cleaning and wrangling codes. write_rds() will take care of all the objects within the dataset. Once the file is saved, we can add “#| eval: false” to the data cleaning and wrangling codes to avoid re-running them.\n\n\n\n\n\n\nThe data has different files providing details of the administrative boundaries of Thailand at different administrative levels:\n\nLevel 0 (country)\nLevel 1 (province)\nLevel 2 (district)\nLevel 3 (sub-district, tambon)\n\nAs our area of interest is at Level 1 (province level), we will utilise “tha_admbnda_adm1_rtsd_20220121” that reflects details at province levels and import the data using the code chunk below:\n\nprovincedata = st_read(dsn = \"data/rawdata\", \n                  layer = \"tha_admbnda_adm1_rtsd_20220121\")\n\nWe note from the above that it is a multipolygon feature data frame. We note that there are 77 features and 16 fields, and the data is in WGS84 geographic coordinate system.\nWe then take a glimpse of the data:\n\nglimpse(provincedata)\n\n\n\n\nWe note from a glimpse of the data above that there are only a few pertinent fields that we require for our analysis, specifically:\n\nADM1_EN: province name in english\nShape_Leng\nShape_Area\ngeometry\n\nWe hence filter the data to only comprise these fields to make the data frame more manageable:\n\nprovincedata &lt;- provincedata %&gt;%\n  select(\"ADM1_EN\", \"Shape_Leng\",\"Shape_Area\",\"geometry\")\n\n\n\n\nWe also filter to keep only data that are relevant to our area of interest which is BMR:\n\nprovincedata &lt;- provincedata %&gt;% \n  filter(ADM1_EN %in% c(\"Bangkok\", \"Nakhon Pathom\", \"Nonthaburi\", \"Pathum Thani\",\"Samut Prakan\",\"Samut Sakhon\"))\n\nThis leaves 6 rows of data and 4 variables.\n\n\n\nFrom the code chunk below, it is noted that the EPSG code for the selectedboundaries data frame is EPSG: 4326:\n\nst_crs(provincedata)\n\nWe will need to reproject provincedata from EPSG code to EPSG: 32647 which is the projected coordinate system to use for BMR, our area of interest:\n\nprovincedata32647 &lt;- st_transform(provincedata, \n                              crs = 32647)\n\nWe check if the EPSG code has been correctly assigned:\n\nst_crs(provincedata32647)\n\n\n\n\nWe save this cleaned data as a rds file:\n\nwrite_rds(provincedata32647,\"data/rds/provincedata32647.rds\")\n\n\nprovincedata32647 &lt;- read_rds(\"data/rds/provincedata32647.rds\")\n\nWe visualise our provincedata32647:\n\ntmap_mode('plot')\ntm_shape(provincedata32647)+\n  tm_polygons()\n\n\n\n\n\n\n\n\n\n\n\nWe import the data as follows:\n\nroadlines = st_read(dsn = \"data/rawdata\",\n                    layer = \"hotosm_tha_roads_lines_shp\")\n\nWe then glimpse at the data:\n\nglimpse(roadlines)\n\n\nst_geometry(roadlines)\n\nThe dataset is of the multilinestring geometry and is very large, with 2792590 rows and 15 variables but we only need to extract relevant information that lie within the BMR for analysis.\n\n\n\nBased on the code chunk below, it is noted that the coordinate system of the roadlines data is missing.\n\nst_crs(roadlines)\n\nBased on the values of the geometry in roadlines, the coordinates seem to be in geographic (latitude/longitude) form, in degrees, typically in a CRS like EPSG:4326 (WGS 84) used for global geographic coordinates. We hence assign the missing EPSG code using the code chunk below:\n\nroadlines4326 &lt;- st_set_crs(roadlines,4326)\n\nWe check the CRS using the code chunk below:\n\nst_crs(roadlines4326)\n\nFor analysis, we would eventually need to overlay the roadlines4326 data with the selectedboundaries32647 data to determine the roads that lie within BMR. In order to perform geoprocessing using two geospatial data, both geospatial data would need to be projected using similar coordinate systems - in this case, it its EPSG: 32647:\n\nroadlines32647 &lt;- st_transform(roadlines4326, crs = 32647)\n\nWe check the CRS code again:\n\nst_crs(roadlines32647)\n\n\n\n\nBased on the columns in the data frame roadlines32647, the columns that seem relevant/useful to retain for analysis are “highway”, “surface”, “smoothness”, “width”, “lanes”, “oneway”, “bridge” and “geometry”.\nHowever before going ahead to retain these variables, we determine the presence of missing data within roadlines32647:\n\nmissing_counts &lt;- sapply(roadlines32647, function(x) sum(is.na(x)))\nprint(missing_counts)\n\nBased on the result we obtained, more than 60% of data is missing for the variable “source” and more than 80% of data is missing for the variables “name”, “name_en”, “surface”, “smoothness”, “width”, “lanes”, “oneway”, “bridge”, “layer”, “source” and “name_th”. Given the extent of missing data, we will omit these columns as they would not provide useful information for analysis and only retain the relevant/useful columns “highway” and “geometry” with no missing data:\n\nselectedroadlines &lt;- roadlines32647 %&gt;%\n  select(\"highway\", \"geometry\")\n\n\n\n\nThe code chunk below is used to determine the types of highways in the selectedroadlines data frame:\n\nunique_highway &lt;- unique(selectedroadlines$highway)\nunique_highway &lt;- sort(unique_highway)\n\nunique_highway\n\nWhile there are several classes of highway, our analysis will focus on the major classes of highway as stated on Thailand Highway Classification, otherwise the map will be too overcrowded for analysis and we might also experience lags in rendering the Quarto document.\nA detailed explanation on the selected major highways is indicated in the table below:\n\n\n\nTypes of highway\nDetails\nIncluded for analysis?\n\n\n\n\nmotorway\nExpressway with full access control (source)\nYes\n\n\nprimary\nTop-level urban road across the city connecting trunk to trunk, or road of equal or greater importance than the primary intercity highway that runs through that city (source)\nYes\n\n\nsecondary\nMain urban road connecting primary to primary or higher, or road of equal or greater importance than the secondary intercity highway that runs through that city. Based on table above, motorcars, motorcycles and pedestrians all have access (source)\nYes\n\n\ntertiary\nRoads that are more important than regular unclassified or residential roads, or roads that connect several unclassified or residential roads. Based on table above, motorcars, motorcycles and pedestrians all have access (source)\nYes\n\n\ntrunk\nBased on table above, motorcars, motorcycles and pedestrians all have access (source)\nYes\n\n\n\n\nselectedroadlines &lt;- selectedroadlines %&gt;%\n  filter(highway %in% c(\"motorway\",\"primary\",\"secondary\",\"tertiary\",\"trunk\"))\n\n\n\n\nWe require only a subset of the selectedroadlines data to just roads within our area of interest, BMR and hence we utilise st_intersection() to find retain roads that are within the BMR boundaries given by provincedata32647:\n\nroadsbkk &lt;- st_intersection(selectedroadlines,provincedata32647)\n\nThis reduced the data to 19386 rows of data.\nWe take a quick look at the geometry and note that the plot has cleaned up significantly. We will proceed with this data:\n\nplot(st_geometry(roadsbkk))\n\n\n\n\n\nWe then check the geometry of roadsbkk:\n\ngeometry_types &lt;- roadsbkk %&gt;%\n  st_geometry_type() %&gt;%\n  as.character() %&gt;%\n  unique()\n\ngeometry_types\n\nBased on the output from above, the roadsbkk data comprises both linestring and multilinestring geometries. Linestring represents a single line, while MultiLinestring represents a collection of multiple lines. We need to simplify the data structure by converting multilinestring to linestring geometry to facilitate downstream analysis as the use of multilinestring might lead to error.\nWe utilise the st_cast() function to break down multilinestring geometries to linestring geometries:\n\nroadsbkk &lt;- st_cast(roadsbkk,\"LINESTRING\",group_or_split = TRUE)\n\nWe double check the geometry types and note from the output below that the geometry is now just linestring:\n\ngeometry_types &lt;- roadsbkk %&gt;%\n  st_geometry_type() %&gt;%\n  as.character() %&gt;%\n  unique()\n\ngeometry_types\n\n\n\n\nWe save this cleaned data as a rds file:\n\nwrite_rds(roadsbkk,\"data/rds/roadsbkk.rds\")\n\n\nroadsbkk &lt;- read_rds(\"data/rds/roadsbkk.rds\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01A.html#exploratory-data-analysis-eda",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01A.html#exploratory-data-analysis-eda",
    "title": "Take-home Exercise 1A",
    "section": "",
    "text": "We carry some EDA to understand how the occurrences of road accidents could be influenced by different factors.\n\n\n\n\nCode\ntmap_mode('plot')\ntm_shape(provincedata32647) + \n  tm_polygons() +           \n  tm_shape(roadacc) + \n  tm_dots(col ='red') +\n  tm_shape(roadsbkk)+\n  tm_lines(col = 'black')\n\n\n\n\n\n\n\n\n\nAs seen from the map above, road accidents within the BMR seem to be more concentrated within the provinces on the right side (Bangkok, Pathum Thani and Samut Prakan). Plotting the distribution of road accidents across provinces, we note from the plot below that Bangkok has the highest occurrences of road accidents in the BMR, followed by Samut Prakan, Pathum Thani, Samut Sakhon, Nakhon Pathom and Nonthaburi.\n\n\nCode\nggplot(roadacc, aes(x = fct_reorder(province_en, province_en, .fun = length))) + \n  geom_bar(fill = \"skyblue\") +\n  labs(title = \"Distribution of Road Accidents across Provinces\", x = \"Province\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(roadacc, aes(x = fct_reorder(agency, agency, .fun = length))) + \n  geom_bar(fill = \"lightgreen\") +\n  labs(title = \"Distribution of Road Accidents by Agency\", x = \"Agency\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\nAs noted from the plot, the Department of Highways is responsible for the most occurrences of road accidents in the BMR, followed by Department of Rural Roads and Expressway Authority of Thailand.\n\n\n\nWe also analyse the road accidents by time, namely by year, by month, by day of week and by time of day.\n\n\n\n\n\nCode\nggplot(roadacc, aes(x = inc_year)) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Year\", x = \"Year\", y = \"Count\") +\n  facet_wrap(~province_en)+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\n\n\nWe note from above that the number of road accidents has generally been increasing in Bangkok and Samut Prakan from 2019 to 2022.\n\nThis is with the exception of a drop in 2021 in Bangkok - this could potentially be due to the surge of COVID-19 cases in Thailand in 2021 which led to a lockdown which meant that there were less tourists, vehicles and pedestrians on the roads, and lower occurrences of road accidents.\n\nWe note that the number of road accidents in Nonthaburi and Pathum Thani increased from 2019 to 2021 and fell in 2022.\nWe note that the number of road accidents in Samut Sakhon fell from 2019 to 2021 but increased in 2022.\nOf the 6 provinces, we note that only Nakhon Pathom experienced a fall in road accidents from 2019 to 2022.\n\n\n\n\n\n\n\n\n\nCode\nggplot(roadacc, aes(x = inc_month)) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Month\", x = \"Month\", y = \"Count\")+\n  scale_x_discrete(limits = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\")) +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\n\nBased on the plot above, most road accidents occur in Jan, Apr, Oct and Dec.\nWe also observe the data by month across the years using cycle plots that would enable us to observe cyclical/seasonal patterns, if present.\n\n\n\nTo plot the distribution of road accidents by months across the years, we create a roadacc_month file that groups the road accidents per month for each year.\n\n\nCode\nroadacc_month &lt;- roadacc %&gt;%\n  group_by(inc_year,inc_month) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\n\n\n\nCode\nwrite_rds(roadacc_month,\"data/rds/roadacc_month.rds\")\n\n\n\n\nCode\nroadacc_month &lt;- read_rds(\"data/rds/roadacc_month.rds\")\n\n\n\n\nCode\nhline.data &lt;- roadacc_month %&gt;%\n  group_by(inc_month) %&gt;%\n  summarise(avgvalue = mean(count))\n\nggplot(data = roadacc_month, aes(x = inc_year, y = count)) +\n  geom_line(aes(group = inc_month, colour = as.factor(inc_month))) +\n  geom_hline(aes(yintercept=avgvalue),\n             data=hline.data,\n             linetype=6,\n             colour=\"red\",\n             size=0.5)+\n  facet_wrap(~inc_month,scales = \"free_x\")+\n  labs(title = \"Road accidents by month from 2019 to 2022\",\n                   colour = \"Month\") +\n  xlab(\"Year\")+\n  ylab(\"Number of Road Accidents\")+\n  scale_color_brewer(palette = \"Paired\") + \n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nBased on the plot, we observe the following:\n\nApr, Oct and Dec have the highest average number of road accidents across the years\nOccurrences of road accidents in Jan and Feb seem to generally be decreasing over the years, with the number of road accidents in 2022 for both months falling below the average number of road accidents for the month across 2019 to 2022.\nOccurrences of road accidents in Jul, Aug, Oct to Dec seem to generally be increasing over the years. Based on this observation alone, the increase in road accidents could potentially be due to the rainy season between Jul to Oct and the presence of a higher population due to peak tourist seasons in Nov and Dec.\nOccurrences of road accidents in Mar to Jun and Sep generally do not fluctuate much over the years.\n\n\n\n\n\n\nCode\nroadacc_month_bkk &lt;- roadacc %&gt;%\n  filter(province_en==\"Bangkok\") %&gt;%\n  group_by(inc_year,inc_month) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\nroadacc_month_sp &lt;- roadacc %&gt;%\n  filter(province_en==\"Samut Prakan\") %&gt;%\n  group_by(inc_year,inc_month) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\nroadacc_month_n &lt;- roadacc %&gt;%\n  filter(province_en==\"Nonthaburi\") %&gt;%\n  group_by(inc_year,inc_month) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\nroadacc_month_pt &lt;- roadacc %&gt;%\n  filter(province_en==\"Pathum Thani\") %&gt;%\n  group_by(inc_year,inc_month) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\nroadacc_month_np &lt;- roadacc %&gt;%\n  filter(province_en==\"Nakhon Pathom\") %&gt;%\n  group_by(inc_year,inc_month) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\nroadacc_month_ss &lt;- roadacc %&gt;%\n  filter(province_en==\"Samut Sakhon\") %&gt;%\n  group_by(inc_year,inc_month) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\n\nSaving them as rds files:\n\n\nCode\nwrite_rds(roadacc_month_bkk,\"data/rds/roadacc_month_bkk.rds\")\nwrite_rds(roadacc_month_sp,\"data/rds/roadacc_month_sp.rds\")\nwrite_rds(roadacc_month_n,\"data/rds/roadacc_month_n.rds\")\nwrite_rds(roadacc_month_pt,\"data/rds/roadacc_month_pt.rds\")\nwrite_rds(roadacc_month_np,\"data/rds/roadacc_month_np.rds\")\nwrite_rds(roadacc_month_ss,\"data/rds/roadacc_month_ss.rds\")\n\n\nLoading the newly created rds files into R:\n\n\nCode\nroadacc_month_bkk &lt;- read_rds(\"data/rds/roadacc_month_bkk.rds\")\nroadacc_month_sp &lt;- read_rds(\"data/rds/roadacc_month_sp.rds\")\nroadacc_month_n &lt;- read_rds(\"data/rds/roadacc_month_n.rds\")\nroadacc_month_pt &lt;- read_rds(\"data/rds/roadacc_month_pt.rds\")\nroadacc_month_np &lt;- read_rds(\"data/rds/roadacc_month_np.rds\")\nroadacc_month_ss &lt;- read_rds(\"data/rds/roadacc_month_ss.rds\")\n\n\n\nBangkokSamut PrakanNonthaburiPathum ThaniNakhon PathomSamut Sakhon\n\n\n\n\nCode\nhline.data &lt;- roadacc_month_bkk %&gt;%\n  group_by(inc_month) %&gt;%\n  summarise(avgvalue = mean(count))\n\nggplot(data = roadacc_month_bkk, aes(x = inc_year, y = count)) +\n  geom_line(aes(group = inc_month, colour = as.factor(inc_month))) +\n  geom_hline(aes(yintercept=avgvalue),\n             data=hline.data,\n             linetype=6,\n             colour=\"red\",\n             size=0.5)+\n  facet_wrap(~inc_month,scales = \"free_x\")+\n  labs(title = \"Bangkok Road accidents by month from 2019 to 2022\",\n                   colour = \"Month\") +\n  xlab(\"Year\")+\n  ylab(\"Number of Road Accidents\")+\n  scale_color_brewer(palette = \"Paired\") + \n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nThe following observations were made:\n\nOccurrences of road accidents in Jan seem to be fluctuating, with the number of road accidents decreasing from 2019 to 2021 then increasing in 2022.\nOccurrences of road accidents in Feb seem to generally be decreasing over the years, with the number of road accidents in 2022 falling below the average number of road accidents for the month across 2019 to 2022.\nOccurrences of road accidents in Jul to Dec seem to generally be increasing over the years. Based on this observation alone, the increase in road accidents could potentially be due to the rainy season between Jul to Oct and the presence of a higher population due to peak tourist seasons in Nov and Dec.\nOccurrences of road accidents in Mar to Jun generally do not fluctuate much over the years.\n\n\n\n\n\nCode\nhline.data &lt;- roadacc_month_sp %&gt;%\n  group_by(inc_month) %&gt;%\n  summarise(avgvalue = mean(count))\n\nggplot(data = roadacc_month_sp, aes(x = inc_year, y = count)) +\n  geom_line(aes(group = inc_month, colour = as.factor(inc_month))) +\n  geom_hline(aes(yintercept=avgvalue),\n             data=hline.data,\n             linetype=6,\n             colour=\"red\",\n             size=0.5)+\n  facet_wrap(~inc_month,scales = \"free_x\")+\n  labs(title = \"Samut Prakan Road accidents by month from 2019 to 2022\",\n                   colour = \"Month\") +\n  xlab(\"Year\")+\n  ylab(\"Number of Road Accidents\")+\n  scale_color_brewer(palette = \"Paired\") + \n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nThe following observations were made:\n\nOccurrences of road accidents in Jan seem to generally be decreasing over the years, with the number of road accidents in 2022 falling below the average number of road accidents for the month across 2019 to 2022.\nOccurrences of road accidents in Apr to Aug and Nov to Dec seem to generally be increasing over the years. Based on this observation alone, the increase in road accidents could potentially be due to the hotter and rainier seasons in Apr to Aug and the presence of a higher population due to peak tourist seasons in May, Jun, Nov and Dec.\nOccurrences of road accidents in Feb to Mar and Sep to Oct increased initially then fell towards 2022.\n\n\n\n\n\nCode\nhline.data &lt;- roadacc_month_n %&gt;%\n  group_by(inc_month) %&gt;%\n  summarise(avgvalue = mean(count))\n\nggplot(data = roadacc_month_n, aes(x = inc_year, y = count)) +\n  geom_line(aes(group = inc_month, colour = as.factor(inc_month))) +\n  geom_hline(aes(yintercept=avgvalue),\n             data=hline.data,\n             linetype=6,\n             colour=\"red\",\n             size=0.5)+\n  facet_wrap(~inc_month,scales = \"free_x\")+\n  labs(title = \"Nonthaburi Road accidents by month from 2019 to 2022\",\n                   colour = \"Month\") +\n  xlab(\"Year\")+\n  ylab(\"Number of Road Accidents\")+\n  scale_color_brewer(palette = \"Paired\") + \n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nThe following observations were made:\n\nOccurrences of road accidents in Feb seem to generally be decreasing over the years.\nOccurrences of road accidents in Jan seem to generally be increasing over the years.\nOccurrences of road accidents in Jul, Aug, Nov and Dec increased initially then fell towards 2022.\nOccurrences of road accidents in Mar to Jun, Sep and Oct seem to fluctuate generally around the monthly average across the years.\nAs compared to Bangkok, Samut Prakan and Pathum Thani, the number of road accidents in Nonthaburi seem to be lesser, indicating that roads are more well managed in Nonthaburi.\n\n\n\n\n\nCode\nhline.data &lt;- roadacc_month_pt %&gt;%\n  group_by(inc_month) %&gt;%\n  summarise(avgvalue = mean(count))\n\nggplot(data = roadacc_month_pt, aes(x = inc_year, y = count)) +\n  geom_line(aes(group = inc_month, colour = as.factor(inc_month))) +\n  geom_hline(aes(yintercept=avgvalue),\n             data=hline.data,\n             linetype=6,\n             colour=\"red\",\n             size=0.5)+\n  facet_wrap(~inc_month,scales = \"free_x\")+\n  labs(title = \"Pathum Thani Road accidents by month from 2019 to 2022\",\n                   colour = \"Month\") +\n  xlab(\"Year\")+\n  ylab(\"Number of Road Accidents\")+\n  scale_color_brewer(palette = \"Paired\") + \n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nThe following observations were made:\n\nOccurrences of road accidents in Jun to Aug and Oct seem to generally be increasing over the years. This could be explained by the rainier seasons in Thailand during this period.\nOccurrences of road accidents in Mar, Apr, May and Nov increased initially then fell towards 2022.\nOccurrences of road accidents in Jan, Feb, Sep and Dec seem to fluctuate generally around the monthly average across the years.\n\n\n\n\n\nCode\nhline.data &lt;- roadacc_month_np %&gt;%\n  group_by(inc_month) %&gt;%\n  summarise(avgvalue = mean(count))\n\nggplot(data = roadacc_month_np, aes(x = inc_year, y = count)) +\n  geom_line(aes(group = inc_month, colour = as.factor(inc_month))) +\n  geom_hline(aes(yintercept=avgvalue),\n             data=hline.data,\n             linetype=6,\n             colour=\"red\",\n             size=0.5)+\n  facet_wrap(~inc_month,scales = \"free_x\")+\n  labs(title = \"Nakhon Pathom Road accidents by month from 2019 to 2022\",\n                   colour = \"Month\") +\n  xlab(\"Year\")+\n  ylab(\"Number of Road Accidents\")+\n  scale_color_brewer(palette = \"Paired\") + \n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nThe following observations were made:\n\nOccurrences of road accidents in Jan to Mar, May, Jul to Dec seem to generally be decreasing over the years.\nOccurrences of road accidents in Apr and Jun seem to be fluctuating around the monthly average across the years.\nBased on these observations, it seems like road accidents are much lesser in Nakhon Pathom as compared to the other provinces and it is the only province with no obvious increase in occurrences of road accidents across the years, this indicates that the province is more well managed as compared to the other 5 provinces.\n\n\n\n\n\nCode\nhline.data &lt;- roadacc_month_ss %&gt;%\n  group_by(inc_month) %&gt;%\n  summarise(avgvalue = mean(count))\n\nggplot(data = roadacc_month_ss, aes(x = inc_year, y = count)) +\n  geom_line(aes(group = inc_month, colour = as.factor(inc_month))) +\n  geom_hline(aes(yintercept=avgvalue),\n             data=hline.data,\n             linetype=6,\n             colour=\"red\",\n             size=0.5)+\n  facet_wrap(~inc_month,scales = \"free_x\")+\n  labs(title = \"Samut Sakhon Road accidents by month from 2019 to 2022\",\n                   colour = \"Month\") +\n  xlab(\"Year\")+\n  ylab(\"Number of Road Accidents\")+\n  scale_color_brewer(palette = \"Paired\") + \n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nThe following observations were made:\n\nOccurrences of road accidents in Jan, Feb, Apr and Jun seem to generally be decreasing over the years.\nOccurrences of road accidents in Jul to Dec seem to be increasing over the years. Based on this observation alone, the increase in road accidents could potentially be due to the hotter and rainier seasons in Jul to Oct and the presence of a higher population due to peak tourist seasons in Nov and Dec.\nOccurrences of road accidents in Mar and May seem to fluctuate generally around the monthly average across the years.\n\n\n\n\n\n\n\n\nOverallBreakdown by province\n\n\n\n\nCode\nggplot(roadacc, aes(x = inc_dayofweek)) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Day of Week\", x = \"Day of Week\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\n\nWe note from the plot that road accidents occur mostly on Fri and Sat and this could be explained by these days being the start of the weekend, and more people and vehicles may be out on the roads and in public places, which increase the chances of road accidents occuring.\n\n\n\n\nCode\nggplot(roadacc, aes(x = inc_dayofweek)) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Day of Week\", x = \"Day of Week\", y = \"Count\") +\n  facet_wrap(~province_en, scales = \"fixed\")\n\n\n\n\n\n\n\n\n\nCode\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\nList of 1\n $ axis.text.x:List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : num 8\n  ..$ hjust        : num 1\n  ..$ vjust        : NULL\n  ..$ angle        : num 90\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi FALSE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n - attr(*, \"class\")= chr [1:2] \"theme\" \"gg\"\n - attr(*, \"complete\")= logi FALSE\n - attr(*, \"validate\")= logi TRUE\n\n\nAcross the provinces, it is obvious that road accidents occur most often on Fri and Sat in Bangkok. However, for the other provinces, the difference is not so obvious and it seems like the occurrences of road accidents are more well spread out across the week. This could be explained by Bangkok being a prime tourist destination and major urban centre, and it could attract a greater crowd from within and outside of Thailand over the weekend, hence leading to greater traffic on the road and higher chances of road accidents occurring.\n\n\n\n\n\n\n\nOverallBreakdown by province\n\n\n\n\nCode\nggplot(roadacc, aes(x = inc_time)) + \n  geom_histogram(binwidth = 1, fill = \"slategrey\", color = \"black\") +\n  scale_x_continuous(breaks = seq(0, 23, 1))+\n  labs(title = \"Distribution of Road Accidents by Time of Day\", \n       x = \"Time of Day\",\n       y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\n\nBased on the chart, it is observed that road accidents occur more often between 7am to 11pm as compared to 12 midnight to 6am. This could be explained by 7am to 11pm being the time when most are awake for their daily activities and the roads are likely to have higher activity, which result in higher chances of occurrences of road accidents. The top two timings at which road accidents occur are at 9am and 7pm and this could be explained by it being the peak hour at which the general population i.e. workers, school students get to and get off work and school.\n\n\n\n\nCode\nggplot(roadacc, aes(x = inc_time)) + \n  geom_histogram(binwidth = 1, fill = \"slategrey\", color = \"black\") +\n  scale_x_continuous(breaks = seq(0, 23, 1))+\n  labs(title = \"Distribution of Road Accidents by Time of Day\", \n       x = \"Time of Day\",\n       y = \"Count\") +\n  facet_wrap(~province_en, scales = \"fixed\")+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\n\nBangkok, Samut Prakan and Pathum Thani also seem to follow the general observation seen under the overall chart for occurrences of road accidents by time day i.e. road accidents generally occur more during 7am to 11pm and peak timings are during the going to and getting off work/school hours at around 9am and 7pm. This is less obvious for the other provinces.\n\n\n\n\n\n\n\nOverallBreakdown by Province\n\n\n\n\nCode\nggplot(roadacc, aes(x = fct_reorder(weather_condition, weather_condition, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Weather Condition\", x = \"Weather Condition\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\n\nBased on the plot, it can be seen that road accidents most frequently occur during clear weather conditions followed by rainy and then dark conditions. This could imply that road accidents are more heavily influenced by other behavioural or environmental factors besides the weather condition.\n\n\n\n\nCode\nggplot(roadacc, aes(x = fct_reorder(weather_condition, weather_condition, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Weather Condition\", x = \"Weather Condition\", y = \"Count\") +\n  facet_wrap(~province_en)+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\n\nAcross provinces, similar observations were made as it was observed that road accidents mostly occur during clear weather conditions, followed by rainy and then dark weather conditions.\n\n\n\n\n\n\n\nOverallBreakdown by Province\n\n\n\n\nCode\nggplot(roadacc, aes(x = fct_reorder(road_description, road_description, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Road Description\", x = \"Road Description\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\n\nBased on the plot, road accidents mostly occur on straight roads, roads categorised as other, followed by wide curve and then grade-separated intersection/ramps. Combining this observation with that for weather conditions - that road accidents mostly occur during clear weather conditions and straight roads - which are conditions under which one would not expect road accidents to occur, it could imply that the occurrence of road accidents are more heavily influenced by behavioural factors.\n\n\n\n\nCode\nggplot(roadacc, aes(x = fct_reorder(road_description, road_description, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Road Description\", x = \"Road Description\", y = \"Count\") +\n  facet_wrap(~province_en)+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\n\nAcross provinces, similar observations were made as it was observed that road accidents mostly occur on straight roads, roads categorised as other, followed by wide curve and then grade-separated intersection/ramps.\n\n\n\n\n\n\n\nOverallBreakdown by Province\n\n\n\n\nCode\nggplot(roadacc, aes(x = fct_reorder(slope_description, slope_description, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Slope Description\", x = \"Slope Description\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\n\nBased on the plot, road accidents where there are no slopes. Combining this observation with the above observations - that road accidents mostly occur during clear weather conditions and on straight roads with no slope - which are conditions under which one would not expect road accidents to occur, it could imply that the occurrence of road accidents are more heavily influenced by behavioural factors.\n\n\n\n\nCode\nggplot(roadacc, aes(x = fct_reorder(slope_description, slope_description, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Slope Description\", x = \"Slope Description\", y = \"Count\") +\n  facet_wrap(~province_en)+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\n\nAcross provinces, similar observations were made as it was observed that road accidents mostly occur on roads with no slope.\n\n\n\n\n\n\n\nOverallBreakdown by Province\n\n\n\n\nCode\nggplot(roadacc, aes(x = fct_reorder(vehicle_type, vehicle_type, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Vehicle Type\", x = \"Vehicle Type\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\n\nBased on the plot, road accidents mostly involve private/passenger car, followed by 4-wheel pickup truck, motorcycle as the top 3 vehicles. These are small to mid-sized vehicles.\n\n\nWe do a more detailed analysis at the province level:\n\n\nCode\nggplot(roadacc, aes(x = fct_reorder(vehicle_type, vehicle_type, .fun = length))) +\n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Vehicle Type\", x = \"Vehicle Type\", y = \"Count\") +\n  facet_wrap(~province_en)+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 8))\n\n\n\n\n\n\n\n\n\nBangkok and Samut Prakan follow the same general observation seen under the overall chart for vehicle type involved in road accidents i.e. road accidents mostly involve private/passenger car, followed by 4-wheel pickup truck, motorcycle as the top 3 vehicles. However the following were observed for the other provinces:\n\nRoad accidents in Nakhon Pathom, Pathum Thani and Samut Sakhon mostly involved 4-wheel pickup truck\n4-wheel pickup truck is not one of the top 3 vehicles involved in road accidents in Nonthaburi\n\n\n\n\n\n\n\n\n\nCode\nggplot(roadacc, aes(x = fct_reorder(presumed_cause, presumed_cause, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Presumed Cause\", x = \"Presumed Cause\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n\n\n\n\n\n\n\n\n\nThe top presumed cause for accident is speeding.\n\n\n\n\nOverallBreakdown by Province\n\n\n\n\nCode\nggplot(roadacc, aes(x = fct_reorder(accident_type, accident_type, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Accident Type\", x = \"Accident Type Cause\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n\n\n\n\n\n\n\n\n\nThe top two accident type for road accidents are rear-end collision and rollover/fallen on straight road.\n\n\n\n\nCode\nggplot(roadacc, aes(x = fct_reorder(accident_type, accident_type, .fun = length))) + \n  geom_bar(fill = \"slategrey\") +\n  labs(title = \"Distribution of Road Accidents by Accident Type\", x = \"Accident Type Cause\", y = \"Count\") +\n  facet_wrap(~province_en)+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n\n\n\n\n\n\n\n\n\nBangkok, Pathum Thani and Samut Prakan follow the same general observation seen under the overall chart that the top two accident type for road accidents are rear-end collision followed by rollover/fallen on straight road. For Nakhon Pathom, Nonthaburi and Samut Sakhon, the top accident type is rollover/fallen on straight road followed by rear-end collision.\n\n\n\n\n\n\n\n\nCode\nsummary_stats &lt;- roadacc %&gt;%\n  group_by(province_en) %&gt;%\n  summarise(\n    median_vehicles = median(number_of_vehicles_involved, na.rm = TRUE),\n    mean_vehicles = mean(number_of_vehicles_involved, na.rm = TRUE),\n    min_vehicles = min(number_of_vehicles_involved,na.rm = TRUE),\n    q25 = quantile(number_of_vehicles_involved, 0.25, na.rm = TRUE),\n    q75 = quantile(number_of_vehicles_involved, 0.75, na.rm = TRUE),\n    max_vehicles = max(number_of_vehicles_involved,na.rm = TRUE),\n    .groups = 'drop'\n  ) %&gt;%\n  mutate(label = paste0(\"Min: \", round(min_vehicles,1),\n                        \"\\nq25: \", round(q25,1),\n                        \"\\nMedian: \", round(median_vehicles, 1), \n                        \"\\nMean: \", round(mean_vehicles, 1),\n                        \"\\nq75: \", round(q75,1),\n                        \"\\nMax vehicles: \", round(max_vehicles,1)\n                        ))\n\nggplot(roadacc,\n       aes(x=province_en,\n           y=number_of_vehicles_involved,\n           fill = province_en))+\n  geom_boxplot(width = .20,\n               outlier.shape = NA)+\n  geom_text(data = summary_stats, \n            aes(x = province_en, y = q75, label = label), \n            vjust = -0.5, \n            size = 3)+\n  ggtitle(\"Distribution of Road Accidents by Number of Vehicles Involved\") +\n  labs(title = \"Distribution of Road Accidents by Number of Vehicles Involved\", x = \"Number of Vehicles Involved\", y = \"Count\")+\n  theme(legend.position = \"none\") +\n  scale_fill_viridis_d()\n\n\n\n\n\n\n\n\n\nAcross the provinces, the median number of vehicles involved in road accidents are either one or two. However, the maximum number of vehicles that had been involved in road accidents were 12 (Pathum Thani), 11 (Bangkok), 10 (Samut Prakan), 9 (Nonthaburi and Samut Sakhon) and 8 (Nakhon Pathom), indicating that while not common, there are large-scale incidents involving large number of vehicles.\n\n\n\n\n\nCode\nsummary_stats &lt;- roadacc %&gt;%\n  group_by(province_en) %&gt;%\n  summarise(\n    median_fatalities = median(number_of_fatalities, na.rm = TRUE),\n    mean_fatalities = mean(number_of_fatalities, na.rm = TRUE),\n    min_fatalities = min(number_of_fatalities,na.rm = TRUE),\n    q25 = quantile(number_of_fatalities, 0.25, na.rm = TRUE),\n    q75 = quantile(number_of_fatalities, 0.75, na.rm = TRUE),\n    max_fatalities = max(number_of_fatalities,na.rm = TRUE),\n    .groups = 'drop'\n  ) %&gt;%\n  mutate(label = paste0(\"Min: \", round(min_fatalities,1),\n                        \"\\nq25: \", round(q25,1),\n                        \"\\nMedian: \", round(median_fatalities, 1), \n                        \"\\nMean: \", round(mean_fatalities, 1),\n                        \"\\nq75: \", round(q75,1),\n                        \"\\nMax fatalities: \", round(max_fatalities,1)\n                        ))\n\nggplot(roadacc,\n       aes(x=province_en,\n           y=number_of_fatalities,\n           fill = province_en))+\n  geom_boxplot(width = .20,\n               outlier.shape = NA)+\n  geom_text(data = summary_stats, \n            aes(x = province_en, y = q75, label = label), \n            vjust = -0.5, \n            size = 3)+\n  ggtitle(\"Distribution of Road Accidents by Number of Fatalities\") +\n  labs(title = \"Distribution of Road Accidents by Number of Fatalities\", x = \"Number of Fatalities\", y = \"Count\")+\n  theme(legend.position = \"none\") +\n  scale_fill_viridis_d()\n\n\n\n\n\n\n\n\n\nAcross the provinces, the median number of fatalities is 0. However, while few, there are road accidents that occur with higher number of fatalities - the highest being 13 (Samut Prakan), followed by 6 (Pathum Thani), 3 (Bangkok, Nonthaburi) and 2 (Nakhon Pathom and Samut Sakhon).\n\n\n\n\n\nCode\nsummary_stats &lt;- roadacc %&gt;%\n  group_by(province_en) %&gt;%\n  summarise(\n    median_injuries = median(number_of_injuries, na.rm = TRUE),\n    mean_injuries = mean(number_of_injuries, na.rm = TRUE),\n    min_injuries = min(number_of_injuries,na.rm = TRUE),\n    q25 = quantile(number_of_injuries, 0.25, na.rm = TRUE),\n    q75 = quantile(number_of_injuries, 0.75, na.rm = TRUE),\n    max_injuries = max(number_of_injuries,na.rm = TRUE),\n    .groups = 'drop'\n  ) %&gt;%\n  mutate(label = paste0(\"Min: \", round(min_injuries,1),\n                        \"\\nq25: \", round(q25,1),\n                        \"\\nMedian: \", round(median_injuries, 1), \n                        \"\\nMean: \", round(mean_injuries, 1),\n                        \"\\nq75: \", round(q75,1),\n                        \"\\nMax injuries: \", round(max_injuries,1)\n                        ))\n\nggplot(roadacc,\n       aes(x=province_en,\n           y=number_of_injuries,\n           fill = province_en))+\n  geom_boxplot(width = .20,\n               outlier.shape = NA)+\n  geom_text(data = summary_stats, \n            aes(x = province_en, y = q75, label = label), \n            vjust = -0.5, \n            size = 3)+\n  ggtitle(\"Distribution of Road Accidents by Number of Injuries\") +\n  labs(title = \"Distribution of Road Accidents by Number of Injuries\", x = \"Number of Injuries\", y = \"Count\")+\n  theme(legend.position = \"none\") +\n  scale_fill_viridis_d()\n\n\n\n\n\n\n\n\n\nAcross the provinces, the median number of injuries is 0. However, while few, there are road accidents that occur with higher number of injuries - the highest being 51 (Pathum Thani), followed by 31 (Bangkok), 30 (Nakhon Pathom), 28 (Samut Prakan), 14 (Samut Sakhon) and 11 (Nonthaburi).\nTo minimise the slow loading of the page, the Take-home Exercise 1 has been divided into 2 parts - please refer to Part 1B which covers spatial point pattern analysis."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01B.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01B.html",
    "title": "Take-home Exercise 1B",
    "section": "",
    "text": "Code\npacman::p_load(sf,spatstat,sparr,raster,maptools,tmap,tidyverse,spNetwork,DT,forcats,ggthemes,plotly,RColorBrewer,classInt,viridis,gifski)\n\n\n\n\nCode\n# loading datasets for analysis\n#refer to Part 1A for earlier steps on data wrangling\nroadacc &lt;- read_rds(\"data/rds/roadacc.rds\")\nroadsbkk &lt;- read_rds(\"data/rds/roadsbkk.rds\")\nprovincedata32647 &lt;- read_rds(\"data/rds/provincedata32647.rds\")\nroadacc_month_bkk &lt;- read_rds(\"data/rds/roadacc_month_bkk.rds\")\nroadacc_month_sp &lt;- read_rds(\"data/rds/roadacc_month_sp.rds\")\nroadacc_month_n &lt;- read_rds(\"data/rds/roadacc_month_n.rds\")\nroadacc_month_pt &lt;- read_rds(\"data/rds/roadacc_month_pt.rds\")\nroadacc_month_np &lt;- read_rds(\"data/rds/roadacc_month_np.rds\")\nroadacc_month_ss &lt;- read_rds(\"data/rds/roadacc_month_ss.rds\")\n\n\n\n\n\nWe will conduct a Spatial Point Pattern Analysis (SPPA) to evaluate the distribution of road accidents within the Bangkok Metropolitan Region (BMR).\nThe specific questions we would like to answer are as follows:\n\nare the road accidents in BMR randomly distributed throughout the region?\nif no, then where are the locations with higher concentration of road accidents?\n\nSpecifically, we will be carrying out the following SPPA methods:\n\nFirst-order SPPA\nSpatial analysis of road traffic accidents using Network SPPA methods.\nSpatio-temporal analysis of road accidents using Temporal Network SPPA methods.\n\n\n\n\n\n\nBefore we carry out spatial point pattern analysis, we need to convert the data from sf format to ppp format:\n\nroadacc_ppp &lt;- as.ppp(roadacc)\nroadacc_ppp\n\nMarked planar point pattern: 12985 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [591277.5, 710166.1] x [1486845.7, 1576520.5] units\n\n\nThe code chunk below plots roadacc_ppp for visualisation:\n\nplot(roadacc_ppp)\n\n\n\n\n\n\n\n\nWe take a quick look at the summary statistics of the roadacc_ppp object using the code chunk below:\n\nsummary(roadacc_ppp)\n\nMarked planar point pattern:  12985 points\nAverage intensity 1.217956e-06 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 571882 3788970 3833867 4314374 6092695 7570954 \n\nWindow: rectangle = [591277.5, 710166.1] x [1486845.7, 1576520.5] units\n                    (118900 x 89670 units)\nWindow area = 10661300000 square units\n\n\n\n\n\nIn SPPA, a significant issue is the presence of duplicates as the statistical methodology used for spatial point patterns processes is based largely on the assumption that process are simple i.e. that the points cannot be coincident. We check for duplication in a ppp object via the code chunk below:\n\nany(duplicated(roadacc_ppp))\n\n[1] FALSE\n\n\nThe data does not have any duplicated points.\n\n\n\nWhen analysing spatial point patterns, it is a good practice to confine the analysis within a geographical area like Singapore boundary. In spatstat, an object called owin is specially designed to represent this polygonal region. The code chunk below is used to covert provincedata32647 SpatialPolygon object into owin object of spatstat:\n\nprovinceowin &lt;- as.owin(provincedata32647)\n\nThe ouput object can be displayed by using plot() function\n\nplot(provinceowin)\n\n\n\n\n\n\n\n\n\nsummary(provinceowin)\n\nWindow: polygonal boundary\nsingle connected closed polygon with 13779 vertices\nenclosing rectangle: [587893.5, 712440.5] x [1484413.7, 1579076.3] units\n                     (124500 x 94660 units)\nWindow area = 7668990000 square units\nFraction of frame area: 0.65\n\n\n\n\n\nWe extract road accident events that are located within the BMR by using the code chunk below:\n\nroadacc_owin_ppp = roadacc_ppp[provinceowin]\n\n\nplot(roadacc_owin_ppp)\n\n\n\n\n\n\n\n\n\nsummary(roadacc_owin_ppp)\n\nMarked planar point pattern:  12985 points\nAverage intensity 1.693182e-06 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 571882 3788970 3833867 4314374 6092695 7570954 \n\nWindow: polygonal boundary\nsingle connected closed polygon with 13779 vertices\nenclosing rectangle: [587893.5, 712440.5] x [1484413.7, 1579076.3] units\n                     (124500 x 94660 units)\nWindow area = 7668990000 square units\nFraction of frame area: 0.65\n\n\n\n\n\nThe first-order SPPA will study how the intensity of road accidents vary across the BMR i.e. identify whether road accidents are more concentrated in areas due to underlying properties of the spatial environment.\nFor first-order SPPA, we will:\n\nderive the kernel density estimation (KDE) layer for visualising and exploring the intensity of point processes,\nperform Confirmatory SPPA using Nearest Neighbour statistics to determine if the road accidents are randomly distributed or influenced by underlying properties of the spatial environment.\n\n\n\n\nWe will proceed to compute the KDE of road accidents in the BMR. However, before we do so, we convert the unit of measurement to kilometer as the default unit of measurement of EPSG: 32647 is in metres, which would make the values hard to comprehend:\n\nroadacc_owin_ppp.km &lt;- rescale.ppp(roadacc_owin_ppp,1000,\"km\")\n\n\n\n\nWe will derive KDE using bw.diggle() of spatstat as it is an automatic bandwidth selection method and does not require a fixed bandwidth to be defined.\n\nkde_roadacc_bw &lt;- density(roadacc_owin_ppp.km,\n                          sigma = bw.diggle,\n                          edge = TRUE,\n                          kernel = \"gaussian\")\n\n\nplot(kde_roadacc_bw)\n\n\n\n\n\n\n\n\nWe can retrieve the bandwidth used to compute the KDE layer with the code chunk below:\n\nbw &lt;- bw.diggle(roadacc_owin_ppp)\nbw\n\n   sigma \n13.41598 \n\n\n\n\n\nWe convert the KDE output for mapping purposes:\n\ngridded_kde_roadacc_bw &lt;- as.SpatialGridDataFrame.im(kde_roadacc_bw)\nspplot(gridded_kde_roadacc_bw)\n\n\n\n\n\n\n\n\n\n\n\nNext, we will convert the gridded KDE object into a RasterLayer object using raster() of raster package:\n\nkde_roadacc_bw_raster &lt;- raster(kde_roadacc_bw)\n\nWe view the properties of kde_roadacc_bw_raster RasterLayer:\n\nkde_roadacc_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.973023, 0.7395512  (x, y)\nextent     : 587.8935, 712.4405, 1484.414, 1579.076  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : layer \nvalues     : -4.811931e-14, 233.4629  (min, max)\n\n\nNote that the CRS property is NA.\n\n\n\nWe hence assign CRS information to the kde_roadacc_bw_raster RasterLayer:\n\nprojection(kde_roadacc_bw_raster) &lt;- CRS(\"+init=EPSG:32647\")\n\nkde_roadacc_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.973023, 0.7395512  (x, y)\nextent     : 587.8935, 712.4405, 1484.414, 1579.076  (xmin, xmax, ymin, ymax)\ncrs        : +proj=utm +zone=47 +datum=WGS84 +units=m +no_defs \nsource     : memory\nnames      : layer \nvalues     : -4.811931e-14, 233.4629  (min, max)\n\n\nThe CRS property is now completed.\n\n\n\nWe will display the raster in cartographic quality map using tmap package:\n\ntmap_mode('plot')\ntm_shape(kde_roadacc_bw_raster)+   \n  tm_raster(\"layer\",palette = \"viridis\")+   \n  tm_layout(legend.outside = TRUE,             \n            legend.outside.position = \"right\",             \n            legend.position = c(\"right\",\"bottom\"),             \n            main.title = \"Distribution of road accidents (bw.diggle)\", \n            main.title.size = 0.8,             \n            frame = FALSE)\n\n\n\n\n\n\n\n\nFrom the plot above, we note that road accidents occur more intensely along the road lines in Bangkok and Samut Prakan. To better understand how the intensity of road accidents occur across the BMR, we will extract the six provinces as different study areas for analysis and comparison in the next section.\n\n\n\n\n\n\nThe code chunk will be used to extract the different provinces as different study areas:\n\nbkk &lt;- provincedata32647 %&gt;%\n  filter(ADM1_EN == \"Bangkok\")\nnp &lt;- provincedata32647 %&gt;% \n  filter(ADM1_EN == \"Nakhon Pathom\") \nn &lt;- provincedata32647 %&gt;%   \n  filter(ADM1_EN == \"Nonthaburi\") \npt &lt;- provincedata32647 %&gt;%   \n  filter(ADM1_EN == \"Pathum Thani\") \nsp &lt;- provincedata32647 %&gt;%   \n  filter(ADM1_EN == \"Samut Prakan\") \nss &lt;- provincedata32647 %&gt;%   \n  filter(ADM1_EN == \"Samut Sakhon\")\n\n\n\n\n\nbkk_owin = as.owin(bkk)\nnp_owin = as.owin(np) \nn_owin = as.owin(n) \npt_owin = as.owin(pt) \nsp_owin = as.owin(sp) \nss_owin = as.owin(ss)\n\n\n\n\nBy using the code chunk below, we are able to extract road accidents that is within the specific province to carry out our analysis later on.\n\nroadacc_bkk_ppp = roadacc_ppp[bkk_owin]\nroadacc_np_ppp = roadacc_ppp[np_owin]\nroadacc_n_ppp = roadacc_ppp[n_owin]\nroadacc_pt_ppp = roadacc_ppp[pt_owin]\nroadacc_sp_ppp = roadacc_ppp[sp_owin]\nroadacc_ss_ppp = roadacc_ppp[ss_owin]\n\nNext, rescale.ppp() function is used to transform the unit of measurement from metres to kilometres as EPSG: 32647 is in metres which would produce density values that are too small to comprehend.\n\nroadacc_bkk_ppp.km = rescale.ppp(roadacc_bkk_ppp,1000,\"km\")\nroadacc_np_ppp.km = rescale.ppp(roadacc_np_ppp,1000,\"km\")\nroadacc_n_ppp.km = rescale.ppp(roadacc_n_ppp,1000,\"km\")\nroadacc_pt_ppp.km = rescale.ppp(roadacc_pt_ppp,1000,\"km\")\nroadacc_sp_ppp.km = rescale.ppp(roadacc_sp_ppp,1000,\"km\")\nroadacc_ss_ppp.km = rescale.ppp(roadacc_ss_ppp,1000,\"km\")\n\nWe save and load these files to minimise re-running the codes above:\n\n\nCode\nwrite_rds(roadacc_bkk_ppp.km,\"data/rds/roadacc_bkk_ppp.km.rds\")\nwrite_rds(roadacc_np_ppp.km,\"data/rds/roadacc_np_ppp.km.rds\")\nwrite_rds(roadacc_n_ppp.km,\"data/rds/roadacc_n_ppp.km.rds\")\nwrite_rds(roadacc_pt_ppp.km,\"data/rds/roadacc_pt_ppp.km.rds\")\nwrite_rds(roadacc_sp_ppp.km,\"data/rds/roadacc_sp_ppp.km.rds\")\nwrite_rds(roadacc_ss_ppp.km,\"data/rds/roadacc_ss_ppp.km.rds\")\n\n\n\nroadacc_bkk_ppp.km &lt;- read_rds(\"data/rds/roadacc_bkk_ppp.km.rds\")\nroadacc_np_ppp.km &lt;- read_rds(\"data/rds/roadacc_np_ppp.km.rds\")\nroadacc_n_ppp.km &lt;- read_rds(\"data/rds/roadacc_n_ppp.km.rds\")\nroadacc_pt_ppp.km &lt;- read_rds(\"data/rds/roadacc_pt_ppp.km.rds\")\nroadacc_sp_ppp.km &lt;- read_rds(\"data/rds/roadacc_sp_ppp.km.rds\")\nroadacc_ss_ppp.km &lt;- read_rds(\"data/rds/roadacc_ss_ppp.km.rds\")\n\nWe then plot the 6 provinces and the locations of the road accidents:\n\npar(mfrow=c(2,3))\nplot(roadacc_bkk_ppp.km,main=\"Bangkok\")\nplot(roadacc_np_ppp.km,main=\"Nakhon Pathom\")\nplot(roadacc_n_ppp.km,main=\"Nonthaburi\") \nplot(roadacc_pt_ppp.km,main=\"Pathum Thani\")\nplot(roadacc_sp_ppp.km,main=\"Samut Prakan\")\nplot(roadacc_ss_ppp.km,main=\"Samut Sakhon\")\n\n\n\n\n\n\n\n\n\n\n\nWe will also derive KDE using bw.diggle() of spatstat for all six provinces:\n\nkde_bkk_bw &lt;- density(roadacc_bkk_ppp.km,\n                      sigma = bw.diggle,\n                      edge = TRUE,\n                      kernel = \"gaussian\")\nkde_np_bw &lt;- density(roadacc_np_ppp.km,\n                     sigma = bw.diggle,\n                     edge = TRUE,\n                     kernel = \"gaussian\")\nkde_n_bw &lt;- density(roadacc_n_ppp.km,\n                    sigma = bw.diggle,\n                    edge = TRUE,\n                    kernel = \"gaussian\")\nkde_pt_bw &lt;- density(roadacc_pt_ppp.km,\n                     sigma = bw.diggle,\n                     edge = TRUE,\n                     kernel = \"gaussian\")\nkde_sp_bw &lt;- density(roadacc_sp_ppp.km,\n                     sigma = bw.diggle,\n                     edge = TRUE,\n                     kernel = \"gaussian\")\nkde_ss_bw &lt;- density(roadacc_ss_ppp.km,\n                     sigma = bw.diggle,\n                     edge = TRUE,\n                     kernel = \"gaussian\")\n\nWe also save and load these as new rds files to minimise re-running the code above:\n\n\nCode\nwrite_rds(kde_bkk_bw,\"data/rds/kde_bkk_bw.rds\")\nwrite_rds(kde_np_bw,\"data/rds/kde_np_bw.rds\")\nwrite_rds(kde_n_bw,\"data/rds/kde_n_bw.rds\")\nwrite_rds(kde_pt_bw,\"data/rds/kde_pt_bw.rds\")\nwrite_rds(kde_sp_bw,\"data/rds/kde_sp_bw.rds\")\nwrite_rds(kde_ss_bw,\"data/rds/kde_ss_bw.rds\")\n\n\n\nkde_bkk_bw &lt;- read_rds(\"data/rds/kde_bkk_bw.rds\")\nkde_np_bw &lt;- read_rds(\"data/rds/kde_np_bw.rds\")\nkde_n_bw &lt;- read_rds(\"data/rds/kde_n_bw.rds\")\nkde_pt_bw &lt;- read_rds(\"data/rds/kde_pt_bw.rds\")\nkde_sp_bw &lt;- read_rds(\"data/rds/kde_sp_bw.rds\")\nkde_ss_bw &lt;- read_rds(\"data/rds/kde_ss_bw.rds\")\n\nNext, we will convert the KDE object into a RasterLayer object using raster() of raster package and assign the CRS of EPSG 32647:\n\nBangkokNakhon PathomNonthaburiPathum ThaniSamut PrakanSamut Sakhon\n\n\n\nkde_bkk_bw_raster &lt;- raster(kde_bkk_bw)\nprojection(kde_bkk_bw_raster) &lt;- CRS(\"+init=EPSG:32647\")  \nkde_bkk_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.5157047, 0.4002078  (x, y)\nextent     : 643.5344, 709.5446, 1492.136, 1543.363  (xmin, xmax, ymin, ymax)\ncrs        : +proj=utm +zone=47 +datum=WGS84 +units=m +no_defs \nsource     : memory\nnames      : layer \nvalues     : -1.081234e-13, 523.2836  (min, max)\n\n\n\n\n\nkde_np_bw_raster &lt;- raster(kde_np_bw)\nprojection(kde_np_bw_raster) &lt;- CRS(\"+init=EPSG:32647\")  \nkde_np_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4431169, 0.4584598  (x, y)\nextent     : 587.8935, 644.6125, 1509.208, 1567.891  (xmin, xmax, ymin, ymax)\ncrs        : +proj=utm +zone=47 +datum=WGS84 +units=m +no_defs \nsource     : memory\nnames      : layer \nvalues     : -9.825693e-15, 59.06928  (min, max)\n\n\n\n\n\nkde_n_bw_raster &lt;- raster(kde_n_bw)\nprojection(kde_n_bw_raster) &lt;- CRS(\"+init=EPSG:32647\")  \nkde_n_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.2577626, 0.3028132  (x, y)\nextent     : 636.3416, 669.3352, 1524.865, 1563.625  (xmin, xmax, ymin, ymax)\ncrs        : +proj=utm +zone=47 +datum=WGS84 +units=m +no_defs \nsource     : memory\nnames      : layer \nvalues     : -2.80486e-14, 179.3522  (min, max)\n\n\n\n\n\nkde_pt_bw_raster &lt;- raster(kde_pt_bw)\nprojection(kde_pt_bw_raster) &lt;- CRS(\"+init=EPSG:32647\")  \nkde_pt_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.5218025, 0.3122371  (x, y)\nextent     : 643.7786, 710.5693, 1539.11, 1579.076  (xmin, xmax, ymin, ymax)\ncrs        : +proj=utm +zone=47 +datum=WGS84 +units=m +no_defs \nsource     : memory\nnames      : layer \nvalues     : -5.136259e-14, 233.2346  (min, max)\n\n\n\n\n\nkde_sp_bw_raster &lt;- raster(kde_sp_bw)\nprojection(kde_sp_bw_raster) &lt;- CRS(\"+init=EPSG:32647\")  \nkde_sp_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4386052, 0.2064404  (x, y)\nextent     : 656.299, 712.4405, 1490.796, 1517.22  (xmin, xmax, ymin, ymax)\ncrs        : +proj=utm +zone=47 +datum=WGS84 +units=m +no_defs \nsource     : memory\nnames      : layer \nvalues     : -1.479576e-13, 739.9567  (min, max)\n\n\n\n\n\nkde_ss_bw_raster &lt;- raster(kde_ss_bw)\nprojection(kde_ss_bw_raster) &lt;- CRS(\"+init=EPSG:32647\")\nkde_ss_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.332527, 0.2598575  (x, y)\nextent     : 611.1044, 653.6678, 1484.414, 1517.676  (xmin, xmax, ymin, ymax)\ncrs        : +proj=utm +zone=47 +datum=WGS84 +units=m +no_defs \nsource     : memory\nnames      : layer \nvalues     : -5.709496e-14, 324.038  (min, max)\n\n\n\n\n\n\n\n\nWe will display the raster in cartographic quality map using tmap package:\n\nBangkokNakhon PathomNonthaburiPathum ThaniSamut PrakanSamut Sakhon\n\n\n\ntm_shape(kde_bkk_bw_raster)+\n  tm_raster(\"layer\",palette = \"viridis\")+\n  tm_layout(legend.outside = TRUE,\n            legend.outside.position = \"right\",\n            legend.position = c(\"right\",\"bottom\"),\n            main.title = \"Distribution of road accidents in Bangkok\",\n            main.title.size = 0.8,\n            frame = FALSE)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(kde_np_bw_raster)+\n  tm_raster(\"layer\",palette = \"viridis\")+\n  tm_layout(legend.outside = TRUE,\n            legend.outside.position = \"right\",\n            legend.position = c(\"right\",\"bottom\"),\n            main.title = \"Distribution of road accidents in Nakhon Pathom\",\n            main.title.size = 0.8,\n            frame = FALSE)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(kde_n_bw_raster)+\n  tm_raster(\"layer\",palette = \"viridis\")+\n  tm_layout(legend.outside = TRUE,\n            legend.outside.position = \"right\",\n            legend.position = c(\"right\",\"bottom\"),\n            main.title = \"Distribution of road accidents in Nonthaburi\",\n            main.title.size = 0.8,\n            frame = FALSE)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(kde_pt_bw_raster)+\n  tm_raster(\"layer\",palette = \"viridis\")+\n  tm_layout(legend.outside = TRUE,\n            legend.outside.position = \"right\",\n            legend.position = c(\"right\",\"bottom\"),\n            main.title = \"Distribution of road accidents in Pathum Thani\",\n            main.title.size = 0.8,\n            frame = FALSE)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(kde_sp_bw_raster)+\n  tm_raster(\"layer\",palette = \"viridis\")+\n  tm_layout(legend.outside = TRUE,\n            legend.outside.position = \"right\",\n            legend.position = c(\"right\",\"bottom\"),\n            main.title = \"Distribution of road accidents in Samut Prakan\",\n            main.title.size = 0.8,\n            frame = FALSE)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(kde_ss_bw_raster)+\n  tm_raster(\"layer\",palette = \"viridis\")+\n  tm_layout(legend.outside = TRUE,\n            legend.outside.position = \"right\",\n            legend.position = c(\"right\",\"bottom\"),\n            main.title = \"Distribution of road accidents in Samut Sakhon\",\n            main.title.size = 0.8,\n            frame = FALSE)\n\n\n\n\n\n\n\n\n\n\n\nFrom the plots above, we note the maximum KDE for each province (in descending order) and details for each province as follows:\n\nSamut Prakan - up to 600 to 800. Most of the road accidents optically seem to occur at 3 segments.\nBangkok - up to 500 to 600. Most of the road accidents optically seem to occur at major road lines.\nSamut Sakhon: Max density up to 300 to 350. Most of the road accidents seem to occur along the same major road.\nPathum Thani - up to 200 to 250. Most of the road accidents seem to occur along the same major road.\nNonthaburi - up to 150 to 200. Most of the road accidents optically seem to be scattered.\nNakhon Pathom - up to 50 to 60. Most of the road accidents optically seem to be scattered.\n\nFurther comments are as follows:\n\nNotably, while Bangkok is a known tourist destination/major urban hub, it ranks second to Samut Prakan in terms of road accident density.\nRoad accidents seem more scattered in Nonthaburi and Nakhon Pathom which suggest that there could be more complex road systems in these areas where accidents could occur at various points.\n\n\n\n\n\nAfter running KDE which shows the density of road accidents over the BMR, we will perform the Clark-Evans test of aggregation to statistically validate the degree of spatial clustering or dispersion of the road accident points by comparing the observed mean nearest neighbor distance with the expected average distance between neighbours in a hypothetical random distribution.\nThe test hypotheses are:\nH0: The distribution of road accidents is randomly distributed.\nH1: The distribution of road accidents is not randomly distributed.\nThe 95% confidence interval will be used.\n\n\n\n\n\n\nclarkevans.test(roadacc_owin_ppp.km,\n                correction = \"none\",\n                clipregion = \"province_owin\",\n                alternative = c(\"clustered\"),\n                nsim = 999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  roadacc_owin_ppp.km\nR = 0.19092, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\n\nSince p-value is less than 0.05, there is sufficient evidence to reject the null hypothesis H0 that the distribution of road accidents is randomly distributed.\nThis is further supported by the R value of 0.19092. As this R value is less than 1, it indicates that the pattern exhibits clustering and that the road accidents tend to occur close to one another and not in a dispersed/regular manner.\n\n\n\n\n\nBangkokNakhon PathomNonthaburiPathum ThaniSamut PrakanSamut Sakhon\n\n\n\nclarkevans.test(roadacc_bkk_ppp.km,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  roadacc_bkk_ppp.km\nR = 0.12057, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\n\nclarkevans.test(roadacc_np_ppp.km,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  roadacc_np_ppp.km\nR = 0.28949, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\n\nclarkevans.test(roadacc_n_ppp.km,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  roadacc_n_ppp.km\nR = 0.38919, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\n\nclarkevans.test(roadacc_pt_ppp.km,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  roadacc_pt_ppp.km\nR = 0.24798, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\n\nclarkevans.test(roadacc_sp_ppp.km,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  roadacc_sp_ppp.km\nR = 0.14367, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\n\nclarkevans.test(roadacc_ss_ppp.km,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  roadacc_ss_ppp.km\nR = 0.23989, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\n\nBased on the results above, for which all R values are less than 1 and all p-values are less than 0.05, we reject the null hypothesis at 95% confidence interval. There is sufficient evidence to indicate that the distribution of road accidents in all provinces is not randomly distributed and instead exhibit clustering.\n\n\n\n\nNetwork constrained SPPA (NetSPPA) is a collection of SAPPA methods specially developed for analysing spatial point events that occur on or alongside a network. In this case, it can be used for the analysis of road accidents that occur on or alongside the road lines network in the BMR.\nBefore we go into the analysis, we visualise the geospatial data (to save bandwidth, we directly use plot mode):\n\ntmap_mode('plot')\ntm_shape(roadacc)+\n  tm_dots(col = \"red\")+\n  tm_shape(roadsbkk)+\n  tm_lines()\n\n\n\n\n\n\n\n\n\n\nNKDE is used to visualise and explore the intensity of point processes i.e. road accidents along the network i.e. road lines.\n\n\n\nBefore we compute NKDE, we need to select an appropriate bandwidth. In this case we will use the K nearest neighbour adaptive bandwidth (reference). Under this method, the K nearest neighbour distance could be used as a locally adapted bandwidth for intensity estimation.\nWe will first use the nearest neighbour distance to understand the distance between road accident points along the road lines in BMR - we do this by running nndist() function on our ppp object:\n\nnnd_dist &lt;- nndist(roadacc_owin_ppp.km)\nsummary(nnd_dist)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n0.00000 0.00123 0.01303 0.07336 0.04663 7.73467 \n\n\nThe median and max distance between road lines in BMR is 0.01303 km and 7.73467 km respectively.\nWe first aggregate events that are very close i.e. round up of median distance ~15 metres away:\n\nroadacc$weight &lt;- 1\nroadacc_agg &lt;- aggregate_points(roadacc,15, weight = \"weight\")\n\nWe then calculate for each event its distance to its 20th neighbour:\n\nknn_dists &lt;- network_knn(origins = roadacc_agg,\n                         lines = roadsbkk,\n                         k = 30,\n                         maxdistance = 5000,\n                         line_weight = \"length\",\n                         digits = 2,\n                         tol = 0.1)\n\n\nbws &lt;- knn_dists$distances[,20]\n\nggplot()+\n  geom_histogram(aes(x=bws),\n                 fill = \"white\",\n                 color = \"black\",\n                 bins = 50)+\n  labs(x = \"distance to 20th neighbour (metres)\")\n\n\n\n\n\n\n\n\nBased on the histogram above, we note that there are some events for which the 20th neighbour is very far. We decide to trim the bandwidth at 10000 metres.\n\ntrimmed_bw &lt;- ifelse(bws &gt; 10000,10000, bws)\n\n\n\n\nBefore computing NKDE, the roadsbkk object needs to be cut into lixels with a specified minimal distance. We do this using lixelize_lines() of spNetwork.\nTo determine the appropriate lixel size to use, we need to consider several factors such as the scale of our study, density of accidents. road network characteristics. Some reasons are provided below:\n\nscale of study: shorter lixels may allow capturing of finer details for study of road accidents at a local scale however longer lixels may be more suitable to study patterns over larger distances.\ndensity of accidents: high road accident density areas may benefit from shorter lixels that would enable the capture of precise clustering on small road segments. however, long lixels can help to smooth out analysis for less dense areas and avoid overrepresenting sparsely populated segments\nroad network characteristics: more complex road networks may benefit from shorter lixels to indicate the finer details of the road lines while larger road networks may work better with longer lixels.\n\nBased on the analysis of K-nearest neighbors with adaptive bandwidth under 9.1.1 Determining appropriate bandwidth, we observe from the histogram that most road accidents occur within 1000m to 2000m of each other. We hence set the lixel lengths within this distance to help capture the density of accidents more effectively:\n\nlixels &lt;- lixelize_lines(roadsbkk,\n                         2000,\n                         mindist = 1000)\nsamples &lt;- lines_center(lixels)\n\n\ndensities &lt;- nkde(lines = roadsbkk,\n                  events = roadacc_agg,\n                  w = roadacc_agg$weight,\n                  samples = samples,\n                  kernel_name = \"quartic\",\n                  bw = trimmed_bw,\n                  div = \"bw\",\n                  adaptive = FALSE,\n                  method = \"simple\",\n                  digits = 1,\n                  tol = 1,\n                  grid_shape = c(5,5),\n                  verbose = FALSE,\n                  diggle_correction = FALSE,\n                  study_area = NULL,\n                  max_depth = 5,\n                  agg = NULL,\n                  sparse = TRUE)\n\nTo minimise re-running the code above, we save densities generated as a new rds file:\n\n\nCode\nwrite_rds(densities,\"data/rds/densities.rds\")\n\n\n\n\nCode\ndensities &lt;- read_rds(\"data/rds/densities.rds\")\n\n\n\n\n\nBefore visualising NKDE values, we insert the computed density values into samples and lixels objects as density field. We also multiply the densities by 1000 to rescale the density values from metres (as the EPSG 32647 projection system is in metres which make the computed density values very small and hard to comprehend) to number of events per kilometer. We then map the result:\n\n# rescaling to help the mapping\nsamples$density &lt;- densities*1000\nlixels$density &lt;- densities*1000\n\n\ncolorRamp &lt;- brewer.pal(n = 5, name = \"Spectral\")\ncolorRamp &lt;- rev(colorRamp)\n\nsamples2 &lt;- samples[order(samples$density),]\ntitle &lt;- paste0(\"Road accident density by kilometres in BMR,\",\n                \"\\nusing an adaptive bandwidth (20th nearest neighbour)\")\n\ntmap_mode('plot')\ntm_shape(roadsbkk) + \n  tm_lines(\"black\") + \n  tm_shape(samples2) + \n  tm_dots(\"density\", style = \"kmeans\", palette = colorRamp, n = 5, size = 0.1) + \n  tm_layout(legend.outside = TRUE, \n            main.title = title, main.title.size = 1)\n\n\nPlotting it in the lixel density format:\n\ncolorRamp &lt;- brewer.pal(n = 5, name = \"RdYlGn\")\ncolorRamp &lt;- rev(colorRamp)\n\nlix_density_break &lt;- quantile(lixels$density, probs = seq(0, 1, length.out = 5))\ntitle &lt;- paste0(\"Road accident density by kilometres in BMR,\",\n                \"\\nusing an adaptive bandwidth (20th nearest neighbour)\")\n\ntmap_mode('plot')\ntm_shape(lixels) +\n  tm_lines(col = \"density\", palette = colorRamp, breaks = lix_density_break) +\n  tm_shape(roadacc_agg) +\n  tm_dots(col = \"black\", size = 0.01)+\n  tm_layout(legend.outside = TRUE, \n            main.title = title, main.title.size = 1)\n\n\n\n\n\n\n\n\nBased on the plot above, we observe the following:\n\nDense occurrence of road accidents within central Bangkok along intricate road networks where there are more complicated road lines\nDenser occurrence of road accidents at intersections of road segments\n\n\n\n\n\nEvents recorded on a network often have a temporal dimension. This is also applicable for road accidents in BMR which have incident datetime data. This will allow us to understand the distribution of road accidents across time and identify if there are certain time periods where road accidents might occur more often.\nWe will explore the density of road accidents in time, specifically by month, by day of week and by time of day. EDA exploring these time elements in the data can be found in Part 1A.\n\n\n\nroadacc$inc_month &lt;- as.numeric(roadacc$inc_month)\nroadacc$inc_dayofweek &lt;- as.numeric(roadacc$inc_dayofweek)\nroadacc$inc_time &lt;- as.numeric(roadacc$inc_time)\n\nWe utilise the tkde() function to calculate the temporal kernel density estimate.\nWe initialize the weights by creating a vector w where each element is 1, with a length equal to the number of rows in the roadacc data. This means that each road accident will be equally weight in the KDE calculation.\nWe also generate a sample range starting from the minimum to maximum month in inc_month column of the roadacc dataset, with increments of 0.5. As a recap, inc_month represents the month of the occurrence of the incident.\n\nw &lt;- rep(1,nrow(roadacc))\nsamples &lt;- seq(min(roadacc$inc_month),max(roadacc$inc_month),0.5)\n\nThe kernel density estimation is calculated for several bandwidths (bw 1 to bw 6 as seen in the codes below). Each bandwidth gives a different smoothing effect on the density estimate. bw 1 gives a more sensitive estimate, capturing fine details in the distribution of road accidents while larger bandwidth bw 6 will create a smoother density estimate by averaging over a wider range of data points.\n\nmonth_kernel_val &lt;- data.frame(\n  bw_1 = tkde(roadacc$inc_month, w=w, samples = samples, bw = 1, kernel_name = \"quartic\"),\n  bw_2 = tkde(roadacc$inc_month, w=w, samples = samples, bw = 2, kernel_name = \"quartic\"),\n  bw_3 = tkde(roadacc$inc_month, w=w, samples = samples, bw = 3, kernel_name = \"quartic\"),\n  bw_4 = tkde(roadacc$inc_month, w=w, samples = samples, bw = 4, kernel_name = \"quartic\"),\n  bw_5 = tkde(roadacc$inc_month, w=w, samples = samples, bw = 5, kernel_name = \"quartic\"),\n  bw_6 = tkde(roadacc$inc_month, w=w, samples = samples, bw = 6, kernel_name = \"quartic\"),\n  month = samples\n)\n\n\ndf_month &lt;- reshape2::melt(month_kernel_val, id.vars = \"month\")\n\ndf_month$variable &lt;- as.factor(df_month$variable)\n\nggplot(data = df_month)+\n  geom_line(aes(x=month,y=value))+\n  scale_x_continuous(breaks =1:12, labels = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\")) +\n  facet_wrap(vars(variable),ncol=2, scales=\"free\")+\n  labs(title = \"Temporal KDE for Occurrence of Road Accidents by Month\", x = \"Month\", y=\"Density\")+\n  theme(axis.text = element_text(size = 5))\n\n\n\n\n\n\n\n\nBased on the plots above, we observe that:\n\nthe density curve for bw 1 is more jagged, reflecting more clearly the variations between the months - there are more significant drops in densities of road accidents in Feb, May and Nov while there are significant increases in densities of road accidents slightly before Apr, Oct and Dec.\nthe density curve starts to smooth out from bw 2. bw 3 and bw 4 seem to best capture the bimodal shape of the temporal dimension of road accidents before the bimodal shape starts to be less obvious in bw 5 and is entirely gone in bw 6 (this is hence why we stop at bw 6 and do not explore further bandwidths).\nfor bw 3 and 4, it is clear that occurrence of road accidents is most dense at the start (~Mar to Apr) and end of the year (towards the Oct period), while the occurrence of road accidents is less dense in the middle part of the year. This could be explained by the holiday seasons near the start and end of year that could have led to higher traffic on the roads. Further, the peak near Apr could be explained by the Songkran (Thai New Year) Festival that occurs annually in Apr, which could have led to more traffic and pedestrians on the road, increasing the chances of accidents.\n\n\n\n\nWe conduct a similar analysis to study the distribution of road accidents by day of week. It is important to recall that we assigned the week to start from Monday during the data wrangling steps in Part 1A.\n\nw &lt;- rep(1,nrow(roadacc))\nsamples &lt;- seq(min(roadacc$inc_dayofweek),max(roadacc$inc_dayofweek),0.5)\n\nday_kernel_val &lt;- data.frame(\n  bw_1 = tkde(roadacc$inc_dayofweek, w=w, samples = samples, bw = 1, kernel_name = \"quartic\"),\n  bw_2 = tkde(roadacc$inc_dayofweek, w=w, samples = samples, bw = 2, kernel_name = \"quartic\"),\n  bw_3 = tkde(roadacc$inc_dayofweek, w=w, samples = samples, bw = 3, kernel_name = \"quartic\"),\n  bw_4 = tkde(roadacc$inc_dayofweek, w=w, samples = samples, bw = 4, kernel_name = \"quartic\"),\n  day = samples\n)\n\n\ndf_day &lt;- reshape2::melt(day_kernel_val, id.vars = \"day\")\ndf_day$variable &lt;- as.factor(df_day$variable)\n\nggplot(data = df_day)+\n  geom_line(aes(x=day,y=value))+\n  scale_x_continuous(breaks =1:7, labels = c(\"Mon\",\"Tues\",\"Wed\",\"Thu\",\"Fri\",\"Sat\",\"Sun\")) +\n  facet_wrap(vars(variable),ncol=2, scales=\"free\")+\n  labs(title = \"Temporal KDE for Occurrence of Road Accidents by Day of the Week\", x = \"Day\", y=\"Density\")+\n  theme(axis.text = element_text(size = 5))\n\n\n\n\n\n\n\n\nBased on the plots above, we observe that:\n\nthe density curve for bw 1 is more jagged, reflecting more clearly the variations between the days - there are more significant increases in densities of road accidents from Fri to Sat. This could be explained by Fri and Sat being the start of the weekend and more traffic and pedestrians being out on the road for social activities.\nthe density curve starts to smooth out in bw 2 and seem to best capture the bimodal shape of the temporal dimension of road accidents - the density of road accidents increase between Fri to Sat and then drop on Sun and Mon before increasing on Tues again. As stated in the above point, the increase between Fri and Sat can be explained by these days being the start of the weekend, the drop in Sun and Mon could be due to less traffic as people start to get ready for the work/school week ahead and potentially even Mon blues when less people might travel to work. The increase in road accidents from Tues could be due to the steady stream of office workers/school children heading to office/school.\nThe bimodal shape becomes less obvious/almost entirely gone in bw3 and 4 (this is hence why we stop at bw 4 and do not explore further bandwidths).\n\n\n\n\nWe conduct a similar analysis to study the distribution of road accidents by time of day.\n\nw &lt;- rep(1,nrow(roadacc))\nsamples &lt;- seq(min(roadacc$inc_time),max(roadacc$inc_time),0.5)\n\ntime_kernel_val &lt;- data.frame(\n  bw_1 = tkde(roadacc$inc_time, w=w, samples = samples, bw = 1, kernel_name = \"quartic\"),\n  bw_2 = tkde(roadacc$inc_time, w=w, samples = samples, bw = 2, kernel_name = \"quartic\"),\n  bw_3 = tkde(roadacc$inc_time, w=w, samples = samples, bw = 3, kernel_name = \"quartic\"),\n  bw_4 = tkde(roadacc$inc_time, w=w, samples = samples, bw = 4, kernel_name = \"quartic\"),\n  bw_5 = tkde(roadacc$inc_time, w=w, samples = samples, bw = 5, kernel_name = \"quartic\"),\n  bw_6 = tkde(roadacc$inc_time, w=w, samples = samples, bw = 6, kernel_name = \"quartic\"),\n  time = samples\n)\n\n\ndf_time &lt;- reshape2::melt(time_kernel_val, id.vars = \"time\")\ndf_time$variable &lt;- as.factor(df_time$variable)\n\nggplot(data = df_time)+\n  geom_line(aes(x=time,y=value))+\n  scale_x_continuous(breaks =1:24) +\n  facet_wrap(vars(variable),ncol=2, scales=\"free\")+\n  labs(title = \"Temporal KDE for Occurrence of Road Accidents by Time of Day\", x = \"Time\", y=\"Density\")+\n  theme(axis.text = element_text(size = 5))\n\n\n\n\n\n\n\n\nBased on the plots above, we observe that:\n\nthe density curve for bw 1 is more jagged, reflecting more clearly the variations between the hours of the day - there are more significant increases in densities of road accidents from 7am. This could be explained by 7am being the start of the day and more traffic and pedestrians being out on the road for their daily activities.\nthe density curve starts to smooth out from bw 2 showing the period of 7am to 11am as the peak of the density of road accidents, how it dips from 12pm to 1pm (which could be explained by it being lunch hour and regular workers might be having their lunch rather than being out on the road) and the slight increase between 6pm to 8pm which is the knock-off time for office workers, hence leading to more traffic and pedestrians on the road. the density of road accidents dip significantly from 11pm which could be explained by it being the end of the day for most people hence leading to less traffic on the road and lower chances of road accidents occurring.\nthe density curve starts to smooth out significantly from bw 3 onwards before forming an entirely smooth hump in bw 6 (this is hence why we stop at bw 6 and do not explore further bandwidths).\n\n\n\n\n\nWe now combine the separate spatial and temporal analysis carried out in sections above under one combined spatio-temporal analysis.\n\nWhile spatial analysis helps us to understand the pattern of events i.e. road accidents across geographical locations, it treats time as static and might miss how phenomena evolves over time.\nWhile temporal analysis studies changes over time, it ignores spatial relationships and might overlook how events at different locations might be interconnected.\nSpatio-temporal analysis provides an understanding of how events, in this case road accidents, are change across both space and time.\n\nUnder this section, the specific research questions we would like to answer are:\n\nare the locations of road accidents in BMR spatially and spatio-temporally independent?\nif the answer is no, where and when do the observed road accidents tend to cluster?\n\n\n\n\n\n\nAs a recap, we visualise the distribution of road accidents by month:\n\ntm_shape(provincedata32647)+\n  tm_polygons()+\n  tm_shape(roadacc)+\n  tm_dots(size=0.05,col = \"blue\",alpha =0.5)+\n  tm_facets(by=\"inc_month\",\n            free.coords = FALSE,\n            drop.units = TRUE)\n\n\n\n\n\n\n\n\nAs can be seen, there seem to be more road accidents in Apr, Oct and Dec.\n\n\n\nIn this section, we will compute STKDE using spattemp.density() of sparr package.\n\n\n\nThe code chunk below removes the unwanted fields from roadacc dataframe as as.ppp() only requires the month and geometry field from the input roadacc sf dataframe.\n\nroadacc_month &lt;- roadacc %&gt;%\n  select(inc_month)\n\n\n\n\nThe code chunk below is used to derive a ppp object frm the roadacc_month sf dataframe:\n\nroadacc_month_ppp &lt;- as.ppp(roadacc_month)\nroadacc_month_ppp\n\nMarked planar point pattern: 12985 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [591277.5, 710166.1] x [1486845.7, 1576520.5] units\n\n\nThe code chunk below is used to check that the output is in the correct object class:\n\nsummary(roadacc_month_ppp)\n\nMarked planar point pattern:  12985 points\nAverage intensity 1.217956e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   4.000   7.000   6.666  10.000  12.000 \n\nWindow: rectangle = [591277.5, 710166.1] x [1486845.7, 1576520.5] units\n                    (118900 x 89670 units)\nWindow area = 10661300000 square units\n\n\nWe note that there are duplicated point events from the code below:\n\nany(duplicated(roadacc_month_ppp))\n\n[1] TRUE\n\n\nWe use the multiplicity() function to count the number of co-incident points:\n\nmultiplicity(roadacc_month_ppp)\n\n    1     2     3     4     5     6     7     8     9    10    11    12    13 \n    1     1     1     2     1     1     1     1     2     1     1     1     1 \n   14    15    16    17    18    19    20    21    22    23    24    25    26 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n   27    28    29    30    31    32    33    34    35    36    37    38    39 \n    1     1     4     1     1     1     2     1     1     6     1     4     4 \n   40    41    42    43    44    45    46    47    48    49    50    51    52 \n    1     1     4     1     1     1     1     1     1     1     1     1     1 \n   53    54    55    56    57    58    59    60    61    62    63    64    65 \n    1     1     1     1     6     6     1     6     1     1     6     3     1 \n   66    67    68    69    70    71    72    73    74    75    76    77    78 \n    6     1     1     1     1     1     1     1     3     2     1     1     1 \n   79    80    81    82    83    84    85    86    87    88    89    90    91 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n   92    93    94    95    96    97    98    99   100   101   102   103   104 \n    1     1     1     2     1     3     1     1     2     1     1     1     1 \n  105   106   107   108   109   110   111   112   113   114   115   116   117 \n    1     1     4     1     1     1    10    10     4     1     1     1     1 \n  118   119   120   121   122   123   124   125   126   127   128   129   130 \n    4     1     1     1    10    10     1     1     1     1     1     1     1 \n  131   132   133   134   135   136   137   138   139   140   141   142   143 \n    1     1     1     1    10     1     1    10     1     1    10     1     1 \n  144   145   146   147   148   149   150   151   152   153   154   155   156 \n   10    10     1     1     1     1     1     1     1     1     1     1    10 \n  157   158   159   160   161   162   163   164   165   166   167   168   169 \n    4     2     1     1     1     1     1     2     2     1     1     1     1 \n  170   171   172   173   174   175   176   177   178   179   180   181   182 \n    1     3     2     4     1     3     1     1     1     1     1     4     4 \n  183   184   185   186   187   188   189   190   191   192   193   194   195 \n    1     1     2     1     3     1     1     1     1     1     3     4     1 \n  196   197   198   199   200   201   202   203   204   205   206   207   208 \n    1     1     1     1     3     1     1     1     1     4     4     1     1 \n  209   210   211   212   213   214   215   216   217   218   219   220   221 \n    4     1     1     1     1     1     1     1     1     1     1     1     1 \n  222   223   224   225   226   227   228   229   230   231   232   233   234 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n  235   236   237   238   239   240   241   242   243   244   245   246   247 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  248   249   250   251   252   253   254   255   256   257   258   259   260 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  261   262   263   264   265   266   267   268   269   270   271   272   273 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  274   275   276   277   278   279   280   281   282   283   284   285   286 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  287   288   289   290   291   292   293   294   295   296   297   298   299 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  300   301   302   303   304   305   306   307   308   309   310   311   312 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  313   314   315   316   317   318   319   320   321   322   323   324   325 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n  326   327   328   329   330   331   332   333   334   335   336   337   338 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  339   340   341   342   343   344   345   346   347   348   349   350   351 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  352   353   354   355   356   357   358   359   360   361   362   363   364 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  365   366   367   368   369   370   371   372   373   374   375   376   377 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  378   379   380   381   382   383   384   385   386   387   388   389   390 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  391   392   393   394   395   396   397   398   399   400   401   402   403 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n  404   405   406   407   408   409   410   411   412   413   414   415   416 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  417   418   419   420   421   422   423   424   425   426   427   428   429 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  430   431   432   433   434   435   436   437   438   439   440   441   442 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  443   444   445   446   447   448   449   450   451   452   453   454   455 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  456   457   458   459   460   461   462   463   464   465   466   467   468 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  469   470   471   472   473   474   475   476   477   478   479   480   481 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  482   483   484   485   486   487   488   489   490   491   492   493   494 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  495   496   497   498   499   500   501   502   503   504   505   506   507 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n  508   509   510   511   512   513   514   515   516   517   518   519   520 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  521   522   523   524   525   526   527   528   529   530   531   532   533 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n  534   535   536   537   538   539   540   541   542   543   544   545   546 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  547   548   549   550   551   552   553   554   555   556   557   558   559 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  560   561   562   563   564   565   566   567   568   569   570   571   572 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  573   574   575   576   577   578   579   580   581   582   583   584   585 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  586   587   588   589   590   591   592   593   594   595   596   597   598 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n  599   600   601   602   603   604   605   606   607   608   609   610   611 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n  612   613   614   615   616   617   618   619   620   621   622   623   624 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  625   626   627   628   629   630   631   632   633   634   635   636   637 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  638   639   640   641   642   643   644   645   646   647   648   649   650 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n  651   652   653   654   655   656   657   658   659   660   661   662   663 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  664   665   666   667   668   669   670   671   672   673   674   675   676 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  677   678   679   680   681   682   683   684   685   686   687   688   689 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n  690   691   692   693   694   695   696   697   698   699   700   701   702 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  703   704   705   706   707   708   709   710   711   712   713   714   715 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n  716   717   718   719   720   721   722   723   724   725   726   727   728 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n  729   730   731   732   733   734   735   736   737   738   739   740   741 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n  742   743   744   745   746   747   748   749   750   751   752   753   754 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n  755   756   757   758   759   760   761   762   763   764   765   766   767 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  768   769   770   771   772   773   774   775   776   777   778   779   780 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n  781   782   783   784   785   786   787   788   789   790   791   792   793 \n    1     1     2     1     1     1     1     1     2     1     1     1     1 \n  794   795   796   797   798   799   800   801   802   803   804   805   806 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  807   808   809   810   811   812   813   814   815   816   817   818   819 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  820   821   822   823   824   825   826   827   828   829   830   831   832 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  833   834   835   836   837   838   839   840   841   842   843   844   845 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n  846   847   848   849   850   851   852   853   854   855   856   857   858 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  859   860   861   862   863   864   865   866   867   868   869   870   871 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n  872   873   874   875   876   877   878   879   880   881   882   883   884 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n  885   886   887   888   889   890   891   892   893   894   895   896   897 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  898   899   900   901   902   903   904   905   906   907   908   909   910 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  911   912   913   914   915   916   917   918   919   920   921   922   923 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n  924   925   926   927   928   929   930   931   932   933   934   935   936 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  937   938   939   940   941   942   943   944   945   946   947   948   949 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  950   951   952   953   954   955   956   957   958   959   960   961   962 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  963   964   965   966   967   968   969   970   971   972   973   974   975 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n  976   977   978   979   980   981   982   983   984   985   986   987   988 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n  989   990   991   992   993   994   995   996   997   998   999  1000  1001 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1002  1003  1004  1005  1006  1007  1008  1009  1010  1011  1012  1013  1014 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1015  1016  1017  1018  1019  1020  1021  1022  1023  1024  1025  1026  1027 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1028  1029  1030  1031  1032  1033  1034  1035  1036  1037  1038  1039  1040 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1041  1042  1043  1044  1045  1046  1047  1048  1049  1050  1051  1052  1053 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1054  1055  1056  1057  1058  1059  1060  1061  1062  1063  1064  1065  1066 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1067  1068  1069  1070  1071  1072  1073  1074  1075  1076  1077  1078  1079 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1080  1081  1082  1083  1084  1085  1086  1087  1088  1089  1090  1091  1092 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 1093  1094  1095  1096  1097  1098  1099  1100  1101  1102  1103  1104  1105 \n    1     1     1     1     2     1     1     1     1     1     3     1     1 \n 1106  1107  1108  1109  1110  1111  1112  1113  1114  1115  1116  1117  1118 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1119  1120  1121  1122  1123  1124  1125  1126  1127  1128  1129  1130  1131 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1132  1133  1134  1135  1136  1137  1138  1139  1140  1141  1142  1143  1144 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1145  1146  1147  1148  1149  1150  1151  1152  1153  1154  1155  1156  1157 \n    1     1     1     2     2     1     1     1     1     1     1     1     2 \n 1158  1159  1160  1161  1162  1163  1164  1165  1166  1167  1168  1169  1170 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1171  1172  1173  1174  1175  1176  1177  1178  1179  1180  1181  1182  1183 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1184  1185  1186  1187  1188  1189  1190  1191  1192  1193  1194  1195  1196 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1197  1198  1199  1200  1201  1202  1203  1204  1205  1206  1207  1208  1209 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1210  1211  1212  1213  1214  1215  1216  1217  1218  1219  1220  1221  1222 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1223  1224  1225  1226  1227  1228  1229  1230  1231  1232  1233  1234  1235 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 1236  1237  1238  1239  1240  1241  1242  1243  1244  1245  1246  1247  1248 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1249  1250  1251  1252  1253  1254  1255  1256  1257  1258  1259  1260  1261 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1262  1263  1264  1265  1266  1267  1268  1269  1270  1271  1272  1273  1274 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 1275  1276  1277  1278  1279  1280  1281  1282  1283  1284  1285  1286  1287 \n    1     1     1     1     1     1     1     1     1     3     1     1     1 \n 1288  1289  1290  1291  1292  1293  1294  1295  1296  1297  1298  1299  1300 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1301  1302  1303  1304  1305  1306  1307  1308  1309  1310  1311  1312  1313 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1314  1315  1316  1317  1318  1319  1320  1321  1322  1323  1324  1325  1326 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1327  1328  1329  1330  1331  1332  1333  1334  1335  1336  1337  1338  1339 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1340  1341  1342  1343  1344  1345  1346  1347  1348  1349  1350  1351  1352 \n    2     1     1     1     1     1     1     1     1     2     1     1     1 \n 1353  1354  1355  1356  1357  1358  1359  1360  1361  1362  1363  1364  1365 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1366  1367  1368  1369  1370  1371  1372  1373  1374  1375  1376  1377  1378 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1379  1380  1381  1382  1383  1384  1385  1386  1387  1388  1389  1390  1391 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1392  1393  1394  1395  1396  1397  1398  1399  1400  1401  1402  1403  1404 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1405  1406  1407  1408  1409  1410  1411  1412  1413  1414  1415  1416  1417 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1418  1419  1420  1421  1422  1423  1424  1425  1426  1427  1428  1429  1430 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1431  1432  1433  1434  1435  1436  1437  1438  1439  1440  1441  1442  1443 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1444  1445  1446  1447  1448  1449  1450  1451  1452  1453  1454  1455  1456 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1457  1458  1459  1460  1461  1462  1463  1464  1465  1466  1467  1468  1469 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1470  1471  1472  1473  1474  1475  1476  1477  1478  1479  1480  1481  1482 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1483  1484  1485  1486  1487  1488  1489  1490  1491  1492  1493  1494  1495 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1496  1497  1498  1499  1500  1501  1502  1503  1504  1505  1506  1507  1508 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1509  1510  1511  1512  1513  1514  1515  1516  1517  1518  1519  1520  1521 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1522  1523  1524  1525  1526  1527  1528  1529  1530  1531  1532  1533  1534 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1535  1536  1537  1538  1539  1540  1541  1542  1543  1544  1545  1546  1547 \n    1     1     1     1     1     1     1     1     1     1     4     1     1 \n 1548  1549  1550  1551  1552  1553  1554  1555  1556  1557  1558  1559  1560 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1561  1562  1563  1564  1565  1566  1567  1568  1569  1570  1571  1572  1573 \n    1     1     1     1     1     1     1     1     1     1     1     4     1 \n 1574  1575  1576  1577  1578  1579  1580  1581  1582  1583  1584  1585  1586 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1587  1588  1589  1590  1591  1592  1593  1594  1595  1596  1597  1598  1599 \n    1     1     1     1     1     2     1     1     1     2     1     1     1 \n 1600  1601  1602  1603  1604  1605  1606  1607  1608  1609  1610  1611  1612 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1613  1614  1615  1616  1617  1618  1619  1620  1621  1622  1623  1624  1625 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1626  1627  1628  1629  1630  1631  1632  1633  1634  1635  1636  1637  1638 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1639  1640  1641  1642  1643  1644  1645  1646  1647  1648  1649  1650  1651 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1652  1653  1654  1655  1656  1657  1658  1659  1660  1661  1662  1663  1664 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 1665  1666  1667  1668  1669  1670  1671  1672  1673  1674  1675  1676  1677 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 1678  1679  1680  1681  1682  1683  1684  1685  1686  1687  1688  1689  1690 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1691  1692  1693  1694  1695  1696  1697  1698  1699  1700  1701  1702  1703 \n    1     2     1     1     1     1     1     1     1     1     1     2     1 \n 1704  1705  1706  1707  1708  1709  1710  1711  1712  1713  1714  1715  1716 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1717  1718  1719  1720  1721  1722  1723  1724  1725  1726  1727  1728  1729 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1730  1731  1732  1733  1734  1735  1736  1737  1738  1739  1740  1741  1742 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1743  1744  1745  1746  1747  1748  1749  1750  1751  1752  1753  1754  1755 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 1756  1757  1758  1759  1760  1761  1762  1763  1764  1765  1766  1767  1768 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1769  1770  1771  1772  1773  1774  1775  1776  1777  1778  1779  1780  1781 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1782  1783  1784  1785  1786  1787  1788  1789  1790  1791  1792  1793  1794 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1795  1796  1797  1798  1799  1800  1801  1802  1803  1804  1805  1806  1807 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1808  1809  1810  1811  1812  1813  1814  1815  1816  1817  1818  1819  1820 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1821  1822  1823  1824  1825  1826  1827  1828  1829  1830  1831  1832  1833 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1834  1835  1836  1837  1838  1839  1840  1841  1842  1843  1844  1845  1846 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1847  1848  1849  1850  1851  1852  1853  1854  1855  1856  1857  1858  1859 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1860  1861  1862  1863  1864  1865  1866  1867  1868  1869  1870  1871  1872 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 1873  1874  1875  1876  1877  1878  1879  1880  1881  1882  1883  1884  1885 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1886  1887  1888  1889  1890  1891  1892  1893  1894  1895  1896  1897  1898 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 1899  1900  1901  1902  1903  1904  1905  1906  1907  1908  1909  1910  1911 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1912  1913  1914  1915  1916  1917  1918  1919  1920  1921  1922  1923  1924 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 1925  1926  1927  1928  1929  1930  1931  1932  1933  1934  1935  1936  1937 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1938  1939  1940  1941  1942  1943  1944  1945  1946  1947  1948  1949  1950 \n    1     1     1     1     1     1     1     1     1     2     1     1     2 \n 1951  1952  1953  1954  1955  1956  1957  1958  1959  1960  1961  1962  1963 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1964  1965  1966  1967  1968  1969  1970  1971  1972  1973  1974  1975  1976 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1977  1978  1979  1980  1981  1982  1983  1984  1985  1986  1987  1988  1989 \n    1     1     1     1     1     1     1     2     1     1     2     1     1 \n 1990  1991  1992  1993  1994  1995  1996  1997  1998  1999  2000  2001  2002 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2003  2004  2005  2006  2007  2008  2009  2010  2011  2012  2013  2014  2015 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 2016  2017  2018  2019  2020  2021  2022  2023  2024  2025  2026  2027  2028 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 2029  2030  2031  2032  2033  2034  2035  2036  2037  2038  2039  2040  2041 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2042  2043  2044  2045  2046  2047  2048  2049  2050  2051  2052  2053  2054 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2055  2056  2057  2058  2059  2060  2061  2062  2063  2064  2065  2066  2067 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 2068  2069  2070  2071  2072  2073  2074  2075  2076  2077  2078  2079  2080 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2081  2082  2083  2084  2085  2086  2087  2088  2089  2090  2091  2092  2093 \n    2     1     1     1     1     1     1     1     1     1     1     1     2 \n 2094  2095  2096  2097  2098  2099  2100  2101  2102  2103  2104  2105  2106 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2107  2108  2109  2110  2111  2112  2113  2114  2115  2116  2117  2118  2119 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 2120  2121  2122  2123  2124  2125  2126  2127  2128  2129  2130  2131  2132 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 2133  2134  2135  2136  2137  2138  2139  2140  2141  2142  2143  2144  2145 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2146  2147  2148  2149  2150  2151  2152  2153  2154  2155  2156  2157  2158 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2159  2160  2161  2162  2163  2164  2165  2166  2167  2168  2169  2170  2171 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 2172  2173  2174  2175  2176  2177  2178  2179  2180  2181  2182  2183  2184 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2185  2186  2187  2188  2189  2190  2191  2192  2193  2194  2195  2196  2197 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 2198  2199  2200  2201  2202  2203  2204  2205  2206  2207  2208  2209  2210 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2211  2212  2213  2214  2215  2216  2217  2218  2219  2220  2221  2222  2223 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2224  2225  2226  2227  2228  2229  2230  2231  2232  2233  2234  2235  2236 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2237  2238  2239  2240  2241  2242  2243  2244  2245  2246  2247  2248  2249 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2250  2251  2252  2253  2254  2255  2256  2257  2258  2259  2260  2261  2262 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 2263  2264  2265  2266  2267  2268  2269  2270  2271  2272  2273  2274  2275 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 2276  2277  2278  2279  2280  2281  2282  2283  2284  2285  2286  2287  2288 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2289  2290  2291  2292  2293  2294  2295  2296  2297  2298  2299  2300  2301 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2302  2303  2304  2305  2306  2307  2308  2309  2310  2311  2312  2313  2314 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2315  2316  2317  2318  2319  2320  2321  2322  2323  2324  2325  2326  2327 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2328  2329  2330  2331  2332  2333  2334  2335  2336  2337  2338  2339  2340 \n    3     1     1     1     1     1     1     1     1     1     2     1     1 \n 2341  2342  2343  2344  2345  2346  2347  2348  2349  2350  2351  2352  2353 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2354  2355  2356  2357  2358  2359  2360  2361  2362  2363  2364  2365  2366 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2367  2368  2369  2370  2371  2372  2373  2374  2375  2376  2377  2378  2379 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2380  2381  2382  2383  2384  2385  2386  2387  2388  2389  2390  2391  2392 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2393  2394  2395  2396  2397  2398  2399  2400  2401  2402  2403  2404  2405 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2406  2407  2408  2409  2410  2411  2412  2413  2414  2415  2416  2417  2418 \n    1     1     1     1     1     1     1     1     1     3     1     1     1 \n 2419  2420  2421  2422  2423  2424  2425  2426  2427  2428  2429  2430  2431 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2432  2433  2434  2435  2436  2437  2438  2439  2440  2441  2442  2443  2444 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2445  2446  2447  2448  2449  2450  2451  2452  2453  2454  2455  2456  2457 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2458  2459  2460  2461  2462  2463  2464  2465  2466  2467  2468  2469  2470 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2471  2472  2473  2474  2475  2476  2477  2478  2479  2480  2481  2482  2483 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2484  2485  2486  2487  2488  2489  2490  2491  2492  2493  2494  2495  2496 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2497  2498  2499  2500  2501  2502  2503  2504  2505  2506  2507  2508  2509 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2510  2511  2512  2513  2514  2515  2516  2517  2518  2519  2520  2521  2522 \n    1     1     1     3     1     1     1     1     1     1     1     1     1 \n 2523  2524  2525  2526  2527  2528  2529  2530  2531  2532  2533  2534  2535 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 2536  2537  2538  2539  2540  2541  2542  2543  2544  2545  2546  2547  2548 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2549  2550  2551  2552  2553  2554  2555  2556  2557  2558  2559  2560  2561 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2562  2563  2564  2565  2566  2567  2568  2569  2570  2571  2572  2573  2574 \n    1     1     2     1     1     1     1     1     1     1     1     3     1 \n 2575  2576  2577  2578  2579  2580  2581  2582  2583  2584  2585  2586  2587 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2588  2589  2590  2591  2592  2593  2594  2595  2596  2597  2598  2599  2600 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2601  2602  2603  2604  2605  2606  2607  2608  2609  2610  2611  2612  2613 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 2614  2615  2616  2617  2618  2619  2620  2621  2622  2623  2624  2625  2626 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2627  2628  2629  2630  2631  2632  2633  2634  2635  2636  2637  2638  2639 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 2640  2641  2642  2643  2644  2645  2646  2647  2648  2649  2650  2651  2652 \n    1     1     1     1     1     3     3     1     1     1     1     1     1 \n 2653  2654  2655  2656  2657  2658  2659  2660  2661  2662  2663  2664  2665 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2666  2667  2668  2669  2670  2671  2672  2673  2674  2675  2676  2677  2678 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2679  2680  2681  2682  2683  2684  2685  2686  2687  2688  2689  2690  2691 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 2692  2693  2694  2695  2696  2697  2698  2699  2700  2701  2702  2703  2704 \n    1     1     3     3     1     1     1     1     1     1     1     1     1 \n 2705  2706  2707  2708  2709  2710  2711  2712  2713  2714  2715  2716  2717 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 2718  2719  2720  2721  2722  2723  2724  2725  2726  2727  2728  2729  2730 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2731  2732  2733  2734  2735  2736  2737  2738  2739  2740  2741  2742  2743 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 2744  2745  2746  2747  2748  2749  2750  2751  2752  2753  2754  2755  2756 \n    1     1     1     1     1     1     1     1     1     1     3     1     1 \n 2757  2758  2759  2760  2761  2762  2763  2764  2765  2766  2767  2768  2769 \n    1     1     1     1     1     1     1     1     2     3     1     1     1 \n 2770  2771  2772  2773  2774  2775  2776  2777  2778  2779  2780  2781  2782 \n    1     1     1     1     1     1     1     1     1     1     1     1     3 \n 2783  2784  2785  2786  2787  2788  2789  2790  2791  2792  2793  2794  2795 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2796  2797  2798  2799  2800  2801  2802  2803  2804  2805  2806  2807  2808 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2809  2810  2811  2812  2813  2814  2815  2816  2817  2818  2819  2820  2821 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2822  2823  2824  2825  2826  2827  2828  2829  2830  2831  2832  2833  2834 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2835  2836  2837  2838  2839  2840  2841  2842  2843  2844  2845  2846  2847 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2848  2849  2850  2851  2852  2853  2854  2855  2856  2857  2858  2859  2860 \n    1     1     1     1     1     1     1     2     1     1     1     1     2 \n 2861  2862  2863  2864  2865  2866  2867  2868  2869  2870  2871  2872  2873 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 2874  2875  2876  2877  2878  2879  2880  2881  2882  2883  2884  2885  2886 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2887  2888  2889  2890  2891  2892  2893  2894  2895  2896  2897  2898  2899 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2900  2901  2902  2903  2904  2905  2906  2907  2908  2909  2910  2911  2912 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2913  2914  2915  2916  2917  2918  2919  2920  2921  2922  2923  2924  2925 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2926  2927  2928  2929  2930  2931  2932  2933  2934  2935  2936  2937  2938 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2939  2940  2941  2942  2943  2944  2945  2946  2947  2948  2949  2950  2951 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2952  2953  2954  2955  2956  2957  2958  2959  2960  2961  2962  2963  2964 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2965  2966  2967  2968  2969  2970  2971  2972  2973  2974  2975  2976  2977 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2978  2979  2980  2981  2982  2983  2984  2985  2986  2987  2988  2989  2990 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2991  2992  2993  2994  2995  2996  2997  2998  2999  3000  3001  3002  3003 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3004  3005  3006  3007  3008  3009  3010  3011  3012  3013  3014  3015  3016 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 3017  3018  3019  3020  3021  3022  3023  3024  3025  3026  3027  3028  3029 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3030  3031  3032  3033  3034  3035  3036  3037  3038  3039  3040  3041  3042 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 3043  3044  3045  3046  3047  3048  3049  3050  3051  3052  3053  3054  3055 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3056  3057  3058  3059  3060  3061  3062  3063  3064  3065  3066  3067  3068 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 3069  3070  3071  3072  3073  3074  3075  3076  3077  3078  3079  3080  3081 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3082  3083  3084  3085  3086  3087  3088  3089  3090  3091  3092  3093  3094 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 3095  3096  3097  3098  3099  3100  3101  3102  3103  3104  3105  3106  3107 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3108  3109  3110  3111  3112  3113  3114  3115  3116  3117  3118  3119  3120 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3121  3122  3123  3124  3125  3126  3127  3128  3129  3130  3131  3132  3133 \n    2     1     1     1     1     1     1     1     1     1     1     1     2 \n 3134  3135  3136  3137  3138  3139  3140  3141  3142  3143  3144  3145  3146 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3147  3148  3149  3150  3151  3152  3153  3154  3155  3156  3157  3158  3159 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3160  3161  3162  3163  3164  3165  3166  3167  3168  3169  3170  3171  3172 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3173  3174  3175  3176  3177  3178  3179  3180  3181  3182  3183  3184  3185 \n    1     1     1     1     1     1     2     1     2     1     1     1     1 \n 3186  3187  3188  3189  3190  3191  3192  3193  3194  3195  3196  3197  3198 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3199  3200  3201  3202  3203  3204  3205  3206  3207  3208  3209  3210  3211 \n    1     2     1     1     1     1     1     1     2     3     1     1     1 \n 3212  3213  3214  3215  3216  3217  3218  3219  3220  3221  3222  3223  3224 \n    1     1     1     1     2     1     1     1     1     3     1     1     1 \n 3225  3226  3227  3228  3229  3230  3231  3232  3233  3234  3235  3236  3237 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3238  3239  3240  3241  3242  3243  3244  3245  3246  3247  3248  3249  3250 \n    3     1     1     1     1     1     2     1     1     1     1     1     1 \n 3251  3252  3253  3254  3255  3256  3257  3258  3259  3260  3261  3262  3263 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 3264  3265  3266  3267  3268  3269  3270  3271  3272  3273  3274  3275  3276 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3277  3278  3279  3280  3281  3282  3283  3284  3285  3286  3287  3288  3289 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 3290  3291  3292  3293  3294  3295  3296  3297  3298  3299  3300  3301  3302 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 3303  3304  3305  3306  3307  3308  3309  3310  3311  3312  3313  3314  3315 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3316  3317  3318  3319  3320  3321  3322  3323  3324  3325  3326  3327  3328 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3329  3330  3331  3332  3333  3334  3335  3336  3337  3338  3339  3340  3341 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 3342  3343  3344  3345  3346  3347  3348  3349  3350  3351  3352  3353  3354 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 3355  3356  3357  3358  3359  3360  3361  3362  3363  3364  3365  3366  3367 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3368  3369  3370  3371  3372  3373  3374  3375  3376  3377  3378  3379  3380 \n    1     1     1     1     1     1     3     1     1     1     1     1     1 \n 3381  3382  3383  3384  3385  3386  3387  3388  3389  3390  3391  3392  3393 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3394  3395  3396  3397  3398  3399  3400  3401  3402  3403  3404  3405  3406 \n    1     1     1     1     1     1     1     2     1     2     1     2     1 \n 3407  3408  3409  3410  3411  3412  3413  3414  3415  3416  3417  3418  3419 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 3420  3421  3422  3423  3424  3425  3426  3427  3428  3429  3430  3431  3432 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 3433  3434  3435  3436  3437  3438  3439  3440  3441  3442  3443  3444  3445 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3446  3447  3448  3449  3450  3451  3452  3453  3454  3455  3456  3457  3458 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3459  3460  3461  3462  3463  3464  3465  3466  3467  3468  3469  3470  3471 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3472  3473  3474  3475  3476  3477  3478  3479  3480  3481  3482  3483  3484 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 3485  3486  3487  3488  3489  3490  3491  3492  3493  3494  3495  3496  3497 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3498  3499  3500  3501  3502  3503  3504  3505  3506  3507  3508  3509  3510 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3511  3512  3513  3514  3515  3516  3517  3518  3519  3520  3521  3522  3523 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3524  3525  3526  3527  3528  3529  3530  3531  3532  3533  3534  3535  3536 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3537  3538  3539  3540  3541  3542  3543  3544  3545  3546  3547  3548  3549 \n    1     1     1     1     3     1     1     1     1     1     1     1     1 \n 3550  3551  3552  3553  3554  3555  3556  3557  3558  3559  3560  3561  3562 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3563  3564  3565  3566  3567  3568  3569  3570  3571  3572  3573  3574  3575 \n    1     1     1     1     1     1     5     2     1     1     1     1     1 \n 3576  3577  3578  3579  3580  3581  3582  3583  3584  3585  3586  3587  3588 \n    1     1     1     1     1     1     1     3     1     1     1     1     1 \n 3589  3590  3591  3592  3593  3594  3595  3596  3597  3598  3599  3600  3601 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3602  3603  3604  3605  3606  3607  3608  3609  3610  3611  3612  3613  3614 \n    1     1     1     1     1     1     1     1     3     1     1     1     1 \n 3615  3616  3617  3618  3619  3620  3621  3622  3623  3624  3625  3626  3627 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 3628  3629  3630  3631  3632  3633  3634  3635  3636  3637  3638  3639  3640 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3641  3642  3643  3644  3645  3646  3647  3648  3649  3650  3651  3652  3653 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3654  3655  3656  3657  3658  3659  3660  3661  3662  3663  3664  3665  3666 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3667  3668  3669  3670  3671  3672  3673  3674  3675  3676  3677  3678  3679 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 3680  3681  3682  3683  3684  3685  3686  3687  3688  3689  3690  3691  3692 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3693  3694  3695  3696  3697  3698  3699  3700  3701  3702  3703  3704  3705 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3706  3707  3708  3709  3710  3711  3712  3713  3714  3715  3716  3717  3718 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 3719  3720  3721  3722  3723  3724  3725  3726  3727  3728  3729  3730  3731 \n    1     2     1     1     1     1     2     1     1     1     1     1     1 \n 3732  3733  3734  3735  3736  3737  3738  3739  3740  3741  3742  3743  3744 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3745  3746  3747  3748  3749  3750  3751  3752  3753  3754  3755  3756  3757 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3758  3759  3760  3761  3762  3763  3764  3765  3766  3767  3768  3769  3770 \n    1     1     1     1     1     1     1     1     1     3     1     1     1 \n 3771  3772  3773  3774  3775  3776  3777  3778  3779  3780  3781  3782  3783 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3784  3785  3786  3787  3788  3789  3790  3791  3792  3793  3794  3795  3796 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3797  3798  3799  3800  3801  3802  3803  3804  3805  3806  3807  3808  3809 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3810  3811  3812  3813  3814  3815  3816  3817  3818  3819  3820  3821  3822 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3823  3824  3825  3826  3827  3828  3829  3830  3831  3832  3833  3834  3835 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 3836  3837  3838  3839  3840  3841  3842  3843  3844  3845  3846  3847  3848 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3849  3850  3851  3852  3853  3854  3855  3856  3857  3858  3859  3860  3861 \n    3     1     1     1     1     1     1     1     1     1     1     1     1 \n 3862  3863  3864  3865  3866  3867  3868  3869  3870  3871  3872  3873  3874 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3875  3876  3877  3878  3879  3880  3881  3882  3883  3884  3885  3886  3887 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3888  3889  3890  3891  3892  3893  3894  3895  3896  3897  3898  3899  3900 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3901  3902  3903  3904  3905  3906  3907  3908  3909  3910  3911  3912  3913 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3914  3915  3916  3917  3918  3919  3920  3921  3922  3923  3924  3925  3926 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3927  3928  3929  3930  3931  3932  3933  3934  3935  3936  3937  3938  3939 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3940  3941  3942  3943  3944  3945  3946  3947  3948  3949  3950  3951  3952 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3953  3954  3955  3956  3957  3958  3959  3960  3961  3962  3963  3964  3965 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 3966  3967  3968  3969  3970  3971  3972  3973  3974  3975  3976  3977  3978 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3979  3980  3981  3982  3983  3984  3985  3986  3987  3988  3989  3990  3991 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3992  3993  3994  3995  3996  3997  3998  3999  4000  4001  4002  4003  4004 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4005  4006  4007  4008  4009  4010  4011  4012  4013  4014  4015  4016  4017 \n    1     1     1     1     1     3     1     1     1     1     1     1     1 \n 4018  4019  4020  4021  4022  4023  4024  4025  4026  4027  4028  4029  4030 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4031  4032  4033  4034  4035  4036  4037  4038  4039  4040  4041  4042  4043 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4044  4045  4046  4047  4048  4049  4050  4051  4052  4053  4054  4055  4056 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4057  4058  4059  4060  4061  4062  4063  4064  4065  4066  4067  4068  4069 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 4070  4071  4072  4073  4074  4075  4076  4077  4078  4079  4080  4081  4082 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4083  4084  4085  4086  4087  4088  4089  4090  4091  4092  4093  4094  4095 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 4096  4097  4098  4099  4100  4101  4102  4103  4104  4105  4106  4107  4108 \n    1     1     1     1     1     2     1     1     1     1     2     1     1 \n 4109  4110  4111  4112  4113  4114  4115  4116  4117  4118  4119  4120  4121 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 4122  4123  4124  4125  4126  4127  4128  4129  4130  4131  4132  4133  4134 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4135  4136  4137  4138  4139  4140  4141  4142  4143  4144  4145  4146  4147 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4148  4149  4150  4151  4152  4153  4154  4155  4156  4157  4158  4159  4160 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4161  4162  4163  4164  4165  4166  4167  4168  4169  4170  4171  4172  4173 \n    1     1     2     1     1     1     1     1     1     1     1     1     2 \n 4174  4175  4176  4177  4178  4179  4180  4181  4182  4183  4184  4185  4186 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 4187  4188  4189  4190  4191  4192  4193  4194  4195  4196  4197  4198  4199 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4200  4201  4202  4203  4204  4205  4206  4207  4208  4209  4210  4211  4212 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4213  4214  4215  4216  4217  4218  4219  4220  4221  4222  4223  4224  4225 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 4226  4227  4228  4229  4230  4231  4232  4233  4234  4235  4236  4237  4238 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4239  4240  4241  4242  4243  4244  4245  4246  4247  4248  4249  4250  4251 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4252  4253  4254  4255  4256  4257  4258  4259  4260  4261  4262  4263  4264 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 4265  4266  4267  4268  4269  4270  4271  4272  4273  4274  4275  4276  4277 \n    1     1     1     1     1     1     1     1     1     1     2     3     1 \n 4278  4279  4280  4281  4282  4283  4284  4285  4286  4287  4288  4289  4290 \n    1     1     1     1     1     1     1     1     3     1     1     1     1 \n 4291  4292  4293  4294  4295  4296  4297  4298  4299  4300  4301  4302  4303 \n    1     1     1     1     1     1     1     1     1     1     1     4     1 \n 4304  4305  4306  4307  4308  4309  4310  4311  4312  4313  4314  4315  4316 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4317  4318  4319  4320  4321  4322  4323  4324  4325  4326  4327  4328  4329 \n    1     1     1     3     1     1     1     1     1     1     1     1     1 \n 4330  4331  4332  4333  4334  4335  4336  4337  4338  4339  4340  4341  4342 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4343  4344  4345  4346  4347  4348  4349  4350  4351  4352  4353  4354  4355 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4356  4357  4358  4359  4360  4361  4362  4363  4364  4365  4366  4367  4368 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4369  4370  4371  4372  4373  4374  4375  4376  4377  4378  4379  4380  4381 \n    1     4     1     1     1     1     1     1     1     1     1     1     1 \n 4382  4383  4384  4385  4386  4387  4388  4389  4390  4391  4392  4393  4394 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4395  4396  4397  4398  4399  4400  4401  4402  4403  4404  4405  4406  4407 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4408  4409  4410  4411  4412  4413  4414  4415  4416  4417  4418  4419  4420 \n    1     1     1     1     4     1     1     1     1     1     1     1     1 \n 4421  4422  4423  4424  4425  4426  4427  4428  4429  4430  4431  4432  4433 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 4434  4435  4436  4437  4438  4439  4440  4441  4442  4443  4444  4445  4446 \n    1     1     4     1     1     1     1     1     1     1     1     1     1 \n 4447  4448  4449  4450  4451  4452  4453  4454  4455  4456  4457  4458  4459 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 4460  4461  4462  4463  4464  4465  4466  4467  4468  4469  4470  4471  4472 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4473  4474  4475  4476  4477  4478  4479  4480  4481  4482  4483  4484  4485 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4486  4487  4488  4489  4490  4491  4492  4493  4494  4495  4496  4497  4498 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4499  4500  4501  4502  4503  4504  4505  4506  4507  4508  4509  4510  4511 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4512  4513  4514  4515  4516  4517  4518  4519  4520  4521  4522  4523  4524 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4525  4526  4527  4528  4529  4530  4531  4532  4533  4534  4535  4536  4537 \n    1     1     2     1     4     1     1     1     1     1     1     1     1 \n 4538  4539  4540  4541  4542  4543  4544  4545  4546  4547  4548  4549  4550 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4551  4552  4553  4554  4555  4556  4557  4558  4559  4560  4561  4562  4563 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 4564  4565  4566  4567  4568  4569  4570  4571  4572  4573  4574  4575  4576 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 4577  4578  4579  4580  4581  4582  4583  4584  4585  4586  4587  4588  4589 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4590  4591  4592  4593  4594  4595  4596  4597  4598  4599  4600  4601  4602 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4603  4604  4605  4606  4607  4608  4609  4610  4611  4612  4613  4614  4615 \n    1     1     1     1     1     1     4     1     1     1     4     1     1 \n 4616  4617  4618  4619  4620  4621  4622  4623  4624  4625  4626  4627  4628 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 4629  4630  4631  4632  4633  4634  4635  4636  4637  4638  4639  4640  4641 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4642  4643  4644  4645  4646  4647  4648  4649  4650  4651  4652  4653  4654 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4655  4656  4657  4658  4659  4660  4661  4662  4663  4664  4665  4666  4667 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 4668  4669  4670  4671  4672  4673  4674  4675  4676  4677  4678  4679  4680 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4681  4682  4683  4684  4685  4686  4687  4688  4689  4690  4691  4692  4693 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4694  4695  4696  4697  4698  4699  4700  4701  4702  4703  4704  4705  4706 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4707  4708  4709  4710  4711  4712  4713  4714  4715  4716  4717  4718  4719 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 4720  4721  4722  4723  4724  4725  4726  4727  4728  4729  4730  4731  4732 \n    1     1     1     1     1     1     1     1     1     1     4     1     1 \n 4733  4734  4735  4736  4737  4738  4739  4740  4741  4742  4743  4744  4745 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4746  4747  4748  4749  4750  4751  4752  4753  4754  4755  4756  4757  4758 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4759  4760  4761  4762  4763  4764  4765  4766  4767  4768  4769  4770  4771 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4772  4773  4774  4775  4776  4777  4778  4779  4780  4781  4782  4783  4784 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4785  4786  4787  4788  4789  4790  4791  4792  4793  4794  4795  4796  4797 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4798  4799  4800  4801  4802  4803  4804  4805  4806  4807  4808  4809  4810 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4811  4812  4813  4814  4815  4816  4817  4818  4819  4820  4821  4822  4823 \n    1     1     1     3     1     1     1     1     1     1     1     1     1 \n 4824  4825  4826  4827  4828  4829  4830  4831  4832  4833  4834  4835  4836 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 4837  4838  4839  4840  4841  4842  4843  4844  4845  4846  4847  4848  4849 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4850  4851  4852  4853  4854  4855  4856  4857  4858  4859  4860  4861  4862 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4863  4864  4865  4866  4867  4868  4869  4870  4871  4872  4873  4874  4875 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 4876  4877  4878  4879  4880  4881  4882  4883  4884  4885  4886  4887  4888 \n    1     1     1     1     1     1     1     1     1     2     5     4     1 \n 4889  4890  4891  4892  4893  4894  4895  4896  4897  4898  4899  4900  4901 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4902  4903  4904  4905  4906  4907  4908  4909  4910  4911  4912  4913  4914 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4915  4916  4917  4918  4919  4920  4921  4922  4923  4924  4925  4926  4927 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4928  4929  4930  4931  4932  4933  4934  4935  4936  4937  4938  4939  4940 \n    1     1     1     1     2     1     1     1     2     1     1     1     2 \n 4941  4942  4943  4944  4945  4946  4947  4948  4949  4950  4951  4952  4953 \n    1     1     1     1     1     1     1     1     1     1     1     1     5 \n 4954  4955  4956  4957  4958  4959  4960  4961  4962  4963  4964  4965  4966 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4967  4968  4969  4970  4971  4972  4973  4974  4975  4976  4977  4978  4979 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4980  4981  4982  4983  4984  4985  4986  4987  4988  4989  4990  4991  4992 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4993  4994  4995  4996  4997  4998  4999  5000  5001  5002  5003  5004  5005 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 5006  5007  5008  5009  5010  5011  5012  5013  5014  5015  5016  5017  5018 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5019  5020  5021  5022  5023  5024  5025  5026  5027  5028  5029  5030  5031 \n    1     1     1     5     1     1     1     1     1     1     1     3     1 \n 5032  5033  5034  5035  5036  5037  5038  5039  5040  5041  5042  5043  5044 \n    1     1     1     1     1     1     1     1     1     1     3     1     1 \n 5045  5046  5047  5048  5049  5050  5051  5052  5053  5054  5055  5056  5057 \n    2     2     4     1     1     1     1     1     1     1     1     1     1 \n 5058  5059  5060  5061  5062  5063  5064  5065  5066  5067  5068  5069  5070 \n    1     1     1     1     1     1     1     1     5     1     1     1     1 \n 5071  5072  5073  5074  5075  5076  5077  5078  5079  5080  5081  5082  5083 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5084  5085  5086  5087  5088  5089  5090  5091  5092  5093  5094  5095  5096 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5097  5098  5099  5100  5101  5102  5103  5104  5105  5106  5107  5108  5109 \n    1     1     1     1     1     1     1     3     1     1     1     1     1 \n 5110  5111  5112  5113  5114  5115  5116  5117  5118  5119  5120  5121  5122 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 5123  5124  5125  5126  5127  5128  5129  5130  5131  5132  5133  5134  5135 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 5136  5137  5138  5139  5140  5141  5142  5143  5144  5145  5146  5147  5148 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5149  5150  5151  5152  5153  5154  5155  5156  5157  5158  5159  5160  5161 \n    1     1     1     3     1     1     1     1     1     1     1     1     1 \n 5162  5163  5164  5165  5166  5167  5168  5169  5170  5171  5172  5173  5174 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5175  5176  5177  5178  5179  5180  5181  5182  5183  5184  5185  5186  5187 \n    2     2     1     1     1     2     1     1     1     1     1     1     1 \n 5188  5189  5190  5191  5192  5193  5194  5195  5196  5197  5198  5199  5200 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5201  5202  5203  5204  5205  5206  5207  5208  5209  5210  5211  5212  5213 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5214  5215  5216  5217  5218  5219  5220  5221  5222  5223  5224  5225  5226 \n    1     1     1     1     1     1     1     1     1     2     1     3     1 \n 5227  5228  5229  5230  5231  5232  5233  5234  5235  5236  5237  5238  5239 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 5240  5241  5242  5243  5244  5245  5246  5247  5248  5249  5250  5251  5252 \n    1     1     1     1     1     1     1     1     1     1     3     1     1 \n 5253  5254  5255  5256  5257  5258  5259  5260  5261  5262  5263  5264  5265 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5266  5267  5268  5269  5270  5271  5272  5273  5274  5275  5276  5277  5278 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5279  5280  5281  5282  5283  5284  5285  5286  5287  5288  5289  5290  5291 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5292  5293  5294  5295  5296  5297  5298  5299  5300  5301  5302  5303  5304 \n    1     1     1     1     1     1     1     2     1     1     1     4     1 \n 5305  5306  5307  5308  5309  5310  5311  5312  5313  5314  5315  5316  5317 \n    1     1     1     1     3     1     1     1     1     1     1     1     1 \n 5318  5319  5320  5321  5322  5323  5324  5325  5326  5327  5328  5329  5330 \n    1     1     1     2     2     1     1     1     1     1     1     1     1 \n 5331  5332  5333  5334  5335  5336  5337  5338  5339  5340  5341  5342  5343 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 5344  5345  5346  5347  5348  5349  5350  5351  5352  5353  5354  5355  5356 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5357  5358  5359  5360  5361  5362  5363  5364  5365  5366  5367  5368  5369 \n    1     1     1     1     1     1     2     1     3     1     1     1     1 \n 5370  5371  5372  5373  5374  5375  5376  5377  5378  5379  5380  5381  5382 \n    1     1     1     1     2     1     1     2     1     1     1     1     1 \n 5383  5384  5385  5386  5387  5388  5389  5390  5391  5392  5393  5394  5395 \n    1     1     1     1     1     1     1     1     1     1     1    13     1 \n 5396  5397  5398  5399  5400  5401  5402  5403  5404  5405  5406  5407  5408 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5409  5410  5411  5412  5413  5414  5415  5416  5417  5418  5419  5420  5421 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5422  5423  5424  5425  5426  5427  5428  5429  5430  5431  5432  5433  5434 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5435  5436  5437  5438  5439  5440  5441  5442  5443  5444  5445  5446  5447 \n    1     1     2     1     2     1     1     1     1     1     1     1     1 \n 5448  5449  5450  5451  5452  5453  5454  5455  5456  5457  5458  5459  5460 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5461  5462  5463  5464  5465  5466  5467  5468  5469  5470  5471  5472  5473 \n    1     1     1     2     1     1     1     1     1     1     1     1     2 \n 5474  5475  5476  5477  5478  5479  5480  5481  5482  5483  5484  5485  5486 \n    1    13     1     1     1     1     1     1     1     1     1     1     1 \n 5487  5488  5489  5490  5491  5492  5493  5494  5495  5496  5497  5498  5499 \n    1     1     1     4     1     1     1     1     1     1     1     1     1 \n 5500  5501  5502  5503  5504  5505  5506  5507  5508  5509  5510  5511  5512 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5513  5514  5515  5516  5517  5518  5519  5520  5521  5522  5523  5524  5525 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5526  5527  5528  5529  5530  5531  5532  5533  5534  5535  5536  5537  5538 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 5539  5540  5541  5542  5543  5544  5545  5546  5547  5548  5549  5550  5551 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 5552  5553  5554  5555  5556  5557  5558  5559  5560  5561  5562  5563  5564 \n    1     1    13     1     1     1     1     1     1     1     1     1     1 \n 5565  5566  5567  5568  5569  5570  5571  5572  5573  5574  5575  5576  5577 \n    1     1     2     1     1     1     1     1     1     1     1     1     2 \n 5578  5579  5580  5581  5582  5583  5584  5585  5586  5587  5588  5589  5590 \n    1     1     1     1     1     1     1     1     1     1     1     1     4 \n 5591  5592  5593  5594  5595  5596  5597  5598  5599  5600  5601  5602  5603 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 5604  5605  5606  5607  5608  5609  5610  5611  5612  5613  5614  5615  5616 \n    1     1     1     1     1     1     1     1    13     1     1     1     1 \n 5617  5618  5619  5620  5621  5622  5623  5624  5625  5626  5627  5628  5629 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 5630  5631  5632  5633  5634  5635  5636  5637  5638  5639  5640  5641  5642 \n    1     1     1     1     1     1     1     1     1     3     1     1     1 \n 5643  5644  5645  5646  5647  5648  5649  5650  5651  5652  5653  5654  5655 \n    4     1     1     1     1     1     1     1     1     1     1     1     1 \n 5656  5657  5658  5659  5660  5661  5662  5663  5664  5665  5666  5667  5668 \n    1     1     1     3     1     1     1     1     1     1     1     1     1 \n 5669  5670  5671  5672  5673  5674  5675  5676  5677  5678  5679  5680  5681 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5682  5683  5684  5685  5686  5687  5688  5689  5690  5691  5692  5693  5694 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 5695  5696  5697  5698  5699  5700  5701  5702  5703  5704  5705  5706  5707 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 5708  5709  5710  5711  5712  5713  5714  5715  5716  5717  5718  5719  5720 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5721  5722  5723  5724  5725  5726  5727  5728  5729  5730  5731  5732  5733 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5734  5735  5736  5737  5738  5739  5740  5741  5742  5743  5744  5745  5746 \n    1     1     1     1     1     1     1     1     1     1     1     3     1 \n 5747  5748  5749  5750  5751  5752  5753  5754  5755  5756  5757  5758  5759 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 5760  5761  5762  5763  5764  5765  5766  5767  5768  5769  5770  5771  5772 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 5773  5774  5775  5776  5777  5778  5779  5780  5781  5782  5783  5784  5785 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 5786  5787  5788  5789  5790  5791  5792  5793  5794  5795  5796  5797  5798 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5799  5800  5801  5802  5803  5804  5805  5806  5807  5808  5809  5810  5811 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5812  5813  5814  5815  5816  5817  5818  5819  5820  5821  5822  5823  5824 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5825  5826  5827  5828  5829  5830  5831  5832  5833  5834  5835  5836  5837 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5838  5839  5840  5841  5842  5843  5844  5845  5846  5847  5848  5849  5850 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5851  5852  5853  5854  5855  5856  5857  5858  5859  5860  5861  5862  5863 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5864  5865  5866  5867  5868  5869  5870  5871  5872  5873  5874  5875  5876 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 5877  5878  5879  5880  5881  5882  5883  5884  5885  5886  5887  5888  5889 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 5890  5891  5892  5893  5894  5895  5896  5897  5898  5899  5900  5901  5902 \n    1     1     1     1     1     1     1     1     1     1     1     1     3 \n 5903  5904  5905  5906  5907  5908  5909  5910  5911  5912  5913  5914  5915 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 5916  5917  5918  5919  5920  5921  5922  5923  5924  5925  5926  5927  5928 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5929  5930  5931  5932  5933  5934  5935  5936  5937  5938  5939  5940  5941 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5942  5943  5944  5945  5946  5947  5948  5949  5950  5951  5952  5953  5954 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5955  5956  5957  5958  5959  5960  5961  5962  5963  5964  5965  5966  5967 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5968  5969  5970  5971  5972  5973  5974  5975  5976  5977  5978  5979  5980 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5981  5982  5983  5984  5985  5986  5987  5988  5989  5990  5991  5992  5993 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5994  5995  5996  5997  5998  5999  6000  6001  6002  6003  6004  6005  6006 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6007  6008  6009  6010  6011  6012  6013  6014  6015  6016  6017  6018  6019 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6020  6021  6022  6023  6024  6025  6026  6027  6028  6029  6030  6031  6032 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 6033  6034  6035  6036  6037  6038  6039  6040  6041  6042  6043  6044  6045 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6046  6047  6048  6049  6050  6051  6052  6053  6054  6055  6056  6057  6058 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6059  6060  6061  6062  6063  6064  6065  6066  6067  6068  6069  6070  6071 \n    1     1     3     1     1     1     1     1     1     1     1     1     1 \n 6072  6073  6074  6075  6076  6077  6078  6079  6080  6081  6082  6083  6084 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6085  6086  6087  6088  6089  6090  6091  6092  6093  6094  6095  6096  6097 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6098  6099  6100  6101  6102  6103  6104  6105  6106  6107  6108  6109  6110 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6111  6112  6113  6114  6115  6116  6117  6118  6119  6120  6121  6122  6123 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 6124  6125  6126  6127  6128  6129  6130  6131  6132  6133  6134  6135  6136 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6137  6138  6139  6140  6141  6142  6143  6144  6145  6146  6147  6148  6149 \n    1     1     4     1     1     1     1     1     1     1     1     1     1 \n 6150  6151  6152  6153  6154  6155  6156  6157  6158  6159  6160  6161  6162 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6163  6164  6165  6166  6167  6168  6169  6170  6171  6172  6173  6174  6175 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 6176  6177  6178  6179  6180  6181  6182  6183  6184  6185  6186  6187  6188 \n    1     1     1     1     1     1     1     1     1     1     1     4     1 \n 6189  6190  6191  6192  6193  6194  6195  6196  6197  6198  6199  6200  6201 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6202  6203  6204  6205  6206  6207  6208  6209  6210  6211  6212  6213  6214 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6215  6216  6217  6218  6219  6220  6221  6222  6223  6224  6225  6226  6227 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6228  6229  6230  6231  6232  6233  6234  6235  6236  6237  6238  6239  6240 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 6241  6242  6243  6244  6245  6246  6247  6248  6249  6250  6251  6252  6253 \n    1     2     1     1     1     1     1     1     1     1     2     1     1 \n 6254  6255  6256  6257  6258  6259  6260  6261  6262  6263  6264  6265  6266 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6267  6268  6269  6270  6271  6272  6273  6274  6275  6276  6277  6278  6279 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6280  6281  6282  6283  6284  6285  6286  6287  6288  6289  6290  6291  6292 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6293  6294  6295  6296  6297  6298  6299  6300  6301  6302  6303  6304  6305 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6306  6307  6308  6309  6310  6311  6312  6313  6314  6315  6316  6317  6318 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6319  6320  6321  6322  6323  6324  6325  6326  6327  6328  6329  6330  6331 \n    1     1     1     3     1     1     1     1     1     1     1     1     1 \n 6332  6333  6334  6335  6336  6337  6338  6339  6340  6341  6342  6343  6344 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6345  6346  6347  6348  6349  6350  6351  6352  6353  6354  6355  6356  6357 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6358  6359  6360  6361  6362  6363  6364  6365  6366  6367  6368  6369  6370 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6371  6372  6373  6374  6375  6376  6377  6378  6379  6380  6381  6382  6383 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 6384  6385  6386  6387  6388  6389  6390  6391  6392  6393  6394  6395  6396 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 6397  6398  6399  6400  6401  6402  6403  6404  6405  6406  6407  6408  6409 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6410  6411  6412  6413  6414  6415  6416  6417  6418  6419  6420  6421  6422 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6423  6424  6425  6426  6427  6428  6429  6430  6431  6432  6433  6434  6435 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6436  6437  6438  6439  6440  6441  6442  6443  6444  6445  6446  6447  6448 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6449  6450  6451  6452  6453  6454  6455  6456  6457  6458  6459  6460  6461 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6462  6463  6464  6465  6466  6467  6468  6469  6470  6471  6472  6473  6474 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6475  6476  6477  6478  6479  6480  6481  6482  6483  6484  6485  6486  6487 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6488  6489  6490  6491  6492  6493  6494  6495  6496  6497  6498  6499  6500 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6501  6502  6503  6504  6505  6506  6507  6508  6509  6510  6511  6512  6513 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6514  6515  6516  6517  6518  6519  6520  6521  6522  6523  6524  6525  6526 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6527  6528  6529  6530  6531  6532  6533  6534  6535  6536  6537  6538  6539 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6540  6541  6542  6543  6544  6545  6546  6547  6548  6549  6550  6551  6552 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 6553  6554  6555  6556  6557  6558  6559  6560  6561  6562  6563  6564  6565 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6566  6567  6568  6569  6570  6571  6572  6573  6574  6575  6576  6577  6578 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6579  6580  6581  6582  6583  6584  6585  6586  6587  6588  6589  6590  6591 \n    1     1     1     1     1     1     1     1     1     1     1     1     3 \n 6592  6593  6594  6595  6596  6597  6598  6599  6600  6601  6602  6603  6604 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6605  6606  6607  6608  6609  6610  6611  6612  6613  6614  6615  6616  6617 \n    1     1     1     1     1     1     1     1     3     1     1     1     1 \n 6618  6619  6620  6621  6622  6623  6624  6625  6626  6627  6628  6629  6630 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6631  6632  6633  6634  6635  6636  6637  6638  6639  6640  6641  6642  6643 \n    1     1     3     1     1     1     1     1     2     2     1     1     1 \n 6644  6645  6646  6647  6648  6649  6650  6651  6652  6653  6654  6655  6656 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 6657  6658  6659  6660  6661  6662  6663  6664  6665  6666  6667  6668  6669 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6670  6671  6672  6673  6674  6675  6676  6677  6678  6679  6680  6681  6682 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6683  6684  6685  6686  6687  6688  6689  6690  6691  6692  6693  6694  6695 \n    2     1     3     1     1     1     3     1     1     1     1     1     1 \n 6696  6697  6698  6699  6700  6701  6702  6703  6704  6705  6706  6707  6708 \n    1     1     1     1     1     1     2     1     1     1     2     1     1 \n 6709  6710  6711  6712  6713  6714  6715  6716  6717  6718  6719  6720  6721 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6722  6723  6724  6725  6726  6727  6728  6729  6730  6731  6732  6733  6734 \n    2     1     1     1     1     1     1     1     3     1     1     1     1 \n 6735  6736  6737  6738  6739  6740  6741  6742  6743  6744  6745  6746  6747 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 6748  6749  6750  6751  6752  6753  6754  6755  6756  6757  6758  6759  6760 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 6761  6762  6763  6764  6765  6766  6767  6768  6769  6770  6771  6772  6773 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 6774  6775  6776  6777  6778  6779  6780  6781  6782  6783  6784  6785  6786 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 6787  6788  6789  6790  6791  6792  6793  6794  6795  6796  6797  6798  6799 \n    1     1     1     1     1     3     1     1     1     1     1     2     1 \n 6800  6801  6802  6803  6804  6805  6806  6807  6808  6809  6810  6811  6812 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6813  6814  6815  6816  6817  6818  6819  6820  6821  6822  6823  6824  6825 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6826  6827  6828  6829  6830  6831  6832  6833  6834  6835  6836  6837  6838 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6839  6840  6841  6842  6843  6844  6845  6846  6847  6848  6849  6850  6851 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 6852  6853  6854  6855  6856  6857  6858  6859  6860  6861  6862  6863  6864 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6865  6866  6867  6868  6869  6870  6871  6872  6873  6874  6875  6876  6877 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6878  6879  6880  6881  6882  6883  6884  6885  6886  6887  6888  6889  6890 \n    1     1     1     3     1     1     1     3     1     1     1     3     1 \n 6891  6892  6893  6894  6895  6896  6897  6898  6899  6900  6901  6902  6903 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6904  6905  6906  6907  6908  6909  6910  6911  6912  6913  6914  6915  6916 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6917  6918  6919  6920  6921  6922  6923  6924  6925  6926  6927  6928  6929 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6930  6931  6932  6933  6934  6935  6936  6937  6938  6939  6940  6941  6942 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 6943  6944  6945  6946  6947  6948  6949  6950  6951  6952  6953  6954  6955 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6956  6957  6958  6959  6960  6961  6962  6963  6964  6965  6966  6967  6968 \n    2     1     1     1     1     1     1     1     1     1     1     1     3 \n 6969  6970  6971  6972  6973  6974  6975  6976  6977  6978  6979  6980  6981 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6982  6983  6984  6985  6986  6987  6988  6989  6990  6991  6992  6993  6994 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6995  6996  6997  6998  6999  7000  7001  7002  7003  7004  7005  7006  7007 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 7008  7009  7010  7011  7012  7013  7014  7015  7016  7017  7018  7019  7020 \n    1     1     1     2     2     3     1     1     1     1     1     1     1 \n 7021  7022  7023  7024  7025  7026  7027  7028  7029  7030  7031  7032  7033 \n    1     1     1     1     1     3     1     1     1     1     1     2     1 \n 7034  7035  7036  7037  7038  7039  7040  7041  7042  7043  7044  7045  7046 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7047  7048  7049  7050  7051  7052  7053  7054  7055  7056  7057  7058  7059 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7060  7061  7062  7063  7064  7065  7066  7067  7068  7069  7070  7071  7072 \n    1     5     1     1     1     1     1     1     1     1     2     1     1 \n 7073  7074  7075  7076  7077  7078  7079  7080  7081  7082  7083  7084  7085 \n    1     1     2     1     1     2     1     1     1     3     1     1     1 \n 7086  7087  7088  7089  7090  7091  7092  7093  7094  7095  7096  7097  7098 \n    1     1     1     1     1     1     1     1     1     3     1     1     1 \n 7099  7100  7101  7102  7103  7104  7105  7106  7107  7108  7109  7110  7111 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7112  7113  7114  7115  7116  7117  7118  7119  7120  7121  7122  7123  7124 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7125  7126  7127  7128  7129  7130  7131  7132  7133  7134  7135  7136  7137 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7138  7139  7140  7141  7142  7143  7144  7145  7146  7147  7148  7149  7150 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7151  7152  7153  7154  7155  7156  7157  7158  7159  7160  7161  7162  7163 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7164  7165  7166  7167  7168  7169  7170  7171  7172  7173  7174  7175  7176 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7177  7178  7179  7180  7181  7182  7183  7184  7185  7186  7187  7188  7189 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7190  7191  7192  7193  7194  7195  7196  7197  7198  7199  7200  7201  7202 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7203  7204  7205  7206  7207  7208  7209  7210  7211  7212  7213  7214  7215 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 7216  7217  7218  7219  7220  7221  7222  7223  7224  7225  7226  7227  7228 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7229  7230  7231  7232  7233  7234  7235  7236  7237  7238  7239  7240  7241 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7242  7243  7244  7245  7246  7247  7248  7249  7250  7251  7252  7253  7254 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7255  7256  7257  7258  7259  7260  7261  7262  7263  7264  7265  7266  7267 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 7268  7269  7270  7271  7272  7273  7274  7275  7276  7277  7278  7279  7280 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7281  7282  7283  7284  7285  7286  7287  7288  7289  7290  7291  7292  7293 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 7294  7295  7296  7297  7298  7299  7300  7301  7302  7303  7304  7305  7306 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7307  7308  7309  7310  7311  7312  7313  7314  7315  7316  7317  7318  7319 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7320  7321  7322  7323  7324  7325  7326  7327  7328  7329  7330  7331  7332 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7333  7334  7335  7336  7337  7338  7339  7340  7341  7342  7343  7344  7345 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7346  7347  7348  7349  7350  7351  7352  7353  7354  7355  7356  7357  7358 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 7359  7360  7361  7362  7363  7364  7365  7366  7367  7368  7369  7370  7371 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7372  7373  7374  7375  7376  7377  7378  7379  7380  7381  7382  7383  7384 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7385  7386  7387  7388  7389  7390  7391  7392  7393  7394  7395  7396  7397 \n    1     1     1     1     3     1     1     1     1     1     1     1     1 \n 7398  7399  7400  7401  7402  7403  7404  7405  7406  7407  7408  7409  7410 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7411  7412  7413  7414  7415  7416  7417  7418  7419  7420  7421  7422  7423 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7424  7425  7426  7427  7428  7429  7430  7431  7432  7433  7434  7435  7436 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7437  7438  7439  7440  7441  7442  7443  7444  7445  7446  7447  7448  7449 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7450  7451  7452  7453  7454  7455  7456  7457  7458  7459  7460  7461  7462 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7463  7464  7465  7466  7467  7468  7469  7470  7471  7472  7473  7474  7475 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7476  7477  7478  7479  7480  7481  7482  7483  7484  7485  7486  7487  7488 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7489  7490  7491  7492  7493  7494  7495  7496  7497  7498  7499  7500  7501 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7502  7503  7504  7505  7506  7507  7508  7509  7510  7511  7512  7513  7514 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7515  7516  7517  7518  7519  7520  7521  7522  7523  7524  7525  7526  7527 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7528  7529  7530  7531  7532  7533  7534  7535  7536  7537  7538  7539  7540 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7541  7542  7543  7544  7545  7546  7547  7548  7549  7550  7551  7552  7553 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 7554  7555  7556  7557  7558  7559  7560  7561  7562  7563  7564  7565  7566 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7567  7568  7569  7570  7571  7572  7573  7574  7575  7576  7577  7578  7579 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7580  7581  7582  7583  7584  7585  7586  7587  7588  7589  7590  7591  7592 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7593  7594  7595  7596  7597  7598  7599  7600  7601  7602  7603  7604  7605 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7606  7607  7608  7609  7610  7611  7612  7613  7614  7615  7616  7617  7618 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7619  7620  7621  7622  7623  7624  7625  7626  7627  7628  7629  7630  7631 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7632  7633  7634  7635  7636  7637  7638  7639  7640  7641  7642  7643  7644 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 7645  7646  7647  7648  7649  7650  7651  7652  7653  7654  7655  7656  7657 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7658  7659  7660  7661  7662  7663  7664  7665  7666  7667  7668  7669  7670 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7671  7672  7673  7674  7675  7676  7677  7678  7679  7680  7681  7682  7683 \n    1     1     4     1     1     1     1     1     1     1     1     1     1 \n 7684  7685  7686  7687  7688  7689  7690  7691  7692  7693  7694  7695  7696 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7697  7698  7699  7700  7701  7702  7703  7704  7705  7706  7707  7708  7709 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7710  7711  7712  7713  7714  7715  7716  7717  7718  7719  7720  7721  7722 \n    1     1     1     1     1     1     1     1     1     2     1     1     2 \n 7723  7724  7725  7726  7727  7728  7729  7730  7731  7732  7733  7734  7735 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7736  7737  7738  7739  7740  7741  7742  7743  7744  7745  7746  7747  7748 \n    1     1     1     1     1     1     1     1     1     1     1     4     1 \n 7749  7750  7751  7752  7753  7754  7755  7756  7757  7758  7759  7760  7761 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7762  7763  7764  7765  7766  7767  7768  7769  7770  7771  7772  7773  7774 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7775  7776  7777  7778  7779  7780  7781  7782  7783  7784  7785  7786  7787 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 7788  7789  7790  7791  7792  7793  7794  7795  7796  7797  7798  7799  7800 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7801  7802  7803  7804  7805  7806  7807  7808  7809  7810  7811  7812  7813 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7814  7815  7816  7817  7818  7819  7820  7821  7822  7823  7824  7825  7826 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7827  7828  7829  7830  7831  7832  7833  7834  7835  7836  7837  7838  7839 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7840  7841  7842  7843  7844  7845  7846  7847  7848  7849  7850  7851  7852 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 7853  7854  7855  7856  7857  7858  7859  7860  7861  7862  7863  7864  7865 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7866  7867  7868  7869  7870  7871  7872  7873  7874  7875  7876  7877  7878 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 7879  7880  7881  7882  7883  7884  7885  7886  7887  7888  7889  7890  7891 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 7892  7893  7894  7895  7896  7897  7898  7899  7900  7901  7902  7903  7904 \n    2     1     3     1     1     1     1     1     1     1     1     1     1 \n 7905  7906  7907  7908  7909  7910  7911  7912  7913  7914  7915  7916  7917 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7918  7919  7920  7921  7922  7923  7924  7925  7926  7927  7928  7929  7930 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 7931  7932  7933  7934  7935  7936  7937  7938  7939  7940  7941  7942  7943 \n    1     1     1     1     1     1     1     1     2     1     2     1     1 \n 7944  7945  7946  7947  7948  7949  7950  7951  7952  7953  7954  7955  7956 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7957  7958  7959  7960  7961  7962  7963  7964  7965  7966  7967  7968  7969 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7970  7971  7972  7973  7974  7975  7976  7977  7978  7979  7980  7981  7982 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 7983  7984  7985  7986  7987  7988  7989  7990  7991  7992  7993  7994  7995 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7996  7997  7998  7999  8000  8001  8002  8003  8004  8005  8006  8007  8008 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8009  8010  8011  8012  8013  8014  8015  8016  8017  8018  8019  8020  8021 \n    1     1     1     1     1     1     1     3     1     1     1     1     1 \n 8022  8023  8024  8025  8026  8027  8028  8029  8030  8031  8032  8033  8034 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8035  8036  8037  8038  8039  8040  8041  8042  8043  8044  8045  8046  8047 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8048  8049  8050  8051  8052  8053  8054  8055  8056  8057  8058  8059  8060 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8061  8062  8063  8064  8065  8066  8067  8068  8069  8070  8071  8072  8073 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8074  8075  8076  8077  8078  8079  8080  8081  8082  8083  8084  8085  8086 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8087  8088  8089  8090  8091  8092  8093  8094  8095  8096  8097  8098  8099 \n    1     1     1     1     1     1     5     1     1     1     1     1     1 \n 8100  8101  8102  8103  8104  8105  8106  8107  8108  8109  8110  8111  8112 \n    1     1     5     1     5     1     1     1     1     1     1     1     1 \n 8113  8114  8115  8116  8117  8118  8119  8120  8121  8122  8123  8124  8125 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8126  8127  8128  8129  8130  8131  8132  8133  8134  8135  8136  8137  8138 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8139  8140  8141  8142  8143  8144  8145  8146  8147  8148  8149  8150  8151 \n    1     1     1     3     1     1     1     1     1     1     1     1     1 \n 8152  8153  8154  8155  8156  8157  8158  8159  8160  8161  8162  8163  8164 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8165  8166  8167  8168  8169  8170  8171  8172  8173  8174  8175  8176  8177 \n    1     5     3     1     1     1     2     1     1     1     1     1     1 \n 8178  8179  8180  8181  8182  8183  8184  8185  8186  8187  8188  8189  8190 \n    1     1     1     1     1     1     1     5     1     1     1     5     1 \n 8191  8192  8193  8194  8195  8196  8197  8198  8199  8200  8201  8202  8203 \n    2     1     1     1     1     1     4     1     4     1     1     1     1 \n 8204  8205  8206  8207  8208  8209  8210  8211  8212  8213  8214  8215  8216 \n    1     1     1     1     1     1     1     1     1     1     5     1     1 \n 8217  8218  8219  8220  8221  8222  8223  8224  8225  8226  8227  8228  8229 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8230  8231  8232  8233  8234  8235  8236  8237  8238  8239  8240  8241  8242 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8243  8244  8245  8246  8247  8248  8249  8250  8251  8252  8253  8254  8255 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8256  8257  8258  8259  8260  8261  8262  8263  8264  8265  8266  8267  8268 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8269  8270  8271  8272  8273  8274  8275  8276  8277  8278  8279  8280  8281 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 8282  8283  8284  8285  8286  8287  8288  8289  8290  8291  8292  8293  8294 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8295  8296  8297  8298  8299  8300  8301  8302  8303  8304  8305  8306  8307 \n    1     1     1     1     1     1     1     1     1     1     1     2     3 \n 8308  8309  8310  8311  8312  8313  8314  8315  8316  8317  8318  8319  8320 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8321  8322  8323  8324  8325  8326  8327  8328  8329  8330  8331  8332  8333 \n    1     1     1     3     1     1     1     1     1     1     1     1     1 \n 8334  8335  8336  8337  8338  8339  8340  8341  8342  8343  8344  8345  8346 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8347  8348  8349  8350  8351  8352  8353  8354  8355  8356  8357  8358  8359 \n    1     1     1     1     3     1     1     1     1     1     1     1     1 \n 8360  8361  8362  8363  8364  8365  8366  8367  8368  8369  8370  8371  8372 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8373  8374  8375  8376  8377  8378  8379  8380  8381  8382  8383  8384  8385 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8386  8387  8388  8389  8390  8391  8392  8393  8394  8395  8396  8397  8398 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 8399  8400  8401  8402  8403  8404  8405  8406  8407  8408  8409  8410  8411 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8412  8413  8414  8415  8416  8417  8418  8419  8420  8421  8422  8423  8424 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8425  8426  8427  8428  8429  8430  8431  8432  8433  8434  8435  8436  8437 \n    4     1     1     1     1     1     1     1     1     1     1     1     1 \n 8438  8439  8440  8441  8442  8443  8444  8445  8446  8447  8448  8449  8450 \n    1     1     1     1     1     3     1     2     1     1     1     1     1 \n 8451  8452  8453  8454  8455  8456  8457  8458  8459  8460  8461  8462  8463 \n    2     1     1     1     1     1     1     2     1     1     2     1     1 \n 8464  8465  8466  8467  8468  8469  8470  8471  8472  8473  8474  8475  8476 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8477  8478  8479  8480  8481  8482  8483  8484  8485  8486  8487  8488  8489 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 8490  8491  8492  8493  8494  8495  8496  8497  8498  8499  8500  8501  8502 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8503  8504  8505  8506  8507  8508  8509  8510  8511  8512  8513  8514  8515 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8516  8517  8518  8519  8520  8521  8522  8523  8524  8525  8526  8527  8528 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8529  8530  8531  8532  8533  8534  8535  8536  8537  8538  8539  8540  8541 \n    1     1     1     1     1     1     1     2     1     2     1     1    13 \n 8542  8543  8544  8545  8546  8547  8548  8549  8550  8551  8552  8553  8554 \n    1     1     1     1     1     1     1    13     1     1     1     1     1 \n 8555  8556  8557  8558  8559  8560  8561  8562  8563  8564  8565  8566  8567 \n    1     1     1     1     3     1     1     1     2     1     2     1     1 \n 8568  8569  8570  8571  8572  8573  8574  8575  8576  8577  8578  8579  8580 \n    1     1     1     1     1     1     3     1     1     1     1     1     1 \n 8581  8582  8583  8584  8585  8586  8587  8588  8589  8590  8591  8592  8593 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8594  8595  8596  8597  8598  8599  8600  8601  8602  8603  8604  8605  8606 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 8607  8608  8609  8610  8611  8612  8613  8614  8615  8616  8617  8618  8619 \n    1     1     1     1     1     1     1     1     1     1     1    13     1 \n 8620  8621  8622  8623  8624  8625  8626  8627  8628  8629  8630  8631  8632 \n    1     1     1     4     1     1     1     1     1     1     1     1     1 \n 8633  8634  8635  8636  8637  8638  8639  8640  8641  8642  8643  8644  8645 \n    4     1     1     1     3     1     1     1     1     1     1     1     1 \n 8646  8647  8648  8649  8650  8651  8652  8653  8654  8655  8656  8657  8658 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 8659  8660  8661  8662  8663  8664  8665  8666  8667  8668  8669  8670  8671 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8672  8673  8674  8675  8676  8677  8678  8679  8680  8681  8682  8683  8684 \n    1     4     1     1     1     1     1     1     1     1     1     4     1 \n 8685  8686  8687  8688  8689  8690  8691  8692  8693  8694  8695  8696  8697 \n    1     1     1     1     1     1     1     1     1     1     1     2     4 \n 8698  8699  8700  8701  8702  8703  8704  8705  8706  8707  8708  8709  8710 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8711  8712  8713  8714  8715  8716  8717  8718  8719  8720  8721  8722  8723 \n    1     1     1     1     4     1     1     1     1     1     2     1     1 \n 8724  8725  8726  8727  8728  8729  8730  8731  8732  8733  8734  8735  8736 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8737  8738  8739  8740  8741  8742  8743  8744  8745  8746  8747  8748  8749 \n    1     1     1     1     1     1     1     1     4     2     1     1     1 \n 8750  8751  8752  8753  8754  8755  8756  8757  8758  8759  8760  8761  8762 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 8763  8764  8765  8766  8767  8768  8769  8770  8771  8772  8773  8774  8775 \n    1     1     1     1     1     1     1     1     1     3     1     1     1 \n 8776  8777  8778  8779  8780  8781  8782  8783  8784  8785  8786  8787  8788 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 8789  8790  8791  8792  8793  8794  8795  8796  8797  8798  8799  8800  8801 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8802  8803  8804  8805  8806  8807  8808  8809  8810  8811  8812  8813  8814 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 8815  8816  8817  8818  8819  8820  8821  8822  8823  8824  8825  8826  8827 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8828  8829  8830  8831  8832  8833  8834  8835  8836  8837  8838  8839  8840 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8841  8842  8843  8844  8845  8846  8847  8848  8849  8850  8851  8852  8853 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 8854  8855  8856  8857  8858  8859  8860  8861  8862  8863  8864  8865  8866 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 8867  8868  8869  8870  8871  8872  8873  8874  8875  8876  8877  8878  8879 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 8880  8881  8882  8883  8884  8885  8886  8887  8888  8889  8890  8891  8892 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8893  8894  8895  8896  8897  8898  8899  8900  8901  8902  8903  8904  8905 \n    3     1     1     1     1     1     1     1     1     1     1     1     1 \n 8906  8907  8908  8909  8910  8911  8912  8913  8914  8915  8916  8917  8918 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8919  8920  8921  8922  8923  8924  8925  8926  8927  8928  8929  8930  8931 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 8932  8933  8934  8935  8936  8937  8938  8939  8940  8941  8942  8943  8944 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 8945  8946  8947  8948  8949  8950  8951  8952  8953  8954  8955  8956  8957 \n    1     1     3     2     1     1     1     2     1     1     1     1     1 \n 8958  8959  8960  8961  8962  8963  8964  8965  8966  8967  8968  8969  8970 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8971  8972  8973  8974  8975  8976  8977  8978  8979  8980  8981  8982  8983 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8984  8985  8986  8987  8988  8989  8990  8991  8992  8993  8994  8995  8996 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8997  8998  8999  9000  9001  9002  9003  9004  9005  9006  9007  9008  9009 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9010  9011  9012  9013  9014  9015  9016  9017  9018  9019  9020  9021  9022 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 9023  9024  9025  9026  9027  9028  9029  9030  9031  9032  9033  9034  9035 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9036  9037  9038  9039  9040  9041  9042  9043  9044  9045  9046  9047  9048 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9049  9050  9051  9052  9053  9054  9055  9056  9057  9058  9059  9060  9061 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9062  9063  9064  9065  9066  9067  9068  9069  9070  9071  9072  9073  9074 \n    1     3     1     1     1     1     1     1     1     1     1     1     1 \n 9075  9076  9077  9078  9079  9080  9081  9082  9083  9084  9085  9086  9087 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 9088  9089  9090  9091  9092  9093  9094  9095  9096  9097  9098  9099  9100 \n    1     1     1     1     1     1     1     1     4     1     1     1     1 \n 9101  9102  9103  9104  9105  9106  9107  9108  9109  9110  9111  9112  9113 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9114  9115  9116  9117  9118  9119  9120  9121  9122  9123  9124  9125  9126 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9127  9128  9129  9130  9131  9132  9133  9134  9135  9136  9137  9138  9139 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9140  9141  9142  9143  9144  9145  9146  9147  9148  9149  9150  9151  9152 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9153  9154  9155  9156  9157  9158  9159  9160  9161  9162  9163  9164  9165 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9166  9167  9168  9169  9170  9171  9172  9173  9174  9175  9176  9177  9178 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 9179  9180  9181  9182  9183  9184  9185  9186  9187  9188  9189  9190  9191 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9192  9193  9194  9195  9196  9197  9198  9199  9200  9201  9202  9203  9204 \n    1     1     1     1     1     1     4     1     1     1     1     1     1 \n 9205  9206  9207  9208  9209  9210  9211  9212  9213  9214  9215  9216  9217 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9218  9219  9220  9221  9222  9223  9224  9225  9226  9227  9228  9229  9230 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9231  9232  9233  9234  9235  9236  9237  9238  9239  9240  9241  9242  9243 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9244  9245  9246  9247  9248  9249  9250  9251  9252  9253  9254  9255  9256 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 9257  9258  9259  9260  9261  9262  9263  9264  9265  9266  9267  9268  9269 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 9270  9271  9272  9273  9274  9275  9276  9277  9278  9279  9280  9281  9282 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 9283  9284  9285  9286  9287  9288  9289  9290  9291  9292  9293  9294  9295 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9296  9297  9298  9299  9300  9301  9302  9303  9304  9305  9306  9307  9308 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 9309  9310  9311  9312  9313  9314  9315  9316  9317  9318  9319  9320  9321 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9322  9323  9324  9325  9326  9327  9328  9329  9330  9331  9332  9333  9334 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9335  9336  9337  9338  9339  9340  9341  9342  9343  9344  9345  9346  9347 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9348  9349  9350  9351  9352  9353  9354  9355  9356  9357  9358  9359  9360 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9361  9362  9363  9364  9365  9366  9367  9368  9369  9370  9371  9372  9373 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9374  9375  9376  9377  9378  9379  9380  9381  9382  9383  9384  9385  9386 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 9387  9388  9389  9390  9391  9392  9393  9394  9395  9396  9397  9398  9399 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9400  9401  9402  9403  9404  9405  9406  9407  9408  9409  9410  9411  9412 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9413  9414  9415  9416  9417  9418  9419  9420  9421  9422  9423  9424  9425 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9426  9427  9428  9429  9430  9431  9432  9433  9434  9435  9436  9437  9438 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9439  9440  9441  9442  9443  9444  9445  9446  9447  9448  9449  9450  9451 \n    1     1     1     1     3     1     1     1     1     1     1     1     1 \n 9452  9453  9454  9455  9456  9457  9458  9459  9460  9461  9462  9463  9464 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 9465  9466  9467  9468  9469  9470  9471  9472  9473  9474  9475  9476  9477 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9478  9479  9480  9481  9482  9483  9484  9485  9486  9487  9488  9489  9490 \n    1     1     1     1     1     1     3     1     1     1     1     3     1 \n 9491  9492  9493  9494  9495  9496  9497  9498  9499  9500  9501  9502  9503 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9504  9505  9506  9507  9508  9509  9510  9511  9512  9513  9514  9515  9516 \n    1     1     1     1     3     1     1     1     1     1     1     1     1 \n 9517  9518  9519  9520  9521  9522  9523  9524  9525  9526  9527  9528  9529 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9530  9531  9532  9533  9534  9535  9536  9537  9538  9539  9540  9541  9542 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9543  9544  9545  9546  9547  9548  9549  9550  9551  9552  9553  9554  9555 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9556  9557  9558  9559  9560  9561  9562  9563  9564  9565  9566  9567  9568 \n    1     1     1     4     1     1     1     1     1     1     1     1     1 \n 9569  9570  9571  9572  9573  9574  9575  9576  9577  9578  9579  9580  9581 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 9582  9583  9584  9585  9586  9587  9588  9589  9590  9591  9592  9593  9594 \n    1     3     1     1     1     1     1     1     1     1     1     1     1 \n 9595  9596  9597  9598  9599  9600  9601  9602  9603  9604  9605  9606  9607 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9608  9609  9610  9611  9612  9613  9614  9615  9616  9617  9618  9619  9620 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9621  9622  9623  9624  9625  9626  9627  9628  9629  9630  9631  9632  9633 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 9634  9635  9636  9637  9638  9639  9640  9641  9642  9643  9644  9645  9646 \n    1     1     1     1     1     1     1     1     1     1     1     3     1 \n 9647  9648  9649  9650  9651  9652  9653  9654  9655  9656  9657  9658  9659 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 9660  9661  9662  9663  9664  9665  9666  9667  9668  9669  9670  9671  9672 \n    1     2     1     1     1     1     1     1     1     1     1     2     1 \n 9673  9674  9675  9676  9677  9678  9679  9680  9681  9682  9683  9684  9685 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9686  9687  9688  9689  9690  9691  9692  9693  9694  9695  9696  9697  9698 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9699  9700  9701  9702  9703  9704  9705  9706  9707  9708  9709  9710  9711 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9712  9713  9714  9715  9716  9717  9718  9719  9720  9721  9722  9723  9724 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9725  9726  9727  9728  9729  9730  9731  9732  9733  9734  9735  9736  9737 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9738  9739  9740  9741  9742  9743  9744  9745  9746  9747  9748  9749  9750 \n    1     1     1     1     1     1     1     1     2     2     1     1     1 \n 9751  9752  9753  9754  9755  9756  9757  9758  9759  9760  9761  9762  9763 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9764  9765  9766  9767  9768  9769  9770  9771  9772  9773  9774  9775  9776 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 9777  9778  9779  9780  9781  9782  9783  9784  9785  9786  9787  9788  9789 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9790  9791  9792  9793  9794  9795  9796  9797  9798  9799  9800  9801  9802 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 9803  9804  9805  9806  9807  9808  9809  9810  9811  9812  9813  9814  9815 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9816  9817  9818  9819  9820  9821  9822  9823  9824  9825  9826  9827  9828 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9829  9830  9831  9832  9833  9834  9835  9836  9837  9838  9839  9840  9841 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 9842  9843  9844  9845  9846  9847  9848  9849  9850  9851  9852  9853  9854 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 9855  9856  9857  9858  9859  9860  9861  9862  9863  9864  9865  9866  9867 \n    1     1     1     1     1     1     3     1     1     2     1     1     1 \n 9868  9869  9870  9871  9872  9873  9874  9875  9876  9877  9878  9879  9880 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 9881  9882  9883  9884  9885  9886  9887  9888  9889  9890  9891  9892  9893 \n    1     1     1     1     3     1     1     1     1     1     1     1     2 \n 9894  9895  9896  9897  9898  9899  9900  9901  9902  9903  9904  9905  9906 \n    1     3     1     1     1     1     1     1     1     1     1     1     1 \n 9907  9908  9909  9910  9911  9912  9913  9914  9915  9916  9917  9918  9919 \n    1     1     3     1     1     1     1     1     1     1     1     1     1 \n 9920  9921  9922  9923  9924  9925  9926  9927  9928  9929  9930  9931  9932 \n    1     1     3     1     1     1     1     1     1     1     1     2     1 \n 9933  9934  9935  9936  9937  9938  9939  9940  9941  9942  9943  9944  9945 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9946  9947  9948  9949  9950  9951  9952  9953  9954  9955  9956  9957  9958 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9959  9960  9961  9962  9963  9964  9965  9966  9967  9968  9969  9970  9971 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9972  9973  9974  9975  9976  9977  9978  9979  9980  9981  9982  9983  9984 \n    1     5     1     1     1     3     1     1     1     1     1     1     1 \n 9985  9986  9987  9988  9989  9990  9991  9992  9993  9994  9995  9996  9997 \n    1     1     1     1     1     1     1     1     1     1     5     1     1 \n 9998  9999 10000 10001 10002 10003 10004 10005 10006 10007 10008 10009 10010 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n10011 10012 10013 10014 10015 10016 10017 10018 10019 10020 10021 10022 10023 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10024 10025 10026 10027 10028 10029 10030 10031 10032 10033 10034 10035 10036 \n    1     1     1     1     1     1     1     1     1     1     1     3     1 \n10037 10038 10039 10040 10041 10042 10043 10044 10045 10046 10047 10048 10049 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10050 10051 10052 10053 10054 10055 10056 10057 10058 10059 10060 10061 10062 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10063 10064 10065 10066 10067 10068 10069 10070 10071 10072 10073 10074 10075 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n10076 10077 10078 10079 10080 10081 10082 10083 10084 10085 10086 10087 10088 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n10089 10090 10091 10092 10093 10094 10095 10096 10097 10098 10099 10100 10101 \n    1     1     1     1     1     1     5     1     1     1     1     1     1 \n10102 10103 10104 10105 10106 10107 10108 10109 10110 10111 10112 10113 10114 \n    1     1     1     1     1     1     1     3     1     1     3     1     1 \n10115 10116 10117 10118 10119 10120 10121 10122 10123 10124 10125 10126 10127 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n10128 10129 10130 10131 10132 10133 10134 10135 10136 10137 10138 10139 10140 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10141 10142 10143 10144 10145 10146 10147 10148 10149 10150 10151 10152 10153 \n    1     1     1     1     1     1     1     1     1     3     1     2     1 \n10154 10155 10156 10157 10158 10159 10160 10161 10162 10163 10164 10165 10166 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10167 10168 10169 10170 10171 10172 10173 10174 10175 10176 10177 10178 10179 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10180 10181 10182 10183 10184 10185 10186 10187 10188 10189 10190 10191 10192 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10193 10194 10195 10196 10197 10198 10199 10200 10201 10202 10203 10204 10205 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n10206 10207 10208 10209 10210 10211 10212 10213 10214 10215 10216 10217 10218 \n    1     1     1     1     1     3     1     1     1     1     1     1     1 \n10219 10220 10221 10222 10223 10224 10225 10226 10227 10228 10229 10230 10231 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10232 10233 10234 10235 10236 10237 10238 10239 10240 10241 10242 10243 10244 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10245 10246 10247 10248 10249 10250 10251 10252 10253 10254 10255 10256 10257 \n    1     1     1     1     1     2     1     1     3     1     1     1     1 \n10258 10259 10260 10261 10262 10263 10264 10265 10266 10267 10268 10269 10270 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10271 10272 10273 10274 10275 10276 10277 10278 10279 10280 10281 10282 10283 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10284 10285 10286 10287 10288 10289 10290 10291 10292 10293 10294 10295 10296 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n10297 10298 10299 10300 10301 10302 10303 10304 10305 10306 10307 10308 10309 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n10310 10311 10312 10313 10314 10315 10316 10317 10318 10319 10320 10321 10322 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10323 10324 10325 10326 10327 10328 10329 10330 10331 10332 10333 10334 10335 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10336 10337 10338 10339 10340 10341 10342 10343 10344 10345 10346 10347 10348 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10349 10350 10351 10352 10353 10354 10355 10356 10357 10358 10359 10360 10361 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n10362 10363 10364 10365 10366 10367 10368 10369 10370 10371 10372 10373 10374 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10375 10376 10377 10378 10379 10380 10381 10382 10383 10384 10385 10386 10387 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10388 10389 10390 10391 10392 10393 10394 10395 10396 10397 10398 10399 10400 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10401 10402 10403 10404 10405 10406 10407 10408 10409 10410 10411 10412 10413 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10414 10415 10416 10417 10418 10419 10420 10421 10422 10423 10424 10425 10426 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n10427 10428 10429 10430 10431 10432 10433 10434 10435 10436 10437 10438 10439 \n    1     1     2     2     1     1     1     1     1     1     1     1     1 \n10440 10441 10442 10443 10444 10445 10446 10447 10448 10449 10450 10451 10452 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10453 10454 10455 10456 10457 10458 10459 10460 10461 10462 10463 10464 10465 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n10466 10467 10468 10469 10470 10471 10472 10473 10474 10475 10476 10477 10478 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n10479 10480 10481 10482 10483 10484 10485 10486 10487 10488 10489 10490 10491 \n    2     1     1     1     1     1     1     1     1     1     1     1     3 \n10492 10493 10494 10495 10496 10497 10498 10499 10500 10501 10502 10503 10504 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n10505 10506 10507 10508 10509 10510 10511 10512 10513 10514 10515 10516 10517 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10518 10519 10520 10521 10522 10523 10524 10525 10526 10527 10528 10529 10530 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10531 10532 10533 10534 10535 10536 10537 10538 10539 10540 10541 10542 10543 \n    1     1     1     1     3     1     1     1     1     1     1     1     1 \n10544 10545 10546 10547 10548 10549 10550 10551 10552 10553 10554 10555 10556 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n10557 10558 10559 10560 10561 10562 10563 10564 10565 10566 10567 10568 10569 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10570 10571 10572 10573 10574 10575 10576 10577 10578 10579 10580 10581 10582 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n10583 10584 10585 10586 10587 10588 10589 10590 10591 10592 10593 10594 10595 \n    1     1     1     1     2     1     1     1     1     2     1     1     1 \n10596 10597 10598 10599 10600 10601 10602 10603 10604 10605 10606 10607 10608 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10609 10610 10611 10612 10613 10614 10615 10616 10617 10618 10619 10620 10621 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10622 10623 10624 10625 10626 10627 10628 10629 10630 10631 10632 10633 10634 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10635 10636 10637 10638 10639 10640 10641 10642 10643 10644 10645 10646 10647 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10648 10649 10650 10651 10652 10653 10654 10655 10656 10657 10658 10659 10660 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n10661 10662 10663 10664 10665 10666 10667 10668 10669 10670 10671 10672 10673 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10674 10675 10676 10677 10678 10679 10680 10681 10682 10683 10684 10685 10686 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n10687 10688 10689 10690 10691 10692 10693 10694 10695 10696 10697 10698 10699 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10700 10701 10702 10703 10704 10705 10706 10707 10708 10709 10710 10711 10712 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10713 10714 10715 10716 10717 10718 10719 10720 10721 10722 10723 10724 10725 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10726 10727 10728 10729 10730 10731 10732 10733 10734 10735 10736 10737 10738 \n    1     1     4     1     1     1     1     1     1     1     1     1     1 \n10739 10740 10741 10742 10743 10744 10745 10746 10747 10748 10749 10750 10751 \n    1     1     1     1     1     1     1     4     1     1     2     1     1 \n10752 10753 10754 10755 10756 10757 10758 10759 10760 10761 10762 10763 10764 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10765 10766 10767 10768 10769 10770 10771 10772 10773 10774 10775 10776 10777 \n    1     1     1     1     2     1     1     1     4     1     1     1     1 \n10778 10779 10780 10781 10782 10783 10784 10785 10786 10787 10788 10789 10790 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10791 10792 10793 10794 10795 10796 10797 10798 10799 10800 10801 10802 10803 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10804 10805 10806 10807 10808 10809 10810 10811 10812 10813 10814 10815 10816 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10817 10818 10819 10820 10821 10822 10823 10824 10825 10826 10827 10828 10829 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10830 10831 10832 10833 10834 10835 10836 10837 10838 10839 10840 10841 10842 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10843 10844 10845 10846 10847 10848 10849 10850 10851 10852 10853 10854 10855 \n    1     1     4     1     1     1     1     1     1     1     1     1     1 \n10856 10857 10858 10859 10860 10861 10862 10863 10864 10865 10866 10867 10868 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10869 10870 10871 10872 10873 10874 10875 10876 10877 10878 10879 10880 10881 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10882 10883 10884 10885 10886 10887 10888 10889 10890 10891 10892 10893 10894 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10895 10896 10897 10898 10899 10900 10901 10902 10903 10904 10905 10906 10907 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10908 10909 10910 10911 10912 10913 10914 10915 10916 10917 10918 10919 10920 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10921 10922 10923 10924 10925 10926 10927 10928 10929 10930 10931 10932 10933 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10934 10935 10936 10937 10938 10939 10940 10941 10942 10943 10944 10945 10946 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n10947 10948 10949 10950 10951 10952 10953 10954 10955 10956 10957 10958 10959 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10960 10961 10962 10963 10964 10965 10966 10967 10968 10969 10970 10971 10972 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n10973 10974 10975 10976 10977 10978 10979 10980 10981 10982 10983 10984 10985 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n10986 10987 10988 10989 10990 10991 10992 10993 10994 10995 10996 10997 10998 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n10999 11000 11001 11002 11003 11004 11005 11006 11007 11008 11009 11010 11011 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11012 11013 11014 11015 11016 11017 11018 11019 11020 11021 11022 11023 11024 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11025 11026 11027 11028 11029 11030 11031 11032 11033 11034 11035 11036 11037 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n11038 11039 11040 11041 11042 11043 11044 11045 11046 11047 11048 11049 11050 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11051 11052 11053 11054 11055 11056 11057 11058 11059 11060 11061 11062 11063 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n11064 11065 11066 11067 11068 11069 11070 11071 11072 11073 11074 11075 11076 \n    1     1     1     1     1     2     1     1     3     1     1     2     1 \n11077 11078 11079 11080 11081 11082 11083 11084 11085 11086 11087 11088 11089 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11090 11091 11092 11093 11094 11095 11096 11097 11098 11099 11100 11101 11102 \n    1     2     1     1     1     1     1     1     1     3     1     1     1 \n11103 11104 11105 11106 11107 11108 11109 11110 11111 11112 11113 11114 11115 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n11116 11117 11118 11119 11120 11121 11122 11123 11124 11125 11126 11127 11128 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11129 11130 11131 11132 11133 11134 11135 11136 11137 11138 11139 11140 11141 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n11142 11143 11144 11145 11146 11147 11148 11149 11150 11151 11152 11153 11154 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n11155 11156 11157 11158 11159 11160 11161 11162 11163 11164 11165 11166 11167 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11168 11169 11170 11171 11172 11173 11174 11175 11176 11177 11178 11179 11180 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n11181 11182 11183 11184 11185 11186 11187 11188 11189 11190 11191 11192 11193 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n11194 11195 11196 11197 11198 11199 11200 11201 11202 11203 11204 11205 11206 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11207 11208 11209 11210 11211 11212 11213 11214 11215 11216 11217 11218 11219 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11220 11221 11222 11223 11224 11225 11226 11227 11228 11229 11230 11231 11232 \n    2     2     1     1     1     1     1     1     1     1     1     1     1 \n11233 11234 11235 11236 11237 11238 11239 11240 11241 11242 11243 11244 11245 \n    1     1     1     2     1     1     2     1     1     1     1     2     1 \n11246 11247 11248 11249 11250 11251 11252 11253 11254 11255 11256 11257 11258 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11259 11260 11261 11262 11263 11264 11265 11266 11267 11268 11269 11270 11271 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11272 11273 11274 11275 11276 11277 11278 11279 11280 11281 11282 11283 11284 \n    1     1     1     1     1     1     3     1     1     1     1     1     1 \n11285 11286 11287 11288 11289 11290 11291 11292 11293 11294 11295 11296 11297 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11298 11299 11300 11301 11302 11303 11304 11305 11306 11307 11308 11309 11310 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11311 11312 11313 11314 11315 11316 11317 11318 11319 11320 11321 11322 11323 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11324 11325 11326 11327 11328 11329 11330 11331 11332 11333 11334 11335 11336 \n    5     1     1     1     1     1     1     1     1     5     1     1     1 \n11337 11338 11339 11340 11341 11342 11343 11344 11345 11346 11347 11348 11349 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11350 11351 11352 11353 11354 11355 11356 11357 11358 11359 11360 11361 11362 \n    1     2     1     1     1     1     1     2     1     1     1     1     1 \n11363 11364 11365 11366 11367 11368 11369 11370 11371 11372 11373 11374 11375 \n    1     1     1     1     1     5     1     1     1     1     1     1     1 \n11376 11377 11378 11379 11380 11381 11382 11383 11384 11385 11386 11387 11388 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11389 11390 11391 11392 11393 11394 11395 11396 11397 11398 11399 11400 11401 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11402 11403 11404 11405 11406 11407 11408 11409 11410 11411 11412 11413 11414 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n11415 11416 11417 11418 11419 11420 11421 11422 11423 11424 11425 11426 11427 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11428 11429 11430 11431 11432 11433 11434 11435 11436 11437 11438 11439 11440 \n    1     1     1     1     5     1     1     1     1     1     1     1     1 \n11441 11442 11443 11444 11445 11446 11447 11448 11449 11450 11451 11452 11453 \n    1     1     1     1     1     1     1     1     1     1     1     2     2 \n11454 11455 11456 11457 11458 11459 11460 11461 11462 11463 11464 11465 11466 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n11467 11468 11469 11470 11471 11472 11473 11474 11475 11476 11477 11478 11479 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11480 11481 11482 11483 11484 11485 11486 11487 11488 11489 11490 11491 11492 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n11493 11494 11495 11496 11497 11498 11499 11500 11501 11502 11503 11504 11505 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11506 11507 11508 11509 11510 11511 11512 11513 11514 11515 11516 11517 11518 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11519 11520 11521 11522 11523 11524 11525 11526 11527 11528 11529 11530 11531 \n    1     2     2     1     1     1     1     1     1     1     1     1     1 \n11532 11533 11534 11535 11536 11537 11538 11539 11540 11541 11542 11543 11544 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11545 11546 11547 11548 11549 11550 11551 11552 11553 11554 11555 11556 11557 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n11558 11559 11560 11561 11562 11563 11564 11565 11566 11567 11568 11569 11570 \n    1     1     3     1     1     1     1     1     1     1     1     3     1 \n11571 11572 11573 11574 11575 11576 11577 11578 11579 11580 11581 11582 11583 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n11584 11585 11586 11587 11588 11589 11590 11591 11592 11593 11594 11595 11596 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n11597 11598 11599 11600 11601 11602 11603 11604 11605 11606 11607 11608 11609 \n    1     1     1     1     1     1     1     1     1     1     1     1     3 \n11610 11611 11612 11613 11614 11615 11616 11617 11618 11619 11620 11621 11622 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11623 11624 11625 11626 11627 11628 11629 11630 11631 11632 11633 11634 11635 \n    3     1     1     1     1     1     1     1     1     2     1     1     1 \n11636 11637 11638 11639 11640 11641 11642 11643 11644 11645 11646 11647 11648 \n    1     1     1     4     1     1     1     1     1     1     1     1     1 \n11649 11650 11651 11652 11653 11654 11655 11656 11657 11658 11659 11660 11661 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n11662 11663 11664 11665 11666 11667 11668 11669 11670 11671 11672 11673 11674 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n11675 11676 11677 11678 11679 11680 11681 11682 11683 11684 11685 11686 11687 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n11688 11689 11690 11691 11692 11693 11694 11695 11696 11697 11698 11699 11700 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11701 11702 11703 11704 11705 11706 11707 11708 11709 11710 11711 11712 11713 \n    1     1     1     1     1     1     1     1     2     2     1     1     1 \n11714 11715 11716 11717 11718 11719 11720 11721 11722 11723 11724 11725 11726 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11727 11728 11729 11730 11731 11732 11733 11734 11735 11736 11737 11738 11739 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11740 11741 11742 11743 11744 11745 11746 11747 11748 11749 11750 11751 11752 \n    1     1     1     1     1     1     1     1     4     1     1     1     1 \n11753 11754 11755 11756 11757 11758 11759 11760 11761 11762 11763 11764 11765 \n    1     2     1     1     1     2     2     1     1     1     1     1     1 \n11766 11767 11768 11769 11770 11771 11772 11773 11774 11775 11776 11777 11778 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n11779 11780 11781 11782 11783 11784 11785 11786 11787 11788 11789 11790 11791 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11792 11793 11794 11795 11796 11797 11798 11799 11800 11801 11802 11803 11804 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11805 11806 11807 11808 11809 11810 11811 11812 11813 11814 11815 11816 11817 \n    2     1     1     2     1     1     1     1     1     1     1     1     1 \n11818 11819 11820 11821 11822 11823 11824 11825 11826 11827 11828 11829 11830 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11831 11832 11833 11834 11835 11836 11837 11838 11839 11840 11841 11842 11843 \n    3     1     1     1     1     1     1     1     2     2     1     1     1 \n11844 11845 11846 11847 11848 11849 11850 11851 11852 11853 11854 11855 11856 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n11857 11858 11859 11860 11861 11862 11863 11864 11865 11866 11867 11868 11869 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11870 11871 11872 11873 11874 11875 11876 11877 11878 11879 11880 11881 11882 \n    1     1     1     1     1     1     1     1     1     1     1     3     1 \n11883 11884 11885 11886 11887 11888 11889 11890 11891 11892 11893 11894 11895 \n    1     1     3     1     1     1     1     1     2     2     1     1     1 \n11896 11897 11898 11899 11900 11901 11902 11903 11904 11905 11906 11907 11908 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11909 11910 11911 11912 11913 11914 11915 11916 11917 11918 11919 11920 11921 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11922 11923 11924 11925 11926 11927 11928 11929 11930 11931 11932 11933 11934 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11935 11936 11937 11938 11939 11940 11941 11942 11943 11944 11945 11946 11947 \n    1     1     1     1     1     2     1     1     1     1     2     1     1 \n11948 11949 11950 11951 11952 11953 11954 11955 11956 11957 11958 11959 11960 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11961 11962 11963 11964 11965 11966 11967 11968 11969 11970 11971 11972 11973 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n11974 11975 11976 11977 11978 11979 11980 11981 11982 11983 11984 11985 11986 \n    1     1     1     1     1     1     1     1     1     1     1    13     1 \n11987 11988 11989 11990 11991 11992 11993 11994 11995 11996 11997 11998 11999 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n12000 12001 12002 12003 12004 12005 12006 12007 12008 12009 12010 12011 12012 \n    1     4     1     2     1     1     1     1     1     1     1     1     1 \n12013 12014 12015 12016 12017 12018 12019 12020 12021 12022 12023 12024 12025 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12026 12027 12028 12029 12030 12031 12032 12033 12034 12035 12036 12037 12038 \n    3     1     1     1     1     1     1     1     1     1     1     1     1 \n12039 12040 12041 12042 12043 12044 12045 12046 12047 12048 12049 12050 12051 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12052 12053 12054 12055 12056 12057 12058 12059 12060 12061 12062 12063 12064 \n    1     1     1    13     1     1     1     1     1     1     2     1     1 \n12065 12066 12067 12068 12069 12070 12071 12072 12073 12074 12075 12076 12077 \n    1     1     1     1     1     3     1     1     1     1     1     1     2 \n12078 12079 12080 12081 12082 12083 12084 12085 12086 12087 12088 12089 12090 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n12091 12092 12093 12094 12095 12096 12097 12098 12099 12100 12101 12102 12103 \n    1     1     1     1     1     1     1     1     3     2     2     1     1 \n12104 12105 12106 12107 12108 12109 12110 12111 12112 12113 12114 12115 12116 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n12117 12118 12119 12120 12121 12122 12123 12124 12125 12126 12127 12128 12129 \n    1     1     1     1     1     1     1     2    13     1     1     1     1 \n12130 12131 12132 12133 12134 12135 12136 12137 12138 12139 12140 12141 12142 \n    2     1     1     1     1     1     1     1     1     4     1     1     1 \n12143 12144 12145 12146 12147 12148 12149 12150 12151 12152 12153 12154 12155 \n    1     1     1     1    13     1     1     1     1     1     1     1     1 \n12156 12157 12158 12159 12160 12161 12162 12163 12164 12165 12166 12167 12168 \n    1     1     1     1     1     1     1    13     1     1     1     1     1 \n12169 12170 12171 12172 12173 12174 12175 12176 12177 12178 12179 12180 12181 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12182 12183 12184 12185 12186 12187 12188 12189 12190 12191 12192 12193 12194 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n12195 12196 12197 12198 12199 12200 12201 12202 12203 12204 12205 12206 12207 \n    1     1     1     1     1    13     1     1     3     1     1     1     1 \n12208 12209 12210 12211 12212 12213 12214 12215 12216 12217 12218 12219 12220 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n12221 12222 12223 12224 12225 12226 12227 12228 12229 12230 12231 12232 12233 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n12234 12235 12236 12237 12238 12239 12240 12241 12242 12243 12244 12245 12246 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12247 12248 12249 12250 12251 12252 12253 12254 12255 12256 12257 12258 12259 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n12260 12261 12262 12263 12264 12265 12266 12267 12268 12269 12270 12271 12272 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n12273 12274 12275 12276 12277 12278 12279 12280 12281 12282 12283 12284 12285 \n    1     1     1     2     1     1     1     1     3     1     1     1     1 \n12286 12287 12288 12289 12290 12291 12292 12293 12294 12295 12296 12297 12298 \n    1     1     1     1     1     1     3     1     1     1     1     1     1 \n12299 12300 12301 12302 12303 12304 12305 12306 12307 12308 12309 12310 12311 \n    1     1     1     1     2     3     1     1     1     1     1     1     1 \n12312 12313 12314 12315 12316 12317 12318 12319 12320 12321 12322 12323 12324 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n12325 12326 12327 12328 12329 12330 12331 12332 12333 12334 12335 12336 12337 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12338 12339 12340 12341 12342 12343 12344 12345 12346 12347 12348 12349 12350 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12351 12352 12353 12354 12355 12356 12357 12358 12359 12360 12361 12362 12363 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n12364 12365 12366 12367 12368 12369 12370 12371 12372 12373 12374 12375 12376 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n12377 12378 12379 12380 12381 12382 12383 12384 12385 12386 12387 12388 12389 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12390 12391 12392 12393 12394 12395 12396 12397 12398 12399 12400 12401 12402 \n    1     1     1     1     1     2     2     1     1     2     1     1     1 \n12403 12404 12405 12406 12407 12408 12409 12410 12411 12412 12413 12414 12415 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12416 12417 12418 12419 12420 12421 12422 12423 12424 12425 12426 12427 12428 \n    1     1     1     1     1     3     1     1     2     1     1     1     1 \n12429 12430 12431 12432 12433 12434 12435 12436 12437 12438 12439 12440 12441 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n12442 12443 12444 12445 12446 12447 12448 12449 12450 12451 12452 12453 12454 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12455 12456 12457 12458 12459 12460 12461 12462 12463 12464 12465 12466 12467 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n12468 12469 12470 12471 12472 12473 12474 12475 12476 12477 12478 12479 12480 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12481 12482 12483 12484 12485 12486 12487 12488 12489 12490 12491 12492 12493 \n    2     1     1     1     1     1     1     1     1     1     1     2     1 \n12494 12495 12496 12497 12498 12499 12500 12501 12502 12503 12504 12505 12506 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12507 12508 12509 12510 12511 12512 12513 12514 12515 12516 12517 12518 12519 \n    1     1     1     2     1     1     1     1     2     1     1     1     1 \n12520 12521 12522 12523 12524 12525 12526 12527 12528 12529 12530 12531 12532 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12533 12534 12535 12536 12537 12538 12539 12540 12541 12542 12543 12544 12545 \n    1     1     2     1     1     3     1     1     1     2     1     1     1 \n12546 12547 12548 12549 12550 12551 12552 12553 12554 12555 12556 12557 12558 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12559 12560 12561 12562 12563 12564 12565 12566 12567 12568 12569 12570 12571 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n12572 12573 12574 12575 12576 12577 12578 12579 12580 12581 12582 12583 12584 \n    2     1     1     1     1     1     1     3     1     1     1     1     1 \n12585 12586 12587 12588 12589 12590 12591 12592 12593 12594 12595 12596 12597 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12598 12599 12600 12601 12602 12603 12604 12605 12606 12607 12608 12609 12610 \n    1     1     2     1     1     1     1     1     1     2     1     1     1 \n12611 12612 12613 12614 12615 12616 12617 12618 12619 12620 12621 12622 12623 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n12624 12625 12626 12627 12628 12629 12630 12631 12632 12633 12634 12635 12636 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12637 12638 12639 12640 12641 12642 12643 12644 12645 12646 12647 12648 12649 \n    1     4     1     1     1     1     1     1     1     1     1     2     1 \n12650 12651 12652 12653 12654 12655 12656 12657 12658 12659 12660 12661 12662 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n12663 12664 12665 12666 12667 12668 12669 12670 12671 12672 12673 12674 12675 \n    1     1     1     2     1     1     1     1     1     1     2     1     1 \n12676 12677 12678 12679 12680 12681 12682 12683 12684 12685 12686 12687 12688 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n12689 12690 12691 12692 12693 12694 12695 12696 12697 12698 12699 12700 12701 \n    2     2     2     1     1     1     1     1     1     1     1     1     2 \n12702 12703 12704 12705 12706 12707 12708 12709 12710 12711 12712 12713 12714 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12715 12716 12717 12718 12719 12720 12721 12722 12723 12724 12725 12726 12727 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n12728 12729 12730 12731 12732 12733 12734 12735 12736 12737 12738 12739 12740 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n12741 12742 12743 12744 12745 12746 12747 12748 12749 12750 12751 12752 12753 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12754 12755 12756 12757 12758 12759 12760 12761 12762 12763 12764 12765 12766 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n12767 12768 12769 12770 12771 12772 12773 12774 12775 12776 12777 12778 12779 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n12780 12781 12782 12783 12784 12785 12786 12787 12788 12789 12790 12791 12792 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n12793 12794 12795 12796 12797 12798 12799 12800 12801 12802 12803 12804 12805 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n12806 12807 12808 12809 12810 12811 12812 12813 12814 12815 12816 12817 12818 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n12819 12820 12821 12822 12823 12824 12825 12826 12827 12828 12829 12830 12831 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12832 12833 12834 12835 12836 12837 12838 12839 12840 12841 12842 12843 12844 \n    1     1     1     1     1     1     1     1     1     2     4     1     1 \n12845 12846 12847 12848 12849 12850 12851 12852 12853 12854 12855 12856 12857 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12858 12859 12860 12861 12862 12863 12864 12865 12866 12867 12868 12869 12870 \n    1     1     1     1     1     2     2     1     2     1     1     1     1 \n12871 12872 12873 12874 12875 12876 12877 12878 12879 12880 12881 12882 12883 \n    1     1     2     1     1     1     1     1     2     1     1     1     1 \n12884 12885 12886 12887 12888 12889 12890 12891 12892 12893 12894 12895 12896 \n    4     1     1     1     1     1     1     1     1     1     4     1     1 \n12897 12898 12899 12900 12901 12902 12903 12904 12905 12906 12907 12908 12909 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n12910 12911 12912 12913 12914 12915 12916 12917 12918 12919 12920 12921 12922 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12923 12924 12925 12926 12927 12928 12929 12930 12931 12932 12933 12934 12935 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n12936 12937 12938 12939 12940 12941 12942 12943 12944 12945 12946 12947 12948 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12949 12950 12951 12952 12953 12954 12955 12956 12957 12958 12959 12960 12961 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n12962 12963 12964 12965 12966 12967 12968 12969 12970 12971 12972 12973 12974 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12975 12976 12977 12978 12979 12980 12981 12982 12983 12984 12985 \n    1     1     1     1     1     1     1     1     1     1     1 \n\n\n\nsum(multiplicity(roadacc_month_ppp) &gt; 1)\n\n[1] 639\n\n\nThe output shows that there are 639 duplicated point events.\nWe will resolve this using jittering, which will add a small pertubation to the duplicate points so that they do not occupy the exact same space:\n\nroadacc_month_ppp_jit &lt;- rjitter(roadacc_month_ppp,\n                                 retry = TRUE,\n                                 nsim = 99,\n                                 drop = TRUE)\n\nWe then check for duplicated points to determine if the jittering was carried out successfully:\n\nany(duplicated(roadacc_month_ppp_jit))\n\n[1] FALSE\n\n\nThe output indicates that there are no duplicated points.\n\n\n\nThe code chunk below is used to combine roadacc_month_ppp and provinceowin into one object:\n\nroadacc_month_owin_ppp &lt;- roadacc_month_ppp[provinceowin]\n\n\nsummary(roadacc_month_owin_ppp)\n\nMarked planar point pattern:  12985 points\nAverage intensity 1.693182e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   4.000   7.000   6.666  10.000  12.000 \n\nWindow: polygonal boundary\nsingle connected closed polygon with 13779 vertices\nenclosing rectangle: [587893.5, 712440.5] x [1484413.7, 1579076.3] units\n                     (124500 x 94660 units)\nWindow area = 7668990000 square units\nFraction of frame area: 0.65\n\n\nWe plot the roadacc_month_owin_ppp object to examine the correctness of the output object:\n\nplot(roadacc_month_owin_ppp)\n\n\n\n\n\n\n\n\n\n\n\nWe first use BOOT.spattemp() to determine the spatial bandwidth and the scalar temporal bandwidth for use in subsequent calculation.\n\nset.seed(1234) \nBOOT.spattemp(roadacc_month_owin_ppp)\n\n\nNext, we use spattemp.density() of sparr package to compute the STKDE, with h and lambda values derived in previous step.\n\nst_kde &lt;- spattemp.density(roadacc_month_owin_ppp,\n                           h=2300,\n                           lambda=2)\nsummary(st_kde)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 2300 (spatial)\n  lambda = 2 (temporal)\n\nNo. of observations\n  12985 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [587893.5, 712440.5] x [1484414, 1579076]\n\nTemporal bound\n  [1, 12]\n\nEvaluation\n  128 x 128 x 12 trivariate lattice\n  Density range: [1.159346e-17, 2.144321e-10]\n\n\n\n\n\n\n\nCode\nfirsthalfyear &lt;- c(1,2,3,4,5,6)\n\npar(mfrow=c(2,3))\nfor(i in firsthalfyear){ \n  plot(st_kde, i, \n       override.par=FALSE, \n       fix.range=TRUE, \n       main=paste(\"KDE at month\",i))\n}\n\n\n\n\n\n\n\n\n\n\n\nCode\nsecondhalfyear &lt;- c(7,8,9,10,11,12)\n\npar(mfrow=c(2,3))\nfor(i in secondhalfyear){ \n  plot(st_kde, i, \n       override.par=FALSE, \n       fix.range=TRUE, \n       main=paste(\"KDE at month\",i))\n}\n\n\n\n\n\n\n\n\n\nObservations from the Temporal KDE and Spatio-Temporal KDE plots are summarised in the table below:\n\n\n\n\n\n\n\n\nObservation from Temporal KDE\nObservation from Spatio-Temporal KDE\nConclusion from both observations\n\n\n\n\n\nOccurrence of road accidents is most dense at the start (especially towards Mar to Apr) and end of the year (towards the Oct period), while the occurrence of road accidents is less dense in the middle part of the year.\n\n\nDense occurrence of road accidents in the later half of the year i.e Oct to Dec, as compared to the earlier half of the year.\n\nWhile there are differences in temporal KDE and Spatio-Temporal KDE plots, together they indicate the following:\n\nRoad accidents tend to occur more intensely at the end of the year, with lower occurrences in the middle segment of the year.\nThere could be a high overall accident count in Mar to Apr but the spatial distribution during this period might be more dispersed, leading to less prominent hotspots in the KDE maps.\nOct to Dec seem to have high overall accident counts that are concentrated leading to very prominent hotspots in the KDE map.\n\n\n\n\n\n\n\n\n\n\nWe run similar steps in section 11.1 above to study the distribution of road accidents by day of week.\n\ntm_shape(provincedata32647)+\n  tm_polygons()+\n  tm_shape(roadacc)+\n  tm_dots(size=0.05,col = \"blue\",alpha =0.5)+\n  tm_facets(by=\"inc_dayofweek\",\n            free.coords = FALSE,\n            drop.units = TRUE)\n\n\n\n\n\n\n\n\nVisually, there seem to be more road accidents on Fri and Sat.\n\n\n\n\n\n\n\nroadacc_day_ppp &lt;- roadacc %&gt;%\n  select(inc_dayofweek) %&gt;%\n  as.ppp()\n\nWe note that there are duplicated point events from the code below:\n\nany(duplicated(roadacc_day_ppp))\n\n[1] TRUE\n\n\nWe use the multiplicity() function to count the number of co-incident points:\n\nmultiplicity(roadacc_day_ppp)\n\n    1     2     3     4     5     6     7     8     9    10    11    12    13 \n    1     1     1     2     1     2     1     1     2     1     1     1     1 \n   14    15    16    17    18    19    20    21    22    23    24    25    26 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n   27    28    29    30    31    32    33    34    35    36    37    38    39 \n    1     1     4     1     1     1     1     1     1     1     1     4     4 \n   40    41    42    43    44    45    46    47    48    49    50    51    52 \n    1     1     4     1     1     1     1     1     1     1     1     1     1 \n   53    54    55    56    57    58    59    60    61    62    63    64    65 \n    1     1     1     1     5     5     1     5     1     1     5     1     1 \n   66    67    68    69    70    71    72    73    74    75    76    77    78 \n    5     1     1     1     1     1     1     1     1     1     1     2     1 \n   79    80    81    82    83    84    85    86    87    88    89    90    91 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n   92    93    94    95    96    97    98    99   100   101   102   103   104 \n    1     1     1     2     1     1     1     1     2     1     1     2     1 \n  105   106   107   108   109   110   111   112   113   114   115   116   117 \n    1     1     2     1     1     1     2     2     2     1     1     1     1 \n  118   119   120   121   122   123   124   125   126   127   128   129   130 \n    2     1     1     1     3     3     1     1     1     1     1     1     1 \n  131   132   133   134   135   136   137   138   139   140   141   142   143 \n    1     1     1     1     2     1     1     2     1     1     3     1     1 \n  144   145   146   147   148   149   150   151   152   153   154   155   156 \n    3     3     1     2     1     1     1     1     1     1     1     1     1 \n  157   158   159   160   161   162   163   164   165   166   167   168   169 \n    1     2     1     1     1     1     1     2     1     1     1     1     1 \n  170   171   172   173   174   175   176   177   178   179   180   181   182 \n    1     2     1     1     1     1     1     1     1     1     1     2     2 \n  183   184   185   186   187   188   189   190   191   192   193   194   195 \n    1     1     1     1     2     1     1     1     1     1     2     1     1 \n  196   197   198   199   200   201   202   203   204   205   206   207   208 \n    1     1     1     1     2     1     1     1     1     3     3     1     1 \n  209   210   211   212   213   214   215   216   217   218   219   220   221 \n    3     1     1     1     1     1     1     1     1     1     1     2     1 \n  222   223   224   225   226   227   228   229   230   231   232   233   234 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  235   236   237   238   239   240   241   242   243   244   245   246   247 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  248   249   250   251   252   253   254   255   256   257   258   259   260 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n  261   262   263   264   265   266   267   268   269   270   271   272   273 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  274   275   276   277   278   279   280   281   282   283   284   285   286 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  287   288   289   290   291   292   293   294   295   296   297   298   299 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  300   301   302   303   304   305   306   307   308   309   310   311   312 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n  313   314   315   316   317   318   319   320   321   322   323   324   325 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  326   327   328   329   330   331   332   333   334   335   336   337   338 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  339   340   341   342   343   344   345   346   347   348   349   350   351 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n  352   353   354   355   356   357   358   359   360   361   362   363   364 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  365   366   367   368   369   370   371   372   373   374   375   376   377 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  378   379   380   381   382   383   384   385   386   387   388   389   390 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  391   392   393   394   395   396   397   398   399   400   401   402   403 \n    1     3     1     1     1     1     1     1     1     1     1     1     1 \n  404   405   406   407   408   409   410   411   412   413   414   415   416 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n  417   418   419   420   421   422   423   424   425   426   427   428   429 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n  430   431   432   433   434   435   436   437   438   439   440   441   442 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  443   444   445   446   447   448   449   450   451   452   453   454   455 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  456   457   458   459   460   461   462   463   464   465   466   467   468 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  469   470   471   472   473   474   475   476   477   478   479   480   481 \n    1     3     1     1     1     1     1     1     1     1     1     1     1 \n  482   483   484   485   486   487   488   489   490   491   492   493   494 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n  495   496   497   498   499   500   501   502   503   504   505   506   507 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  508   509   510   511   512   513   514   515   516   517   518   519   520 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  521   522   523   524   525   526   527   528   529   530   531   532   533 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  534   535   536   537   538   539   540   541   542   543   544   545   546 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  547   548   549   550   551   552   553   554   555   556   557   558   559 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  560   561   562   563   564   565   566   567   568   569   570   571   572 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  573   574   575   576   577   578   579   580   581   582   583   584   585 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  586   587   588   589   590   591   592   593   594   595   596   597   598 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  599   600   601   602   603   604   605   606   607   608   609   610   611 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  612   613   614   615   616   617   618   619   620   621   622   623   624 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  625   626   627   628   629   630   631   632   633   634   635   636   637 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  638   639   640   641   642   643   644   645   646   647   648   649   650 \n    1     1     3     1     1     3     1     1     1     1     1     1     1 \n  651   652   653   654   655   656   657   658   659   660   661   662   663 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  664   665   666   667   668   669   670   671   672   673   674   675   676 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  677   678   679   680   681   682   683   684   685   686   687   688   689 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  690   691   692   693   694   695   696   697   698   699   700   701   702 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  703   704   705   706   707   708   709   710   711   712   713   714   715 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  716   717   718   719   720   721   722   723   724   725   726   727   728 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  729   730   731   732   733   734   735   736   737   738   739   740   741 \n    1     1     1     1     1     1     1     1     1     3     1     1     1 \n  742   743   744   745   746   747   748   749   750   751   752   753   754 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  755   756   757   758   759   760   761   762   763   764   765   766   767 \n    3     1     1     2     1     2     1     1     1     1     1     1     1 \n  768   769   770   771   772   773   774   775   776   777   778   779   780 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  781   782   783   784   785   786   787   788   789   790   791   792   793 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  794   795   796   797   798   799   800   801   802   803   804   805   806 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  807   808   809   810   811   812   813   814   815   816   817   818   819 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n  820   821   822   823   824   825   826   827   828   829   830   831   832 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n  833   834   835   836   837   838   839   840   841   842   843   844   845 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  846   847   848   849   850   851   852   853   854   855   856   857   858 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n  859   860   861   862   863   864   865   866   867   868   869   870   871 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n  872   873   874   875   876   877   878   879   880   881   882   883   884 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n  885   886   887   888   889   890   891   892   893   894   895   896   897 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  898   899   900   901   902   903   904   905   906   907   908   909   910 \n    1     2     1     1     1     1     1     2     1     1     1     1     1 \n  911   912   913   914   915   916   917   918   919   920   921   922   923 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  924   925   926   927   928   929   930   931   932   933   934   935   936 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n  937   938   939   940   941   942   943   944   945   946   947   948   949 \n    1     1     1     1     3     1     1     1     1     1     1     1     1 \n  950   951   952   953   954   955   956   957   958   959   960   961   962 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  963   964   965   966   967   968   969   970   971   972   973   974   975 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n  976   977   978   979   980   981   982   983   984   985   986   987   988 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  989   990   991   992   993   994   995   996   997   998   999  1000  1001 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1002  1003  1004  1005  1006  1007  1008  1009  1010  1011  1012  1013  1014 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 1015  1016  1017  1018  1019  1020  1021  1022  1023  1024  1025  1026  1027 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1028  1029  1030  1031  1032  1033  1034  1035  1036  1037  1038  1039  1040 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1041  1042  1043  1044  1045  1046  1047  1048  1049  1050  1051  1052  1053 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1054  1055  1056  1057  1058  1059  1060  1061  1062  1063  1064  1065  1066 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1067  1068  1069  1070  1071  1072  1073  1074  1075  1076  1077  1078  1079 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 1080  1081  1082  1083  1084  1085  1086  1087  1088  1089  1090  1091  1092 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1093  1094  1095  1096  1097  1098  1099  1100  1101  1102  1103  1104  1105 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 1106  1107  1108  1109  1110  1111  1112  1113  1114  1115  1116  1117  1118 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1119  1120  1121  1122  1123  1124  1125  1126  1127  1128  1129  1130  1131 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1132  1133  1134  1135  1136  1137  1138  1139  1140  1141  1142  1143  1144 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 1145  1146  1147  1148  1149  1150  1151  1152  1153  1154  1155  1156  1157 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1158  1159  1160  1161  1162  1163  1164  1165  1166  1167  1168  1169  1170 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1171  1172  1173  1174  1175  1176  1177  1178  1179  1180  1181  1182  1183 \n    3     1     1     2     1     1     1     1     1     1     1     1     1 \n 1184  1185  1186  1187  1188  1189  1190  1191  1192  1193  1194  1195  1196 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 1197  1198  1199  1200  1201  1202  1203  1204  1205  1206  1207  1208  1209 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1210  1211  1212  1213  1214  1215  1216  1217  1218  1219  1220  1221  1222 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1223  1224  1225  1226  1227  1228  1229  1230  1231  1232  1233  1234  1235 \n    4     1     1     1     1     1     1     1     1     1     1     1     1 \n 1236  1237  1238  1239  1240  1241  1242  1243  1244  1245  1246  1247  1248 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 1249  1250  1251  1252  1253  1254  1255  1256  1257  1258  1259  1260  1261 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1262  1263  1264  1265  1266  1267  1268  1269  1270  1271  1272  1273  1274 \n    1     1     4     1     1     1     1     1     1     1     1     1     1 \n 1275  1276  1277  1278  1279  1280  1281  1282  1283  1284  1285  1286  1287 \n    1     2     1     1     1     1     1     1     1     2     1     1     1 \n 1288  1289  1290  1291  1292  1293  1294  1295  1296  1297  1298  1299  1300 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1301  1302  1303  1304  1305  1306  1307  1308  1309  1310  1311  1312  1313 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1314  1315  1316  1317  1318  1319  1320  1321  1322  1323  1324  1325  1326 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1327  1328  1329  1330  1331  1332  1333  1334  1335  1336  1337  1338  1339 \n    1     1     1     2     1     1     1     1     1     1     2     1     1 \n 1340  1341  1342  1343  1344  1345  1346  1347  1348  1349  1350  1351  1352 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 1353  1354  1355  1356  1357  1358  1359  1360  1361  1362  1363  1364  1365 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 1366  1367  1368  1369  1370  1371  1372  1373  1374  1375  1376  1377  1378 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 1379  1380  1381  1382  1383  1384  1385  1386  1387  1388  1389  1390  1391 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1392  1393  1394  1395  1396  1397  1398  1399  1400  1401  1402  1403  1404 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1405  1406  1407  1408  1409  1410  1411  1412  1413  1414  1415  1416  1417 \n    1     1     2     1     1     1     1     1     1     1     1     1     2 \n 1418  1419  1420  1421  1422  1423  1424  1425  1426  1427  1428  1429  1430 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1431  1432  1433  1434  1435  1436  1437  1438  1439  1440  1441  1442  1443 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1444  1445  1446  1447  1448  1449  1450  1451  1452  1453  1454  1455  1456 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1457  1458  1459  1460  1461  1462  1463  1464  1465  1466  1467  1468  1469 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1470  1471  1472  1473  1474  1475  1476  1477  1478  1479  1480  1481  1482 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1483  1484  1485  1486  1487  1488  1489  1490  1491  1492  1493  1494  1495 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 1496  1497  1498  1499  1500  1501  1502  1503  1504  1505  1506  1507  1508 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1509  1510  1511  1512  1513  1514  1515  1516  1517  1518  1519  1520  1521 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1522  1523  1524  1525  1526  1527  1528  1529  1530  1531  1532  1533  1534 \n    1     1     2     2     1     1     1     1     1     1     1     1     1 \n 1535  1536  1537  1538  1539  1540  1541  1542  1543  1544  1545  1546  1547 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1548  1549  1550  1551  1552  1553  1554  1555  1556  1557  1558  1559  1560 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1561  1562  1563  1564  1565  1566  1567  1568  1569  1570  1571  1572  1573 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 1574  1575  1576  1577  1578  1579  1580  1581  1582  1583  1584  1585  1586 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 1587  1588  1589  1590  1591  1592  1593  1594  1595  1596  1597  1598  1599 \n    1     1     1     1     1     2     1     1     1     2     1     1     1 \n 1600  1601  1602  1603  1604  1605  1606  1607  1608  1609  1610  1611  1612 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1613  1614  1615  1616  1617  1618  1619  1620  1621  1622  1623  1624  1625 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1626  1627  1628  1629  1630  1631  1632  1633  1634  1635  1636  1637  1638 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1639  1640  1641  1642  1643  1644  1645  1646  1647  1648  1649  1650  1651 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 1652  1653  1654  1655  1656  1657  1658  1659  1660  1661  1662  1663  1664 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1665  1666  1667  1668  1669  1670  1671  1672  1673  1674  1675  1676  1677 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 1678  1679  1680  1681  1682  1683  1684  1685  1686  1687  1688  1689  1690 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1691  1692  1693  1694  1695  1696  1697  1698  1699  1700  1701  1702  1703 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1704  1705  1706  1707  1708  1709  1710  1711  1712  1713  1714  1715  1716 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 1717  1718  1719  1720  1721  1722  1723  1724  1725  1726  1727  1728  1729 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1730  1731  1732  1733  1734  1735  1736  1737  1738  1739  1740  1741  1742 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1743  1744  1745  1746  1747  1748  1749  1750  1751  1752  1753  1754  1755 \n    1     2     1     2     1     1     1     1     1     1     1     2     1 \n 1756  1757  1758  1759  1760  1761  1762  1763  1764  1765  1766  1767  1768 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 1769  1770  1771  1772  1773  1774  1775  1776  1777  1778  1779  1780  1781 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 1782  1783  1784  1785  1786  1787  1788  1789  1790  1791  1792  1793  1794 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1795  1796  1797  1798  1799  1800  1801  1802  1803  1804  1805  1806  1807 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1808  1809  1810  1811  1812  1813  1814  1815  1816  1817  1818  1819  1820 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1821  1822  1823  1824  1825  1826  1827  1828  1829  1830  1831  1832  1833 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1834  1835  1836  1837  1838  1839  1840  1841  1842  1843  1844  1845  1846 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1847  1848  1849  1850  1851  1852  1853  1854  1855  1856  1857  1858  1859 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1860  1861  1862  1863  1864  1865  1866  1867  1868  1869  1870  1871  1872 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1873  1874  1875  1876  1877  1878  1879  1880  1881  1882  1883  1884  1885 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1886  1887  1888  1889  1890  1891  1892  1893  1894  1895  1896  1897  1898 \n    2     2     1     1     1     1     1     1     1     1     1     1     1 \n 1899  1900  1901  1902  1903  1904  1905  1906  1907  1908  1909  1910  1911 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1912  1913  1914  1915  1916  1917  1918  1919  1920  1921  1922  1923  1924 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 1925  1926  1927  1928  1929  1930  1931  1932  1933  1934  1935  1936  1937 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1938  1939  1940  1941  1942  1943  1944  1945  1946  1947  1948  1949  1950 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 1951  1952  1953  1954  1955  1956  1957  1958  1959  1960  1961  1962  1963 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1964  1965  1966  1967  1968  1969  1970  1971  1972  1973  1974  1975  1976 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1977  1978  1979  1980  1981  1982  1983  1984  1985  1986  1987  1988  1989 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 1990  1991  1992  1993  1994  1995  1996  1997  1998  1999  2000  2001  2002 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2003  2004  2005  2006  2007  2008  2009  2010  2011  2012  2013  2014  2015 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2016  2017  2018  2019  2020  2021  2022  2023  2024  2025  2026  2027  2028 \n    1     1     1     1     2     1     1     1     1     1     1     1     2 \n 2029  2030  2031  2032  2033  2034  2035  2036  2037  2038  2039  2040  2041 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2042  2043  2044  2045  2046  2047  2048  2049  2050  2051  2052  2053  2054 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2055  2056  2057  2058  2059  2060  2061  2062  2063  2064  2065  2066  2067 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2068  2069  2070  2071  2072  2073  2074  2075  2076  2077  2078  2079  2080 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 2081  2082  2083  2084  2085  2086  2087  2088  2089  2090  2091  2092  2093 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 2094  2095  2096  2097  2098  2099  2100  2101  2102  2103  2104  2105  2106 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 2107  2108  2109  2110  2111  2112  2113  2114  2115  2116  2117  2118  2119 \n    1     1     1     2     1     1     1     1     1     1     4     1     1 \n 2120  2121  2122  2123  2124  2125  2126  2127  2128  2129  2130  2131  2132 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 2133  2134  2135  2136  2137  2138  2139  2140  2141  2142  2143  2144  2145 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2146  2147  2148  2149  2150  2151  2152  2153  2154  2155  2156  2157  2158 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 2159  2160  2161  2162  2163  2164  2165  2166  2167  2168  2169  2170  2171 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2172  2173  2174  2175  2176  2177  2178  2179  2180  2181  2182  2183  2184 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 2185  2186  2187  2188  2189  2190  2191  2192  2193  2194  2195  2196  2197 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2198  2199  2200  2201  2202  2203  2204  2205  2206  2207  2208  2209  2210 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2211  2212  2213  2214  2215  2216  2217  2218  2219  2220  2221  2222  2223 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2224  2225  2226  2227  2228  2229  2230  2231  2232  2233  2234  2235  2236 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 2237  2238  2239  2240  2241  2242  2243  2244  2245  2246  2247  2248  2249 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2250  2251  2252  2253  2254  2255  2256  2257  2258  2259  2260  2261  2262 \n    1     1     1     1     1     1     1     1     1     1     2     3     1 \n 2263  2264  2265  2266  2267  2268  2269  2270  2271  2272  2273  2274  2275 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2276  2277  2278  2279  2280  2281  2282  2283  2284  2285  2286  2287  2288 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 2289  2290  2291  2292  2293  2294  2295  2296  2297  2298  2299  2300  2301 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2302  2303  2304  2305  2306  2307  2308  2309  2310  2311  2312  2313  2314 \n    2     1     1     2     1     1     1     1     1     1     1     1     1 \n 2315  2316  2317  2318  2319  2320  2321  2322  2323  2324  2325  2326  2327 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2328  2329  2330  2331  2332  2333  2334  2335  2336  2337  2338  2339  2340 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 2341  2342  2343  2344  2345  2346  2347  2348  2349  2350  2351  2352  2353 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 2354  2355  2356  2357  2358  2359  2360  2361  2362  2363  2364  2365  2366 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 2367  2368  2369  2370  2371  2372  2373  2374  2375  2376  2377  2378  2379 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 2380  2381  2382  2383  2384  2385  2386  2387  2388  2389  2390  2391  2392 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 2393  2394  2395  2396  2397  2398  2399  2400  2401  2402  2403  2404  2405 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2406  2407  2408  2409  2410  2411  2412  2413  2414  2415  2416  2417  2418 \n    2     1     1     1     1     1     1     1     1     3     1     1     1 \n 2419  2420  2421  2422  2423  2424  2425  2426  2427  2428  2429  2430  2431 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 2432  2433  2434  2435  2436  2437  2438  2439  2440  2441  2442  2443  2444 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 2445  2446  2447  2448  2449  2450  2451  2452  2453  2454  2455  2456  2457 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2458  2459  2460  2461  2462  2463  2464  2465  2466  2467  2468  2469  2470 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2471  2472  2473  2474  2475  2476  2477  2478  2479  2480  2481  2482  2483 \n    1     1     1     1     1     1     1     3     2     1     2     1     1 \n 2484  2485  2486  2487  2488  2489  2490  2491  2492  2493  2494  2495  2496 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2497  2498  2499  2500  2501  2502  2503  2504  2505  2506  2507  2508  2509 \n    1     1     1     1     1     1     1     1     1     1     3     1     1 \n 2510  2511  2512  2513  2514  2515  2516  2517  2518  2519  2520  2521  2522 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2523  2524  2525  2526  2527  2528  2529  2530  2531  2532  2533  2534  2535 \n    1     1     1     1     1     1     1     1     1     3     1     1     1 \n 2536  2537  2538  2539  2540  2541  2542  2543  2544  2545  2546  2547  2548 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2549  2550  2551  2552  2553  2554  2555  2556  2557  2558  2559  2560  2561 \n    1     1     1     1     1     1     1     1     1     1     1     1     3 \n 2562  2563  2564  2565  2566  2567  2568  2569  2570  2571  2572  2573  2574 \n    1     1     1     1     1     1     2     1     1     1     1     2     1 \n 2575  2576  2577  2578  2579  2580  2581  2582  2583  2584  2585  2586  2587 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2588  2589  2590  2591  2592  2593  2594  2595  2596  2597  2598  2599  2600 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2601  2602  2603  2604  2605  2606  2607  2608  2609  2610  2611  2612  2613 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2614  2615  2616  2617  2618  2619  2620  2621  2622  2623  2624  2625  2626 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2627  2628  2629  2630  2631  2632  2633  2634  2635  2636  2637  2638  2639 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2640  2641  2642  2643  2644  2645  2646  2647  2648  2649  2650  2651  2652 \n    1     1     1     1     1     4     4     1     1     1     1     1     1 \n 2653  2654  2655  2656  2657  2658  2659  2660  2661  2662  2663  2664  2665 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2666  2667  2668  2669  2670  2671  2672  2673  2674  2675  2676  2677  2678 \n    1     1     3     1     1     1     1     1     1     1     1     1     1 \n 2679  2680  2681  2682  2683  2684  2685  2686  2687  2688  2689  2690  2691 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 2692  2693  2694  2695  2696  2697  2698  2699  2700  2701  2702  2703  2704 \n    1     1     3     3     1     1     1     1     1     1     1     1     1 \n 2705  2706  2707  2708  2709  2710  2711  2712  2713  2714  2715  2716  2717 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 2718  2719  2720  2721  2722  2723  2724  2725  2726  2727  2728  2729  2730 \n    2     1     1     2     1     1     1     1     1     1     1     1     1 \n 2731  2732  2733  2734  2735  2736  2737  2738  2739  2740  2741  2742  2743 \n    1     1     1     1     1     1     2     1     1     1     2     1     1 \n 2744  2745  2746  2747  2748  2749  2750  2751  2752  2753  2754  2755  2756 \n    1     1     1     1     1     2     1     1     1     1     3     1     1 \n 2757  2758  2759  2760  2761  2762  2763  2764  2765  2766  2767  2768  2769 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 2770  2771  2772  2773  2774  2775  2776  2777  2778  2779  2780  2781  2782 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 2783  2784  2785  2786  2787  2788  2789  2790  2791  2792  2793  2794  2795 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 2796  2797  2798  2799  2800  2801  2802  2803  2804  2805  2806  2807  2808 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2809  2810  2811  2812  2813  2814  2815  2816  2817  2818  2819  2820  2821 \n    1     1     1     1     1     1     1     1     1     1     3     1     1 \n 2822  2823  2824  2825  2826  2827  2828  2829  2830  2831  2832  2833  2834 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2835  2836  2837  2838  2839  2840  2841  2842  2843  2844  2845  2846  2847 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2848  2849  2850  2851  2852  2853  2854  2855  2856  2857  2858  2859  2860 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 2861  2862  2863  2864  2865  2866  2867  2868  2869  2870  2871  2872  2873 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 2874  2875  2876  2877  2878  2879  2880  2881  2882  2883  2884  2885  2886 \n    1     1     1     1     1     3     1     1     1     1     1     1     1 \n 2887  2888  2889  2890  2891  2892  2893  2894  2895  2896  2897  2898  2899 \n    1     1     1     1     1     2     1     1     3     1     1     2     1 \n 2900  2901  2902  2903  2904  2905  2906  2907  2908  2909  2910  2911  2912 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2913  2914  2915  2916  2917  2918  2919  2920  2921  2922  2923  2924  2925 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2926  2927  2928  2929  2930  2931  2932  2933  2934  2935  2936  2937  2938 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2939  2940  2941  2942  2943  2944  2945  2946  2947  2948  2949  2950  2951 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2952  2953  2954  2955  2956  2957  2958  2959  2960  2961  2962  2963  2964 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2965  2966  2967  2968  2969  2970  2971  2972  2973  2974  2975  2976  2977 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2978  2979  2980  2981  2982  2983  2984  2985  2986  2987  2988  2989  2990 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 2991  2992  2993  2994  2995  2996  2997  2998  2999  3000  3001  3002  3003 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3004  3005  3006  3007  3008  3009  3010  3011  3012  3013  3014  3015  3016 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3017  3018  3019  3020  3021  3022  3023  3024  3025  3026  3027  3028  3029 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3030  3031  3032  3033  3034  3035  3036  3037  3038  3039  3040  3041  3042 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3043  3044  3045  3046  3047  3048  3049  3050  3051  3052  3053  3054  3055 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3056  3057  3058  3059  3060  3061  3062  3063  3064  3065  3066  3067  3068 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3069  3070  3071  3072  3073  3074  3075  3076  3077  3078  3079  3080  3081 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3082  3083  3084  3085  3086  3087  3088  3089  3090  3091  3092  3093  3094 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3095  3096  3097  3098  3099  3100  3101  3102  3103  3104  3105  3106  3107 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 3108  3109  3110  3111  3112  3113  3114  3115  3116  3117  3118  3119  3120 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3121  3122  3123  3124  3125  3126  3127  3128  3129  3130  3131  3132  3133 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3134  3135  3136  3137  3138  3139  3140  3141  3142  3143  3144  3145  3146 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3147  3148  3149  3150  3151  3152  3153  3154  3155  3156  3157  3158  3159 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3160  3161  3162  3163  3164  3165  3166  3167  3168  3169  3170  3171  3172 \n    1     1     1     1     4     1     1     1     1     2     1     1     1 \n 3173  3174  3175  3176  3177  3178  3179  3180  3181  3182  3183  3184  3185 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 3186  3187  3188  3189  3190  3191  3192  3193  3194  3195  3196  3197  3198 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3199  3200  3201  3202  3203  3204  3205  3206  3207  3208  3209  3210  3211 \n    1     1     1     1     1     1     1     1     1     4     1     1     1 \n 3212  3213  3214  3215  3216  3217  3218  3219  3220  3221  3222  3223  3224 \n    1     1     1     1     3     1     1     1     1     1     1     3     1 \n 3225  3226  3227  3228  3229  3230  3231  3232  3233  3234  3235  3236  3237 \n    1     1     1     1     1     1     1     1     1     4     1     1     1 \n 3238  3239  3240  3241  3242  3243  3244  3245  3246  3247  3248  3249  3250 \n    2     1     1     1     1     1     3     1     1     1     1     1     1 \n 3251  3252  3253  3254  3255  3256  3257  3258  3259  3260  3261  3262  3263 \n    1     1     1     1     1     1     1     1     1     2     1     1     2 \n 3264  3265  3266  3267  3268  3269  3270  3271  3272  3273  3274  3275  3276 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3277  3278  3279  3280  3281  3282  3283  3284  3285  3286  3287  3288  3289 \n    1     1     2     1     1     1     1     1     1     1     3     1     1 \n 3290  3291  3292  3293  3294  3295  3296  3297  3298  3299  3300  3301  3302 \n    1     1     1     1     1     1     4     1     1     1     1     1     1 \n 3303  3304  3305  3306  3307  3308  3309  3310  3311  3312  3313  3314  3315 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3316  3317  3318  3319  3320  3321  3322  3323  3324  3325  3326  3327  3328 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3329  3330  3331  3332  3333  3334  3335  3336  3337  3338  3339  3340  3341 \n    1     1     1     3     1     1     1     1     1     1     1     1     1 \n 3342  3343  3344  3345  3346  3347  3348  3349  3350  3351  3352  3353  3354 \n    1     1     1     1     1     1     1     4     1     1     1     1     1 \n 3355  3356  3357  3358  3359  3360  3361  3362  3363  3364  3365  3366  3367 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3368  3369  3370  3371  3372  3373  3374  3375  3376  3377  3378  3379  3380 \n    1     1     1     1     1     1     3     1     1     1     1     1     1 \n 3381  3382  3383  3384  3385  3386  3387  3388  3389  3390  3391  3392  3393 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 3394  3395  3396  3397  3398  3399  3400  3401  3402  3403  3404  3405  3406 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 3407  3408  3409  3410  3411  3412  3413  3414  3415  3416  3417  3418  3419 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3420  3421  3422  3423  3424  3425  3426  3427  3428  3429  3430  3431  3432 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3433  3434  3435  3436  3437  3438  3439  3440  3441  3442  3443  3444  3445 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3446  3447  3448  3449  3450  3451  3452  3453  3454  3455  3456  3457  3458 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3459  3460  3461  3462  3463  3464  3465  3466  3467  3468  3469  3470  3471 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3472  3473  3474  3475  3476  3477  3478  3479  3480  3481  3482  3483  3484 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 3485  3486  3487  3488  3489  3490  3491  3492  3493  3494  3495  3496  3497 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 3498  3499  3500  3501  3502  3503  3504  3505  3506  3507  3508  3509  3510 \n    1     2     1     1     1     1     1     1     2     1     1     1     1 \n 3511  3512  3513  3514  3515  3516  3517  3518  3519  3520  3521  3522  3523 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3524  3525  3526  3527  3528  3529  3530  3531  3532  3533  3534  3535  3536 \n    1     1     1     1     1     1     1     1     1     1     1     1     4 \n 3537  3538  3539  3540  3541  3542  3543  3544  3545  3546  3547  3548  3549 \n    1     2     1     1     9     1     1     2     1     1     1     1     1 \n 3550  3551  3552  3553  3554  3555  3556  3557  3558  3559  3560  3561  3562 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3563  3564  3565  3566  3567  3568  3569  3570  3571  3572  3573  3574  3575 \n    1     1     1     1     1     1     4     1     1     1     1     1     1 \n 3576  3577  3578  3579  3580  3581  3582  3583  3584  3585  3586  3587  3588 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 3589  3590  3591  3592  3593  3594  3595  3596  3597  3598  3599  3600  3601 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 3602  3603  3604  3605  3606  3607  3608  3609  3610  3611  3612  3613  3614 \n    1     1     1     1     1     1     1     1    16     1     1     1     1 \n 3615  3616  3617  3618  3619  3620  3621  3622  3623  3624  3625  3626  3627 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3628  3629  3630  3631  3632  3633  3634  3635  3636  3637  3638  3639  3640 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3641  3642  3643  3644  3645  3646  3647  3648  3649  3650  3651  3652  3653 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3654  3655  3656  3657  3658  3659  3660  3661  3662  3663  3664  3665  3666 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3667  3668  3669  3670  3671  3672  3673  3674  3675  3676  3677  3678  3679 \n    1     1     1     2     1     1     1     1     1     1     1     2     1 \n 3680  3681  3682  3683  3684  3685  3686  3687  3688  3689  3690  3691  3692 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3693  3694  3695  3696  3697  3698  3699  3700  3701  3702  3703  3704  3705 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 3706  3707  3708  3709  3710  3711  3712  3713  3714  3715  3716  3717  3718 \n    1     1     2     1     1     1     1     1     1     2     1     1     2 \n 3719  3720  3721  3722  3723  3724  3725  3726  3727  3728  3729  3730  3731 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 3732  3733  3734  3735  3736  3737  3738  3739  3740  3741  3742  3743  3744 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3745  3746  3747  3748  3749  3750  3751  3752  3753  3754  3755  3756  3757 \n    1     1     1     1     1     1     1     4     1     1     1     1     1 \n 3758  3759  3760  3761  3762  3763  3764  3765  3766  3767  3768  3769  3770 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 3771  3772  3773  3774  3775  3776  3777  3778  3779  3780  3781  3782  3783 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3784  3785  3786  3787  3788  3789  3790  3791  3792  3793  3794  3795  3796 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3797  3798  3799  3800  3801  3802  3803  3804  3805  3806  3807  3808  3809 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3810  3811  3812  3813  3814  3815  3816  3817  3818  3819  3820  3821  3822 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3823  3824  3825  3826  3827  3828  3829  3830  3831  3832  3833  3834  3835 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3836  3837  3838  3839  3840  3841  3842  3843  3844  3845  3846  3847  3848 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 3849  3850  3851  3852  3853  3854  3855  3856  3857  3858  3859  3860  3861 \n    3     1     1     1     1     1     1     1     1     1     1     1     1 \n 3862  3863  3864  3865  3866  3867  3868  3869  3870  3871  3872  3873  3874 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3875  3876  3877  3878  3879  3880  3881  3882  3883  3884  3885  3886  3887 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3888  3889  3890  3891  3892  3893  3894  3895  3896  3897  3898  3899  3900 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3901  3902  3903  3904  3905  3906  3907  3908  3909  3910  3911  3912  3913 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3914  3915  3916  3917  3918  3919  3920  3921  3922  3923  3924  3925  3926 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3927  3928  3929  3930  3931  3932  3933  3934  3935  3936  3937  3938  3939 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 3940  3941  3942  3943  3944  3945  3946  3947  3948  3949  3950  3951  3952 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3953  3954  3955  3956  3957  3958  3959  3960  3961  3962  3963  3964  3965 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 3966  3967  3968  3969  3970  3971  3972  3973  3974  3975  3976  3977  3978 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 3979  3980  3981  3982  3983  3984  3985  3986  3987  3988  3989  3990  3991 \n    1     1     4     1     1     1     1     1     1     1     1     1     1 \n 3992  3993  3994  3995  3996  3997  3998  3999  4000  4001  4002  4003  4004 \n    1     1     2     1     1     1     2     1     1     1     1     1     1 \n 4005  4006  4007  4008  4009  4010  4011  4012  4013  4014  4015  4016  4017 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4018  4019  4020  4021  4022  4023  4024  4025  4026  4027  4028  4029  4030 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4031  4032  4033  4034  4035  4036  4037  4038  4039  4040  4041  4042  4043 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4044  4045  4046  4047  4048  4049  4050  4051  4052  4053  4054  4055  4056 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4057  4058  4059  4060  4061  4062  4063  4064  4065  4066  4067  4068  4069 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4070  4071  4072  4073  4074  4075  4076  4077  4078  4079  4080  4081  4082 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4083  4084  4085  4086  4087  4088  4089  4090  4091  4092  4093  4094  4095 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4096  4097  4098  4099  4100  4101  4102  4103  4104  4105  4106  4107  4108 \n    1     1     2     1     1     3     1     1     1     1     1     1     1 \n 4109  4110  4111  4112  4113  4114  4115  4116  4117  4118  4119  4120  4121 \n    1     1     1     2     1     1     1     1     1     1     3     1     1 \n 4122  4123  4124  4125  4126  4127  4128  4129  4130  4131  4132  4133  4134 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4135  4136  4137  4138  4139  4140  4141  4142  4143  4144  4145  4146  4147 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4148  4149  4150  4151  4152  4153  4154  4155  4156  4157  4158  4159  4160 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4161  4162  4163  4164  4165  4166  4167  4168  4169  4170  4171  4172  4173 \n    1     1     3     1     1     1     1     1     1     1     1     1     2 \n 4174  4175  4176  4177  4178  4179  4180  4181  4182  4183  4184  4185  4186 \n    1     4     1     1     1     1     1     1     1     1     1     1     1 \n 4187  4188  4189  4190  4191  4192  4193  4194  4195  4196  4197  4198  4199 \n    1     1     2     1     1     1     1     1     1     1     2     1     1 \n 4200  4201  4202  4203  4204  4205  4206  4207  4208  4209  4210  4211  4212 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4213  4214  4215  4216  4217  4218  4219  4220  4221  4222  4223  4224  4225 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4226  4227  4228  4229  4230  4231  4232  4233  4234  4235  4236  4237  4238 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4239  4240  4241  4242  4243  4244  4245  4246  4247  4248  4249  4250  4251 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4252  4253  4254  4255  4256  4257  4258  4259  4260  4261  4262  4263  4264 \n    1     1     2     3     1     1     1     1     1     1     1     1     1 \n 4265  4266  4267  4268  4269  4270  4271  4272  4273  4274  4275  4276  4277 \n    1     1     1     1     1     1     1     1     1     3     2     1     1 \n 4278  4279  4280  4281  4282  4283  4284  4285  4286  4287  4288  4289  4290 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4291  4292  4293  4294  4295  4296  4297  4298  4299  4300  4301  4302  4303 \n    1     1     1     2     1     1     1     1     1     1     1     3     1 \n 4304  4305  4306  4307  4308  4309  4310  4311  4312  4313  4314  4315  4316 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4317  4318  4319  4320  4321  4322  4323  4324  4325  4326  4327  4328  4329 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4330  4331  4332  4333  4334  4335  4336  4337  4338  4339  4340  4341  4342 \n    1     1     2     1     1     2     1     1     1     1     1     1     2 \n 4343  4344  4345  4346  4347  4348  4349  4350  4351  4352  4353  4354  4355 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 4356  4357  4358  4359  4360  4361  4362  4363  4364  4365  4366  4367  4368 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4369  4370  4371  4372  4373  4374  4375  4376  4377  4378  4379  4380  4381 \n    1     3     1     1     4     1     1     1     1     1     1     1     1 \n 4382  4383  4384  4385  4386  4387  4388  4389  4390  4391  4392  4393  4394 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 4395  4396  4397  4398  4399  4400  4401  4402  4403  4404  4405  4406  4407 \n    1     1     1     1     1     1     1     1     1     3     1     1     1 \n 4408  4409  4410  4411  4412  4413  4414  4415  4416  4417  4418  4419  4420 \n    1     1     1     1     2     1     1     1     1     1     1     3     1 \n 4421  4422  4423  4424  4425  4426  4427  4428  4429  4430  4431  4432  4433 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4434  4435  4436  4437  4438  4439  4440  4441  4442  4443  4444  4445  4446 \n    1     1     3     1     1     1     1     1     1     1     1     1     2 \n 4447  4448  4449  4450  4451  4452  4453  4454  4455  4456  4457  4458  4459 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4460  4461  4462  4463  4464  4465  4466  4467  4468  4469  4470  4471  4472 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4473  4474  4475  4476  4477  4478  4479  4480  4481  4482  4483  4484  4485 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 4486  4487  4488  4489  4490  4491  4492  4493  4494  4495  4496  4497  4498 \n    1     1     1     1     1     1     1     1     1     3     1     1     1 \n 4499  4500  4501  4502  4503  4504  4505  4506  4507  4508  4509  4510  4511 \n    1     1     1     1     1     2     1     1     1     1     1     1     2 \n 4512  4513  4514  4515  4516  4517  4518  4519  4520  4521  4522  4523  4524 \n    2     1     1     1     1     1     1     1     2     1     1     1     1 \n 4525  4526  4527  4528  4529  4530  4531  4532  4533  4534  4535  4536  4537 \n    1     1     1     1     4     2     1     1     1     1     1     1     1 \n 4538  4539  4540  4541  4542  4543  4544  4545  4546  4547  4548  4549  4550 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4551  4552  4553  4554  4555  4556  4557  4558  4559  4560  4561  4562  4563 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 4564  4565  4566  4567  4568  4569  4570  4571  4572  4573  4574  4575  4576 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4577  4578  4579  4580  4581  4582  4583  4584  4585  4586  4587  4588  4589 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4590  4591  4592  4593  4594  4595  4596  4597  4598  4599  4600  4601  4602 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4603  4604  4605  4606  4607  4608  4609  4610  4611  4612  4613  4614  4615 \n    1     1     1     1     1     1     3     1     1     5     3     1     1 \n 4616  4617  4618  4619  4620  4621  4622  4623  4624  4625  4626  4627  4628 \n    1     1     1     1     1     1     1     1     1     3     1     1     1 \n 4629  4630  4631  4632  4633  4634  4635  4636  4637  4638  4639  4640  4641 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 4642  4643  4644  4645  4646  4647  4648  4649  4650  4651  4652  4653  4654 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4655  4656  4657  4658  4659  4660  4661  4662  4663  4664  4665  4666  4667 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 4668  4669  4670  4671  4672  4673  4674  4675  4676  4677  4678  4679  4680 \n    1     1     1     1     1     1     1     1     4     1     1     1     1 \n 4681  4682  4683  4684  4685  4686  4687  4688  4689  4690  4691  4692  4693 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4694  4695  4696  4697  4698  4699  4700  4701  4702  4703  4704  4705  4706 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4707  4708  4709  4710  4711  4712  4713  4714  4715  4716  4717  4718  4719 \n    1     1     2     1     1     1     1     1     1     2     1     1     1 \n 4720  4721  4722  4723  4724  4725  4726  4727  4728  4729  4730  4731  4732 \n    1     1     1     1     1     1     1     1     1     1     4     1     1 \n 4733  4734  4735  4736  4737  4738  4739  4740  4741  4742  4743  4744  4745 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 4746  4747  4748  4749  4750  4751  4752  4753  4754  4755  4756  4757  4758 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4759  4760  4761  4762  4763  4764  4765  4766  4767  4768  4769  4770  4771 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 4772  4773  4774  4775  4776  4777  4778  4779  4780  4781  4782  4783  4784 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4785  4786  4787  4788  4789  4790  4791  4792  4793  4794  4795  4796  4797 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4798  4799  4800  4801  4802  4803  4804  4805  4806  4807  4808  4809  4810 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4811  4812  4813  4814  4815  4816  4817  4818  4819  4820  4821  4822  4823 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4824  4825  4826  4827  4828  4829  4830  4831  4832  4833  4834  4835  4836 \n    3     1     1     1     1     1     1     1     1     1     1     1     1 \n 4837  4838  4839  4840  4841  4842  4843  4844  4845  4846  4847  4848  4849 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4850  4851  4852  4853  4854  4855  4856  4857  4858  4859  4860  4861  4862 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4863  4864  4865  4866  4867  4868  4869  4870  4871  4872  4873  4874  4875 \n    1     1     1     1     4     1     1     1     1     1     1     1     1 \n 4876  4877  4878  4879  4880  4881  4882  4883  4884  4885  4886  4887  4888 \n    1     1     1     1     1     1     1     1     1     1    16     2     1 \n 4889  4890  4891  4892  4893  4894  4895  4896  4897  4898  4899  4900  4901 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 4902  4903  4904  4905  4906  4907  4908  4909  4910  4911  4912  4913  4914 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 4915  4916  4917  4918  4919  4920  4921  4922  4923  4924  4925  4926  4927 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4928  4929  4930  4931  4932  4933  4934  4935  4936  4937  4938  4939  4940 \n    1     1     1     1     1     1     2     1     1     1     1     1     4 \n 4941  4942  4943  4944  4945  4946  4947  4948  4949  4950  4951  4952  4953 \n    1     1     3     1     1     1     1     1     1     1     1     1     1 \n 4954  4955  4956  4957  4958  4959  4960  4961  4962  4963  4964  4965  4966 \n    4     1     1     1     1     1     1     1     1     1     1     1     1 \n 4967  4968  4969  4970  4971  4972  4973  4974  4975  4976  4977  4978  4979 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4980  4981  4982  4983  4984  4985  4986  4987  4988  4989  4990  4991  4992 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 4993  4994  4995  4996  4997  4998  4999  5000  5001  5002  5003  5004  5005 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5006  5007  5008  5009  5010  5011  5012  5013  5014  5015  5016  5017  5018 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 5019  5020  5021  5022  5023  5024  5025  5026  5027  5028  5029  5030  5031 \n    1     1     1     3     1     1     1     1     1     1     1     1     2 \n 5032  5033  5034  5035  5036  5037  5038  5039  5040  5041  5042  5043  5044 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 5045  5046  5047  5048  5049  5050  5051  5052  5053  5054  5055  5056  5057 \n    6     2     6     1     1     1     1     2     1     1     1     1     1 \n 5058  5059  5060  5061  5062  5063  5064  5065  5066  5067  5068  5069  5070 \n    1     1     1     1     1     1     1     1     3     1     1     1     2 \n 5071  5072  5073  5074  5075  5076  5077  5078  5079  5080  5081  5082  5083 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5084  5085  5086  5087  5088  5089  5090  5091  5092  5093  5094  5095  5096 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5097  5098  5099  5100  5101  5102  5103  5104  5105  5106  5107  5108  5109 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 5110  5111  5112  5113  5114  5115  5116  5117  5118  5119  5120  5121  5122 \n    1     1     1     1     1     1     1     1     1     1     1     1     3 \n 5123  5124  5125  5126  5127  5128  5129  5130  5131  5132  5133  5134  5135 \n    1     4     1     1     1     1     1     1     1     1     1     1     1 \n 5136  5137  5138  5139  5140  5141  5142  5143  5144  5145  5146  5147  5148 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5149  5150  5151  5152  5153  5154  5155  5156  5157  5158  5159  5160  5161 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 5162  5163  5164  5165  5166  5167  5168  5169  5170  5171  5172  5173  5174 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5175  5176  5177  5178  5179  5180  5181  5182  5183  5184  5185  5186  5187 \n    2     2     1     1     1     2     1     1     1     2     1     1     1 \n 5188  5189  5190  5191  5192  5193  5194  5195  5196  5197  5198  5199  5200 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5201  5202  5203  5204  5205  5206  5207  5208  5209  5210  5211  5212  5213 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5214  5215  5216  5217  5218  5219  5220  5221  5222  5223  5224  5225  5226 \n    1     1     1     1     1     1     1     1     1     1     2    16     1 \n 5227  5228  5229  5230  5231  5232  5233  5234  5235  5236  5237  5238  5239 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 5240  5241  5242  5243  5244  5245  5246  5247  5248  5249  5250  5251  5252 \n    1     1     1     1     1     1     1     2     1     1     4     1     1 \n 5253  5254  5255  5256  5257  5258  5259  5260  5261  5262  5263  5264  5265 \n    1     1     1     1     1     1     1     1     3     1     1     1     1 \n 5266  5267  5268  5269  5270  5271  5272  5273  5274  5275  5276  5277  5278 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5279  5280  5281  5282  5283  5284  5285  5286  5287  5288  5289  5290  5291 \n    1     1     1     1     1     1     1     1     2     2     1     1     1 \n 5292  5293  5294  5295  5296  5297  5298  5299  5300  5301  5302  5303  5304 \n    1     1     2     1     1     1     1     1     1     1     1     2     1 \n 5305  5306  5307  5308  5309  5310  5311  5312  5313  5314  5315  5316  5317 \n    1     1     1     1     4     1     1     1     1     1     2     1     1 \n 5318  5319  5320  5321  5322  5323  5324  5325  5326  5327  5328  5329  5330 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 5331  5332  5333  5334  5335  5336  5337  5338  5339  5340  5341  5342  5343 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 5344  5345  5346  5347  5348  5349  5350  5351  5352  5353  5354  5355  5356 \n    1     1     1     1     1     1     1     1     1     1     1     3     1 \n 5357  5358  5359  5360  5361  5362  5363  5364  5365  5366  5367  5368  5369 \n    1     1     1     1     1     1     4     1     4     1     1     1     1 \n 5370  5371  5372  5373  5374  5375  5376  5377  5378  5379  5380  5381  5382 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 5383  5384  5385  5386  5387  5388  5389  5390  5391  5392  5393  5394  5395 \n    1     1     1     1     1     1     1     1     1     3     2    16     1 \n 5396  5397  5398  5399  5400  5401  5402  5403  5404  5405  5406  5407  5408 \n    3     1     1     1     1     1     1     1     1     1     1     1     1 \n 5409  5410  5411  5412  5413  5414  5415  5416  5417  5418  5419  5420  5421 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5422  5423  5424  5425  5426  5427  5428  5429  5430  5431  5432  5433  5434 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5435  5436  5437  5438  5439  5440  5441  5442  5443  5444  5445  5446  5447 \n    1     1     3     1     1     1     1     1     1     1     1     1     2 \n 5448  5449  5450  5451  5452  5453  5454  5455  5456  5457  5458  5459  5460 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 5461  5462  5463  5464  5465  5466  5467  5468  5469  5470  5471  5472  5473 \n    1     1     3     2     1     1     1     1     1     1     1     1     2 \n 5474  5475  5476  5477  5478  5479  5480  5481  5482  5483  5484  5485  5486 \n    1    16     1     1     1     1     1     1     1     1     1     1     1 \n 5487  5488  5489  5490  5491  5492  5493  5494  5495  5496  5497  5498  5499 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5500  5501  5502  5503  5504  5505  5506  5507  5508  5509  5510  5511  5512 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5513  5514  5515  5516  5517  5518  5519  5520  5521  5522  5523  5524  5525 \n    1     1     1     1     1     1     1     3     1     1     1     1     2 \n 5526  5527  5528  5529  5530  5531  5532  5533  5534  5535  5536  5537  5538 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 5539  5540  5541  5542  5543  5544  5545  5546  5547  5548  5549  5550  5551 \n    1     1     1     1     1     2     1     1     1     1     1     1     2 \n 5552  5553  5554  5555  5556  5557  5558  5559  5560  5561  5562  5563  5564 \n    2     1    16     1     1     1     1     1     1     1     1     1     1 \n 5565  5566  5567  5568  5569  5570  5571  5572  5573  5574  5575  5576  5577 \n    1     1     1     1     1     1     1     1     1     1     1     1     3 \n 5578  5579  5580  5581  5582  5583  5584  5585  5586  5587  5588  5589  5590 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 5591  5592  5593  5594  5595  5596  5597  5598  5599  5600  5601  5602  5603 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5604  5605  5606  5607  5608  5609  5610  5611  5612  5613  5614  5615  5616 \n    1     1     1     1     1     1     1     1    16     1     1     2     1 \n 5617  5618  5619  5620  5621  5622  5623  5624  5625  5626  5627  5628  5629 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5630  5631  5632  5633  5634  5635  5636  5637  5638  5639  5640  5641  5642 \n    1     1     1     1     2     1     1     1     1     4     1     1     1 \n 5643  5644  5645  5646  5647  5648  5649  5650  5651  5652  5653  5654  5655 \n    3     5     1     1     1     1     1     1     1     1     1     1     3 \n 5656  5657  5658  5659  5660  5661  5662  5663  5664  5665  5666  5667  5668 \n    1     1     1     4     1     1     1     1     1     1     1     1     1 \n 5669  5670  5671  5672  5673  5674  5675  5676  5677  5678  5679  5680  5681 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5682  5683  5684  5685  5686  5687  5688  5689  5690  5691  5692  5693  5694 \n    1     1     1     1     1     1     1     1     1     2     1     1     4 \n 5695  5696  5697  5698  5699  5700  5701  5702  5703  5704  5705  5706  5707 \n    1     1     1     1     1     1     5     1     1     1     1     1     1 \n 5708  5709  5710  5711  5712  5713  5714  5715  5716  5717  5718  5719  5720 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 5721  5722  5723  5724  5725  5726  5727  5728  5729  5730  5731  5732  5733 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5734  5735  5736  5737  5738  5739  5740  5741  5742  5743  5744  5745  5746 \n    1     1     1     1     1     1     1     1     1     1     2     5     1 \n 5747  5748  5749  5750  5751  5752  5753  5754  5755  5756  5757  5758  5759 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 5760  5761  5762  5763  5764  5765  5766  5767  5768  5769  5770  5771  5772 \n    1     1     1     1     1     1    16     1     1     2     1     1     1 \n 5773  5774  5775  5776  5777  5778  5779  5780  5781  5782  5783  5784  5785 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 5786  5787  5788  5789  5790  5791  5792  5793  5794  5795  5796  5797  5798 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 5799  5800  5801  5802  5803  5804  5805  5806  5807  5808  5809  5810  5811 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 5812  5813  5814  5815  5816  5817  5818  5819  5820  5821  5822  5823  5824 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5825  5826  5827  5828  5829  5830  5831  5832  5833  5834  5835  5836  5837 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5838  5839  5840  5841  5842  5843  5844  5845  5846  5847  5848  5849  5850 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 5851  5852  5853  5854  5855  5856  5857  5858  5859  5860  5861  5862  5863 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5864  5865  5866  5867  5868  5869  5870  5871  5872  5873  5874  5875  5876 \n    1     1     1     1     1     2     2     1     1     1     1     1     1 \n 5877  5878  5879  5880  5881  5882  5883  5884  5885  5886  5887  5888  5889 \n    1     1     1     1     1     1     1     1     3     1     1     1     1 \n 5890  5891  5892  5893  5894  5895  5896  5897  5898  5899  5900  5901  5902 \n    1     1     1     1     1     1     1     1     1     1     1     1     5 \n 5903  5904  5905  5906  5907  5908  5909  5910  5911  5912  5913  5914  5915 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 5916  5917  5918  5919  5920  5921  5922  5923  5924  5925  5926  5927  5928 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 5929  5930  5931  5932  5933  5934  5935  5936  5937  5938  5939  5940  5941 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5942  5943  5944  5945  5946  5947  5948  5949  5950  5951  5952  5953  5954 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5955  5956  5957  5958  5959  5960  5961  5962  5963  5964  5965  5966  5967 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 5968  5969  5970  5971  5972  5973  5974  5975  5976  5977  5978  5979  5980 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5981  5982  5983  5984  5985  5986  5987  5988  5989  5990  5991  5992  5993 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 5994  5995  5996  5997  5998  5999  6000  6001  6002  6003  6004  6005  6006 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6007  6008  6009  6010  6011  6012  6013  6014  6015  6016  6017  6018  6019 \n    4     1     2     1     1     1     1     1     1     1     1     1     1 \n 6020  6021  6022  6023  6024  6025  6026  6027  6028  6029  6030  6031  6032 \n    1     1     1     1     1     1     6     1     1     1     1     1     1 \n 6033  6034  6035  6036  6037  6038  6039  6040  6041  6042  6043  6044  6045 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6046  6047  6048  6049  6050  6051  6052  6053  6054  6055  6056  6057  6058 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6059  6060  6061  6062  6063  6064  6065  6066  6067  6068  6069  6070  6071 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6072  6073  6074  6075  6076  6077  6078  6079  6080  6081  6082  6083  6084 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6085  6086  6087  6088  6089  6090  6091  6092  6093  6094  6095  6096  6097 \n    1     1     1     1     1     1     1     4     1     1     1     1     1 \n 6098  6099  6100  6101  6102  6103  6104  6105  6106  6107  6108  6109  6110 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6111  6112  6113  6114  6115  6116  6117  6118  6119  6120  6121  6122  6123 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 6124  6125  6126  6127  6128  6129  6130  6131  6132  6133  6134  6135  6136 \n    1     1     1     3     1     1     1     1     1     1     1     1     1 \n 6137  6138  6139  6140  6141  6142  6143  6144  6145  6146  6147  6148  6149 \n    1     1     4     2     1     1     1     1     1     1     1     1     1 \n 6150  6151  6152  6153  6154  6155  6156  6157  6158  6159  6160  6161  6162 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6163  6164  6165  6166  6167  6168  6169  6170  6171  6172  6173  6174  6175 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 6176  6177  6178  6179  6180  6181  6182  6183  6184  6185  6186  6187  6188 \n    1     1     1     1     1     1     1     1     1     1     1     9     1 \n 6189  6190  6191  6192  6193  6194  6195  6196  6197  6198  6199  6200  6201 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6202  6203  6204  6205  6206  6207  6208  6209  6210  6211  6212  6213  6214 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6215  6216  6217  6218  6219  6220  6221  6222  6223  6224  6225  6226  6227 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6228  6229  6230  6231  6232  6233  6234  6235  6236  6237  6238  6239  6240 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6241  6242  6243  6244  6245  6246  6247  6248  6249  6250  6251  6252  6253 \n    1     2     1     1     1     1     1     1     1     1     2     2     1 \n 6254  6255  6256  6257  6258  6259  6260  6261  6262  6263  6264  6265  6266 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6267  6268  6269  6270  6271  6272  6273  6274  6275  6276  6277  6278  6279 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6280  6281  6282  6283  6284  6285  6286  6287  6288  6289  6290  6291  6292 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6293  6294  6295  6296  6297  6298  6299  6300  6301  6302  6303  6304  6305 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6306  6307  6308  6309  6310  6311  6312  6313  6314  6315  6316  6317  6318 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6319  6320  6321  6322  6323  6324  6325  6326  6327  6328  6329  6330  6331 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6332  6333  6334  6335  6336  6337  6338  6339  6340  6341  6342  6343  6344 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6345  6346  6347  6348  6349  6350  6351  6352  6353  6354  6355  6356  6357 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6358  6359  6360  6361  6362  6363  6364  6365  6366  6367  6368  6369  6370 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6371  6372  6373  6374  6375  6376  6377  6378  6379  6380  6381  6382  6383 \n    1     2     1     1     1     1     1     1     1     1     1     1     5 \n 6384  6385  6386  6387  6388  6389  6390  6391  6392  6393  6394  6395  6396 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6397  6398  6399  6400  6401  6402  6403  6404  6405  6406  6407  6408  6409 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 6410  6411  6412  6413  6414  6415  6416  6417  6418  6419  6420  6421  6422 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6423  6424  6425  6426  6427  6428  6429  6430  6431  6432  6433  6434  6435 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 6436  6437  6438  6439  6440  6441  6442  6443  6444  6445  6446  6447  6448 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 6449  6450  6451  6452  6453  6454  6455  6456  6457  6458  6459  6460  6461 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6462  6463  6464  6465  6466  6467  6468  6469  6470  6471  6472  6473  6474 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6475  6476  6477  6478  6479  6480  6481  6482  6483  6484  6485  6486  6487 \n    1     1     1     1     1     1     1     1     1     1     1     2     2 \n 6488  6489  6490  6491  6492  6493  6494  6495  6496  6497  6498  6499  6500 \n    1     1     1     1     1     1     1     1     2     1     3     1     1 \n 6501  6502  6503  6504  6505  6506  6507  6508  6509  6510  6511  6512  6513 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6514  6515  6516  6517  6518  6519  6520  6521  6522  6523  6524  6525  6526 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6527  6528  6529  6530  6531  6532  6533  6534  6535  6536  6537  6538  6539 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6540  6541  6542  6543  6544  6545  6546  6547  6548  6549  6550  6551  6552 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6553  6554  6555  6556  6557  6558  6559  6560  6561  6562  6563  6564  6565 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6566  6567  6568  6569  6570  6571  6572  6573  6574  6575  6576  6577  6578 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6579  6580  6581  6582  6583  6584  6585  6586  6587  6588  6589  6590  6591 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 6592  6593  6594  6595  6596  6597  6598  6599  6600  6601  6602  6603  6604 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6605  6606  6607  6608  6609  6610  6611  6612  6613  6614  6615  6616  6617 \n    1     2     1     1     1     1     1     1     2     1     1     1     1 \n 6618  6619  6620  6621  6622  6623  6624  6625  6626  6627  6628  6629  6630 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6631  6632  6633  6634  6635  6636  6637  6638  6639  6640  6641  6642  6643 \n    1     1     3     1     1     1     1     1     2     2     1     1     1 \n 6644  6645  6646  6647  6648  6649  6650  6651  6652  6653  6654  6655  6656 \n    1     1     1     1     1     1     2     1     1     1     1     2     1 \n 6657  6658  6659  6660  6661  6662  6663  6664  6665  6666  6667  6668  6669 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 6670  6671  6672  6673  6674  6675  6676  6677  6678  6679  6680  6681  6682 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6683  6684  6685  6686  6687  6688  6689  6690  6691  6692  6693  6694  6695 \n    2     1     3     1     1     1     8     1     1     1     1     1     1 \n 6696  6697  6698  6699  6700  6701  6702  6703  6704  6705  6706  6707  6708 \n    1     1     2     1     1     1     2     1     1     1     1     1     1 \n 6709  6710  6711  6712  6713  6714  6715  6716  6717  6718  6719  6720  6721 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6722  6723  6724  6725  6726  6727  6728  6729  6730  6731  6732  6733  6734 \n    2     1     1     1     1     1     1     1     4     1     1     1     1 \n 6735  6736  6737  6738  6739  6740  6741  6742  6743  6744  6745  6746  6747 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 6748  6749  6750  6751  6752  6753  6754  6755  6756  6757  6758  6759  6760 \n    1     1     1     1     1     3     1     1     1     1     1     1     1 \n 6761  6762  6763  6764  6765  6766  6767  6768  6769  6770  6771  6772  6773 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 6774  6775  6776  6777  6778  6779  6780  6781  6782  6783  6784  6785  6786 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 6787  6788  6789  6790  6791  6792  6793  6794  6795  6796  6797  6798  6799 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 6800  6801  6802  6803  6804  6805  6806  6807  6808  6809  6810  6811  6812 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6813  6814  6815  6816  6817  6818  6819  6820  6821  6822  6823  6824  6825 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6826  6827  6828  6829  6830  6831  6832  6833  6834  6835  6836  6837  6838 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6839  6840  6841  6842  6843  6844  6845  6846  6847  6848  6849  6850  6851 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6852  6853  6854  6855  6856  6857  6858  6859  6860  6861  6862  6863  6864 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6865  6866  6867  6868  6869  6870  6871  6872  6873  6874  6875  6876  6877 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6878  6879  6880  6881  6882  6883  6884  6885  6886  6887  6888  6889  6890 \n    1     1     1     1     1     1     1     4     1     1     1     2     1 \n 6891  6892  6893  6894  6895  6896  6897  6898  6899  6900  6901  6902  6903 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6904  6905  6906  6907  6908  6909  6910  6911  6912  6913  6914  6915  6916 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6917  6918  6919  6920  6921  6922  6923  6924  6925  6926  6927  6928  6929 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 6930  6931  6932  6933  6934  6935  6936  6937  6938  6939  6940  6941  6942 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6943  6944  6945  6946  6947  6948  6949  6950  6951  6952  6953  6954  6955 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 6956  6957  6958  6959  6960  6961  6962  6963  6964  6965  6966  6967  6968 \n    1     1     1     1     1     1     1     1     1     1     1     1    16 \n 6969  6970  6971  6972  6973  6974  6975  6976  6977  6978  6979  6980  6981 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 6982  6983  6984  6985  6986  6987  6988  6989  6990  6991  6992  6993  6994 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6995  6996  6997  6998  6999  7000  7001  7002  7003  7004  7005  7006  7007 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7008  7009  7010  7011  7012  7013  7014  7015  7016  7017  7018  7019  7020 \n    1     1     1     3     3     8     1     1     1     1     1     1     1 \n 7021  7022  7023  7024  7025  7026  7027  7028  7029  7030  7031  7032  7033 \n    1     1     1     1     1     2     1     1     1     1     3     1     1 \n 7034  7035  7036  7037  7038  7039  7040  7041  7042  7043  7044  7045  7046 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7047  7048  7049  7050  7051  7052  7053  7054  7055  7056  7057  7058  7059 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7060  7061  7062  7063  7064  7065  7066  7067  7068  7069  7070  7071  7072 \n    1     2     1     1     1     1     1     1     1     1     2     1     1 \n 7073  7074  7075  7076  7077  7078  7079  7080  7081  7082  7083  7084  7085 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 7086  7087  7088  7089  7090  7091  7092  7093  7094  7095  7096  7097  7098 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7099  7100  7101  7102  7103  7104  7105  7106  7107  7108  7109  7110  7111 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7112  7113  7114  7115  7116  7117  7118  7119  7120  7121  7122  7123  7124 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 7125  7126  7127  7128  7129  7130  7131  7132  7133  7134  7135  7136  7137 \n    1     1     1     1     1     1     1     2     1     1     1     1     3 \n 7138  7139  7140  7141  7142  7143  7144  7145  7146  7147  7148  7149  7150 \n    1     1     1     1     1     1     1     1     1     1     1     4     1 \n 7151  7152  7153  7154  7155  7156  7157  7158  7159  7160  7161  7162  7163 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7164  7165  7166  7167  7168  7169  7170  7171  7172  7173  7174  7175  7176 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7177  7178  7179  7180  7181  7182  7183  7184  7185  7186  7187  7188  7189 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7190  7191  7192  7193  7194  7195  7196  7197  7198  7199  7200  7201  7202 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7203  7204  7205  7206  7207  7208  7209  7210  7211  7212  7213  7214  7215 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7216  7217  7218  7219  7220  7221  7222  7223  7224  7225  7226  7227  7228 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7229  7230  7231  7232  7233  7234  7235  7236  7237  7238  7239  7240  7241 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7242  7243  7244  7245  7246  7247  7248  7249  7250  7251  7252  7253  7254 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7255  7256  7257  7258  7259  7260  7261  7262  7263  7264  7265  7266  7267 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7268  7269  7270  7271  7272  7273  7274  7275  7276  7277  7278  7279  7280 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7281  7282  7283  7284  7285  7286  7287  7288  7289  7290  7291  7292  7293 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7294  7295  7296  7297  7298  7299  7300  7301  7302  7303  7304  7305  7306 \n    1     1     1     1     1     1     1     3     1     1     2     1     1 \n 7307  7308  7309  7310  7311  7312  7313  7314  7315  7316  7317  7318  7319 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7320  7321  7322  7323  7324  7325  7326  7327  7328  7329  7330  7331  7332 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7333  7334  7335  7336  7337  7338  7339  7340  7341  7342  7343  7344  7345 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7346  7347  7348  7349  7350  7351  7352  7353  7354  7355  7356  7357  7358 \n    1     1     1     1     1     1     1     1     1     3     1     1     1 \n 7359  7360  7361  7362  7363  7364  7365  7366  7367  7368  7369  7370  7371 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 7372  7373  7374  7375  7376  7377  7378  7379  7380  7381  7382  7383  7384 \n    1     1     1     1     1     2     1     1     1     2     1     1     1 \n 7385  7386  7387  7388  7389  7390  7391  7392  7393  7394  7395  7396  7397 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7398  7399  7400  7401  7402  7403  7404  7405  7406  7407  7408  7409  7410 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7411  7412  7413  7414  7415  7416  7417  7418  7419  7420  7421  7422  7423 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7424  7425  7426  7427  7428  7429  7430  7431  7432  7433  7434  7435  7436 \n    1     1     1     1     1     1     3     1     1     1     1     1     1 \n 7437  7438  7439  7440  7441  7442  7443  7444  7445  7446  7447  7448  7449 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 7450  7451  7452  7453  7454  7455  7456  7457  7458  7459  7460  7461  7462 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7463  7464  7465  7466  7467  7468  7469  7470  7471  7472  7473  7474  7475 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 7476  7477  7478  7479  7480  7481  7482  7483  7484  7485  7486  7487  7488 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7489  7490  7491  7492  7493  7494  7495  7496  7497  7498  7499  7500  7501 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7502  7503  7504  7505  7506  7507  7508  7509  7510  7511  7512  7513  7514 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7515  7516  7517  7518  7519  7520  7521  7522  7523  7524  7525  7526  7527 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 7528  7529  7530  7531  7532  7533  7534  7535  7536  7537  7538  7539  7540 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7541  7542  7543  7544  7545  7546  7547  7548  7549  7550  7551  7552  7553 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7554  7555  7556  7557  7558  7559  7560  7561  7562  7563  7564  7565  7566 \n    1     4     1     1     1     1     1     1     1     1     1     1     1 \n 7567  7568  7569  7570  7571  7572  7573  7574  7575  7576  7577  7578  7579 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7580  7581  7582  7583  7584  7585  7586  7587  7588  7589  7590  7591  7592 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7593  7594  7595  7596  7597  7598  7599  7600  7601  7602  7603  7604  7605 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 7606  7607  7608  7609  7610  7611  7612  7613  7614  7615  7616  7617  7618 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 7619  7620  7621  7622  7623  7624  7625  7626  7627  7628  7629  7630  7631 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7632  7633  7634  7635  7636  7637  7638  7639  7640  7641  7642  7643  7644 \n    1     1     1     2     3     1     1     1     1     1     1     1     1 \n 7645  7646  7647  7648  7649  7650  7651  7652  7653  7654  7655  7656  7657 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 7658  7659  7660  7661  7662  7663  7664  7665  7666  7667  7668  7669  7670 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7671  7672  7673  7674  7675  7676  7677  7678  7679  7680  7681  7682  7683 \n    1     1     8     2     1     2     1     1     1     1     1     1     1 \n 7684  7685  7686  7687  7688  7689  7690  7691  7692  7693  7694  7695  7696 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 7697  7698  7699  7700  7701  7702  7703  7704  7705  7706  7707  7708  7709 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7710  7711  7712  7713  7714  7715  7716  7717  7718  7719  7720  7721  7722 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 7723  7724  7725  7726  7727  7728  7729  7730  7731  7732  7733  7734  7735 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7736  7737  7738  7739  7740  7741  7742  7743  7744  7745  7746  7747  7748 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 7749  7750  7751  7752  7753  7754  7755  7756  7757  7758  7759  7760  7761 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 7762  7763  7764  7765  7766  7767  7768  7769  7770  7771  7772  7773  7774 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7775  7776  7777  7778  7779  7780  7781  7782  7783  7784  7785  7786  7787 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7788  7789  7790  7791  7792  7793  7794  7795  7796  7797  7798  7799  7800 \n    1     1     2     1     1     1     1     2     1     1     1     1     1 \n 7801  7802  7803  7804  7805  7806  7807  7808  7809  7810  7811  7812  7813 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 7814  7815  7816  7817  7818  7819  7820  7821  7822  7823  7824  7825  7826 \n    1     1     3     1     1     1     1     1     1     1     1     1     1 \n 7827  7828  7829  7830  7831  7832  7833  7834  7835  7836  7837  7838  7839 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 7840  7841  7842  7843  7844  7845  7846  7847  7848  7849  7850  7851  7852 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7853  7854  7855  7856  7857  7858  7859  7860  7861  7862  7863  7864  7865 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7866  7867  7868  7869  7870  7871  7872  7873  7874  7875  7876  7877  7878 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 7879  7880  7881  7882  7883  7884  7885  7886  7887  7888  7889  7890  7891 \n    1     1     2     1     1     1     1     1     1     1     2     1     1 \n 7892  7893  7894  7895  7896  7897  7898  7899  7900  7901  7902  7903  7904 \n    1     1     4     1     1     1     1     1     1     1     1     1     1 \n 7905  7906  7907  7908  7909  7910  7911  7912  7913  7914  7915  7916  7917 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7918  7919  7920  7921  7922  7923  7924  7925  7926  7927  7928  7929  7930 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7931  7932  7933  7934  7935  7936  7937  7938  7939  7940  7941  7942  7943 \n    1     1     1     1     1     1     1     2     3     1     3     1     1 \n 7944  7945  7946  7947  7948  7949  7950  7951  7952  7953  7954  7955  7956 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7957  7958  7959  7960  7961  7962  7963  7964  7965  7966  7967  7968  7969 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7970  7971  7972  7973  7974  7975  7976  7977  7978  7979  7980  7981  7982 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7983  7984  7985  7986  7987  7988  7989  7990  7991  7992  7993  7994  7995 \n    3     1     1     2     1     1     1     1     1     1     1     1     1 \n 7996  7997  7998  7999  8000  8001  8002  8003  8004  8005  8006  8007  8008 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8009  8010  8011  8012  8013  8014  8015  8016  8017  8018  8019  8020  8021 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8022  8023  8024  8025  8026  8027  8028  8029  8030  8031  8032  8033  8034 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 8035  8036  8037  8038  8039  8040  8041  8042  8043  8044  8045  8046  8047 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8048  8049  8050  8051  8052  8053  8054  8055  8056  8057  8058  8059  8060 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8061  8062  8063  8064  8065  8066  8067  8068  8069  8070  8071  8072  8073 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8074  8075  8076  8077  8078  8079  8080  8081  8082  8083  8084  8085  8086 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8087  8088  8089  8090  8091  8092  8093  8094  8095  8096  8097  8098  8099 \n    1     1     1     2     1     1     2     1     1     1     1     1     1 \n 8100  8101  8102  8103  8104  8105  8106  8107  8108  8109  8110  8111  8112 \n    1     1     2     1     2     1     1     2     1     1     1     1     1 \n 8113  8114  8115  8116  8117  8118  8119  8120  8121  8122  8123  8124  8125 \n    1     1     1     1     1     1     1     1     1     2     1     2     1 \n 8126  8127  8128  8129  8130  8131  8132  8133  8134  8135  8136  8137  8138 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8139  8140  8141  8142  8143  8144  8145  8146  8147  8148  8149  8150  8151 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8152  8153  8154  8155  8156  8157  8158  8159  8160  8161  8162  8163  8164 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 8165  8166  8167  8168  8169  8170  8171  8172  8173  8174  8175  8176  8177 \n    1     1     1     1     1     1     2     1     2     1     1     1     1 \n 8178  8179  8180  8181  8182  8183  8184  8185  8186  8187  8188  8189  8190 \n    1     1     1     1     1     1     1     1     1     1     1     3     1 \n 8191  8192  8193  8194  8195  8196  8197  8198  8199  8200  8201  8202  8203 \n    1     1     1     1     1     1     6     2     6     1     1     1     1 \n 8204  8205  8206  8207  8208  8209  8210  8211  8212  8213  8214  8215  8216 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 8217  8218  8219  8220  8221  8222  8223  8224  8225  8226  8227  8228  8229 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8230  8231  8232  8233  8234  8235  8236  8237  8238  8239  8240  8241  8242 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8243  8244  8245  8246  8247  8248  8249  8250  8251  8252  8253  8254  8255 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8256  8257  8258  8259  8260  8261  8262  8263  8264  8265  8266  8267  8268 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8269  8270  8271  8272  8273  8274  8275  8276  8277  8278  8279  8280  8281 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8282  8283  8284  8285  8286  8287  8288  8289  8290  8291  8292  8293  8294 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8295  8296  8297  8298  8299  8300  8301  8302  8303  8304  8305  8306  8307 \n    1     1     1     1     1     1     1     1     1     3     1     3     6 \n 8308  8309  8310  8311  8312  8313  8314  8315  8316  8317  8318  8319  8320 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 8321  8322  8323  8324  8325  8326  8327  8328  8329  8330  8331  8332  8333 \n    1     1     1    16     1     1     1     1     1     1     1     1     1 \n 8334  8335  8336  8337  8338  8339  8340  8341  8342  8343  8344  8345  8346 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 8347  8348  8349  8350  8351  8352  8353  8354  8355  8356  8357  8358  8359 \n    1     3     1     1     2     1     1     1     1     1     1     2     1 \n 8360  8361  8362  8363  8364  8365  8366  8367  8368  8369  8370  8371  8372 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8373  8374  8375  8376  8377  8378  8379  8380  8381  8382  8383  8384  8385 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8386  8387  8388  8389  8390  8391  8392  8393  8394  8395  8396  8397  8398 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8399  8400  8401  8402  8403  8404  8405  8406  8407  8408  8409  8410  8411 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8412  8413  8414  8415  8416  8417  8418  8419  8420  8421  8422  8423  8424 \n    1     1     2     1     1     1     1     1     1     1     1     2     1 \n 8425  8426  8427  8428  8429  8430  8431  8432  8433  8434  8435  8436  8437 \n    2     1     1     1     1     1     1     1     1     1     2     1     1 \n 8438  8439  8440  8441  8442  8443  8444  8445  8446  8447  8448  8449  8450 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8451  8452  8453  8454  8455  8456  8457  8458  8459  8460  8461  8462  8463 \n    1     1     1     1     1     1     1     2     1     1     1     2     1 \n 8464  8465  8466  8467  8468  8469  8470  8471  8472  8473  8474  8475  8476 \n    1     2     1     1     1     1     1     1     1     1     2     5     1 \n 8477  8478  8479  8480  8481  8482  8483  8484  8485  8486  8487  8488  8489 \n    1     1     1     1     1     1     1     1     1     1     3     2     1 \n 8490  8491  8492  8493  8494  8495  8496  8497  8498  8499  8500  8501  8502 \n    1     1     1     1     1     1     3     3     1     1     1     1     1 \n 8503  8504  8505  8506  8507  8508  8509  8510  8511  8512  8513  8514  8515 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8516  8517  8518  8519  8520  8521  8522  8523  8524  8525  8526  8527  8528 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8529  8530  8531  8532  8533  8534  8535  8536  8537  8538  8539  8540  8541 \n    1     1     1     1     1     1     1     1     1     2     1     1     9 \n 8542  8543  8544  8545  8546  8547  8548  8549  8550  8551  8552  8553  8554 \n    1     1     1     1     1     1     1    16     1     2     2     1     1 \n 8555  8556  8557  8558  8559  8560  8561  8562  8563  8564  8565  8566  8567 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 8568  8569  8570  8571  8572  8573  8574  8575  8576  8577  8578  8579  8580 \n    1     1     1     1     1     1     2     2     1     1     1     1     1 \n 8581  8582  8583  8584  8585  8586  8587  8588  8589  8590  8591  8592  8593 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 8594  8595  8596  8597  8598  8599  8600  8601  8602  8603  8604  8605  8606 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 8607  8608  8609  8610  8611  8612  8613  8614  8615  8616  8617  8618  8619 \n    1     1     1     1     1     2     1     1     1     1     1    16     1 \n 8620  8621  8622  8623  8624  8625  8626  8627  8628  8629  8630  8631  8632 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8633  8634  8635  8636  8637  8638  8639  8640  8641  8642  8643  8644  8645 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8646  8647  8648  8649  8650  8651  8652  8653  8654  8655  8656  8657  8658 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8659  8660  8661  8662  8663  8664  8665  8666  8667  8668  8669  8670  8671 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8672  8673  8674  8675  8676  8677  8678  8679  8680  8681  8682  8683  8684 \n    1     2     1     1     1     1     1     1     1     1     1     6     1 \n 8685  8686  8687  8688  8689  8690  8691  8692  8693  8694  8695  8696  8697 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 8698  8699  8700  8701  8702  8703  8704  8705  8706  8707  8708  8709  8710 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 8711  8712  8713  8714  8715  8716  8717  8718  8719  8720  8721  8722  8723 \n    1     1     1     1     3     1     1     1     1     1     1     1     1 \n 8724  8725  8726  8727  8728  8729  8730  8731  8732  8733  8734  8735  8736 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8737  8738  8739  8740  8741  8742  8743  8744  8745  8746  8747  8748  8749 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 8750  8751  8752  8753  8754  8755  8756  8757  8758  8759  8760  8761  8762 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 8763  8764  8765  8766  8767  8768  8769  8770  8771  8772  8773  8774  8775 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 8776  8777  8778  8779  8780  8781  8782  8783  8784  8785  8786  8787  8788 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 8789  8790  8791  8792  8793  8794  8795  8796  8797  8798  8799  8800  8801 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8802  8803  8804  8805  8806  8807  8808  8809  8810  8811  8812  8813  8814 \n    1     1     4     1     1     1     1     1     2     1     1     1     1 \n 8815  8816  8817  8818  8819  8820  8821  8822  8823  8824  8825  8826  8827 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8828  8829  8830  8831  8832  8833  8834  8835  8836  8837  8838  8839  8840 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 8841  8842  8843  8844  8845  8846  8847  8848  8849  8850  8851  8852  8853 \n    1     2     1     1     1     1     1     2     3     1     1     1     1 \n 8854  8855  8856  8857  8858  8859  8860  8861  8862  8863  8864  8865  8866 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8867  8868  8869  8870  8871  8872  8873  8874  8875  8876  8877  8878  8879 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8880  8881  8882  8883  8884  8885  8886  8887  8888  8889  8890  8891  8892 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8893  8894  8895  8896  8897  8898  8899  8900  8901  8902  8903  8904  8905 \n    4     1     1     1     1     1     2     1     1     1     1     1     1 \n 8906  8907  8908  8909  8910  8911  8912  8913  8914  8915  8916  8917  8918 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8919  8920  8921  8922  8923  8924  8925  8926  8927  8928  8929  8930  8931 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8932  8933  8934  8935  8936  8937  8938  8939  8940  8941  8942  8943  8944 \n    1     1     1     1     1     1     1     1     2     1     2     1     1 \n 8945  8946  8947  8948  8949  8950  8951  8952  8953  8954  8955  8956  8957 \n    1     2     6     4     1     1     1     1     1     1     1     1     1 \n 8958  8959  8960  8961  8962  8963  8964  8965  8966  8967  8968  8969  8970 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8971  8972  8973  8974  8975  8976  8977  8978  8979  8980  8981  8982  8983 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8984  8985  8986  8987  8988  8989  8990  8991  8992  8993  8994  8995  8996 \n    1     1     2     1     1     1     2     1     1     1     1     1     1 \n 8997  8998  8999  9000  9001  9002  9003  9004  9005  9006  9007  9008  9009 \n    1     1     1     1     1     2     6     2     1     1     1     1     1 \n 9010  9011  9012  9013  9014  9015  9016  9017  9018  9019  9020  9021  9022 \n    1     1     1     1     9     4     1     1     1     1     1     1     2 \n 9023  9024  9025  9026  9027  9028  9029  9030  9031  9032  9033  9034  9035 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 9036  9037  9038  9039  9040  9041  9042  9043  9044  9045  9046  9047  9048 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9049  9050  9051  9052  9053  9054  9055  9056  9057  9058  9059  9060  9061 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 9062  9063  9064  9065  9066  9067  9068  9069  9070  9071  9072  9073  9074 \n    1     2     2     1     1     1     1     1     1     3     1     1     1 \n 9075  9076  9077  9078  9079  9080  9081  9082  9083  9084  9085  9086  9087 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 9088  9089  9090  9091  9092  9093  9094  9095  9096  9097  9098  9099  9100 \n    1     1     1     1     1     1     1     1     9     2     1     1     1 \n 9101  9102  9103  9104  9105  9106  9107  9108  9109  9110  9111  9112  9113 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9114  9115  9116  9117  9118  9119  9120  9121  9122  9123  9124  9125  9126 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9127  9128  9129  9130  9131  9132  9133  9134  9135  9136  9137  9138  9139 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 9140  9141  9142  9143  9144  9145  9146  9147  9148  9149  9150  9151  9152 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 9153  9154  9155  9156  9157  9158  9159  9160  9161  9162  9163  9164  9165 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9166  9167  9168  9169  9170  9171  9172  9173  9174  9175  9176  9177  9178 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9179  9180  9181  9182  9183  9184  9185  9186  9187  9188  9189  9190  9191 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9192  9193  9194  9195  9196  9197  9198  9199  9200  9201  9202  9203  9204 \n    1     1     1     1     1     1     8     1     1     1     1     1     1 \n 9205  9206  9207  9208  9209  9210  9211  9212  9213  9214  9215  9216  9217 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9218  9219  9220  9221  9222  9223  9224  9225  9226  9227  9228  9229  9230 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 9231  9232  9233  9234  9235  9236  9237  9238  9239  9240  9241  9242  9243 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9244  9245  9246  9247  9248  9249  9250  9251  9252  9253  9254  9255  9256 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9257  9258  9259  9260  9261  9262  9263  9264  9265  9266  9267  9268  9269 \n    1     1     1     1     1     1     1     1     1     1     3     1     1 \n 9270  9271  9272  9273  9274  9275  9276  9277  9278  9279  9280  9281  9282 \n    1     3     1     1     4     1     1     1     1     1     1     1     1 \n 9283  9284  9285  9286  9287  9288  9289  9290  9291  9292  9293  9294  9295 \n    1     1     1     1     1     2     1     1     1     1     1     1     2 \n 9296  9297  9298  9299  9300  9301  9302  9303  9304  9305  9306  9307  9308 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9309  9310  9311  9312  9313  9314  9315  9316  9317  9318  9319  9320  9321 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9322  9323  9324  9325  9326  9327  9328  9329  9330  9331  9332  9333  9334 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9335  9336  9337  9338  9339  9340  9341  9342  9343  9344  9345  9346  9347 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9348  9349  9350  9351  9352  9353  9354  9355  9356  9357  9358  9359  9360 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9361  9362  9363  9364  9365  9366  9367  9368  9369  9370  9371  9372  9373 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9374  9375  9376  9377  9378  9379  9380  9381  9382  9383  9384  9385  9386 \n    1     1     1     1     1     1     1     2     1     1     1     1     2 \n 9387  9388  9389  9390  9391  9392  9393  9394  9395  9396  9397  9398  9399 \n    1     1     1     1     1     1     1     1     1     4     1     1     1 \n 9400  9401  9402  9403  9404  9405  9406  9407  9408  9409  9410  9411  9412 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9413  9414  9415  9416  9417  9418  9419  9420  9421  9422  9423  9424  9425 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9426  9427  9428  9429  9430  9431  9432  9433  9434  9435  9436  9437  9438 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9439  9440  9441  9442  9443  9444  9445  9446  9447  9448  9449  9450  9451 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9452  9453  9454  9455  9456  9457  9458  9459  9460  9461  9462  9463  9464 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9465  9466  9467  9468  9469  9470  9471  9472  9473  9474  9475  9476  9477 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9478  9479  9480  9481  9482  9483  9484  9485  9486  9487  9488  9489  9490 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 9491  9492  9493  9494  9495  9496  9497  9498  9499  9500  9501  9502  9503 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9504  9505  9506  9507  9508  9509  9510  9511  9512  9513  9514  9515  9516 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9517  9518  9519  9520  9521  9522  9523  9524  9525  9526  9527  9528  9529 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9530  9531  9532  9533  9534  9535  9536  9537  9538  9539  9540  9541  9542 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 9543  9544  9545  9546  9547  9548  9549  9550  9551  9552  9553  9554  9555 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9556  9557  9558  9559  9560  9561  9562  9563  9564  9565  9566  9567  9568 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 9569  9570  9571  9572  9573  9574  9575  9576  9577  9578  9579  9580  9581 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9582  9583  9584  9585  9586  9587  9588  9589  9590  9591  9592  9593  9594 \n    1     3     1     3     1     1     1     1     1     1     1     1     1 \n 9595  9596  9597  9598  9599  9600  9601  9602  9603  9604  9605  9606  9607 \n    1     3     1     1     1     4     1     1     1     1     1     1     1 \n 9608  9609  9610  9611  9612  9613  9614  9615  9616  9617  9618  9619  9620 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9621  9622  9623  9624  9625  9626  9627  9628  9629  9630  9631  9632  9633 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9634  9635  9636  9637  9638  9639  9640  9641  9642  9643  9644  9645  9646 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9647  9648  9649  9650  9651  9652  9653  9654  9655  9656  9657  9658  9659 \n    1     1     1     1     1     1     1     1     5     1     1     2     1 \n 9660  9661  9662  9663  9664  9665  9666  9667  9668  9669  9670  9671  9672 \n    1     2     1     1     1     1     1     1     1     1     1     2     1 \n 9673  9674  9675  9676  9677  9678  9679  9680  9681  9682  9683  9684  9685 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9686  9687  9688  9689  9690  9691  9692  9693  9694  9695  9696  9697  9698 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9699  9700  9701  9702  9703  9704  9705  9706  9707  9708  9709  9710  9711 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 9712  9713  9714  9715  9716  9717  9718  9719  9720  9721  9722  9723  9724 \n    1     1     1     1     1     1     2     1     1     3     1     1     1 \n 9725  9726  9727  9728  9729  9730  9731  9732  9733  9734  9735  9736  9737 \n    1     3     1     1     1     1     1     1     1     1     1     1     1 \n 9738  9739  9740  9741  9742  9743  9744  9745  9746  9747  9748  9749  9750 \n    1     1     1     1     2     1     1     1     2     2     1     1     1 \n 9751  9752  9753  9754  9755  9756  9757  9758  9759  9760  9761  9762  9763 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 9764  9765  9766  9767  9768  9769  9770  9771  9772  9773  9774  9775  9776 \n    4     1     1     1     1     2     1     1     1     1     2     2     1 \n 9777  9778  9779  9780  9781  9782  9783  9784  9785  9786  9787  9788  9789 \n    1     1     1     2     1     2     1     1     1     1     1     2     2 \n 9790  9791  9792  9793  9794  9795  9796  9797  9798  9799  9800  9801  9802 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9803  9804  9805  9806  9807  9808  9809  9810  9811  9812  9813  9814  9815 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9816  9817  9818  9819  9820  9821  9822  9823  9824  9825  9826  9827  9828 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9829  9830  9831  9832  9833  9834  9835  9836  9837  9838  9839  9840  9841 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 9842  9843  9844  9845  9846  9847  9848  9849  9850  9851  9852  9853  9854 \n    1     1     2     1     1     1     1     1     1     2     1     1     2 \n 9855  9856  9857  9858  9859  9860  9861  9862  9863  9864  9865  9866  9867 \n    1     1     1     1     1     1     4     1     1     2     1     1     1 \n 9868  9869  9870  9871  9872  9873  9874  9875  9876  9877  9878  9879  9880 \n    1     1     1     1     1     1     1     2     1     1     2     1     1 \n 9881  9882  9883  9884  9885  9886  9887  9888  9889  9890  9891  9892  9893 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 9894  9895  9896  9897  9898  9899  9900  9901  9902  9903  9904  9905  9906 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 9907  9908  9909  9910  9911  9912  9913  9914  9915  9916  9917  9918  9919 \n    1     2     1     1     1     1     1     1     2     1     1     1     1 \n 9920  9921  9922  9923  9924  9925  9926  9927  9928  9929  9930  9931  9932 \n    1     1     3     1     1     1     1     3     1     1     1     2     1 \n 9933  9934  9935  9936  9937  9938  9939  9940  9941  9942  9943  9944  9945 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9946  9947  9948  9949  9950  9951  9952  9953  9954  9955  9956  9957  9958 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9959  9960  9961  9962  9963  9964  9965  9966  9967  9968  9969  9970  9971 \n    1     1     1     1     1     1     1     1     1     1     1     1     3 \n 9972  9973  9974  9975  9976  9977  9978  9979  9980  9981  9982  9983  9984 \n    1     2     2     1     1     2     1     1     1     1     1     1     1 \n 9985  9986  9987  9988  9989  9990  9991  9992  9993  9994  9995  9996  9997 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9998  9999 10000 10001 10002 10003 10004 10005 10006 10007 10008 10009 10010 \n    1     1     1     1     1     1     1     1     3     1     1     1     1 \n10011 10012 10013 10014 10015 10016 10017 10018 10019 10020 10021 10022 10023 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10024 10025 10026 10027 10028 10029 10030 10031 10032 10033 10034 10035 10036 \n    1     1     1     1     1     2     1     1     1     1     1     2     1 \n10037 10038 10039 10040 10041 10042 10043 10044 10045 10046 10047 10048 10049 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10050 10051 10052 10053 10054 10055 10056 10057 10058 10059 10060 10061 10062 \n    1     1     1     1     3     1     1     1     1     1     1     1     1 \n10063 10064 10065 10066 10067 10068 10069 10070 10071 10072 10073 10074 10075 \n    1     1     1     1     1     1     1     1     1     4     1     1     1 \n10076 10077 10078 10079 10080 10081 10082 10083 10084 10085 10086 10087 10088 \n    1     1     5     1     1     1     1     1     2     1     1     4     1 \n10089 10090 10091 10092 10093 10094 10095 10096 10097 10098 10099 10100 10101 \n    1     1     1     1     1     1     2     1     1     2     1     1     1 \n10102 10103 10104 10105 10106 10107 10108 10109 10110 10111 10112 10113 10114 \n    1     2     1     1     1     1     1     2     1     1     1     1     1 \n10115 10116 10117 10118 10119 10120 10121 10122 10123 10124 10125 10126 10127 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10128 10129 10130 10131 10132 10133 10134 10135 10136 10137 10138 10139 10140 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n10141 10142 10143 10144 10145 10146 10147 10148 10149 10150 10151 10152 10153 \n    1     1     1     1     1     1     1     1     1     2     1     3     1 \n10154 10155 10156 10157 10158 10159 10160 10161 10162 10163 10164 10165 10166 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10167 10168 10169 10170 10171 10172 10173 10174 10175 10176 10177 10178 10179 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n10180 10181 10182 10183 10184 10185 10186 10187 10188 10189 10190 10191 10192 \n    1     1     1     1     1     3     1     1     1     1     1     1     1 \n10193 10194 10195 10196 10197 10198 10199 10200 10201 10202 10203 10204 10205 \n    1     3     1     1     9     1     1     1     1     1     1     1     1 \n10206 10207 10208 10209 10210 10211 10212 10213 10214 10215 10216 10217 10218 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10219 10220 10221 10222 10223 10224 10225 10226 10227 10228 10229 10230 10231 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10232 10233 10234 10235 10236 10237 10238 10239 10240 10241 10242 10243 10244 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10245 10246 10247 10248 10249 10250 10251 10252 10253 10254 10255 10256 10257 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n10258 10259 10260 10261 10262 10263 10264 10265 10266 10267 10268 10269 10270 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n10271 10272 10273 10274 10275 10276 10277 10278 10279 10280 10281 10282 10283 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10284 10285 10286 10287 10288 10289 10290 10291 10292 10293 10294 10295 10296 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10297 10298 10299 10300 10301 10302 10303 10304 10305 10306 10307 10308 10309 \n    1     1     1     1     1     4     1     1     1     1     1     1     1 \n10310 10311 10312 10313 10314 10315 10316 10317 10318 10319 10320 10321 10322 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10323 10324 10325 10326 10327 10328 10329 10330 10331 10332 10333 10334 10335 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10336 10337 10338 10339 10340 10341 10342 10343 10344 10345 10346 10347 10348 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10349 10350 10351 10352 10353 10354 10355 10356 10357 10358 10359 10360 10361 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10362 10363 10364 10365 10366 10367 10368 10369 10370 10371 10372 10373 10374 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n10375 10376 10377 10378 10379 10380 10381 10382 10383 10384 10385 10386 10387 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10388 10389 10390 10391 10392 10393 10394 10395 10396 10397 10398 10399 10400 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10401 10402 10403 10404 10405 10406 10407 10408 10409 10410 10411 10412 10413 \n    1     1     1     1     3     1     1     1     1     1     1     2     1 \n10414 10415 10416 10417 10418 10419 10420 10421 10422 10423 10424 10425 10426 \n    1     1     1     1     3     1     1     1     1     1     1     2     1 \n10427 10428 10429 10430 10431 10432 10433 10434 10435 10436 10437 10438 10439 \n    1     1     2     2     1     1     1     1     1     1     1     1     1 \n10440 10441 10442 10443 10444 10445 10446 10447 10448 10449 10450 10451 10452 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10453 10454 10455 10456 10457 10458 10459 10460 10461 10462 10463 10464 10465 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n10466 10467 10468 10469 10470 10471 10472 10473 10474 10475 10476 10477 10478 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n10479 10480 10481 10482 10483 10484 10485 10486 10487 10488 10489 10490 10491 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10492 10493 10494 10495 10496 10497 10498 10499 10500 10501 10502 10503 10504 \n    1     1     1     1     2     1     1     5     1     1     1     1     1 \n10505 10506 10507 10508 10509 10510 10511 10512 10513 10514 10515 10516 10517 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10518 10519 10520 10521 10522 10523 10524 10525 10526 10527 10528 10529 10530 \n    1     1     1     1     1     1     1     1     1     1     1     3     1 \n10531 10532 10533 10534 10535 10536 10537 10538 10539 10540 10541 10542 10543 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10544 10545 10546 10547 10548 10549 10550 10551 10552 10553 10554 10555 10556 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n10557 10558 10559 10560 10561 10562 10563 10564 10565 10566 10567 10568 10569 \n    4     1     2     1     1     1     1     1     2     1     1     1     1 \n10570 10571 10572 10573 10574 10575 10576 10577 10578 10579 10580 10581 10582 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10583 10584 10585 10586 10587 10588 10589 10590 10591 10592 10593 10594 10595 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n10596 10597 10598 10599 10600 10601 10602 10603 10604 10605 10606 10607 10608 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10609 10610 10611 10612 10613 10614 10615 10616 10617 10618 10619 10620 10621 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10622 10623 10624 10625 10626 10627 10628 10629 10630 10631 10632 10633 10634 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10635 10636 10637 10638 10639 10640 10641 10642 10643 10644 10645 10646 10647 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n10648 10649 10650 10651 10652 10653 10654 10655 10656 10657 10658 10659 10660 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10661 10662 10663 10664 10665 10666 10667 10668 10669 10670 10671 10672 10673 \n    1     1     1     1     1     1     1     2     1     1     2     1     1 \n10674 10675 10676 10677 10678 10679 10680 10681 10682 10683 10684 10685 10686 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n10687 10688 10689 10690 10691 10692 10693 10694 10695 10696 10697 10698 10699 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10700 10701 10702 10703 10704 10705 10706 10707 10708 10709 10710 10711 10712 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n10713 10714 10715 10716 10717 10718 10719 10720 10721 10722 10723 10724 10725 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10726 10727 10728 10729 10730 10731 10732 10733 10734 10735 10736 10737 10738 \n    1     1     9     1     1     1     1     1     1     1     1     1     1 \n10739 10740 10741 10742 10743 10744 10745 10746 10747 10748 10749 10750 10751 \n    1     1     3     1     1     1     1     3     1     1     2     1     1 \n10752 10753 10754 10755 10756 10757 10758 10759 10760 10761 10762 10763 10764 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10765 10766 10767 10768 10769 10770 10771 10772 10773 10774 10775 10776 10777 \n    1     1     1     1     2     6     1     1     8     1     1     1     1 \n10778 10779 10780 10781 10782 10783 10784 10785 10786 10787 10788 10789 10790 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10791 10792 10793 10794 10795 10796 10797 10798 10799 10800 10801 10802 10803 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n10804 10805 10806 10807 10808 10809 10810 10811 10812 10813 10814 10815 10816 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10817 10818 10819 10820 10821 10822 10823 10824 10825 10826 10827 10828 10829 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10830 10831 10832 10833 10834 10835 10836 10837 10838 10839 10840 10841 10842 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10843 10844 10845 10846 10847 10848 10849 10850 10851 10852 10853 10854 10855 \n    1     1    16     1     1     1     1     1     1     1     1     1     1 \n10856 10857 10858 10859 10860 10861 10862 10863 10864 10865 10866 10867 10868 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n10869 10870 10871 10872 10873 10874 10875 10876 10877 10878 10879 10880 10881 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n10882 10883 10884 10885 10886 10887 10888 10889 10890 10891 10892 10893 10894 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n10895 10896 10897 10898 10899 10900 10901 10902 10903 10904 10905 10906 10907 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10908 10909 10910 10911 10912 10913 10914 10915 10916 10917 10918 10919 10920 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n10921 10922 10923 10924 10925 10926 10927 10928 10929 10930 10931 10932 10933 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10934 10935 10936 10937 10938 10939 10940 10941 10942 10943 10944 10945 10946 \n    1     1     1     1     1     1     2     3     1     1     1     1     1 \n10947 10948 10949 10950 10951 10952 10953 10954 10955 10956 10957 10958 10959 \n    1     1     1     1     1     1     1     1     1     9     1     1     1 \n10960 10961 10962 10963 10964 10965 10966 10967 10968 10969 10970 10971 10972 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n10973 10974 10975 10976 10977 10978 10979 10980 10981 10982 10983 10984 10985 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10986 10987 10988 10989 10990 10991 10992 10993 10994 10995 10996 10997 10998 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10999 11000 11001 11002 11003 11004 11005 11006 11007 11008 11009 11010 11011 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11012 11013 11014 11015 11016 11017 11018 11019 11020 11021 11022 11023 11024 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11025 11026 11027 11028 11029 11030 11031 11032 11033 11034 11035 11036 11037 \n    1     1     1     1     2     1     2     1     1     1     1     1     1 \n11038 11039 11040 11041 11042 11043 11044 11045 11046 11047 11048 11049 11050 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n11051 11052 11053 11054 11055 11056 11057 11058 11059 11060 11061 11062 11063 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n11064 11065 11066 11067 11068 11069 11070 11071 11072 11073 11074 11075 11076 \n    1     1     1     1     1     2     1     1     4     1     1     2     1 \n11077 11078 11079 11080 11081 11082 11083 11084 11085 11086 11087 11088 11089 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n11090 11091 11092 11093 11094 11095 11096 11097 11098 11099 11100 11101 11102 \n    1     2     1     1     1     1     1     1     1     3     1     1     1 \n11103 11104 11105 11106 11107 11108 11109 11110 11111 11112 11113 11114 11115 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11116 11117 11118 11119 11120 11121 11122 11123 11124 11125 11126 11127 11128 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n11129 11130 11131 11132 11133 11134 11135 11136 11137 11138 11139 11140 11141 \n    3     1     1     1     1     1     1     1     1     1     1     1     1 \n11142 11143 11144 11145 11146 11147 11148 11149 11150 11151 11152 11153 11154 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11155 11156 11157 11158 11159 11160 11161 11162 11163 11164 11165 11166 11167 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11168 11169 11170 11171 11172 11173 11174 11175 11176 11177 11178 11179 11180 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11181 11182 11183 11184 11185 11186 11187 11188 11189 11190 11191 11192 11193 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n11194 11195 11196 11197 11198 11199 11200 11201 11202 11203 11204 11205 11206 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n11207 11208 11209 11210 11211 11212 11213 11214 11215 11216 11217 11218 11219 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11220 11221 11222 11223 11224 11225 11226 11227 11228 11229 11230 11231 11232 \n    2     2     1     1     1     1     1     1     1     1     1     2     1 \n11233 11234 11235 11236 11237 11238 11239 11240 11241 11242 11243 11244 11245 \n    1     1     1     1     1     1     3     1     2     1     1     2     1 \n11246 11247 11248 11249 11250 11251 11252 11253 11254 11255 11256 11257 11258 \n    1     2     1     1     1     2     1     1     1     1     1     1     1 \n11259 11260 11261 11262 11263 11264 11265 11266 11267 11268 11269 11270 11271 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11272 11273 11274 11275 11276 11277 11278 11279 11280 11281 11282 11283 11284 \n    2     1     1     1     1     1     2     1     1     1     1     1     1 \n11285 11286 11287 11288 11289 11290 11291 11292 11293 11294 11295 11296 11297 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11298 11299 11300 11301 11302 11303 11304 11305 11306 11307 11308 11309 11310 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n11311 11312 11313 11314 11315 11316 11317 11318 11319 11320 11321 11322 11323 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11324 11325 11326 11327 11328 11329 11330 11331 11332 11333 11334 11335 11336 \n   16     1     1     1     1     1     1     1     1     3     1     1     1 \n11337 11338 11339 11340 11341 11342 11343 11344 11345 11346 11347 11348 11349 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11350 11351 11352 11353 11354 11355 11356 11357 11358 11359 11360 11361 11362 \n    1     3     1     1     1     1     1     2     1     1     1     1     1 \n11363 11364 11365 11366 11367 11368 11369 11370 11371 11372 11373 11374 11375 \n    1     1     1     1     2     8     1     1     1     1     1     1     1 \n11376 11377 11378 11379 11380 11381 11382 11383 11384 11385 11386 11387 11388 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n11389 11390 11391 11392 11393 11394 11395 11396 11397 11398 11399 11400 11401 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11402 11403 11404 11405 11406 11407 11408 11409 11410 11411 11412 11413 11414 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n11415 11416 11417 11418 11419 11420 11421 11422 11423 11424 11425 11426 11427 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11428 11429 11430 11431 11432 11433 11434 11435 11436 11437 11438 11439 11440 \n    1     1     1     1     8     1     1     1     3     1     1     1     1 \n11441 11442 11443 11444 11445 11446 11447 11448 11449 11450 11451 11452 11453 \n    1     1     1     1     1     1     1     1     1     1     1     2     2 \n11454 11455 11456 11457 11458 11459 11460 11461 11462 11463 11464 11465 11466 \n    1     1     1     1     1     1     1     1     1     1     1     1     3 \n11467 11468 11469 11470 11471 11472 11473 11474 11475 11476 11477 11478 11479 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n11480 11481 11482 11483 11484 11485 11486 11487 11488 11489 11490 11491 11492 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11493 11494 11495 11496 11497 11498 11499 11500 11501 11502 11503 11504 11505 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11506 11507 11508 11509 11510 11511 11512 11513 11514 11515 11516 11517 11518 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11519 11520 11521 11522 11523 11524 11525 11526 11527 11528 11529 11530 11531 \n    1     1     6     1     1     1     1     1     1     1     1     1     1 \n11532 11533 11534 11535 11536 11537 11538 11539 11540 11541 11542 11543 11544 \n    1     1     1     1     1     2     3     1     1     1     1     1     1 \n11545 11546 11547 11548 11549 11550 11551 11552 11553 11554 11555 11556 11557 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11558 11559 11560 11561 11562 11563 11564 11565 11566 11567 11568 11569 11570 \n    1     1     1     1     2     1     1     1     1     1     1     2     1 \n11571 11572 11573 11574 11575 11576 11577 11578 11579 11580 11581 11582 11583 \n    1     1     1     1     1     1     1     1     1     3     1     1     1 \n11584 11585 11586 11587 11588 11589 11590 11591 11592 11593 11594 11595 11596 \n    1     1     1     1     1     2     2     1     1     1     1     1     4 \n11597 11598 11599 11600 11601 11602 11603 11604 11605 11606 11607 11608 11609 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11610 11611 11612 11613 11614 11615 11616 11617 11618 11619 11620 11621 11622 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11623 11624 11625 11626 11627 11628 11629 11630 11631 11632 11633 11634 11635 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n11636 11637 11638 11639 11640 11641 11642 11643 11644 11645 11646 11647 11648 \n    1     1     1     4     1     1     1     1     1     1     1     2     1 \n11649 11650 11651 11652 11653 11654 11655 11656 11657 11658 11659 11660 11661 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11662 11663 11664 11665 11666 11667 11668 11669 11670 11671 11672 11673 11674 \n    1     1     4     2     1     1     1     1     1     1     1     1     1 \n11675 11676 11677 11678 11679 11680 11681 11682 11683 11684 11685 11686 11687 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11688 11689 11690 11691 11692 11693 11694 11695 11696 11697 11698 11699 11700 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11701 11702 11703 11704 11705 11706 11707 11708 11709 11710 11711 11712 11713 \n    1     1     1     1     1     1     1     1     3     1     1     1     1 \n11714 11715 11716 11717 11718 11719 11720 11721 11722 11723 11724 11725 11726 \n    1     1     1     2     1     1     1     2     1     1     1     1     1 \n11727 11728 11729 11730 11731 11732 11733 11734 11735 11736 11737 11738 11739 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11740 11741 11742 11743 11744 11745 11746 11747 11748 11749 11750 11751 11752 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n11753 11754 11755 11756 11757 11758 11759 11760 11761 11762 11763 11764 11765 \n    1     2     1     1     1     1     2     1     1     1     1     1     1 \n11766 11767 11768 11769 11770 11771 11772 11773 11774 11775 11776 11777 11778 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11779 11780 11781 11782 11783 11784 11785 11786 11787 11788 11789 11790 11791 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11792 11793 11794 11795 11796 11797 11798 11799 11800 11801 11802 11803 11804 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11805 11806 11807 11808 11809 11810 11811 11812 11813 11814 11815 11816 11817 \n    2     1     1     2     1     1     1     1     1     1     1     1     1 \n11818 11819 11820 11821 11822 11823 11824 11825 11826 11827 11828 11829 11830 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n11831 11832 11833 11834 11835 11836 11837 11838 11839 11840 11841 11842 11843 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11844 11845 11846 11847 11848 11849 11850 11851 11852 11853 11854 11855 11856 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n11857 11858 11859 11860 11861 11862 11863 11864 11865 11866 11867 11868 11869 \n    1     1     1     1     1     1     1     1     1     1     1     4     1 \n11870 11871 11872 11873 11874 11875 11876 11877 11878 11879 11880 11881 11882 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11883 11884 11885 11886 11887 11888 11889 11890 11891 11892 11893 11894 11895 \n    2     1     2     1     1     1     1     2     2     1     1     1     1 \n11896 11897 11898 11899 11900 11901 11902 11903 11904 11905 11906 11907 11908 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11909 11910 11911 11912 11913 11914 11915 11916 11917 11918 11919 11920 11921 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11922 11923 11924 11925 11926 11927 11928 11929 11930 11931 11932 11933 11934 \n    1     1     1     1     1     1     1     1     1     4     2     1     1 \n11935 11936 11937 11938 11939 11940 11941 11942 11943 11944 11945 11946 11947 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11948 11949 11950 11951 11952 11953 11954 11955 11956 11957 11958 11959 11960 \n    3     1     1     1     1     1     1     1     1     1     1     1     1 \n11961 11962 11963 11964 11965 11966 11967 11968 11969 11970 11971 11972 11973 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11974 11975 11976 11977 11978 11979 11980 11981 11982 11983 11984 11985 11986 \n    1     1     1     1     1     1     1     1     1     1     1     4     1 \n11987 11988 11989 11990 11991 11992 11993 11994 11995 11996 11997 11998 11999 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12000 12001 12002 12003 12004 12005 12006 12007 12008 12009 12010 12011 12012 \n    2     3     1     3     1     1     3     1     1     1     1     1     1 \n12013 12014 12015 12016 12017 12018 12019 12020 12021 12022 12023 12024 12025 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12026 12027 12028 12029 12030 12031 12032 12033 12034 12035 12036 12037 12038 \n    4     1     1     1     1     1     1     1     1     1     1     1     1 \n12039 12040 12041 12042 12043 12044 12045 12046 12047 12048 12049 12050 12051 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n12052 12053 12054 12055 12056 12057 12058 12059 12060 12061 12062 12063 12064 \n    1     1     1    16     1     1     1     1     1     1     1     1     1 \n12065 12066 12067 12068 12069 12070 12071 12072 12073 12074 12075 12076 12077 \n    1     1     1     1     1     2     2     1     1     1     1     1     2 \n12078 12079 12080 12081 12082 12083 12084 12085 12086 12087 12088 12089 12090 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n12091 12092 12093 12094 12095 12096 12097 12098 12099 12100 12101 12102 12103 \n    1     1     1     1     1     1     1     1     1     3     1     1     1 \n12104 12105 12106 12107 12108 12109 12110 12111 12112 12113 12114 12115 12116 \n    1     1     1     1     1     1     1     3     1     1     1     1     1 \n12117 12118 12119 12120 12121 12122 12123 12124 12125 12126 12127 12128 12129 \n    1     1     2     1     1     1     1     2     9     1     1     1     1 \n12130 12131 12132 12133 12134 12135 12136 12137 12138 12139 12140 12141 12142 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n12143 12144 12145 12146 12147 12148 12149 12150 12151 12152 12153 12154 12155 \n    1     1     1     1    16     1     1     1     1     1     1     1     1 \n12156 12157 12158 12159 12160 12161 12162 12163 12164 12165 12166 12167 12168 \n    1     1     1     1     1     1     1     4     1     1     1     1     1 \n12169 12170 12171 12172 12173 12174 12175 12176 12177 12178 12179 12180 12181 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n12182 12183 12184 12185 12186 12187 12188 12189 12190 12191 12192 12193 12194 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12195 12196 12197 12198 12199 12200 12201 12202 12203 12204 12205 12206 12207 \n    1     1     1     1     1     8     1     1     6     1     1     1     1 \n12208 12209 12210 12211 12212 12213 12214 12215 12216 12217 12218 12219 12220 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12221 12222 12223 12224 12225 12226 12227 12228 12229 12230 12231 12232 12233 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12234 12235 12236 12237 12238 12239 12240 12241 12242 12243 12244 12245 12246 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12247 12248 12249 12250 12251 12252 12253 12254 12255 12256 12257 12258 12259 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n12260 12261 12262 12263 12264 12265 12266 12267 12268 12269 12270 12271 12272 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12273 12274 12275 12276 12277 12278 12279 12280 12281 12282 12283 12284 12285 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n12286 12287 12288 12289 12290 12291 12292 12293 12294 12295 12296 12297 12298 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12299 12300 12301 12302 12303 12304 12305 12306 12307 12308 12309 12310 12311 \n    1     1     1     1     3     2     1     1     1     1     1     1     1 \n12312 12313 12314 12315 12316 12317 12318 12319 12320 12321 12322 12323 12324 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12325 12326 12327 12328 12329 12330 12331 12332 12333 12334 12335 12336 12337 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12338 12339 12340 12341 12342 12343 12344 12345 12346 12347 12348 12349 12350 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12351 12352 12353 12354 12355 12356 12357 12358 12359 12360 12361 12362 12363 \n    2     2     1     1     1     1     1     1     1     1     1     1     1 \n12364 12365 12366 12367 12368 12369 12370 12371 12372 12373 12374 12375 12376 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n12377 12378 12379 12380 12381 12382 12383 12384 12385 12386 12387 12388 12389 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12390 12391 12392 12393 12394 12395 12396 12397 12398 12399 12400 12401 12402 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n12403 12404 12405 12406 12407 12408 12409 12410 12411 12412 12413 12414 12415 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12416 12417 12418 12419 12420 12421 12422 12423 12424 12425 12426 12427 12428 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12429 12430 12431 12432 12433 12434 12435 12436 12437 12438 12439 12440 12441 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12442 12443 12444 12445 12446 12447 12448 12449 12450 12451 12452 12453 12454 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12455 12456 12457 12458 12459 12460 12461 12462 12463 12464 12465 12466 12467 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12468 12469 12470 12471 12472 12473 12474 12475 12476 12477 12478 12479 12480 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12481 12482 12483 12484 12485 12486 12487 12488 12489 12490 12491 12492 12493 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12494 12495 12496 12497 12498 12499 12500 12501 12502 12503 12504 12505 12506 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12507 12508 12509 12510 12511 12512 12513 12514 12515 12516 12517 12518 12519 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12520 12521 12522 12523 12524 12525 12526 12527 12528 12529 12530 12531 12532 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n12533 12534 12535 12536 12537 12538 12539 12540 12541 12542 12543 12544 12545 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12546 12547 12548 12549 12550 12551 12552 12553 12554 12555 12556 12557 12558 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12559 12560 12561 12562 12563 12564 12565 12566 12567 12568 12569 12570 12571 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12572 12573 12574 12575 12576 12577 12578 12579 12580 12581 12582 12583 12584 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n12585 12586 12587 12588 12589 12590 12591 12592 12593 12594 12595 12596 12597 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12598 12599 12600 12601 12602 12603 12604 12605 12606 12607 12608 12609 12610 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n12611 12612 12613 12614 12615 12616 12617 12618 12619 12620 12621 12622 12623 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n12624 12625 12626 12627 12628 12629 12630 12631 12632 12633 12634 12635 12636 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12637 12638 12639 12640 12641 12642 12643 12644 12645 12646 12647 12648 12649 \n    1     3     1     1     1     1     1     1     1     1     1     1     1 \n12650 12651 12652 12653 12654 12655 12656 12657 12658 12659 12660 12661 12662 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12663 12664 12665 12666 12667 12668 12669 12670 12671 12672 12673 12674 12675 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12676 12677 12678 12679 12680 12681 12682 12683 12684 12685 12686 12687 12688 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12689 12690 12691 12692 12693 12694 12695 12696 12697 12698 12699 12700 12701 \n    1     3     3     1     1     1     1     1     1     1     1     1     1 \n12702 12703 12704 12705 12706 12707 12708 12709 12710 12711 12712 12713 12714 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12715 12716 12717 12718 12719 12720 12721 12722 12723 12724 12725 12726 12727 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n12728 12729 12730 12731 12732 12733 12734 12735 12736 12737 12738 12739 12740 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n12741 12742 12743 12744 12745 12746 12747 12748 12749 12750 12751 12752 12753 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12754 12755 12756 12757 12758 12759 12760 12761 12762 12763 12764 12765 12766 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n12767 12768 12769 12770 12771 12772 12773 12774 12775 12776 12777 12778 12779 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n12780 12781 12782 12783 12784 12785 12786 12787 12788 12789 12790 12791 12792 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12793 12794 12795 12796 12797 12798 12799 12800 12801 12802 12803 12804 12805 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12806 12807 12808 12809 12810 12811 12812 12813 12814 12815 12816 12817 12818 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12819 12820 12821 12822 12823 12824 12825 12826 12827 12828 12829 12830 12831 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12832 12833 12834 12835 12836 12837 12838 12839 12840 12841 12842 12843 12844 \n    1     1     1     1     1     1     1     1     1     1     3     1     1 \n12845 12846 12847 12848 12849 12850 12851 12852 12853 12854 12855 12856 12857 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12858 12859 12860 12861 12862 12863 12864 12865 12866 12867 12868 12869 12870 \n    1     1     1     1     1     2     2     1     1     1     1     1     1 \n12871 12872 12873 12874 12875 12876 12877 12878 12879 12880 12881 12882 12883 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n12884 12885 12886 12887 12888 12889 12890 12891 12892 12893 12894 12895 12896 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n12897 12898 12899 12900 12901 12902 12903 12904 12905 12906 12907 12908 12909 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12910 12911 12912 12913 12914 12915 12916 12917 12918 12919 12920 12921 12922 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n12923 12924 12925 12926 12927 12928 12929 12930 12931 12932 12933 12934 12935 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12936 12937 12938 12939 12940 12941 12942 12943 12944 12945 12946 12947 12948 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12949 12950 12951 12952 12953 12954 12955 12956 12957 12958 12959 12960 12961 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12962 12963 12964 12965 12966 12967 12968 12969 12970 12971 12972 12973 12974 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12975 12976 12977 12978 12979 12980 12981 12982 12983 12984 12985 \n    1     1     1     1     1     1     1     1     1     1     1 \n\n\n\nsum(multiplicity(roadacc_day_ppp) &gt; 1)\n\n[1] 779\n\n\nThe output shows that there are 779 duplicated point events.\nWe will resolve this using jittering, which will add a small pertubation to the duplicate points so that they do not occupy the exact same space:\n\nroadacc_day_ppp_jit &lt;- rjitter(roadacc_day_ppp,\n                                 retry = TRUE,\n                                 nsim = 99,\n                                 drop = TRUE)\n\nWe then check for duplicated points to determine if the jittering was carried out successfully:\n\nany(duplicated(roadacc_day_ppp_jit))\n\n[1] FALSE\n\n\nThe output indicates that there are no duplicated points.\n\n\n\nNext, we combine the ppp object and the owin object:\n\nroadacc_day_owin_ppp &lt;- roadacc_day_ppp[provinceowin]\n\n\nsummary(roadacc_day_owin_ppp)\n\nMarked planar point pattern:  12985 points\nAverage intensity 1.693182e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   2.000   4.000   4.061   6.000   7.000 \n\nWindow: polygonal boundary\nsingle connected closed polygon with 13779 vertices\nenclosing rectangle: [587893.5, 712440.5] x [1484413.7, 1579076.3] units\n                     (124500 x 94660 units)\nWindow area = 7668990000 square units\nFraction of frame area: 0.65\n\n\nWe plot the roadacc_day_owin_ppp object to examine the correctness of the output object:\n\nplot(roadacc_day_owin_ppp)\n\n\n\n\n\n\n\n\n\n\n\nWe first use BOOT.spattemp() to determine the spatial bandwidth and the scalar temporal bandwidth for use in subsequent calculation.\n\nset.seed(1234)\nBOOT.spattemp(roadacc_day_owin_ppp)\n\n\nNext, we use spattemp.density() of sparr package to compute the STKDE, with h and lambda values derived in previous step.\n\nst_kde_day &lt;- spattemp.density(roadacc_day_owin_ppp,\n                               h = 2500 ,\n                               lambda = 0.7) \nsummary(st_kde_day)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 2500 (spatial)\n  lambda = 0.7 (temporal)\n\nNo. of observations\n  12985 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [587893.5, 712440.5] x [1484414, 1579076]\n\nTemporal bound\n  [1, 7]\n\nEvaluation\n  128 x 128 x 7 trivariate lattice\n  Density range: [5.882033e-17, 3.954459e-10]\n\n\n\n\n\n\nfullweek &lt;- c(1,2,3,4,5,6,7)\npar(mfrow=c(2,3)) \nfor(i in fullweek){\n  plot(st_kde_day, i,\n       override.par=FALSE,\n       fix.range=TRUE,\n       main=paste(\"KDE at day\",i))\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservations from the Temporal KDE and Spatio-Temporal KDE plots are summarised in the table below:\n\n\n\n\n\n\n\n\nObservation from Temporal KDE\nObservation from Spatio-Temporal KDE\nConclusion from both observations\n\n\n\n\n\nOccurrence of road accidents is most dense on Fri and Sat\n\n\nDense occurrence of road accidents from Fri to Mon, however road accidents on Sun and Mon seem to be more spatially concentrated than Fri and Sat\n\nWhile there are differences in temporal KDE and Spatio-Temporal KDE plots, together they indicate the following:\n\nRoad accidents occur in high accident counts at the start of the weekend\nThe spatial distribution of road accidents on Sun and Mon are more concentrated as compared to Fri and Sat, leading to more prominent hotspots in the KDE map.\n\nThis could potentially be explained by Fri and Sat being the start of the weekend vs Sun and Mon which are closer to the start of the week and while people may venture out to different places to carry out their social activities on Fri and Sat, they may travel to a smaller subset of locations i.e. home on Sun to rest before the start of the week or to work/school on Mon for the start of the week, hence leading to more concentrated occurrences of road accidents on Sun and Mon.\n\n\n\n\n\n\n\n\nWe run similar steps as above to study the distribution of road accidents by time of day.\n\n\n\n\n\n\n\nroadacc_time_ppp &lt;- roadacc %&gt;%\n  select(inc_time) %&gt;%\n  as.ppp()\n\nWe note that there are duplicated point events from the code below:\n\nany(duplicated(roadacc_time_ppp))\n\n[1] TRUE\n\n\nWe use the multiplicity() function to count the number of co-incident points:\n\nmultiplicity(roadacc_time_ppp)\n\n    1     2     3     4     5     6     7     8     9    10    11    12    13 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n   14    15    16    17    18    19    20    21    22    23    24    25    26 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n   27    28    29    30    31    32    33    34    35    36    37    38    39 \n    1     1     1     1     1     1     1     1     1     3     1     2     2 \n   40    41    42    43    44    45    46    47    48    49    50    51    52 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n   53    54    55    56    57    58    59    60    61    62    63    64    65 \n    1     1     1     1     1     3     1     3     1     1     1     1     1 \n   66    67    68    69    70    71    72    73    74    75    76    77    78 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n   79    80    81    82    83    84    85    86    87    88    89    90    91 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n   92    93    94    95    96    97    98    99   100   101   102   103   104 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  105   106   107   108   109   110   111   112   113   114   115   116   117 \n    1     1     1     1     1     1     2     2     2     1     1     1     1 \n  118   119   120   121   122   123   124   125   126   127   128   129   130 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n  131   132   133   134   135   136   137   138   139   140   141   142   143 \n    1     1     1     1     2     2     1     1     1     1     2     1     1 \n  144   145   146   147   148   149   150   151   152   153   154   155   156 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n  157   158   159   160   161   162   163   164   165   166   167   168   169 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  170   171   172   173   174   175   176   177   178   179   180   181   182 \n    1     1     1     1     1     1     1     1     1     1     1     2     2 \n  183   184   185   186   187   188   189   190   191   192   193   194   195 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  196   197   198   199   200   201   202   203   204   205   206   207   208 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  209   210   211   212   213   214   215   216   217   218   219   220   221 \n    1     1     1     1     1     1     1     1     1     1     1     3     1 \n  222   223   224   225   226   227   228   229   230   231   232   233   234 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  235   236   237   238   239   240   241   242   243   244   245   246   247 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  248   249   250   251   252   253   254   255   256   257   258   259   260 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  261   262   263   264   265   266   267   268   269   270   271   272   273 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  274   275   276   277   278   279   280   281   282   283   284   285   286 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  287   288   289   290   291   292   293   294   295   296   297   298   299 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  300   301   302   303   304   305   306   307   308   309   310   311   312 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  313   314   315   316   317   318   319   320   321   322   323   324   325 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  326   327   328   329   330   331   332   333   334   335   336   337   338 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  339   340   341   342   343   344   345   346   347   348   349   350   351 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  352   353   354   355   356   357   358   359   360   361   362   363   364 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  365   366   367   368   369   370   371   372   373   374   375   376   377 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  378   379   380   381   382   383   384   385   386   387   388   389   390 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  391   392   393   394   395   396   397   398   399   400   401   402   403 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n  404   405   406   407   408   409   410   411   412   413   414   415   416 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  417   418   419   420   421   422   423   424   425   426   427   428   429 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  430   431   432   433   434   435   436   437   438   439   440   441   442 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  443   444   445   446   447   448   449   450   451   452   453   454   455 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  456   457   458   459   460   461   462   463   464   465   466   467   468 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  469   470   471   472   473   474   475   476   477   478   479   480   481 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  482   483   484   485   486   487   488   489   490   491   492   493   494 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  495   496   497   498   499   500   501   502   503   504   505   506   507 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  508   509   510   511   512   513   514   515   516   517   518   519   520 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  521   522   523   524   525   526   527   528   529   530   531   532   533 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n  534   535   536   537   538   539   540   541   542   543   544   545   546 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  547   548   549   550   551   552   553   554   555   556   557   558   559 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  560   561   562   563   564   565   566   567   568   569   570   571   572 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  573   574   575   576   577   578   579   580   581   582   583   584   585 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  586   587   588   589   590   591   592   593   594   595   596   597   598 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  599   600   601   602   603   604   605   606   607   608   609   610   611 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  612   613   614   615   616   617   618   619   620   621   622   623   624 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  625   626   627   628   629   630   631   632   633   634   635   636   637 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  638   639   640   641   642   643   644   645   646   647   648   649   650 \n    1     1     3     1     1     1     1     1     1     1     1     1     1 \n  651   652   653   654   655   656   657   658   659   660   661   662   663 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  664   665   666   667   668   669   670   671   672   673   674   675   676 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  677   678   679   680   681   682   683   684   685   686   687   688   689 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  690   691   692   693   694   695   696   697   698   699   700   701   702 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n  703   704   705   706   707   708   709   710   711   712   713   714   715 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  716   717   718   719   720   721   722   723   724   725   726   727   728 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n  729   730   731   732   733   734   735   736   737   738   739   740   741 \n    1     1     1     1     1     1     1     1     1     3     1     1     1 \n  742   743   744   745   746   747   748   749   750   751   752   753   754 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  755   756   757   758   759   760   761   762   763   764   765   766   767 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  768   769   770   771   772   773   774   775   776   777   778   779   780 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  781   782   783   784   785   786   787   788   789   790   791   792   793 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  794   795   796   797   798   799   800   801   802   803   804   805   806 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  807   808   809   810   811   812   813   814   815   816   817   818   819 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  820   821   822   823   824   825   826   827   828   829   830   831   832 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  833   834   835   836   837   838   839   840   841   842   843   844   845 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  846   847   848   849   850   851   852   853   854   855   856   857   858 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  859   860   861   862   863   864   865   866   867   868   869   870   871 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  872   873   874   875   876   877   878   879   880   881   882   883   884 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n  885   886   887   888   889   890   891   892   893   894   895   896   897 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  898   899   900   901   902   903   904   905   906   907   908   909   910 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n  911   912   913   914   915   916   917   918   919   920   921   922   923 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  924   925   926   927   928   929   930   931   932   933   934   935   936 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  937   938   939   940   941   942   943   944   945   946   947   948   949 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  950   951   952   953   954   955   956   957   958   959   960   961   962 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  963   964   965   966   967   968   969   970   971   972   973   974   975 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n  976   977   978   979   980   981   982   983   984   985   986   987   988 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  989   990   991   992   993   994   995   996   997   998   999  1000  1001 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1002  1003  1004  1005  1006  1007  1008  1009  1010  1011  1012  1013  1014 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1015  1016  1017  1018  1019  1020  1021  1022  1023  1024  1025  1026  1027 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1028  1029  1030  1031  1032  1033  1034  1035  1036  1037  1038  1039  1040 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1041  1042  1043  1044  1045  1046  1047  1048  1049  1050  1051  1052  1053 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1054  1055  1056  1057  1058  1059  1060  1061  1062  1063  1064  1065  1066 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1067  1068  1069  1070  1071  1072  1073  1074  1075  1076  1077  1078  1079 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1080  1081  1082  1083  1084  1085  1086  1087  1088  1089  1090  1091  1092 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 1093  1094  1095  1096  1097  1098  1099  1100  1101  1102  1103  1104  1105 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1106  1107  1108  1109  1110  1111  1112  1113  1114  1115  1116  1117  1118 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1119  1120  1121  1122  1123  1124  1125  1126  1127  1128  1129  1130  1131 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 1132  1133  1134  1135  1136  1137  1138  1139  1140  1141  1142  1143  1144 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1145  1146  1147  1148  1149  1150  1151  1152  1153  1154  1155  1156  1157 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1158  1159  1160  1161  1162  1163  1164  1165  1166  1167  1168  1169  1170 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1171  1172  1173  1174  1175  1176  1177  1178  1179  1180  1181  1182  1183 \n    3     1     1     1     1     1     1     1     1     1     1     1     1 \n 1184  1185  1186  1187  1188  1189  1190  1191  1192  1193  1194  1195  1196 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1197  1198  1199  1200  1201  1202  1203  1204  1205  1206  1207  1208  1209 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1210  1211  1212  1213  1214  1215  1216  1217  1218  1219  1220  1221  1222 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 1223  1224  1225  1226  1227  1228  1229  1230  1231  1232  1233  1234  1235 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 1236  1237  1238  1239  1240  1241  1242  1243  1244  1245  1246  1247  1248 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1249  1250  1251  1252  1253  1254  1255  1256  1257  1258  1259  1260  1261 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1262  1263  1264  1265  1266  1267  1268  1269  1270  1271  1272  1273  1274 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 1275  1276  1277  1278  1279  1280  1281  1282  1283  1284  1285  1286  1287 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1288  1289  1290  1291  1292  1293  1294  1295  1296  1297  1298  1299  1300 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1301  1302  1303  1304  1305  1306  1307  1308  1309  1310  1311  1312  1313 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1314  1315  1316  1317  1318  1319  1320  1321  1322  1323  1324  1325  1326 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1327  1328  1329  1330  1331  1332  1333  1334  1335  1336  1337  1338  1339 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 1340  1341  1342  1343  1344  1345  1346  1347  1348  1349  1350  1351  1352 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 1353  1354  1355  1356  1357  1358  1359  1360  1361  1362  1363  1364  1365 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1366  1367  1368  1369  1370  1371  1372  1373  1374  1375  1376  1377  1378 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1379  1380  1381  1382  1383  1384  1385  1386  1387  1388  1389  1390  1391 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1392  1393  1394  1395  1396  1397  1398  1399  1400  1401  1402  1403  1404 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 1405  1406  1407  1408  1409  1410  1411  1412  1413  1414  1415  1416  1417 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1418  1419  1420  1421  1422  1423  1424  1425  1426  1427  1428  1429  1430 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1431  1432  1433  1434  1435  1436  1437  1438  1439  1440  1441  1442  1443 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1444  1445  1446  1447  1448  1449  1450  1451  1452  1453  1454  1455  1456 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1457  1458  1459  1460  1461  1462  1463  1464  1465  1466  1467  1468  1469 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1470  1471  1472  1473  1474  1475  1476  1477  1478  1479  1480  1481  1482 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1483  1484  1485  1486  1487  1488  1489  1490  1491  1492  1493  1494  1495 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 1496  1497  1498  1499  1500  1501  1502  1503  1504  1505  1506  1507  1508 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1509  1510  1511  1512  1513  1514  1515  1516  1517  1518  1519  1520  1521 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 1522  1523  1524  1525  1526  1527  1528  1529  1530  1531  1532  1533  1534 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1535  1536  1537  1538  1539  1540  1541  1542  1543  1544  1545  1546  1547 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 1548  1549  1550  1551  1552  1553  1554  1555  1556  1557  1558  1559  1560 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1561  1562  1563  1564  1565  1566  1567  1568  1569  1570  1571  1572  1573 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1574  1575  1576  1577  1578  1579  1580  1581  1582  1583  1584  1585  1586 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1587  1588  1589  1590  1591  1592  1593  1594  1595  1596  1597  1598  1599 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 1600  1601  1602  1603  1604  1605  1606  1607  1608  1609  1610  1611  1612 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1613  1614  1615  1616  1617  1618  1619  1620  1621  1622  1623  1624  1625 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1626  1627  1628  1629  1630  1631  1632  1633  1634  1635  1636  1637  1638 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1639  1640  1641  1642  1643  1644  1645  1646  1647  1648  1649  1650  1651 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1652  1653  1654  1655  1656  1657  1658  1659  1660  1661  1662  1663  1664 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1665  1666  1667  1668  1669  1670  1671  1672  1673  1674  1675  1676  1677 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1678  1679  1680  1681  1682  1683  1684  1685  1686  1687  1688  1689  1690 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1691  1692  1693  1694  1695  1696  1697  1698  1699  1700  1701  1702  1703 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1704  1705  1706  1707  1708  1709  1710  1711  1712  1713  1714  1715  1716 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1717  1718  1719  1720  1721  1722  1723  1724  1725  1726  1727  1728  1729 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1730  1731  1732  1733  1734  1735  1736  1737  1738  1739  1740  1741  1742 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1743  1744  1745  1746  1747  1748  1749  1750  1751  1752  1753  1754  1755 \n    1     1     1     2     1     1     1     1     1     1     1     2     1 \n 1756  1757  1758  1759  1760  1761  1762  1763  1764  1765  1766  1767  1768 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1769  1770  1771  1772  1773  1774  1775  1776  1777  1778  1779  1780  1781 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 1782  1783  1784  1785  1786  1787  1788  1789  1790  1791  1792  1793  1794 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1795  1796  1797  1798  1799  1800  1801  1802  1803  1804  1805  1806  1807 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1808  1809  1810  1811  1812  1813  1814  1815  1816  1817  1818  1819  1820 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1821  1822  1823  1824  1825  1826  1827  1828  1829  1830  1831  1832  1833 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1834  1835  1836  1837  1838  1839  1840  1841  1842  1843  1844  1845  1846 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1847  1848  1849  1850  1851  1852  1853  1854  1855  1856  1857  1858  1859 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1860  1861  1862  1863  1864  1865  1866  1867  1868  1869  1870  1871  1872 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 1873  1874  1875  1876  1877  1878  1879  1880  1881  1882  1883  1884  1885 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1886  1887  1888  1889  1890  1891  1892  1893  1894  1895  1896  1897  1898 \n    1     2     1     1     1     1     1     1     1     1     2     1     1 \n 1899  1900  1901  1902  1903  1904  1905  1906  1907  1908  1909  1910  1911 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1912  1913  1914  1915  1916  1917  1918  1919  1920  1921  1922  1923  1924 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1925  1926  1927  1928  1929  1930  1931  1932  1933  1934  1935  1936  1937 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1938  1939  1940  1941  1942  1943  1944  1945  1946  1947  1948  1949  1950 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1951  1952  1953  1954  1955  1956  1957  1958  1959  1960  1961  1962  1963 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1964  1965  1966  1967  1968  1969  1970  1971  1972  1973  1974  1975  1976 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1977  1978  1979  1980  1981  1982  1983  1984  1985  1986  1987  1988  1989 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1990  1991  1992  1993  1994  1995  1996  1997  1998  1999  2000  2001  2002 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2003  2004  2005  2006  2007  2008  2009  2010  2011  2012  2013  2014  2015 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2016  2017  2018  2019  2020  2021  2022  2023  2024  2025  2026  2027  2028 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2029  2030  2031  2032  2033  2034  2035  2036  2037  2038  2039  2040  2041 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2042  2043  2044  2045  2046  2047  2048  2049  2050  2051  2052  2053  2054 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2055  2056  2057  2058  2059  2060  2061  2062  2063  2064  2065  2066  2067 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 2068  2069  2070  2071  2072  2073  2074  2075  2076  2077  2078  2079  2080 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 2081  2082  2083  2084  2085  2086  2087  2088  2089  2090  2091  2092  2093 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2094  2095  2096  2097  2098  2099  2100  2101  2102  2103  2104  2105  2106 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 2107  2108  2109  2110  2111  2112  2113  2114  2115  2116  2117  2118  2119 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 2120  2121  2122  2123  2124  2125  2126  2127  2128  2129  2130  2131  2132 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2133  2134  2135  2136  2137  2138  2139  2140  2141  2142  2143  2144  2145 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 2146  2147  2148  2149  2150  2151  2152  2153  2154  2155  2156  2157  2158 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 2159  2160  2161  2162  2163  2164  2165  2166  2167  2168  2169  2170  2171 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2172  2173  2174  2175  2176  2177  2178  2179  2180  2181  2182  2183  2184 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2185  2186  2187  2188  2189  2190  2191  2192  2193  2194  2195  2196  2197 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2198  2199  2200  2201  2202  2203  2204  2205  2206  2207  2208  2209  2210 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2211  2212  2213  2214  2215  2216  2217  2218  2219  2220  2221  2222  2223 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2224  2225  2226  2227  2228  2229  2230  2231  2232  2233  2234  2235  2236 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 2237  2238  2239  2240  2241  2242  2243  2244  2245  2246  2247  2248  2249 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2250  2251  2252  2253  2254  2255  2256  2257  2258  2259  2260  2261  2262 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2263  2264  2265  2266  2267  2268  2269  2270  2271  2272  2273  2274  2275 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 2276  2277  2278  2279  2280  2281  2282  2283  2284  2285  2286  2287  2288 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2289  2290  2291  2292  2293  2294  2295  2296  2297  2298  2299  2300  2301 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2302  2303  2304  2305  2306  2307  2308  2309  2310  2311  2312  2313  2314 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 2315  2316  2317  2318  2319  2320  2321  2322  2323  2324  2325  2326  2327 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2328  2329  2330  2331  2332  2333  2334  2335  2336  2337  2338  2339  2340 \n    3     1     1     1     1     1     1     1     1     1     1     1     1 \n 2341  2342  2343  2344  2345  2346  2347  2348  2349  2350  2351  2352  2353 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2354  2355  2356  2357  2358  2359  2360  2361  2362  2363  2364  2365  2366 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2367  2368  2369  2370  2371  2372  2373  2374  2375  2376  2377  2378  2379 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2380  2381  2382  2383  2384  2385  2386  2387  2388  2389  2390  2391  2392 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2393  2394  2395  2396  2397  2398  2399  2400  2401  2402  2403  2404  2405 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2406  2407  2408  2409  2410  2411  2412  2413  2414  2415  2416  2417  2418 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2419  2420  2421  2422  2423  2424  2425  2426  2427  2428  2429  2430  2431 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2432  2433  2434  2435  2436  2437  2438  2439  2440  2441  2442  2443  2444 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2445  2446  2447  2448  2449  2450  2451  2452  2453  2454  2455  2456  2457 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2458  2459  2460  2461  2462  2463  2464  2465  2466  2467  2468  2469  2470 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2471  2472  2473  2474  2475  2476  2477  2478  2479  2480  2481  2482  2483 \n    1     1     1     1     1     1     1     2     2     1     1     1     1 \n 2484  2485  2486  2487  2488  2489  2490  2491  2492  2493  2494  2495  2496 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2497  2498  2499  2500  2501  2502  2503  2504  2505  2506  2507  2508  2509 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 2510  2511  2512  2513  2514  2515  2516  2517  2518  2519  2520  2521  2522 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2523  2524  2525  2526  2527  2528  2529  2530  2531  2532  2533  2534  2535 \n    1     1     1     1     1     1     1     1     1     3     1     1     1 \n 2536  2537  2538  2539  2540  2541  2542  2543  2544  2545  2546  2547  2548 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2549  2550  2551  2552  2553  2554  2555  2556  2557  2558  2559  2560  2561 \n    1     1     1     1     1     1     1     1     1     1     1     1     3 \n 2562  2563  2564  2565  2566  2567  2568  2569  2570  2571  2572  2573  2574 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 2575  2576  2577  2578  2579  2580  2581  2582  2583  2584  2585  2586  2587 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2588  2589  2590  2591  2592  2593  2594  2595  2596  2597  2598  2599  2600 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2601  2602  2603  2604  2605  2606  2607  2608  2609  2610  2611  2612  2613 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2614  2615  2616  2617  2618  2619  2620  2621  2622  2623  2624  2625  2626 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2627  2628  2629  2630  2631  2632  2633  2634  2635  2636  2637  2638  2639 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2640  2641  2642  2643  2644  2645  2646  2647  2648  2649  2650  2651  2652 \n    1     1     1     1     1     2     2     1     1     1     1     1     1 \n 2653  2654  2655  2656  2657  2658  2659  2660  2661  2662  2663  2664  2665 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2666  2667  2668  2669  2670  2671  2672  2673  2674  2675  2676  2677  2678 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2679  2680  2681  2682  2683  2684  2685  2686  2687  2688  2689  2690  2691 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 2692  2693  2694  2695  2696  2697  2698  2699  2700  2701  2702  2703  2704 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 2705  2706  2707  2708  2709  2710  2711  2712  2713  2714  2715  2716  2717 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 2718  2719  2720  2721  2722  2723  2724  2725  2726  2727  2728  2729  2730 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2731  2732  2733  2734  2735  2736  2737  2738  2739  2740  2741  2742  2743 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2744  2745  2746  2747  2748  2749  2750  2751  2752  2753  2754  2755  2756 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2757  2758  2759  2760  2761  2762  2763  2764  2765  2766  2767  2768  2769 \n    1     1     1     1     1     1     1     1     2     2     1     1     1 \n 2770  2771  2772  2773  2774  2775  2776  2777  2778  2779  2780  2781  2782 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 2783  2784  2785  2786  2787  2788  2789  2790  2791  2792  2793  2794  2795 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2796  2797  2798  2799  2800  2801  2802  2803  2804  2805  2806  2807  2808 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2809  2810  2811  2812  2813  2814  2815  2816  2817  2818  2819  2820  2821 \n    1     1     1     1     1     1     1     1     1     1     3     1     1 \n 2822  2823  2824  2825  2826  2827  2828  2829  2830  2831  2832  2833  2834 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2835  2836  2837  2838  2839  2840  2841  2842  2843  2844  2845  2846  2847 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2848  2849  2850  2851  2852  2853  2854  2855  2856  2857  2858  2859  2860 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2861  2862  2863  2864  2865  2866  2867  2868  2869  2870  2871  2872  2873 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2874  2875  2876  2877  2878  2879  2880  2881  2882  2883  2884  2885  2886 \n    1     1     1     1     1     3     1     1     1     1     1     1     1 \n 2887  2888  2889  2890  2891  2892  2893  2894  2895  2896  2897  2898  2899 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2900  2901  2902  2903  2904  2905  2906  2907  2908  2909  2910  2911  2912 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2913  2914  2915  2916  2917  2918  2919  2920  2921  2922  2923  2924  2925 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2926  2927  2928  2929  2930  2931  2932  2933  2934  2935  2936  2937  2938 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2939  2940  2941  2942  2943  2944  2945  2946  2947  2948  2949  2950  2951 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2952  2953  2954  2955  2956  2957  2958  2959  2960  2961  2962  2963  2964 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2965  2966  2967  2968  2969  2970  2971  2972  2973  2974  2975  2976  2977 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2978  2979  2980  2981  2982  2983  2984  2985  2986  2987  2988  2989  2990 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2991  2992  2993  2994  2995  2996  2997  2998  2999  3000  3001  3002  3003 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3004  3005  3006  3007  3008  3009  3010  3011  3012  3013  3014  3015  3016 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3017  3018  3019  3020  3021  3022  3023  3024  3025  3026  3027  3028  3029 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3030  3031  3032  3033  3034  3035  3036  3037  3038  3039  3040  3041  3042 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 3043  3044  3045  3046  3047  3048  3049  3050  3051  3052  3053  3054  3055 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3056  3057  3058  3059  3060  3061  3062  3063  3064  3065  3066  3067  3068 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3069  3070  3071  3072  3073  3074  3075  3076  3077  3078  3079  3080  3081 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3082  3083  3084  3085  3086  3087  3088  3089  3090  3091  3092  3093  3094 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3095  3096  3097  3098  3099  3100  3101  3102  3103  3104  3105  3106  3107 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 3108  3109  3110  3111  3112  3113  3114  3115  3116  3117  3118  3119  3120 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3121  3122  3123  3124  3125  3126  3127  3128  3129  3130  3131  3132  3133 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 3134  3135  3136  3137  3138  3139  3140  3141  3142  3143  3144  3145  3146 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3147  3148  3149  3150  3151  3152  3153  3154  3155  3156  3157  3158  3159 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3160  3161  3162  3163  3164  3165  3166  3167  3168  3169  3170  3171  3172 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 3173  3174  3175  3176  3177  3178  3179  3180  3181  3182  3183  3184  3185 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 3186  3187  3188  3189  3190  3191  3192  3193  3194  3195  3196  3197  3198 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3199  3200  3201  3202  3203  3204  3205  3206  3207  3208  3209  3210  3211 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3212  3213  3214  3215  3216  3217  3218  3219  3220  3221  3222  3223  3224 \n    1     1     1     1     1     1     1     1     1     3     1     1     1 \n 3225  3226  3227  3228  3229  3230  3231  3232  3233  3234  3235  3236  3237 \n    1     1     1     1     1     1     1     1     1     2     1     2     1 \n 3238  3239  3240  3241  3242  3243  3244  3245  3246  3247  3248  3249  3250 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 3251  3252  3253  3254  3255  3256  3257  3258  3259  3260  3261  3262  3263 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3264  3265  3266  3267  3268  3269  3270  3271  3272  3273  3274  3275  3276 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 3277  3278  3279  3280  3281  3282  3283  3284  3285  3286  3287  3288  3289 \n    1     1     2     1     1     1     2     1     1     1     1     1     1 \n 3290  3291  3292  3293  3294  3295  3296  3297  3298  3299  3300  3301  3302 \n    1     1     1     1     1     1     2     2     1     1     1     1     1 \n 3303  3304  3305  3306  3307  3308  3309  3310  3311  3312  3313  3314  3315 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3316  3317  3318  3319  3320  3321  3322  3323  3324  3325  3326  3327  3328 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3329  3330  3331  3332  3333  3334  3335  3336  3337  3338  3339  3340  3341 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 3342  3343  3344  3345  3346  3347  3348  3349  3350  3351  3352  3353  3354 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3355  3356  3357  3358  3359  3360  3361  3362  3363  3364  3365  3366  3367 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3368  3369  3370  3371  3372  3373  3374  3375  3376  3377  3378  3379  3380 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3381  3382  3383  3384  3385  3386  3387  3388  3389  3390  3391  3392  3393 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 3394  3395  3396  3397  3398  3399  3400  3401  3402  3403  3404  3405  3406 \n    1     1     1     1     1     1     1     1     1     3     1     1     1 \n 3407  3408  3409  3410  3411  3412  3413  3414  3415  3416  3417  3418  3419 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 3420  3421  3422  3423  3424  3425  3426  3427  3428  3429  3430  3431  3432 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 3433  3434  3435  3436  3437  3438  3439  3440  3441  3442  3443  3444  3445 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3446  3447  3448  3449  3450  3451  3452  3453  3454  3455  3456  3457  3458 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3459  3460  3461  3462  3463  3464  3465  3466  3467  3468  3469  3470  3471 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3472  3473  3474  3475  3476  3477  3478  3479  3480  3481  3482  3483  3484 \n    3     1     2     1     1     1     1     1     1     1     1     1     1 \n 3485  3486  3487  3488  3489  3490  3491  3492  3493  3494  3495  3496  3497 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 3498  3499  3500  3501  3502  3503  3504  3505  3506  3507  3508  3509  3510 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3511  3512  3513  3514  3515  3516  3517  3518  3519  3520  3521  3522  3523 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3524  3525  3526  3527  3528  3529  3530  3531  3532  3533  3534  3535  3536 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3537  3538  3539  3540  3541  3542  3543  3544  3545  3546  3547  3548  3549 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3550  3551  3552  3553  3554  3555  3556  3557  3558  3559  3560  3561  3562 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 3563  3564  3565  3566  3567  3568  3569  3570  3571  3572  3573  3574  3575 \n    1     1     1     1     1     1     1     3     1     1     1     1     1 \n 3576  3577  3578  3579  3580  3581  3582  3583  3584  3585  3586  3587  3588 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 3589  3590  3591  3592  3593  3594  3595  3596  3597  3598  3599  3600  3601 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 3602  3603  3604  3605  3606  3607  3608  3609  3610  3611  3612  3613  3614 \n    1     1     1     1     1     1     1     1     7     1     1     1     1 \n 3615  3616  3617  3618  3619  3620  3621  3622  3623  3624  3625  3626  3627 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3628  3629  3630  3631  3632  3633  3634  3635  3636  3637  3638  3639  3640 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3641  3642  3643  3644  3645  3646  3647  3648  3649  3650  3651  3652  3653 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3654  3655  3656  3657  3658  3659  3660  3661  3662  3663  3664  3665  3666 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3667  3668  3669  3670  3671  3672  3673  3674  3675  3676  3677  3678  3679 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3680  3681  3682  3683  3684  3685  3686  3687  3688  3689  3690  3691  3692 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3693  3694  3695  3696  3697  3698  3699  3700  3701  3702  3703  3704  3705 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3706  3707  3708  3709  3710  3711  3712  3713  3714  3715  3716  3717  3718 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3719  3720  3721  3722  3723  3724  3725  3726  3727  3728  3729  3730  3731 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3732  3733  3734  3735  3736  3737  3738  3739  3740  3741  3742  3743  3744 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3745  3746  3747  3748  3749  3750  3751  3752  3753  3754  3755  3756  3757 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3758  3759  3760  3761  3762  3763  3764  3765  3766  3767  3768  3769  3770 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3771  3772  3773  3774  3775  3776  3777  3778  3779  3780  3781  3782  3783 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3784  3785  3786  3787  3788  3789  3790  3791  3792  3793  3794  3795  3796 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3797  3798  3799  3800  3801  3802  3803  3804  3805  3806  3807  3808  3809 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3810  3811  3812  3813  3814  3815  3816  3817  3818  3819  3820  3821  3822 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3823  3824  3825  3826  3827  3828  3829  3830  3831  3832  3833  3834  3835 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3836  3837  3838  3839  3840  3841  3842  3843  3844  3845  3846  3847  3848 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3849  3850  3851  3852  3853  3854  3855  3856  3857  3858  3859  3860  3861 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3862  3863  3864  3865  3866  3867  3868  3869  3870  3871  3872  3873  3874 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3875  3876  3877  3878  3879  3880  3881  3882  3883  3884  3885  3886  3887 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3888  3889  3890  3891  3892  3893  3894  3895  3896  3897  3898  3899  3900 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3901  3902  3903  3904  3905  3906  3907  3908  3909  3910  3911  3912  3913 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3914  3915  3916  3917  3918  3919  3920  3921  3922  3923  3924  3925  3926 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3927  3928  3929  3930  3931  3932  3933  3934  3935  3936  3937  3938  3939 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3940  3941  3942  3943  3944  3945  3946  3947  3948  3949  3950  3951  3952 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3953  3954  3955  3956  3957  3958  3959  3960  3961  3962  3963  3964  3965 \n    1     4     1     1     1     1     1     1     1     1     1     1     1 \n 3966  3967  3968  3969  3970  3971  3972  3973  3974  3975  3976  3977  3978 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3979  3980  3981  3982  3983  3984  3985  3986  3987  3988  3989  3990  3991 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3992  3993  3994  3995  3996  3997  3998  3999  4000  4001  4002  4003  4004 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4005  4006  4007  4008  4009  4010  4011  4012  4013  4014  4015  4016  4017 \n    1     1     1     1     1     3     1     1     1     1     1     1     1 \n 4018  4019  4020  4021  4022  4023  4024  4025  4026  4027  4028  4029  4030 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4031  4032  4033  4034  4035  4036  4037  4038  4039  4040  4041  4042  4043 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4044  4045  4046  4047  4048  4049  4050  4051  4052  4053  4054  4055  4056 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4057  4058  4059  4060  4061  4062  4063  4064  4065  4066  4067  4068  4069 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4070  4071  4072  4073  4074  4075  4076  4077  4078  4079  4080  4081  4082 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4083  4084  4085  4086  4087  4088  4089  4090  4091  4092  4093  4094  4095 \n    1     1     1     1     1     3     1     1     1     1     1     1     1 \n 4096  4097  4098  4099  4100  4101  4102  4103  4104  4105  4106  4107  4108 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4109  4110  4111  4112  4113  4114  4115  4116  4117  4118  4119  4120  4121 \n    1     1     1     1     1     1     1     1     1     1     3     1     1 \n 4122  4123  4124  4125  4126  4127  4128  4129  4130  4131  4132  4133  4134 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4135  4136  4137  4138  4139  4140  4141  4142  4143  4144  4145  4146  4147 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4148  4149  4150  4151  4152  4153  4154  4155  4156  4157  4158  4159  4160 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4161  4162  4163  4164  4165  4166  4167  4168  4169  4170  4171  4172  4173 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4174  4175  4176  4177  4178  4179  4180  4181  4182  4183  4184  4185  4186 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4187  4188  4189  4190  4191  4192  4193  4194  4195  4196  4197  4198  4199 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4200  4201  4202  4203  4204  4205  4206  4207  4208  4209  4210  4211  4212 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4213  4214  4215  4216  4217  4218  4219  4220  4221  4222  4223  4224  4225 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4226  4227  4228  4229  4230  4231  4232  4233  4234  4235  4236  4237  4238 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4239  4240  4241  4242  4243  4244  4245  4246  4247  4248  4249  4250  4251 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4252  4253  4254  4255  4256  4257  4258  4259  4260  4261  4262  4263  4264 \n    1     1     2     2     1     1     1     2     1     1     1     1     1 \n 4265  4266  4267  4268  4269  4270  4271  4272  4273  4274  4275  4276  4277 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4278  4279  4280  4281  4282  4283  4284  4285  4286  4287  4288  4289  4290 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 4291  4292  4293  4294  4295  4296  4297  4298  4299  4300  4301  4302  4303 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 4304  4305  4306  4307  4308  4309  4310  4311  4312  4313  4314  4315  4316 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4317  4318  4319  4320  4321  4322  4323  4324  4325  4326  4327  4328  4329 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4330  4331  4332  4333  4334  4335  4336  4337  4338  4339  4340  4341  4342 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4343  4344  4345  4346  4347  4348  4349  4350  4351  4352  4353  4354  4355 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4356  4357  4358  4359  4360  4361  4362  4363  4364  4365  4366  4367  4368 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4369  4370  4371  4372  4373  4374  4375  4376  4377  4378  4379  4380  4381 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4382  4383  4384  4385  4386  4387  4388  4389  4390  4391  4392  4393  4394 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4395  4396  4397  4398  4399  4400  4401  4402  4403  4404  4405  4406  4407 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4408  4409  4410  4411  4412  4413  4414  4415  4416  4417  4418  4419  4420 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4421  4422  4423  4424  4425  4426  4427  4428  4429  4430  4431  4432  4433 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4434  4435  4436  4437  4438  4439  4440  4441  4442  4443  4444  4445  4446 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4447  4448  4449  4450  4451  4452  4453  4454  4455  4456  4457  4458  4459 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4460  4461  4462  4463  4464  4465  4466  4467  4468  4469  4470  4471  4472 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4473  4474  4475  4476  4477  4478  4479  4480  4481  4482  4483  4484  4485 \n    1     1     1     1     1     2     1     1     1     1     1     2     1 \n 4486  4487  4488  4489  4490  4491  4492  4493  4494  4495  4496  4497  4498 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 4499  4500  4501  4502  4503  4504  4505  4506  4507  4508  4509  4510  4511 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 4512  4513  4514  4515  4516  4517  4518  4519  4520  4521  4522  4523  4524 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 4525  4526  4527  4528  4529  4530  4531  4532  4533  4534  4535  4536  4537 \n    1     1     1     1     3     1     1     1     1     1     1     1     1 \n 4538  4539  4540  4541  4542  4543  4544  4545  4546  4547  4548  4549  4550 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4551  4552  4553  4554  4555  4556  4557  4558  4559  4560  4561  4562  4563 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4564  4565  4566  4567  4568  4569  4570  4571  4572  4573  4574  4575  4576 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4577  4578  4579  4580  4581  4582  4583  4584  4585  4586  4587  4588  4589 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4590  4591  4592  4593  4594  4595  4596  4597  4598  4599  4600  4601  4602 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4603  4604  4605  4606  4607  4608  4609  4610  4611  4612  4613  4614  4615 \n    1     1     1     1     1     1     3     1     1     1     2     1     1 \n 4616  4617  4618  4619  4620  4621  4622  4623  4624  4625  4626  4627  4628 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 4629  4630  4631  4632  4633  4634  4635  4636  4637  4638  4639  4640  4641 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4642  4643  4644  4645  4646  4647  4648  4649  4650  4651  4652  4653  4654 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4655  4656  4657  4658  4659  4660  4661  4662  4663  4664  4665  4666  4667 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4668  4669  4670  4671  4672  4673  4674  4675  4676  4677  4678  4679  4680 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 4681  4682  4683  4684  4685  4686  4687  4688  4689  4690  4691  4692  4693 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4694  4695  4696  4697  4698  4699  4700  4701  4702  4703  4704  4705  4706 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4707  4708  4709  4710  4711  4712  4713  4714  4715  4716  4717  4718  4719 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4720  4721  4722  4723  4724  4725  4726  4727  4728  4729  4730  4731  4732 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 4733  4734  4735  4736  4737  4738  4739  4740  4741  4742  4743  4744  4745 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 4746  4747  4748  4749  4750  4751  4752  4753  4754  4755  4756  4757  4758 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4759  4760  4761  4762  4763  4764  4765  4766  4767  4768  4769  4770  4771 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4772  4773  4774  4775  4776  4777  4778  4779  4780  4781  4782  4783  4784 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 4785  4786  4787  4788  4789  4790  4791  4792  4793  4794  4795  4796  4797 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4798  4799  4800  4801  4802  4803  4804  4805  4806  4807  4808  4809  4810 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4811  4812  4813  4814  4815  4816  4817  4818  4819  4820  4821  4822  4823 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4824  4825  4826  4827  4828  4829  4830  4831  4832  4833  4834  4835  4836 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 4837  4838  4839  4840  4841  4842  4843  4844  4845  4846  4847  4848  4849 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4850  4851  4852  4853  4854  4855  4856  4857  4858  4859  4860  4861  4862 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4863  4864  4865  4866  4867  4868  4869  4870  4871  4872  4873  4874  4875 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 4876  4877  4878  4879  4880  4881  4882  4883  4884  4885  4886  4887  4888 \n    1     1     1     1     1     1     1     1     1     1     5     2     1 \n 4889  4890  4891  4892  4893  4894  4895  4896  4897  4898  4899  4900  4901 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 4902  4903  4904  4905  4906  4907  4908  4909  4910  4911  4912  4913  4914 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4915  4916  4917  4918  4919  4920  4921  4922  4923  4924  4925  4926  4927 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4928  4929  4930  4931  4932  4933  4934  4935  4936  4937  4938  4939  4940 \n    1     1     1     1     1     1     3     1     1     1     1     1     1 \n 4941  4942  4943  4944  4945  4946  4947  4948  4949  4950  4951  4952  4953 \n    1     1     1     1     1     1     1     1     1     1     1     1     3 \n 4954  4955  4956  4957  4958  4959  4960  4961  4962  4963  4964  4965  4966 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 4967  4968  4969  4970  4971  4972  4973  4974  4975  4976  4977  4978  4979 \n    1     1     1     1     1     1     1     1     3     1     1     1     1 \n 4980  4981  4982  4983  4984  4985  4986  4987  4988  4989  4990  4991  4992 \n    1     1     1     1     1     1     1     1     1     1     1     1     4 \n 4993  4994  4995  4996  4997  4998  4999  5000  5001  5002  5003  5004  5005 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5006  5007  5008  5009  5010  5011  5012  5013  5014  5015  5016  5017  5018 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5019  5020  5021  5022  5023  5024  5025  5026  5027  5028  5029  5030  5031 \n    1     1     1     3     1     1     1     1     1     1     1     1     1 \n 5032  5033  5034  5035  5036  5037  5038  5039  5040  5041  5042  5043  5044 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5045  5046  5047  5048  5049  5050  5051  5052  5053  5054  5055  5056  5057 \n    2     2     1     1     1     1     1     1     1     1     1     1     1 \n 5058  5059  5060  5061  5062  5063  5064  5065  5066  5067  5068  5069  5070 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 5071  5072  5073  5074  5075  5076  5077  5078  5079  5080  5081  5082  5083 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5084  5085  5086  5087  5088  5089  5090  5091  5092  5093  5094  5095  5096 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5097  5098  5099  5100  5101  5102  5103  5104  5105  5106  5107  5108  5109 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5110  5111  5112  5113  5114  5115  5116  5117  5118  5119  5120  5121  5122 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 5123  5124  5125  5126  5127  5128  5129  5130  5131  5132  5133  5134  5135 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 5136  5137  5138  5139  5140  5141  5142  5143  5144  5145  5146  5147  5148 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5149  5150  5151  5152  5153  5154  5155  5156  5157  5158  5159  5160  5161 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 5162  5163  5164  5165  5166  5167  5168  5169  5170  5171  5172  5173  5174 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5175  5176  5177  5178  5179  5180  5181  5182  5183  5184  5185  5186  5187 \n    2     2     1     1     1     1     1     1     1     1     1     1     1 \n 5188  5189  5190  5191  5192  5193  5194  5195  5196  5197  5198  5199  5200 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5201  5202  5203  5204  5205  5206  5207  5208  5209  5210  5211  5212  5213 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5214  5215  5216  5217  5218  5219  5220  5221  5222  5223  5224  5225  5226 \n    1     1     1     1     1     1     1     1     1     1     2     5     1 \n 5227  5228  5229  5230  5231  5232  5233  5234  5235  5236  5237  5238  5239 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5240  5241  5242  5243  5244  5245  5246  5247  5248  5249  5250  5251  5252 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 5253  5254  5255  5256  5257  5258  5259  5260  5261  5262  5263  5264  5265 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 5266  5267  5268  5269  5270  5271  5272  5273  5274  5275  5276  5277  5278 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5279  5280  5281  5282  5283  5284  5285  5286  5287  5288  5289  5290  5291 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5292  5293  5294  5295  5296  5297  5298  5299  5300  5301  5302  5303  5304 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 5305  5306  5307  5308  5309  5310  5311  5312  5313  5314  5315  5316  5317 \n    1     1     1     1     6     1     1     1     1     1     2     1     1 \n 5318  5319  5320  5321  5322  5323  5324  5325  5326  5327  5328  5329  5330 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5331  5332  5333  5334  5335  5336  5337  5338  5339  5340  5341  5342  5343 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5344  5345  5346  5347  5348  5349  5350  5351  5352  5353  5354  5355  5356 \n    1     1     1     1     3     1     1     1     1     1     1     3     2 \n 5357  5358  5359  5360  5361  5362  5363  5364  5365  5366  5367  5368  5369 \n    1     1     1     1     1     1     2     1     2     1     1     1     1 \n 5370  5371  5372  5373  5374  5375  5376  5377  5378  5379  5380  5381  5382 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5383  5384  5385  5386  5387  5388  5389  5390  5391  5392  5393  5394  5395 \n    1     2     1     1     1     1     1     1     1     1     1     2     1 \n 5396  5397  5398  5399  5400  5401  5402  5403  5404  5405  5406  5407  5408 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5409  5410  5411  5412  5413  5414  5415  5416  5417  5418  5419  5420  5421 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5422  5423  5424  5425  5426  5427  5428  5429  5430  5431  5432  5433  5434 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5435  5436  5437  5438  5439  5440  5441  5442  5443  5444  5445  5446  5447 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5448  5449  5450  5451  5452  5453  5454  5455  5456  5457  5458  5459  5460 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5461  5462  5463  5464  5465  5466  5467  5468  5469  5470  5471  5472  5473 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5474  5475  5476  5477  5478  5479  5480  5481  5482  5483  5484  5485  5486 \n    1     5     1     1     1     1     1     1     1     1     1     1     1 \n 5487  5488  5489  5490  5491  5492  5493  5494  5495  5496  5497  5498  5499 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5500  5501  5502  5503  5504  5505  5506  5507  5508  5509  5510  5511  5512 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5513  5514  5515  5516  5517  5518  5519  5520  5521  5522  5523  5524  5525 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5526  5527  5528  5529  5530  5531  5532  5533  5534  5535  5536  5537  5538 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5539  5540  5541  5542  5543  5544  5545  5546  5547  5548  5549  5550  5551 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5552  5553  5554  5555  5556  5557  5558  5559  5560  5561  5562  5563  5564 \n    1     1     6     1     1     1     1     1     1     1     1     1     1 \n 5565  5566  5567  5568  5569  5570  5571  5572  5573  5574  5575  5576  5577 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5578  5579  5580  5581  5582  5583  5584  5585  5586  5587  5588  5589  5590 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5591  5592  5593  5594  5595  5596  5597  5598  5599  5600  5601  5602  5603 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 5604  5605  5606  5607  5608  5609  5610  5611  5612  5613  5614  5615  5616 \n    1     1     1     1     1     1     1     1     5     1     1     1     1 \n 5617  5618  5619  5620  5621  5622  5623  5624  5625  5626  5627  5628  5629 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5630  5631  5632  5633  5634  5635  5636  5637  5638  5639  5640  5641  5642 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5643  5644  5645  5646  5647  5648  5649  5650  5651  5652  5653  5654  5655 \n    1     4     1     1     1     1     1     1     1     1     1     1     2 \n 5656  5657  5658  5659  5660  5661  5662  5663  5664  5665  5666  5667  5668 \n    1     1     1     4     1     1     1     1     1     1     1     1     1 \n 5669  5670  5671  5672  5673  5674  5675  5676  5677  5678  5679  5680  5681 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5682  5683  5684  5685  5686  5687  5688  5689  5690  5691  5692  5693  5694 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5695  5696  5697  5698  5699  5700  5701  5702  5703  5704  5705  5706  5707 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 5708  5709  5710  5711  5712  5713  5714  5715  5716  5717  5718  5719  5720 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5721  5722  5723  5724  5725  5726  5727  5728  5729  5730  5731  5732  5733 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5734  5735  5736  5737  5738  5739  5740  5741  5742  5743  5744  5745  5746 \n    1     1     1     1     1     1     1     1     1     1     1     4     1 \n 5747  5748  5749  5750  5751  5752  5753  5754  5755  5756  5757  5758  5759 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5760  5761  5762  5763  5764  5765  5766  5767  5768  5769  5770  5771  5772 \n    1     1     1     1     1     1     7     1     1     2     1     1     1 \n 5773  5774  5775  5776  5777  5778  5779  5780  5781  5782  5783  5784  5785 \n    1     1     1     1     1     1     1     1     1     1     4     1     2 \n 5786  5787  5788  5789  5790  5791  5792  5793  5794  5795  5796  5797  5798 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5799  5800  5801  5802  5803  5804  5805  5806  5807  5808  5809  5810  5811 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5812  5813  5814  5815  5816  5817  5818  5819  5820  5821  5822  5823  5824 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5825  5826  5827  5828  5829  5830  5831  5832  5833  5834  5835  5836  5837 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5838  5839  5840  5841  5842  5843  5844  5845  5846  5847  5848  5849  5850 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5851  5852  5853  5854  5855  5856  5857  5858  5859  5860  5861  5862  5863 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 5864  5865  5866  5867  5868  5869  5870  5871  5872  5873  5874  5875  5876 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5877  5878  5879  5880  5881  5882  5883  5884  5885  5886  5887  5888  5889 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5890  5891  5892  5893  5894  5895  5896  5897  5898  5899  5900  5901  5902 \n    1     1     1     1     1     1     1     1     1     1     1     1     4 \n 5903  5904  5905  5906  5907  5908  5909  5910  5911  5912  5913  5914  5915 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5916  5917  5918  5919  5920  5921  5922  5923  5924  5925  5926  5927  5928 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5929  5930  5931  5932  5933  5934  5935  5936  5937  5938  5939  5940  5941 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5942  5943  5944  5945  5946  5947  5948  5949  5950  5951  5952  5953  5954 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5955  5956  5957  5958  5959  5960  5961  5962  5963  5964  5965  5966  5967 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 5968  5969  5970  5971  5972  5973  5974  5975  5976  5977  5978  5979  5980 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 5981  5982  5983  5984  5985  5986  5987  5988  5989  5990  5991  5992  5993 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5994  5995  5996  5997  5998  5999  6000  6001  6002  6003  6004  6005  6006 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6007  6008  6009  6010  6011  6012  6013  6014  6015  6016  6017  6018  6019 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6020  6021  6022  6023  6024  6025  6026  6027  6028  6029  6030  6031  6032 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6033  6034  6035  6036  6037  6038  6039  6040  6041  6042  6043  6044  6045 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6046  6047  6048  6049  6050  6051  6052  6053  6054  6055  6056  6057  6058 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6059  6060  6061  6062  6063  6064  6065  6066  6067  6068  6069  6070  6071 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6072  6073  6074  6075  6076  6077  6078  6079  6080  6081  6082  6083  6084 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6085  6086  6087  6088  6089  6090  6091  6092  6093  6094  6095  6096  6097 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6098  6099  6100  6101  6102  6103  6104  6105  6106  6107  6108  6109  6110 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6111  6112  6113  6114  6115  6116  6117  6118  6119  6120  6121  6122  6123 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 6124  6125  6126  6127  6128  6129  6130  6131  6132  6133  6134  6135  6136 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6137  6138  6139  6140  6141  6142  6143  6144  6145  6146  6147  6148  6149 \n    1     1     6     1     1     1     1     1     1     1     1     1     1 \n 6150  6151  6152  6153  6154  6155  6156  6157  6158  6159  6160  6161  6162 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 6163  6164  6165  6166  6167  6168  6169  6170  6171  6172  6173  6174  6175 \n    1     4     1     1     1     1     1     1     1     1     1     1     1 \n 6176  6177  6178  6179  6180  6181  6182  6183  6184  6185  6186  6187  6188 \n    1     1     1     2     1     1     1     1     1     1     1     3     1 \n 6189  6190  6191  6192  6193  6194  6195  6196  6197  6198  6199  6200  6201 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 6202  6203  6204  6205  6206  6207  6208  6209  6210  6211  6212  6213  6214 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6215  6216  6217  6218  6219  6220  6221  6222  6223  6224  6225  6226  6227 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6228  6229  6230  6231  6232  6233  6234  6235  6236  6237  6238  6239  6240 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6241  6242  6243  6244  6245  6246  6247  6248  6249  6250  6251  6252  6253 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6254  6255  6256  6257  6258  6259  6260  6261  6262  6263  6264  6265  6266 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6267  6268  6269  6270  6271  6272  6273  6274  6275  6276  6277  6278  6279 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6280  6281  6282  6283  6284  6285  6286  6287  6288  6289  6290  6291  6292 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6293  6294  6295  6296  6297  6298  6299  6300  6301  6302  6303  6304  6305 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6306  6307  6308  6309  6310  6311  6312  6313  6314  6315  6316  6317  6318 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6319  6320  6321  6322  6323  6324  6325  6326  6327  6328  6329  6330  6331 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 6332  6333  6334  6335  6336  6337  6338  6339  6340  6341  6342  6343  6344 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6345  6346  6347  6348  6349  6350  6351  6352  6353  6354  6355  6356  6357 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6358  6359  6360  6361  6362  6363  6364  6365  6366  6367  6368  6369  6370 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6371  6372  6373  6374  6375  6376  6377  6378  6379  6380  6381  6382  6383 \n    2     1     1     1     1     1     2     1     2     1     1     1     1 \n 6384  6385  6386  6387  6388  6389  6390  6391  6392  6393  6394  6395  6396 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 6397  6398  6399  6400  6401  6402  6403  6404  6405  6406  6407  6408  6409 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6410  6411  6412  6413  6414  6415  6416  6417  6418  6419  6420  6421  6422 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6423  6424  6425  6426  6427  6428  6429  6430  6431  6432  6433  6434  6435 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6436  6437  6438  6439  6440  6441  6442  6443  6444  6445  6446  6447  6448 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6449  6450  6451  6452  6453  6454  6455  6456  6457  6458  6459  6460  6461 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6462  6463  6464  6465  6466  6467  6468  6469  6470  6471  6472  6473  6474 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 6475  6476  6477  6478  6479  6480  6481  6482  6483  6484  6485  6486  6487 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 6488  6489  6490  6491  6492  6493  6494  6495  6496  6497  6498  6499  6500 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6501  6502  6503  6504  6505  6506  6507  6508  6509  6510  6511  6512  6513 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6514  6515  6516  6517  6518  6519  6520  6521  6522  6523  6524  6525  6526 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6527  6528  6529  6530  6531  6532  6533  6534  6535  6536  6537  6538  6539 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6540  6541  6542  6543  6544  6545  6546  6547  6548  6549  6550  6551  6552 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6553  6554  6555  6556  6557  6558  6559  6560  6561  6562  6563  6564  6565 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 6566  6567  6568  6569  6570  6571  6572  6573  6574  6575  6576  6577  6578 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6579  6580  6581  6582  6583  6584  6585  6586  6587  6588  6589  6590  6591 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6592  6593  6594  6595  6596  6597  6598  6599  6600  6601  6602  6603  6604 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6605  6606  6607  6608  6609  6610  6611  6612  6613  6614  6615  6616  6617 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6618  6619  6620  6621  6622  6623  6624  6625  6626  6627  6628  6629  6630 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6631  6632  6633  6634  6635  6636  6637  6638  6639  6640  6641  6642  6643 \n    1     1     1     1     1     1     1     1     2     2     1     1     1 \n 6644  6645  6646  6647  6648  6649  6650  6651  6652  6653  6654  6655  6656 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 6657  6658  6659  6660  6661  6662  6663  6664  6665  6666  6667  6668  6669 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6670  6671  6672  6673  6674  6675  6676  6677  6678  6679  6680  6681  6682 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6683  6684  6685  6686  6687  6688  6689  6690  6691  6692  6693  6694  6695 \n    1     1     1     2     1     1     2     1     1     1     1     1     1 \n 6696  6697  6698  6699  6700  6701  6702  6703  6704  6705  6706  6707  6708 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6709  6710  6711  6712  6713  6714  6715  6716  6717  6718  6719  6720  6721 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6722  6723  6724  6725  6726  6727  6728  6729  6730  6731  6732  6733  6734 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 6735  6736  6737  6738  6739  6740  6741  6742  6743  6744  6745  6746  6747 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6748  6749  6750  6751  6752  6753  6754  6755  6756  6757  6758  6759  6760 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6761  6762  6763  6764  6765  6766  6767  6768  6769  6770  6771  6772  6773 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 6774  6775  6776  6777  6778  6779  6780  6781  6782  6783  6784  6785  6786 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6787  6788  6789  6790  6791  6792  6793  6794  6795  6796  6797  6798  6799 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 6800  6801  6802  6803  6804  6805  6806  6807  6808  6809  6810  6811  6812 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6813  6814  6815  6816  6817  6818  6819  6820  6821  6822  6823  6824  6825 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6826  6827  6828  6829  6830  6831  6832  6833  6834  6835  6836  6837  6838 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6839  6840  6841  6842  6843  6844  6845  6846  6847  6848  6849  6850  6851 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 6852  6853  6854  6855  6856  6857  6858  6859  6860  6861  6862  6863  6864 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6865  6866  6867  6868  6869  6870  6871  6872  6873  6874  6875  6876  6877 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6878  6879  6880  6881  6882  6883  6884  6885  6886  6887  6888  6889  6890 \n    1     1     1     2     1     1     1     2     1     1     1     1     1 \n 6891  6892  6893  6894  6895  6896  6897  6898  6899  6900  6901  6902  6903 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6904  6905  6906  6907  6908  6909  6910  6911  6912  6913  6914  6915  6916 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6917  6918  6919  6920  6921  6922  6923  6924  6925  6926  6927  6928  6929 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6930  6931  6932  6933  6934  6935  6936  6937  6938  6939  6940  6941  6942 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6943  6944  6945  6946  6947  6948  6949  6950  6951  6952  6953  6954  6955 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6956  6957  6958  6959  6960  6961  6962  6963  6964  6965  6966  6967  6968 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 6969  6970  6971  6972  6973  6974  6975  6976  6977  6978  6979  6980  6981 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6982  6983  6984  6985  6986  6987  6988  6989  6990  6991  6992  6993  6994 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6995  6996  6997  6998  6999  7000  7001  7002  7003  7004  7005  7006  7007 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7008  7009  7010  7011  7012  7013  7014  7015  7016  7017  7018  7019  7020 \n    1     1     1     3     3     2     1     1     1     1     1     1     1 \n 7021  7022  7023  7024  7025  7026  7027  7028  7029  7030  7031  7032  7033 \n    1     1     2     1     1     1     1     1     1     1     2     1     1 \n 7034  7035  7036  7037  7038  7039  7040  7041  7042  7043  7044  7045  7046 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7047  7048  7049  7050  7051  7052  7053  7054  7055  7056  7057  7058  7059 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7060  7061  7062  7063  7064  7065  7066  7067  7068  7069  7070  7071  7072 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7073  7074  7075  7076  7077  7078  7079  7080  7081  7082  7083  7084  7085 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 7086  7087  7088  7089  7090  7091  7092  7093  7094  7095  7096  7097  7098 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 7099  7100  7101  7102  7103  7104  7105  7106  7107  7108  7109  7110  7111 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7112  7113  7114  7115  7116  7117  7118  7119  7120  7121  7122  7123  7124 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7125  7126  7127  7128  7129  7130  7131  7132  7133  7134  7135  7136  7137 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 7138  7139  7140  7141  7142  7143  7144  7145  7146  7147  7148  7149  7150 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 7151  7152  7153  7154  7155  7156  7157  7158  7159  7160  7161  7162  7163 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7164  7165  7166  7167  7168  7169  7170  7171  7172  7173  7174  7175  7176 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7177  7178  7179  7180  7181  7182  7183  7184  7185  7186  7187  7188  7189 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7190  7191  7192  7193  7194  7195  7196  7197  7198  7199  7200  7201  7202 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7203  7204  7205  7206  7207  7208  7209  7210  7211  7212  7213  7214  7215 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7216  7217  7218  7219  7220  7221  7222  7223  7224  7225  7226  7227  7228 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7229  7230  7231  7232  7233  7234  7235  7236  7237  7238  7239  7240  7241 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7242  7243  7244  7245  7246  7247  7248  7249  7250  7251  7252  7253  7254 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7255  7256  7257  7258  7259  7260  7261  7262  7263  7264  7265  7266  7267 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7268  7269  7270  7271  7272  7273  7274  7275  7276  7277  7278  7279  7280 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7281  7282  7283  7284  7285  7286  7287  7288  7289  7290  7291  7292  7293 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7294  7295  7296  7297  7298  7299  7300  7301  7302  7303  7304  7305  7306 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7307  7308  7309  7310  7311  7312  7313  7314  7315  7316  7317  7318  7319 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7320  7321  7322  7323  7324  7325  7326  7327  7328  7329  7330  7331  7332 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7333  7334  7335  7336  7337  7338  7339  7340  7341  7342  7343  7344  7345 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7346  7347  7348  7349  7350  7351  7352  7353  7354  7355  7356  7357  7358 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7359  7360  7361  7362  7363  7364  7365  7366  7367  7368  7369  7370  7371 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7372  7373  7374  7375  7376  7377  7378  7379  7380  7381  7382  7383  7384 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7385  7386  7387  7388  7389  7390  7391  7392  7393  7394  7395  7396  7397 \n    1     1     1     1     3     1     1     1     1     1     1     1     1 \n 7398  7399  7400  7401  7402  7403  7404  7405  7406  7407  7408  7409  7410 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7411  7412  7413  7414  7415  7416  7417  7418  7419  7420  7421  7422  7423 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7424  7425  7426  7427  7428  7429  7430  7431  7432  7433  7434  7435  7436 \n    1     1     2     1     1     2     1     1     1     1     1     1     1 \n 7437  7438  7439  7440  7441  7442  7443  7444  7445  7446  7447  7448  7449 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7450  7451  7452  7453  7454  7455  7456  7457  7458  7459  7460  7461  7462 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7463  7464  7465  7466  7467  7468  7469  7470  7471  7472  7473  7474  7475 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7476  7477  7478  7479  7480  7481  7482  7483  7484  7485  7486  7487  7488 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7489  7490  7491  7492  7493  7494  7495  7496  7497  7498  7499  7500  7501 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7502  7503  7504  7505  7506  7507  7508  7509  7510  7511  7512  7513  7514 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7515  7516  7517  7518  7519  7520  7521  7522  7523  7524  7525  7526  7527 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 7528  7529  7530  7531  7532  7533  7534  7535  7536  7537  7538  7539  7540 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 7541  7542  7543  7544  7545  7546  7547  7548  7549  7550  7551  7552  7553 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 7554  7555  7556  7557  7558  7559  7560  7561  7562  7563  7564  7565  7566 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 7567  7568  7569  7570  7571  7572  7573  7574  7575  7576  7577  7578  7579 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7580  7581  7582  7583  7584  7585  7586  7587  7588  7589  7590  7591  7592 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7593  7594  7595  7596  7597  7598  7599  7600  7601  7602  7603  7604  7605 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7606  7607  7608  7609  7610  7611  7612  7613  7614  7615  7616  7617  7618 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7619  7620  7621  7622  7623  7624  7625  7626  7627  7628  7629  7630  7631 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7632  7633  7634  7635  7636  7637  7638  7639  7640  7641  7642  7643  7644 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7645  7646  7647  7648  7649  7650  7651  7652  7653  7654  7655  7656  7657 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7658  7659  7660  7661  7662  7663  7664  7665  7666  7667  7668  7669  7670 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7671  7672  7673  7674  7675  7676  7677  7678  7679  7680  7681  7682  7683 \n    1     1     4     2     1     2     1     1     1     1     1     1     1 \n 7684  7685  7686  7687  7688  7689  7690  7691  7692  7693  7694  7695  7696 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7697  7698  7699  7700  7701  7702  7703  7704  7705  7706  7707  7708  7709 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7710  7711  7712  7713  7714  7715  7716  7717  7718  7719  7720  7721  7722 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7723  7724  7725  7726  7727  7728  7729  7730  7731  7732  7733  7734  7735 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7736  7737  7738  7739  7740  7741  7742  7743  7744  7745  7746  7747  7748 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 7749  7750  7751  7752  7753  7754  7755  7756  7757  7758  7759  7760  7761 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 7762  7763  7764  7765  7766  7767  7768  7769  7770  7771  7772  7773  7774 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7775  7776  7777  7778  7779  7780  7781  7782  7783  7784  7785  7786  7787 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 7788  7789  7790  7791  7792  7793  7794  7795  7796  7797  7798  7799  7800 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 7801  7802  7803  7804  7805  7806  7807  7808  7809  7810  7811  7812  7813 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7814  7815  7816  7817  7818  7819  7820  7821  7822  7823  7824  7825  7826 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 7827  7828  7829  7830  7831  7832  7833  7834  7835  7836  7837  7838  7839 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7840  7841  7842  7843  7844  7845  7846  7847  7848  7849  7850  7851  7852 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7853  7854  7855  7856  7857  7858  7859  7860  7861  7862  7863  7864  7865 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7866  7867  7868  7869  7870  7871  7872  7873  7874  7875  7876  7877  7878 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7879  7880  7881  7882  7883  7884  7885  7886  7887  7888  7889  7890  7891 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7892  7893  7894  7895  7896  7897  7898  7899  7900  7901  7902  7903  7904 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 7905  7906  7907  7908  7909  7910  7911  7912  7913  7914  7915  7916  7917 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7918  7919  7920  7921  7922  7923  7924  7925  7926  7927  7928  7929  7930 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7931  7932  7933  7934  7935  7936  7937  7938  7939  7940  7941  7942  7943 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7944  7945  7946  7947  7948  7949  7950  7951  7952  7953  7954  7955  7956 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7957  7958  7959  7960  7961  7962  7963  7964  7965  7966  7967  7968  7969 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7970  7971  7972  7973  7974  7975  7976  7977  7978  7979  7980  7981  7982 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7983  7984  7985  7986  7987  7988  7989  7990  7991  7992  7993  7994  7995 \n    2     1     1     1     2     1     1     1     1     1     1     1     1 \n 7996  7997  7998  7999  8000  8001  8002  8003  8004  8005  8006  8007  8008 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8009  8010  8011  8012  8013  8014  8015  8016  8017  8018  8019  8020  8021 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8022  8023  8024  8025  8026  8027  8028  8029  8030  8031  8032  8033  8034 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8035  8036  8037  8038  8039  8040  8041  8042  8043  8044  8045  8046  8047 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 8048  8049  8050  8051  8052  8053  8054  8055  8056  8057  8058  8059  8060 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8061  8062  8063  8064  8065  8066  8067  8068  8069  8070  8071  8072  8073 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8074  8075  8076  8077  8078  8079  8080  8081  8082  8083  8084  8085  8086 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8087  8088  8089  8090  8091  8092  8093  8094  8095  8096  8097  8098  8099 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8100  8101  8102  8103  8104  8105  8106  8107  8108  8109  8110  8111  8112 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8113  8114  8115  8116  8117  8118  8119  8120  8121  8122  8123  8124  8125 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8126  8127  8128  8129  8130  8131  8132  8133  8134  8135  8136  8137  8138 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8139  8140  8141  8142  8143  8144  8145  8146  8147  8148  8149  8150  8151 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8152  8153  8154  8155  8156  8157  8158  8159  8160  8161  8162  8163  8164 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8165  8166  8167  8168  8169  8170  8171  8172  8173  8174  8175  8176  8177 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 8178  8179  8180  8181  8182  8183  8184  8185  8186  8187  8188  8189  8190 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8191  8192  8193  8194  8195  8196  8197  8198  8199  8200  8201  8202  8203 \n    1     1     1     1     1     1     1     1     3     1     1     1     1 \n 8204  8205  8206  8207  8208  8209  8210  8211  8212  8213  8214  8215  8216 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8217  8218  8219  8220  8221  8222  8223  8224  8225  8226  8227  8228  8229 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 8230  8231  8232  8233  8234  8235  8236  8237  8238  8239  8240  8241  8242 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8243  8244  8245  8246  8247  8248  8249  8250  8251  8252  8253  8254  8255 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 8256  8257  8258  8259  8260  8261  8262  8263  8264  8265  8266  8267  8268 \n    1     1     1     1     1     1     1     1     3     1     1     1     1 \n 8269  8270  8271  8272  8273  8274  8275  8276  8277  8278  8279  8280  8281 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 8282  8283  8284  8285  8286  8287  8288  8289  8290  8291  8292  8293  8294 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8295  8296  8297  8298  8299  8300  8301  8302  8303  8304  8305  8306  8307 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 8308  8309  8310  8311  8312  8313  8314  8315  8316  8317  8318  8319  8320 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 8321  8322  8323  8324  8325  8326  8327  8328  8329  8330  8331  8332  8333 \n    1     1     1     4     1     1     1     1     1     1     1     1     1 \n 8334  8335  8336  8337  8338  8339  8340  8341  8342  8343  8344  8345  8346 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8347  8348  8349  8350  8351  8352  8353  8354  8355  8356  8357  8358  8359 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8360  8361  8362  8363  8364  8365  8366  8367  8368  8369  8370  8371  8372 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8373  8374  8375  8376  8377  8378  8379  8380  8381  8382  8383  8384  8385 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8386  8387  8388  8389  8390  8391  8392  8393  8394  8395  8396  8397  8398 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8399  8400  8401  8402  8403  8404  8405  8406  8407  8408  8409  8410  8411 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 8412  8413  8414  8415  8416  8417  8418  8419  8420  8421  8422  8423  8424 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8425  8426  8427  8428  8429  8430  8431  8432  8433  8434  8435  8436  8437 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 8438  8439  8440  8441  8442  8443  8444  8445  8446  8447  8448  8449  8450 \n    1     1     1     1     1     3     1     1     1     1     1     1     1 \n 8451  8452  8453  8454  8455  8456  8457  8458  8459  8460  8461  8462  8463 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8464  8465  8466  8467  8468  8469  8470  8471  8472  8473  8474  8475  8476 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 8477  8478  8479  8480  8481  8482  8483  8484  8485  8486  8487  8488  8489 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 8490  8491  8492  8493  8494  8495  8496  8497  8498  8499  8500  8501  8502 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8503  8504  8505  8506  8507  8508  8509  8510  8511  8512  8513  8514  8515 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8516  8517  8518  8519  8520  8521  8522  8523  8524  8525  8526  8527  8528 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8529  8530  8531  8532  8533  8534  8535  8536  8537  8538  8539  8540  8541 \n    1     1     1     1     1     1     1     1     1     1     1     1     5 \n 8542  8543  8544  8545  8546  8547  8548  8549  8550  8551  8552  8553  8554 \n    3     1     1     1     1     1     1     7     1     1     1     1     1 \n 8555  8556  8557  8558  8559  8560  8561  8562  8563  8564  8565  8566  8567 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8568  8569  8570  8571  8572  8573  8574  8575  8576  8577  8578  8579  8580 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 8581  8582  8583  8584  8585  8586  8587  8588  8589  8590  8591  8592  8593 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8594  8595  8596  8597  8598  8599  8600  8601  8602  8603  8604  8605  8606 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8607  8608  8609  8610  8611  8612  8613  8614  8615  8616  8617  8618  8619 \n    1     1     1     1     1     1     1     1     1     1     1     3     1 \n 8620  8621  8622  8623  8624  8625  8626  8627  8628  8629  8630  8631  8632 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8633  8634  8635  8636  8637  8638  8639  8640  8641  8642  8643  8644  8645 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 8646  8647  8648  8649  8650  8651  8652  8653  8654  8655  8656  8657  8658 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8659  8660  8661  8662  8663  8664  8665  8666  8667  8668  8669  8670  8671 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8672  8673  8674  8675  8676  8677  8678  8679  8680  8681  8682  8683  8684 \n    1     1     1     1     1     1     3     1     1     1     1     1     1 \n 8685  8686  8687  8688  8689  8690  8691  8692  8693  8694  8695  8696  8697 \n    1     1     1     1     1     1     1     1     1     1     1     1     3 \n 8698  8699  8700  8701  8702  8703  8704  8705  8706  8707  8708  8709  8710 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 8711  8712  8713  8714  8715  8716  8717  8718  8719  8720  8721  8722  8723 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 8724  8725  8726  8727  8728  8729  8730  8731  8732  8733  8734  8735  8736 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8737  8738  8739  8740  8741  8742  8743  8744  8745  8746  8747  8748  8749 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8750  8751  8752  8753  8754  8755  8756  8757  8758  8759  8760  8761  8762 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8763  8764  8765  8766  8767  8768  8769  8770  8771  8772  8773  8774  8775 \n    1     1     1     1     1     1     1     1     1     4     1     1     1 \n 8776  8777  8778  8779  8780  8781  8782  8783  8784  8785  8786  8787  8788 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8789  8790  8791  8792  8793  8794  8795  8796  8797  8798  8799  8800  8801 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8802  8803  8804  8805  8806  8807  8808  8809  8810  8811  8812  8813  8814 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8815  8816  8817  8818  8819  8820  8821  8822  8823  8824  8825  8826  8827 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8828  8829  8830  8831  8832  8833  8834  8835  8836  8837  8838  8839  8840 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8841  8842  8843  8844  8845  8846  8847  8848  8849  8850  8851  8852  8853 \n    1     1     1     1     2     1     1     1     2     1     1     1     1 \n 8854  8855  8856  8857  8858  8859  8860  8861  8862  8863  8864  8865  8866 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8867  8868  8869  8870  8871  8872  8873  8874  8875  8876  8877  8878  8879 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8880  8881  8882  8883  8884  8885  8886  8887  8888  8889  8890  8891  8892 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8893  8894  8895  8896  8897  8898  8899  8900  8901  8902  8903  8904  8905 \n    4     1     1     1     1     1     1     1     1     1     1     1     1 \n 8906  8907  8908  8909  8910  8911  8912  8913  8914  8915  8916  8917  8918 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8919  8920  8921  8922  8923  8924  8925  8926  8927  8928  8929  8930  8931 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8932  8933  8934  8935  8936  8937  8938  8939  8940  8941  8942  8943  8944 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8945  8946  8947  8948  8949  8950  8951  8952  8953  8954  8955  8956  8957 \n    1     1     4     1     2     1     1     1     1     1     1     1     1 \n 8958  8959  8960  8961  8962  8963  8964  8965  8966  8967  8968  8969  8970 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 8971  8972  8973  8974  8975  8976  8977  8978  8979  8980  8981  8982  8983 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8984  8985  8986  8987  8988  8989  8990  8991  8992  8993  8994  8995  8996 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 8997  8998  8999  9000  9001  9002  9003  9004  9005  9006  9007  9008  9009 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 9010  9011  9012  9013  9014  9015  9016  9017  9018  9019  9020  9021  9022 \n    1     1     1     1     3     1     1     1     1     1     1     1     2 \n 9023  9024  9025  9026  9027  9028  9029  9030  9031  9032  9033  9034  9035 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9036  9037  9038  9039  9040  9041  9042  9043  9044  9045  9046  9047  9048 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9049  9050  9051  9052  9053  9054  9055  9056  9057  9058  9059  9060  9061 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9062  9063  9064  9065  9066  9067  9068  9069  9070  9071  9072  9073  9074 \n    1     4     1     1     1     1     1     1     1     1     1     1     1 \n 9075  9076  9077  9078  9079  9080  9081  9082  9083  9084  9085  9086  9087 \n    1     1     1     1     3     1     1     1     1     1     1     1     1 \n 9088  9089  9090  9091  9092  9093  9094  9095  9096  9097  9098  9099  9100 \n    1     1     1     1     1     1     1     1     4     1     1     1     1 \n 9101  9102  9103  9104  9105  9106  9107  9108  9109  9110  9111  9112  9113 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9114  9115  9116  9117  9118  9119  9120  9121  9122  9123  9124  9125  9126 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9127  9128  9129  9130  9131  9132  9133  9134  9135  9136  9137  9138  9139 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9140  9141  9142  9143  9144  9145  9146  9147  9148  9149  9150  9151  9152 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9153  9154  9155  9156  9157  9158  9159  9160  9161  9162  9163  9164  9165 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 9166  9167  9168  9169  9170  9171  9172  9173  9174  9175  9176  9177  9178 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9179  9180  9181  9182  9183  9184  9185  9186  9187  9188  9189  9190  9191 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9192  9193  9194  9195  9196  9197  9198  9199  9200  9201  9202  9203  9204 \n    1     1     1     1     1     1     7     1     1     1     1     1     1 \n 9205  9206  9207  9208  9209  9210  9211  9212  9213  9214  9215  9216  9217 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9218  9219  9220  9221  9222  9223  9224  9225  9226  9227  9228  9229  9230 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 9231  9232  9233  9234  9235  9236  9237  9238  9239  9240  9241  9242  9243 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9244  9245  9246  9247  9248  9249  9250  9251  9252  9253  9254  9255  9256 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9257  9258  9259  9260  9261  9262  9263  9264  9265  9266  9267  9268  9269 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9270  9271  9272  9273  9274  9275  9276  9277  9278  9279  9280  9281  9282 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9283  9284  9285  9286  9287  9288  9289  9290  9291  9292  9293  9294  9295 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 9296  9297  9298  9299  9300  9301  9302  9303  9304  9305  9306  9307  9308 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 9309  9310  9311  9312  9313  9314  9315  9316  9317  9318  9319  9320  9321 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9322  9323  9324  9325  9326  9327  9328  9329  9330  9331  9332  9333  9334 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9335  9336  9337  9338  9339  9340  9341  9342  9343  9344  9345  9346  9347 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9348  9349  9350  9351  9352  9353  9354  9355  9356  9357  9358  9359  9360 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9361  9362  9363  9364  9365  9366  9367  9368  9369  9370  9371  9372  9373 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9374  9375  9376  9377  9378  9379  9380  9381  9382  9383  9384  9385  9386 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 9387  9388  9389  9390  9391  9392  9393  9394  9395  9396  9397  9398  9399 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 9400  9401  9402  9403  9404  9405  9406  9407  9408  9409  9410  9411  9412 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9413  9414  9415  9416  9417  9418  9419  9420  9421  9422  9423  9424  9425 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9426  9427  9428  9429  9430  9431  9432  9433  9434  9435  9436  9437  9438 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9439  9440  9441  9442  9443  9444  9445  9446  9447  9448  9449  9450  9451 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9452  9453  9454  9455  9456  9457  9458  9459  9460  9461  9462  9463  9464 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9465  9466  9467  9468  9469  9470  9471  9472  9473  9474  9475  9476  9477 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9478  9479  9480  9481  9482  9483  9484  9485  9486  9487  9488  9489  9490 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9491  9492  9493  9494  9495  9496  9497  9498  9499  9500  9501  9502  9503 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 9504  9505  9506  9507  9508  9509  9510  9511  9512  9513  9514  9515  9516 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9517  9518  9519  9520  9521  9522  9523  9524  9525  9526  9527  9528  9529 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9530  9531  9532  9533  9534  9535  9536  9537  9538  9539  9540  9541  9542 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9543  9544  9545  9546  9547  9548  9549  9550  9551  9552  9553  9554  9555 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 9556  9557  9558  9559  9560  9561  9562  9563  9564  9565  9566  9567  9568 \n    1     1     2     2     1     1     1     1     1     1     1     1     1 \n 9569  9570  9571  9572  9573  9574  9575  9576  9577  9578  9579  9580  9581 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9582  9583  9584  9585  9586  9587  9588  9589  9590  9591  9592  9593  9594 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 9595  9596  9597  9598  9599  9600  9601  9602  9603  9604  9605  9606  9607 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 9608  9609  9610  9611  9612  9613  9614  9615  9616  9617  9618  9619  9620 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9621  9622  9623  9624  9625  9626  9627  9628  9629  9630  9631  9632  9633 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 9634  9635  9636  9637  9638  9639  9640  9641  9642  9643  9644  9645  9646 \n    1     1     1     1     1     1     1     1     1     1     3     1     1 \n 9647  9648  9649  9650  9651  9652  9653  9654  9655  9656  9657  9658  9659 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 9660  9661  9662  9663  9664  9665  9666  9667  9668  9669  9670  9671  9672 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9673  9674  9675  9676  9677  9678  9679  9680  9681  9682  9683  9684  9685 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9686  9687  9688  9689  9690  9691  9692  9693  9694  9695  9696  9697  9698 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9699  9700  9701  9702  9703  9704  9705  9706  9707  9708  9709  9710  9711 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9712  9713  9714  9715  9716  9717  9718  9719  9720  9721  9722  9723  9724 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 9725  9726  9727  9728  9729  9730  9731  9732  9733  9734  9735  9736  9737 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9738  9739  9740  9741  9742  9743  9744  9745  9746  9747  9748  9749  9750 \n    1     1     1     1     1     1     1     1     2     2     1     1     1 \n 9751  9752  9753  9754  9755  9756  9757  9758  9759  9760  9761  9762  9763 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9764  9765  9766  9767  9768  9769  9770  9771  9772  9773  9774  9775  9776 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9777  9778  9779  9780  9781  9782  9783  9784  9785  9786  9787  9788  9789 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9790  9791  9792  9793  9794  9795  9796  9797  9798  9799  9800  9801  9802 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9803  9804  9805  9806  9807  9808  9809  9810  9811  9812  9813  9814  9815 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9816  9817  9818  9819  9820  9821  9822  9823  9824  9825  9826  9827  9828 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9829  9830  9831  9832  9833  9834  9835  9836  9837  9838  9839  9840  9841 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 9842  9843  9844  9845  9846  9847  9848  9849  9850  9851  9852  9853  9854 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9855  9856  9857  9858  9859  9860  9861  9862  9863  9864  9865  9866  9867 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 9868  9869  9870  9871  9872  9873  9874  9875  9876  9877  9878  9879  9880 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9881  9882  9883  9884  9885  9886  9887  9888  9889  9890  9891  9892  9893 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 9894  9895  9896  9897  9898  9899  9900  9901  9902  9903  9904  9905  9906 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 9907  9908  9909  9910  9911  9912  9913  9914  9915  9916  9917  9918  9919 \n    1     1     2     1     1     1     1     1     2     1     1     1     1 \n 9920  9921  9922  9923  9924  9925  9926  9927  9928  9929  9930  9931  9932 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 9933  9934  9935  9936  9937  9938  9939  9940  9941  9942  9943  9944  9945 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9946  9947  9948  9949  9950  9951  9952  9953  9954  9955  9956  9957  9958 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9959  9960  9961  9962  9963  9964  9965  9966  9967  9968  9969  9970  9971 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9972  9973  9974  9975  9976  9977  9978  9979  9980  9981  9982  9983  9984 \n    1     2     1     1     1     1     2     1     1     1     1     1     1 \n 9985  9986  9987  9988  9989  9990  9991  9992  9993  9994  9995  9996  9997 \n    1     1     1     2     1     1     1     1     1     1     2     1     1 \n 9998  9999 10000 10001 10002 10003 10004 10005 10006 10007 10008 10009 10010 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10011 10012 10013 10014 10015 10016 10017 10018 10019 10020 10021 10022 10023 \n    1     1     1     1     1     1     1     3     1     1     1     1     1 \n10024 10025 10026 10027 10028 10029 10030 10031 10032 10033 10034 10035 10036 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10037 10038 10039 10040 10041 10042 10043 10044 10045 10046 10047 10048 10049 \n    3     1     1     1     1     1     1     1     1     1     1     1     1 \n10050 10051 10052 10053 10054 10055 10056 10057 10058 10059 10060 10061 10062 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10063 10064 10065 10066 10067 10068 10069 10070 10071 10072 10073 10074 10075 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10076 10077 10078 10079 10080 10081 10082 10083 10084 10085 10086 10087 10088 \n    1     1     2     1     1     1     1     1     2     1     1     1     1 \n10089 10090 10091 10092 10093 10094 10095 10096 10097 10098 10099 10100 10101 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10102 10103 10104 10105 10106 10107 10108 10109 10110 10111 10112 10113 10114 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10115 10116 10117 10118 10119 10120 10121 10122 10123 10124 10125 10126 10127 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10128 10129 10130 10131 10132 10133 10134 10135 10136 10137 10138 10139 10140 \n    1     1     1     1     1     1     1     1     1     1     3     1     1 \n10141 10142 10143 10144 10145 10146 10147 10148 10149 10150 10151 10152 10153 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10154 10155 10156 10157 10158 10159 10160 10161 10162 10163 10164 10165 10166 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10167 10168 10169 10170 10171 10172 10173 10174 10175 10176 10177 10178 10179 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10180 10181 10182 10183 10184 10185 10186 10187 10188 10189 10190 10191 10192 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10193 10194 10195 10196 10197 10198 10199 10200 10201 10202 10203 10204 10205 \n    1     2     1     1     6     1     1     1     1     1     1     1     1 \n10206 10207 10208 10209 10210 10211 10212 10213 10214 10215 10216 10217 10218 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10219 10220 10221 10222 10223 10224 10225 10226 10227 10228 10229 10230 10231 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10232 10233 10234 10235 10236 10237 10238 10239 10240 10241 10242 10243 10244 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10245 10246 10247 10248 10249 10250 10251 10252 10253 10254 10255 10256 10257 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n10258 10259 10260 10261 10262 10263 10264 10265 10266 10267 10268 10269 10270 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10271 10272 10273 10274 10275 10276 10277 10278 10279 10280 10281 10282 10283 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10284 10285 10286 10287 10288 10289 10290 10291 10292 10293 10294 10295 10296 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10297 10298 10299 10300 10301 10302 10303 10304 10305 10306 10307 10308 10309 \n    2     1     1     1     1     2     1     1     1     1     1     1     1 \n10310 10311 10312 10313 10314 10315 10316 10317 10318 10319 10320 10321 10322 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10323 10324 10325 10326 10327 10328 10329 10330 10331 10332 10333 10334 10335 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10336 10337 10338 10339 10340 10341 10342 10343 10344 10345 10346 10347 10348 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n10349 10350 10351 10352 10353 10354 10355 10356 10357 10358 10359 10360 10361 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10362 10363 10364 10365 10366 10367 10368 10369 10370 10371 10372 10373 10374 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10375 10376 10377 10378 10379 10380 10381 10382 10383 10384 10385 10386 10387 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10388 10389 10390 10391 10392 10393 10394 10395 10396 10397 10398 10399 10400 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10401 10402 10403 10404 10405 10406 10407 10408 10409 10410 10411 10412 10413 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10414 10415 10416 10417 10418 10419 10420 10421 10422 10423 10424 10425 10426 \n    1     1     1     1     1     1     1     1     1     1     1     5     1 \n10427 10428 10429 10430 10431 10432 10433 10434 10435 10436 10437 10438 10439 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10440 10441 10442 10443 10444 10445 10446 10447 10448 10449 10450 10451 10452 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10453 10454 10455 10456 10457 10458 10459 10460 10461 10462 10463 10464 10465 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10466 10467 10468 10469 10470 10471 10472 10473 10474 10475 10476 10477 10478 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n10479 10480 10481 10482 10483 10484 10485 10486 10487 10488 10489 10490 10491 \n    1     1     1     1     1     1     2     1     1     1     1     1     2 \n10492 10493 10494 10495 10496 10497 10498 10499 10500 10501 10502 10503 10504 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n10505 10506 10507 10508 10509 10510 10511 10512 10513 10514 10515 10516 10517 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10518 10519 10520 10521 10522 10523 10524 10525 10526 10527 10528 10529 10530 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10531 10532 10533 10534 10535 10536 10537 10538 10539 10540 10541 10542 10543 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10544 10545 10546 10547 10548 10549 10550 10551 10552 10553 10554 10555 10556 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n10557 10558 10559 10560 10561 10562 10563 10564 10565 10566 10567 10568 10569 \n    2     1     1     1     1     1     1     1     1     1     1     2     1 \n10570 10571 10572 10573 10574 10575 10576 10577 10578 10579 10580 10581 10582 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10583 10584 10585 10586 10587 10588 10589 10590 10591 10592 10593 10594 10595 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n10596 10597 10598 10599 10600 10601 10602 10603 10604 10605 10606 10607 10608 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10609 10610 10611 10612 10613 10614 10615 10616 10617 10618 10619 10620 10621 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10622 10623 10624 10625 10626 10627 10628 10629 10630 10631 10632 10633 10634 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10635 10636 10637 10638 10639 10640 10641 10642 10643 10644 10645 10646 10647 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10648 10649 10650 10651 10652 10653 10654 10655 10656 10657 10658 10659 10660 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10661 10662 10663 10664 10665 10666 10667 10668 10669 10670 10671 10672 10673 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n10674 10675 10676 10677 10678 10679 10680 10681 10682 10683 10684 10685 10686 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10687 10688 10689 10690 10691 10692 10693 10694 10695 10696 10697 10698 10699 \n    1     1     1     2     1     4     1     1     1     1     1     1     1 \n10700 10701 10702 10703 10704 10705 10706 10707 10708 10709 10710 10711 10712 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10713 10714 10715 10716 10717 10718 10719 10720 10721 10722 10723 10724 10725 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10726 10727 10728 10729 10730 10731 10732 10733 10734 10735 10736 10737 10738 \n    1     1     5     1     1     1     1     1     1     1     1     1     1 \n10739 10740 10741 10742 10743 10744 10745 10746 10747 10748 10749 10750 10751 \n    3     1     3     1     1     1     2     2     1     1     2     1     1 \n10752 10753 10754 10755 10756 10757 10758 10759 10760 10761 10762 10763 10764 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10765 10766 10767 10768 10769 10770 10771 10772 10773 10774 10775 10776 10777 \n    1     1     1     1     1     2     1     1     6     1     1     1     1 \n10778 10779 10780 10781 10782 10783 10784 10785 10786 10787 10788 10789 10790 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10791 10792 10793 10794 10795 10796 10797 10798 10799 10800 10801 10802 10803 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10804 10805 10806 10807 10808 10809 10810 10811 10812 10813 10814 10815 10816 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10817 10818 10819 10820 10821 10822 10823 10824 10825 10826 10827 10828 10829 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10830 10831 10832 10833 10834 10835 10836 10837 10838 10839 10840 10841 10842 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10843 10844 10845 10846 10847 10848 10849 10850 10851 10852 10853 10854 10855 \n    1     1     7     1     1     1     1     1     1     1     1     1     1 \n10856 10857 10858 10859 10860 10861 10862 10863 10864 10865 10866 10867 10868 \n    1     1     1     1     2     1     1     1     1     1     1     2     1 \n10869 10870 10871 10872 10873 10874 10875 10876 10877 10878 10879 10880 10881 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n10882 10883 10884 10885 10886 10887 10888 10889 10890 10891 10892 10893 10894 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n10895 10896 10897 10898 10899 10900 10901 10902 10903 10904 10905 10906 10907 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10908 10909 10910 10911 10912 10913 10914 10915 10916 10917 10918 10919 10920 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10921 10922 10923 10924 10925 10926 10927 10928 10929 10930 10931 10932 10933 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10934 10935 10936 10937 10938 10939 10940 10941 10942 10943 10944 10945 10946 \n    1     1     1     1     1     1     1     2     1     1     2     1     1 \n10947 10948 10949 10950 10951 10952 10953 10954 10955 10956 10957 10958 10959 \n    1     1     1     1     1     1     1     1     1     6     1     1     1 \n10960 10961 10962 10963 10964 10965 10966 10967 10968 10969 10970 10971 10972 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10973 10974 10975 10976 10977 10978 10979 10980 10981 10982 10983 10984 10985 \n    1     1     1     1     1     1     1     3     1     1     1     1     1 \n10986 10987 10988 10989 10990 10991 10992 10993 10994 10995 10996 10997 10998 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10999 11000 11001 11002 11003 11004 11005 11006 11007 11008 11009 11010 11011 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11012 11013 11014 11015 11016 11017 11018 11019 11020 11021 11022 11023 11024 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11025 11026 11027 11028 11029 11030 11031 11032 11033 11034 11035 11036 11037 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11038 11039 11040 11041 11042 11043 11044 11045 11046 11047 11048 11049 11050 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11051 11052 11053 11054 11055 11056 11057 11058 11059 11060 11061 11062 11063 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11064 11065 11066 11067 11068 11069 11070 11071 11072 11073 11074 11075 11076 \n    1     1     1     1     1     1     1     1     2     1     1     2     1 \n11077 11078 11079 11080 11081 11082 11083 11084 11085 11086 11087 11088 11089 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11090 11091 11092 11093 11094 11095 11096 11097 11098 11099 11100 11101 11102 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n11103 11104 11105 11106 11107 11108 11109 11110 11111 11112 11113 11114 11115 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11116 11117 11118 11119 11120 11121 11122 11123 11124 11125 11126 11127 11128 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11129 11130 11131 11132 11133 11134 11135 11136 11137 11138 11139 11140 11141 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11142 11143 11144 11145 11146 11147 11148 11149 11150 11151 11152 11153 11154 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11155 11156 11157 11158 11159 11160 11161 11162 11163 11164 11165 11166 11167 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11168 11169 11170 11171 11172 11173 11174 11175 11176 11177 11178 11179 11180 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11181 11182 11183 11184 11185 11186 11187 11188 11189 11190 11191 11192 11193 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11194 11195 11196 11197 11198 11199 11200 11201 11202 11203 11204 11205 11206 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11207 11208 11209 11210 11211 11212 11213 11214 11215 11216 11217 11218 11219 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11220 11221 11222 11223 11224 11225 11226 11227 11228 11229 11230 11231 11232 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11233 11234 11235 11236 11237 11238 11239 11240 11241 11242 11243 11244 11245 \n    1     1     1     1     1     1     2     1     1     1     1     2     1 \n11246 11247 11248 11249 11250 11251 11252 11253 11254 11255 11256 11257 11258 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11259 11260 11261 11262 11263 11264 11265 11266 11267 11268 11269 11270 11271 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11272 11273 11274 11275 11276 11277 11278 11279 11280 11281 11282 11283 11284 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11285 11286 11287 11288 11289 11290 11291 11292 11293 11294 11295 11296 11297 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11298 11299 11300 11301 11302 11303 11304 11305 11306 11307 11308 11309 11310 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11311 11312 11313 11314 11315 11316 11317 11318 11319 11320 11321 11322 11323 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n11324 11325 11326 11327 11328 11329 11330 11331 11332 11333 11334 11335 11336 \n    5     1     1     1     1     1     1     1     1     1     1     1     1 \n11337 11338 11339 11340 11341 11342 11343 11344 11345 11346 11347 11348 11349 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11350 11351 11352 11353 11354 11355 11356 11357 11358 11359 11360 11361 11362 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11363 11364 11365 11366 11367 11368 11369 11370 11371 11372 11373 11374 11375 \n    1     1     1     1     1     3     1     1     1     1     1     1     1 \n11376 11377 11378 11379 11380 11381 11382 11383 11384 11385 11386 11387 11388 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11389 11390 11391 11392 11393 11394 11395 11396 11397 11398 11399 11400 11401 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11402 11403 11404 11405 11406 11407 11408 11409 11410 11411 11412 11413 11414 \n    1     2     1     1     1     1     1     1     1     1     1     1     2 \n11415 11416 11417 11418 11419 11420 11421 11422 11423 11424 11425 11426 11427 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11428 11429 11430 11431 11432 11433 11434 11435 11436 11437 11438 11439 11440 \n    1     1     1     1     3     1     1     1     1     1     1     1     1 \n11441 11442 11443 11444 11445 11446 11447 11448 11449 11450 11451 11452 11453 \n    1     1     1     1     1     1     1     1     1     1     1     2     2 \n11454 11455 11456 11457 11458 11459 11460 11461 11462 11463 11464 11465 11466 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n11467 11468 11469 11470 11471 11472 11473 11474 11475 11476 11477 11478 11479 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n11480 11481 11482 11483 11484 11485 11486 11487 11488 11489 11490 11491 11492 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11493 11494 11495 11496 11497 11498 11499 11500 11501 11502 11503 11504 11505 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11506 11507 11508 11509 11510 11511 11512 11513 11514 11515 11516 11517 11518 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11519 11520 11521 11522 11523 11524 11525 11526 11527 11528 11529 11530 11531 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n11532 11533 11534 11535 11536 11537 11538 11539 11540 11541 11542 11543 11544 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11545 11546 11547 11548 11549 11550 11551 11552 11553 11554 11555 11556 11557 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11558 11559 11560 11561 11562 11563 11564 11565 11566 11567 11568 11569 11570 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n11571 11572 11573 11574 11575 11576 11577 11578 11579 11580 11581 11582 11583 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11584 11585 11586 11587 11588 11589 11590 11591 11592 11593 11594 11595 11596 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n11597 11598 11599 11600 11601 11602 11603 11604 11605 11606 11607 11608 11609 \n    1     1     1     1     1     1     1     2     1     1     1     1     3 \n11610 11611 11612 11613 11614 11615 11616 11617 11618 11619 11620 11621 11622 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11623 11624 11625 11626 11627 11628 11629 11630 11631 11632 11633 11634 11635 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11636 11637 11638 11639 11640 11641 11642 11643 11644 11645 11646 11647 11648 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11649 11650 11651 11652 11653 11654 11655 11656 11657 11658 11659 11660 11661 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11662 11663 11664 11665 11666 11667 11668 11669 11670 11671 11672 11673 11674 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11675 11676 11677 11678 11679 11680 11681 11682 11683 11684 11685 11686 11687 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11688 11689 11690 11691 11692 11693 11694 11695 11696 11697 11698 11699 11700 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11701 11702 11703 11704 11705 11706 11707 11708 11709 11710 11711 11712 11713 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11714 11715 11716 11717 11718 11719 11720 11721 11722 11723 11724 11725 11726 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11727 11728 11729 11730 11731 11732 11733 11734 11735 11736 11737 11738 11739 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11740 11741 11742 11743 11744 11745 11746 11747 11748 11749 11750 11751 11752 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11753 11754 11755 11756 11757 11758 11759 11760 11761 11762 11763 11764 11765 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n11766 11767 11768 11769 11770 11771 11772 11773 11774 11775 11776 11777 11778 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n11779 11780 11781 11782 11783 11784 11785 11786 11787 11788 11789 11790 11791 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11792 11793 11794 11795 11796 11797 11798 11799 11800 11801 11802 11803 11804 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11805 11806 11807 11808 11809 11810 11811 11812 11813 11814 11815 11816 11817 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n11818 11819 11820 11821 11822 11823 11824 11825 11826 11827 11828 11829 11830 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11831 11832 11833 11834 11835 11836 11837 11838 11839 11840 11841 11842 11843 \n    3     1     1     1     1     1     1     1     1     1     1     1     1 \n11844 11845 11846 11847 11848 11849 11850 11851 11852 11853 11854 11855 11856 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n11857 11858 11859 11860 11861 11862 11863 11864 11865 11866 11867 11868 11869 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11870 11871 11872 11873 11874 11875 11876 11877 11878 11879 11880 11881 11882 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n11883 11884 11885 11886 11887 11888 11889 11890 11891 11892 11893 11894 11895 \n    2     1     2     1     1     1     1     1     1     1     1     1     1 \n11896 11897 11898 11899 11900 11901 11902 11903 11904 11905 11906 11907 11908 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11909 11910 11911 11912 11913 11914 11915 11916 11917 11918 11919 11920 11921 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11922 11923 11924 11925 11926 11927 11928 11929 11930 11931 11932 11933 11934 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n11935 11936 11937 11938 11939 11940 11941 11942 11943 11944 11945 11946 11947 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11948 11949 11950 11951 11952 11953 11954 11955 11956 11957 11958 11959 11960 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11961 11962 11963 11964 11965 11966 11967 11968 11969 11970 11971 11972 11973 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11974 11975 11976 11977 11978 11979 11980 11981 11982 11983 11984 11985 11986 \n    1     1     1     1     1     1     1     1     1     1     1     5     1 \n11987 11988 11989 11990 11991 11992 11993 11994 11995 11996 11997 11998 11999 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12000 12001 12002 12003 12004 12005 12006 12007 12008 12009 12010 12011 12012 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12013 12014 12015 12016 12017 12018 12019 12020 12021 12022 12023 12024 12025 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12026 12027 12028 12029 12030 12031 12032 12033 12034 12035 12036 12037 12038 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12039 12040 12041 12042 12043 12044 12045 12046 12047 12048 12049 12050 12051 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12052 12053 12054 12055 12056 12057 12058 12059 12060 12061 12062 12063 12064 \n    1     1     1     7     1     1     2     1     1     1     2     1     1 \n12065 12066 12067 12068 12069 12070 12071 12072 12073 12074 12075 12076 12077 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12078 12079 12080 12081 12082 12083 12084 12085 12086 12087 12088 12089 12090 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12091 12092 12093 12094 12095 12096 12097 12098 12099 12100 12101 12102 12103 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n12104 12105 12106 12107 12108 12109 12110 12111 12112 12113 12114 12115 12116 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12117 12118 12119 12120 12121 12122 12123 12124 12125 12126 12127 12128 12129 \n    1     1     1     1     1     1     1     1     3     1     1     1     1 \n12130 12131 12132 12133 12134 12135 12136 12137 12138 12139 12140 12141 12142 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n12143 12144 12145 12146 12147 12148 12149 12150 12151 12152 12153 12154 12155 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12156 12157 12158 12159 12160 12161 12162 12163 12164 12165 12166 12167 12168 \n    1     1     1     1     1     1     1     7     1     1     1     1     1 \n12169 12170 12171 12172 12173 12174 12175 12176 12177 12178 12179 12180 12181 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12182 12183 12184 12185 12186 12187 12188 12189 12190 12191 12192 12193 12194 \n    1     1     1     1     1     1     2     1     2     1     1     1     1 \n12195 12196 12197 12198 12199 12200 12201 12202 12203 12204 12205 12206 12207 \n    1     1     1     1     1     5     1     1     1     1     1     1     1 \n12208 12209 12210 12211 12212 12213 12214 12215 12216 12217 12218 12219 12220 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12221 12222 12223 12224 12225 12226 12227 12228 12229 12230 12231 12232 12233 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12234 12235 12236 12237 12238 12239 12240 12241 12242 12243 12244 12245 12246 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12247 12248 12249 12250 12251 12252 12253 12254 12255 12256 12257 12258 12259 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12260 12261 12262 12263 12264 12265 12266 12267 12268 12269 12270 12271 12272 \n    1     1     3     1     1     1     1     1     1     1     1     1     3 \n12273 12274 12275 12276 12277 12278 12279 12280 12281 12282 12283 12284 12285 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12286 12287 12288 12289 12290 12291 12292 12293 12294 12295 12296 12297 12298 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12299 12300 12301 12302 12303 12304 12305 12306 12307 12308 12309 12310 12311 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n12312 12313 12314 12315 12316 12317 12318 12319 12320 12321 12322 12323 12324 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12325 12326 12327 12328 12329 12330 12331 12332 12333 12334 12335 12336 12337 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n12338 12339 12340 12341 12342 12343 12344 12345 12346 12347 12348 12349 12350 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12351 12352 12353 12354 12355 12356 12357 12358 12359 12360 12361 12362 12363 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12364 12365 12366 12367 12368 12369 12370 12371 12372 12373 12374 12375 12376 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12377 12378 12379 12380 12381 12382 12383 12384 12385 12386 12387 12388 12389 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12390 12391 12392 12393 12394 12395 12396 12397 12398 12399 12400 12401 12402 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12403 12404 12405 12406 12407 12408 12409 12410 12411 12412 12413 12414 12415 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12416 12417 12418 12419 12420 12421 12422 12423 12424 12425 12426 12427 12428 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n12429 12430 12431 12432 12433 12434 12435 12436 12437 12438 12439 12440 12441 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12442 12443 12444 12445 12446 12447 12448 12449 12450 12451 12452 12453 12454 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12455 12456 12457 12458 12459 12460 12461 12462 12463 12464 12465 12466 12467 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n12468 12469 12470 12471 12472 12473 12474 12475 12476 12477 12478 12479 12480 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12481 12482 12483 12484 12485 12486 12487 12488 12489 12490 12491 12492 12493 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n12494 12495 12496 12497 12498 12499 12500 12501 12502 12503 12504 12505 12506 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12507 12508 12509 12510 12511 12512 12513 12514 12515 12516 12517 12518 12519 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n12520 12521 12522 12523 12524 12525 12526 12527 12528 12529 12530 12531 12532 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12533 12534 12535 12536 12537 12538 12539 12540 12541 12542 12543 12544 12545 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n12546 12547 12548 12549 12550 12551 12552 12553 12554 12555 12556 12557 12558 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12559 12560 12561 12562 12563 12564 12565 12566 12567 12568 12569 12570 12571 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12572 12573 12574 12575 12576 12577 12578 12579 12580 12581 12582 12583 12584 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12585 12586 12587 12588 12589 12590 12591 12592 12593 12594 12595 12596 12597 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12598 12599 12600 12601 12602 12603 12604 12605 12606 12607 12608 12609 12610 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12611 12612 12613 12614 12615 12616 12617 12618 12619 12620 12621 12622 12623 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12624 12625 12626 12627 12628 12629 12630 12631 12632 12633 12634 12635 12636 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12637 12638 12639 12640 12641 12642 12643 12644 12645 12646 12647 12648 12649 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12650 12651 12652 12653 12654 12655 12656 12657 12658 12659 12660 12661 12662 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12663 12664 12665 12666 12667 12668 12669 12670 12671 12672 12673 12674 12675 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12676 12677 12678 12679 12680 12681 12682 12683 12684 12685 12686 12687 12688 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n12689 12690 12691 12692 12693 12694 12695 12696 12697 12698 12699 12700 12701 \n    1     1     2     1     1     1     1     1     1     1     1     1     2 \n12702 12703 12704 12705 12706 12707 12708 12709 12710 12711 12712 12713 12714 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12715 12716 12717 12718 12719 12720 12721 12722 12723 12724 12725 12726 12727 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12728 12729 12730 12731 12732 12733 12734 12735 12736 12737 12738 12739 12740 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12741 12742 12743 12744 12745 12746 12747 12748 12749 12750 12751 12752 12753 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12754 12755 12756 12757 12758 12759 12760 12761 12762 12763 12764 12765 12766 \n    1     1     1     2     1     1     1     1     1     1     1     2     1 \n12767 12768 12769 12770 12771 12772 12773 12774 12775 12776 12777 12778 12779 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12780 12781 12782 12783 12784 12785 12786 12787 12788 12789 12790 12791 12792 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12793 12794 12795 12796 12797 12798 12799 12800 12801 12802 12803 12804 12805 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12806 12807 12808 12809 12810 12811 12812 12813 12814 12815 12816 12817 12818 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n12819 12820 12821 12822 12823 12824 12825 12826 12827 12828 12829 12830 12831 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12832 12833 12834 12835 12836 12837 12838 12839 12840 12841 12842 12843 12844 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12845 12846 12847 12848 12849 12850 12851 12852 12853 12854 12855 12856 12857 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12858 12859 12860 12861 12862 12863 12864 12865 12866 12867 12868 12869 12870 \n    1     1     1     1     1     2     2     1     1     1     1     1     1 \n12871 12872 12873 12874 12875 12876 12877 12878 12879 12880 12881 12882 12883 \n    1     1     2     1     1     1     1     1     2     1     1     1     1 \n12884 12885 12886 12887 12888 12889 12890 12891 12892 12893 12894 12895 12896 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n12897 12898 12899 12900 12901 12902 12903 12904 12905 12906 12907 12908 12909 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n12910 12911 12912 12913 12914 12915 12916 12917 12918 12919 12920 12921 12922 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12923 12924 12925 12926 12927 12928 12929 12930 12931 12932 12933 12934 12935 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12936 12937 12938 12939 12940 12941 12942 12943 12944 12945 12946 12947 12948 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12949 12950 12951 12952 12953 12954 12955 12956 12957 12958 12959 12960 12961 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12962 12963 12964 12965 12966 12967 12968 12969 12970 12971 12972 12973 12974 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n12975 12976 12977 12978 12979 12980 12981 12982 12983 12984 12985 \n    1     1     1     1     1     1     1     1     1     1     1 \n\n\n\nsum(multiplicity(roadacc_time_ppp) &gt; 1)\n\n[1] 395\n\n\nThe output shows that there are 395 duplicated point events.\nWe will resolve this using jittering, which will add a small pertubation to the duplicate points so that they do not occupy the exact same space:\n\nroadacc_time_ppp_jit &lt;- rjitter(roadacc_time_ppp,\n                               retry = TRUE,\n                               nsim = 99,\n                               drop = TRUE)\n\nWe then check for duplicated points to determine if the jittering was carried out successfully:\n\nany(duplicated(roadacc_time_ppp_jit))\n\n[1] FALSE\n\n\nThe output indicates that there are no duplicated points.\n\n\n\nNext, we combine the ppp object and the owin object:\n\nroadacc_time_owin_ppp &lt;- roadacc_time_ppp[provinceowin]\n\n\nsummary(roadacc_time_owin_ppp)\n\nMarked planar point pattern:  12985 points\nAverage intensity 1.693182e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    7.00   13.00   12.33   18.00   23.00 \n\nWindow: polygonal boundary\nsingle connected closed polygon with 13779 vertices\nenclosing rectangle: [587893.5, 712440.5] x [1484413.7, 1579076.3] units\n                     (124500 x 94660 units)\nWindow area = 7668990000 square units\nFraction of frame area: 0.65\n\n\nWe plot the roadacc_time_owin_ppp object to examine the correctness of the output object:\n\nplot(roadacc_time_owin_ppp)\n\n\n\n\n\n\n\n\n\n\n\nWe first use BOOT.spattemp() to determine the spatial bandwidth and the scalar temporal bandwidth for use in subsequent calculation.\n\nset.seed(1234) \nBOOT.spattemp(roadacc_time_owin_ppp)\n\n\nNext, we use spattemp.density() of sparr package to compute the STKDE, with h and lambda values derived in previous step.\n\nst_kde_time &lt;- spattemp.density(roadacc_time_owin_ppp,\n                               h = 2400 ,\n                               lambda = 2)\nsummary(st_kde_time)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 2400 (spatial)\n  lambda = 2 (temporal)\n\nNo. of observations\n  12985 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [587893.5, 712440.5] x [1484414, 1579076]\n\nTemporal bound\n  [0, 23]\n\nEvaluation\n  128 x 128 x 24 trivariate lattice\n  Density range: [8.479442e-20, 8.976694e-11]\n\n\n\n\n\nBased on the EDA carried out in Part 1A, we note that the distribution of road accidents across time can be divided into four different time segments:\n\n12am to 6am: Midnight to dawn\n7am to 11am: Morning\n12pm to 5pm: Midday\n6pm to 11pm: Evening to night\n\n\n\n\n\n\nCode\nmidnighttodawn &lt;- c(0,1,2,3,4,5,6)\n\npar(mfrow=c(2,3))  \n\nfor(i in midnighttodawn){\n  plot(st_kde_time, i,\n       override.par=FALSE,\n       fix.range=TRUE,\n       main=paste(\"KDE at time\",i))\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nmorning &lt;- c(7,8,9,10,11)\n\npar(mfrow=c(2,3))  \n\nfor(i in morning){\n  plot(st_kde_time, i,\n       override.par=FALSE,\n       fix.range=TRUE,\n       main=paste(\"KDE at time\",i))\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nmidday &lt;- c(12,13,14,15,16,17)\n\npar(mfrow=c(2,3))  \n\nfor(i in midday){\n  plot(st_kde_time, i,\n       override.par=FALSE,\n       fix.range=TRUE,\n       main=paste(\"KDE at time\",i))\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\neveningtonight &lt;- c(18,19,20,21,22,23)\n\npar(mfrow=c(2,3))  \n\nfor(i in eveningtonight){\n  plot(st_kde_time, i,\n       override.par=FALSE,\n       fix.range=TRUE,\n       main=paste(\"KDE at time\",i))\n  }\n\n\n\n\n\n\n\n\n\nAs seen from the plots above, the occurrence of road accidents is more intense during the hours from 7am to 11pm as compared to midnight to dawn hours from 12am to 6am. The hotspots between 7am to 11pm are at similar locations, concentrated along the edges of Bangkok.\n\n\n\nWe will determine the bandwidth selection for spatio-temporal NKDE in both space and time via likelihood cross validation.\nWe first need to ensure that the incident_datetime field in roadacc data is of numeric field:\n\nroadacc$Time &lt;- as.POSIXct(roadacc$incident_datetime,\n                           format = \"%Y/%m/%d\")\nstart &lt;- as.POSIXct(\"2019/01/01\",format = \"%Y/%m/%d\")\nroadacc$Time &lt;- difftime(roadacc$Time,start,units=\"days\")\nroadacc$Time &lt;- as.numeric(roadacc$Time)\n\nWe trial and error with a few values and also reference values used in similar parameters for 9.1.1 Determining appropriate bandwidth i.e. agg = 15:\n\ncv_scores &lt;- bw_tnkde_cv_likelihood_calc(bws_net=seq(50,2500,50),\n                                         bws_time=seq(5,200,5),\n                                         lines = roadsbkk,\n                                         events = roadacc,\n                                         time_field = \"incident_datetime\",\n                                         w = rep(1, nrow(roadacc)),\n                                         kernel_name = \"quartic\",\n                                         method = \"discontinuous\",\n                                         diggle_correction = FALSE,\n                                         max_depth = 5,\n                                         digits = 1,\n                                         tol = 1,\n                                         agg = 15,\n                                         sparse=TRUE,\n                                         grid_shape=c(5,5),\n                                         sub_sample=1,\n                                         verbose = FALSE,\n                                         check = TRUE)\n\nWe save the cv scores generated as a new rds file to avoid re-running the code above:\n\n\nCode\nwrite_rds(cv_scores,\"data/rds/stkde_cvscores.rds\")\n\n\n\nstkde_cvscores &lt;- read_rds(\"data/rds/stkde_cvscores.rds\")\n\n\nknitr::kable(stkde_cvscores)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5\n10\n15\n20\n25\n30\n35\n40\n45\n50\n55\n60\n65\n70\n75\n80\n85\n90\n95\n100\n105\n110\n115\n120\n125\n130\n135\n140\n145\n150\n155\n160\n165\n170\n175\n180\n185\n190\n195\n200\n\n\n\n\n50\n-708.0747\n-708.0754\n-708.0758\n-708.0760\n-708.0762\n-708.0764\n-708.0765\n-708.0767\n-708.0768\n-708.0769\n-708.0770\n-708.0770\n-708.0771\n-708.0772\n-708.0772\n-708.0773\n-708.0774\n-708.0774\n-708.0775\n-708.0775\n-708.0776\n-708.0776\n-708.0776\n-708.0777\n-708.0777\n-708.0778\n-708.0778\n-708.0778\n-708.0779\n-708.0779\n-708.0779\n-708.0779\n-708.0780\n-708.0780\n-708.0780\n-708.0781\n-707.8681\n-707.8678\n-707.8676\n-707.8675\n\n\n100\n-707.6474\n-707.6489\n-707.6498\n-707.6504\n-707.6509\n-707.6513\n-707.6516\n-707.6519\n-707.6522\n-707.6524\n-707.6526\n-707.6528\n-707.6529\n-707.6531\n-707.6533\n-707.6534\n-707.6535\n-707.6536\n-707.6538\n-707.6539\n-707.6540\n-707.6541\n-707.6542\n-707.6543\n-707.6544\n-707.6544\n-707.6545\n-707.6546\n-707.6547\n-707.6548\n-707.6548\n-707.6549\n-707.6550\n-707.6550\n-707.6551\n-707.6551\n-707.3407\n-707.3402\n-707.3399\n-707.3398\n\n\n150\n-707.2217\n-707.2241\n-707.2255\n-707.2264\n-707.2272\n-707.2278\n-707.2283\n-707.2288\n-707.2292\n-707.2295\n-707.2299\n-707.2302\n-707.1249\n-707.1250\n-707.1252\n-707.1254\n-707.1256\n-707.1257\n-707.1259\n-707.1261\n-707.1263\n-707.1264\n-707.1266\n-707.1267\n-707.1269\n-707.1270\n-707.1271\n-707.1273\n-707.1274\n-707.1275\n-707.1276\n-707.1277\n-707.1278\n-707.1280\n-707.1281\n-707.1282\n-706.8134\n-706.8129\n-706.8127\n-706.8125\n\n\n200\n-706.9557\n-706.9585\n-706.9602\n-706.9614\n-706.9623\n-706.9631\n-706.9637\n-706.9643\n-706.9648\n-706.9652\n-706.9656\n-706.9660\n-706.8608\n-706.8610\n-706.8612\n-706.8614\n-706.8616\n-706.8619\n-706.8621\n-706.8623\n-706.8625\n-706.8627\n-706.8629\n-706.8631\n-706.8632\n-706.8634\n-706.8636\n-706.8637\n-706.8639\n-706.8640\n-706.8642\n-706.8643\n-706.8644\n-706.8646\n-706.8647\n-706.8648\n-706.5502\n-706.5497\n-706.5495\n-706.5494\n\n\n250\n-706.8484\n-706.8515\n-706.8533\n-706.8546\n-706.8556\n-706.8564\n-706.8571\n-706.8577\n-706.8582\n-706.8587\n-706.8591\n-706.8595\n-706.7544\n-706.7545\n-706.7548\n-706.7550\n-706.7553\n-706.7555\n-706.7557\n-706.7560\n-706.7562\n-706.7564\n-706.7566\n-706.7568\n-706.7570\n-706.7572\n-706.7573\n-706.7575\n-706.7577\n-706.7578\n-706.7580\n-706.7581\n-706.7583\n-706.7584\n-706.7585\n-706.7587\n-706.4442\n-706.4438\n-706.4436\n-706.4435\n\n\n300\n-706.7952\n-706.7984\n-706.8003\n-706.8016\n-706.8026\n-706.8035\n-706.8042\n-706.8048\n-706.8054\n-706.8058\n-706.8063\n-706.8067\n-706.7016\n-706.7018\n-706.7021\n-706.7023\n-706.7026\n-706.7028\n-706.7031\n-706.7033\n-706.7035\n-706.7037\n-706.7040\n-706.7042\n-706.7043\n-706.7045\n-706.7047\n-706.7049\n-706.7051\n-706.7052\n-706.7054\n-706.7055\n-706.7057\n-706.7058\n-706.7060\n-706.7061\n-706.3918\n-706.3914\n-706.3912\n-706.3911\n\n\n350\n-706.5831\n-706.5867\n-706.5889\n-706.5904\n-706.5915\n-706.5925\n-706.5933\n-706.5940\n-706.5946\n-706.5952\n-706.5957\n-706.5961\n-706.3862\n-706.3862\n-706.3865\n-706.3867\n-706.3870\n-706.3873\n-706.3875\n-706.3878\n-706.3880\n-706.3883\n-706.3885\n-706.3888\n-706.3890\n-706.3892\n-706.3894\n-706.3896\n-706.3898\n-706.3900\n-706.3902\n-706.3904\n-706.3905\n-706.3907\n-706.3909\n-706.3910\n-706.0769\n-706.0765\n-706.0763\n-706.0762\n\n\n400\n-706.3707\n-706.3747\n-706.3771\n-706.3788\n-706.3801\n-706.3811\n-706.3820\n-706.3828\n-706.3835\n-706.3841\n-706.3847\n-706.3852\n-706.1752\n-706.1753\n-706.1756\n-706.1759\n-706.1762\n-706.1765\n-706.1768\n-706.1771\n-706.1774\n-706.1777\n-706.1779\n-706.1782\n-706.1784\n-706.1787\n-706.1789\n-706.1791\n-706.1793\n-706.1796\n-706.1798\n-706.1800\n-706.1801\n-706.1803\n-706.1805\n-706.1807\n-705.8667\n-705.8663\n-705.8661\n-705.8661\n\n\n450\n-706.3705\n-706.3745\n-706.3769\n-706.3786\n-706.3799\n-706.3810\n-706.3819\n-706.3826\n-706.3833\n-706.3839\n-706.3845\n-706.3850\n-705.9655\n-705.9653\n-705.9654\n-705.9657\n-705.9659\n-705.9662\n-705.9665\n-705.9668\n-705.9671\n-705.9673\n-705.9676\n-705.9679\n-705.9681\n-705.9684\n-705.9686\n-705.9689\n-705.9691\n-705.9693\n-705.9695\n-705.9697\n-705.9699\n-705.9701\n-705.9703\n-705.9705\n-705.6566\n-705.6562\n-705.6561\n-705.6561\n\n\n500\n-706.3706\n-706.3747\n-706.3771\n-706.3788\n-706.3801\n-706.3811\n-706.3820\n-706.3828\n-706.3835\n-706.3841\n-706.3847\n-706.3852\n-705.9653\n-705.9651\n-705.9652\n-705.9655\n-705.9657\n-705.9660\n-705.9663\n-705.9666\n-705.9668\n-705.9671\n-705.9674\n-705.9677\n-705.9679\n-705.9682\n-705.9684\n-705.9686\n-705.9689\n-705.9691\n-705.9693\n-705.9695\n-705.9697\n-705.9699\n-705.9701\n-705.9703\n-705.6565\n-705.6561\n-705.6560\n-705.6560\n\n\n550\n-706.2648\n-706.2691\n-706.2716\n-706.2734\n-706.2748\n-706.2759\n-706.2768\n-706.2777\n-706.2784\n-706.2790\n-706.2796\n-706.2802\n-705.8602\n-705.8600\n-705.8602\n-705.8604\n-705.8607\n-705.8610\n-705.8613\n-705.8616\n-705.8619\n-705.8622\n-705.8625\n-705.8627\n-705.8630\n-705.8633\n-705.8635\n-705.8638\n-705.8640\n-705.8642\n-705.8645\n-705.8647\n-705.8649\n-705.8651\n-705.8653\n-705.8655\n-705.5518\n-705.5514\n-705.5513\n-705.5513\n\n\n600\n-706.2650\n-706.2693\n-706.2718\n-706.2735\n-706.2749\n-706.2760\n-706.2770\n-706.2778\n-706.2785\n-706.2792\n-706.2798\n-706.2803\n-705.8603\n-705.8601\n-705.8603\n-705.8605\n-705.8608\n-705.8611\n-705.8614\n-705.8617\n-705.8620\n-705.8623\n-705.8626\n-705.8628\n-705.8631\n-705.8634\n-705.8636\n-705.8639\n-705.8641\n-705.8644\n-705.8646\n-705.8648\n-705.8650\n-705.8652\n-705.8654\n-705.8656\n-705.5520\n-705.5516\n-705.5515\n-705.5515\n\n\n650\n-706.1600\n-706.1645\n-706.1671\n-706.1690\n-706.1704\n-706.1716\n-706.1726\n-706.1734\n-706.1742\n-706.1749\n-706.1755\n-706.1761\n-705.7561\n-705.7560\n-705.7561\n-705.7564\n-705.7567\n-705.7570\n-705.7573\n-705.7576\n-705.7579\n-705.7582\n-705.7585\n-705.7588\n-705.7591\n-705.7594\n-705.7597\n-705.7599\n-705.7602\n-705.7604\n-705.7607\n-705.7609\n-705.7611\n-705.7613\n-705.7615\n-705.7617\n-705.4482\n-705.4478\n-705.4477\n-705.4477\n\n\n700\n-706.0536\n-706.0583\n-706.0610\n-706.0630\n-706.0645\n-706.0657\n-706.0668\n-706.0677\n-706.0685\n-706.0692\n-706.0698\n-706.0704\n-705.6505\n-705.6504\n-705.6506\n-705.6508\n-705.6512\n-705.6515\n-705.6518\n-705.6522\n-705.6525\n-705.6528\n-705.6531\n-705.6534\n-705.6537\n-705.6540\n-705.6543\n-705.6546\n-705.6548\n-705.6551\n-705.6553\n-705.6556\n-705.6558\n-705.6560\n-705.6563\n-705.6565\n-705.3430\n-705.3426\n-705.3425\n-705.3425\n\n\n750\n-706.0536\n-706.0583\n-706.0610\n-706.0630\n-706.0645\n-706.0657\n-706.0668\n-706.0677\n-706.0685\n-706.0692\n-706.0698\n-706.0704\n-705.6505\n-705.6504\n-705.6506\n-705.6509\n-705.6512\n-705.6515\n-705.6518\n-705.6522\n-705.6525\n-705.6528\n-705.6531\n-705.6534\n-705.6537\n-705.6540\n-705.6543\n-705.6546\n-705.6548\n-705.6551\n-705.6553\n-705.6556\n-705.6558\n-705.6560\n-705.6563\n-705.6565\n-705.3431\n-705.3427\n-705.3426\n-705.3426\n\n\n800\n-706.0537\n-706.0584\n-706.0612\n-706.0631\n-706.0646\n-706.0659\n-706.0669\n-706.0678\n-706.0686\n-706.0693\n-706.0700\n-706.0706\n-705.6507\n-705.6506\n-705.6508\n-705.6510\n-705.6514\n-705.6517\n-705.6520\n-705.6524\n-705.6527\n-705.6530\n-705.6533\n-705.6536\n-705.6539\n-705.6542\n-705.6545\n-705.6548\n-705.6550\n-705.6553\n-705.6555\n-705.6558\n-705.6560\n-705.6562\n-705.6565\n-705.6567\n-705.3433\n-705.3430\n-705.3428\n-705.3428\n\n\n850\n-706.0539\n-706.0586\n-706.0614\n-706.0633\n-706.0648\n-706.0661\n-706.0671\n-706.0680\n-706.0688\n-706.0695\n-706.0702\n-706.0708\n-705.6510\n-705.6508\n-705.6510\n-705.6513\n-705.6516\n-705.6519\n-705.6523\n-705.6526\n-705.6529\n-705.6533\n-705.6536\n-705.6539\n-705.6542\n-705.6545\n-705.6547\n-705.6550\n-705.6553\n-705.6555\n-705.6558\n-705.6560\n-705.6563\n-705.6565\n-705.6567\n-705.6569\n-705.3436\n-705.3433\n-705.3431\n-705.3431\n\n\n900\n-706.0542\n-706.0589\n-706.0616\n-706.0636\n-706.0651\n-706.0663\n-706.0674\n-706.0683\n-706.0691\n-706.0698\n-706.0704\n-706.0710\n-705.6513\n-705.6511\n-705.6513\n-705.6516\n-705.6519\n-705.6522\n-705.6526\n-705.6529\n-705.6532\n-705.6535\n-705.6539\n-705.6542\n-705.6545\n-705.6547\n-705.6550\n-705.6553\n-705.6556\n-705.6558\n-705.6561\n-705.6563\n-705.6565\n-705.6568\n-705.6570\n-705.6572\n-705.3440\n-705.3436\n-705.3435\n-705.3435\n\n\n950\n-706.0544\n-706.0591\n-706.0619\n-706.0638\n-706.0653\n-706.0666\n-706.0676\n-706.0685\n-706.0693\n-706.0700\n-706.0707\n-706.0713\n-705.6515\n-705.6514\n-705.6516\n-705.6519\n-705.6522\n-705.6525\n-705.6529\n-705.6532\n-705.6535\n-705.6538\n-705.6542\n-705.6545\n-705.6548\n-705.6550\n-705.6553\n-705.6556\n-705.6559\n-705.6561\n-705.6564\n-705.6566\n-705.6568\n-705.6571\n-705.6573\n-705.6575\n-705.3443\n-705.3439\n-705.3438\n-705.3438\n\n\n1000\n-706.0547\n-706.0594\n-706.0621\n-706.0641\n-706.0656\n-706.0668\n-706.0679\n-706.0688\n-706.0696\n-706.0703\n-706.0709\n-706.0715\n-705.6518\n-705.6517\n-705.6519\n-705.6522\n-705.6525\n-705.6528\n-705.6532\n-705.6535\n-705.6538\n-705.6541\n-705.6545\n-705.6548\n-705.6551\n-705.6553\n-705.6556\n-705.6559\n-705.6562\n-705.6564\n-705.6567\n-705.6569\n-705.6571\n-705.6574\n-705.6576\n-705.6578\n-705.3447\n-705.3443\n-705.3442\n-705.3442\n\n\n1050\n-706.0549\n-706.0596\n-706.0624\n-706.0643\n-706.0658\n-706.0671\n-706.0681\n-706.0690\n-706.0698\n-706.0705\n-706.0712\n-706.0718\n-705.6521\n-705.6520\n-705.6522\n-705.6525\n-705.6528\n-705.6531\n-705.6535\n-705.6538\n-705.6541\n-705.6544\n-705.6548\n-705.6551\n-705.6554\n-705.6556\n-705.6559\n-705.6562\n-705.6564\n-705.6567\n-705.6570\n-705.6572\n-705.6574\n-705.6577\n-705.6579\n-705.6581\n-705.3450\n-705.3446\n-705.3445\n-705.3445\n\n\n1100\n-705.9498\n-705.9547\n-705.9576\n-705.9596\n-705.9612\n-705.9625\n-705.9636\n-705.9646\n-705.9654\n-705.9661\n-705.9668\n-705.9674\n-705.5479\n-705.5478\n-705.5480\n-705.5483\n-705.5486\n-705.5490\n-705.5493\n-705.5497\n-705.5500\n-705.5503\n-705.5507\n-705.5510\n-705.5513\n-705.5516\n-705.5519\n-705.5522\n-705.5524\n-705.5527\n-705.5530\n-705.5532\n-705.5534\n-705.5537\n-705.5539\n-705.5541\n-705.2411\n-705.2407\n-705.2406\n-705.2406\n\n\n1150\n-705.9497\n-705.9546\n-705.9575\n-705.9595\n-705.9611\n-705.9624\n-705.9635\n-705.9644\n-705.9652\n-705.9660\n-705.9667\n-705.9673\n-705.5478\n-705.5477\n-705.5479\n-705.5482\n-705.5485\n-705.5488\n-705.5492\n-705.5495\n-705.5499\n-705.5502\n-705.5506\n-705.5509\n-705.5512\n-705.5515\n-705.5518\n-705.5520\n-705.5523\n-705.5526\n-705.5528\n-705.5531\n-705.5533\n-705.5536\n-705.5538\n-705.5540\n-705.2410\n-705.2407\n-705.2406\n-705.2406\n\n\n1200\n-705.9498\n-705.9547\n-705.9576\n-705.9596\n-705.9612\n-705.9625\n-705.9636\n-705.9645\n-705.9653\n-705.9661\n-705.9668\n-705.9674\n-705.5479\n-705.5478\n-705.5480\n-705.5483\n-705.5486\n-705.5490\n-705.5493\n-705.5497\n-705.5500\n-705.5504\n-705.5507\n-705.5510\n-705.5513\n-705.5516\n-705.5519\n-705.5522\n-705.5525\n-705.5527\n-705.5530\n-705.5532\n-705.5535\n-705.5537\n-705.5540\n-705.5542\n-705.2412\n-705.2408\n-705.2407\n-705.2407\n\n\n1250\n-705.9499\n-705.9548\n-705.9577\n-705.9597\n-705.9613\n-705.9626\n-705.9637\n-705.9647\n-705.9655\n-705.9662\n-705.9669\n-705.9675\n-705.5481\n-705.5480\n-705.5482\n-705.5485\n-705.5488\n-705.5492\n-705.5495\n-705.5499\n-705.5502\n-705.5506\n-705.5509\n-705.5512\n-705.5515\n-705.5518\n-705.5521\n-705.5524\n-705.5527\n-705.5529\n-705.5532\n-705.5534\n-705.5537\n-705.5539\n-705.5542\n-705.5544\n-705.2415\n-705.2411\n-705.2410\n-705.2410\n\n\n1300\n-705.9501\n-705.9550\n-705.9579\n-705.9599\n-705.9615\n-705.9628\n-705.9639\n-705.9648\n-705.9657\n-705.9664\n-705.9671\n-705.9677\n-705.5483\n-705.5482\n-705.5484\n-705.5487\n-705.5491\n-705.5494\n-705.5498\n-705.5501\n-705.5505\n-705.5508\n-705.5511\n-705.5514\n-705.5517\n-705.5520\n-705.5523\n-705.5526\n-705.5529\n-705.5531\n-705.5534\n-705.5537\n-705.5539\n-705.5541\n-705.5544\n-705.5546\n-705.2417\n-705.2413\n-705.2412\n-705.2412\n\n\n1350\n-705.9503\n-705.9552\n-705.9581\n-705.9601\n-705.9617\n-705.9630\n-705.9641\n-705.9650\n-705.9659\n-705.9666\n-705.9673\n-705.9679\n-705.5486\n-705.5485\n-705.5487\n-705.5490\n-705.5493\n-705.5496\n-705.5500\n-705.5503\n-705.5507\n-705.5510\n-705.5513\n-705.5517\n-705.5520\n-705.5523\n-705.5526\n-705.5528\n-705.5531\n-705.5534\n-705.5536\n-705.5539\n-705.5541\n-705.5544\n-705.5546\n-705.5548\n-705.2420\n-705.2416\n-705.2415\n-705.2415\n\n\n1400\n-705.9505\n-705.9554\n-705.9583\n-705.9603\n-705.9619\n-705.9632\n-705.9643\n-705.9652\n-705.9661\n-705.9668\n-705.9675\n-705.9681\n-705.5488\n-705.5487\n-705.5489\n-705.5492\n-705.5495\n-705.5499\n-705.5502\n-705.5506\n-705.5509\n-705.5513\n-705.5516\n-705.5519\n-705.5522\n-705.5525\n-705.5528\n-705.5531\n-705.5533\n-705.5536\n-705.5539\n-705.5541\n-705.5544\n-705.5546\n-705.5548\n-705.5551\n-705.2422\n-705.2419\n-705.2418\n-705.2418\n\n\n1450\n-705.9507\n-705.9556\n-705.9585\n-705.9605\n-705.9621\n-705.9634\n-705.9645\n-705.9654\n-705.9662\n-705.9670\n-705.9677\n-705.9683\n-705.5490\n-705.5489\n-705.5491\n-705.5494\n-705.5498\n-705.5501\n-705.5505\n-705.5508\n-705.5511\n-705.5515\n-705.5518\n-705.5521\n-705.5524\n-705.5527\n-705.5530\n-705.5533\n-705.5536\n-705.5538\n-705.5541\n-705.5544\n-705.5546\n-705.5548\n-705.5551\n-705.5553\n-705.2425\n-705.2421\n-705.2420\n-705.2420\n\n\n1500\n-705.9509\n-705.9558\n-705.9587\n-705.9607\n-705.9623\n-705.9636\n-705.9647\n-705.9656\n-705.9664\n-705.9672\n-705.9679\n-705.9685\n-705.5493\n-705.5492\n-705.5494\n-705.5497\n-705.5500\n-705.5503\n-705.5507\n-705.5510\n-705.5514\n-705.5517\n-705.5520\n-705.5524\n-705.5527\n-705.5530\n-705.5533\n-705.5535\n-705.5538\n-705.5541\n-705.5543\n-705.5546\n-705.5548\n-705.5551\n-705.5553\n-705.5555\n-705.2428\n-705.2424\n-705.2423\n-705.2423\n\n\n1550\n-705.9511\n-705.9560\n-705.9589\n-705.9609\n-705.9625\n-705.9638\n-705.9649\n-705.9658\n-705.9666\n-705.9674\n-705.9681\n-705.9687\n-705.5495\n-705.5494\n-705.5496\n-705.5499\n-705.5502\n-705.5506\n-705.5509\n-705.5513\n-705.5516\n-705.5519\n-705.5523\n-705.5526\n-705.5529\n-705.5532\n-705.5535\n-705.5538\n-705.5540\n-705.5543\n-705.5546\n-705.5548\n-705.5551\n-705.5553\n-705.5555\n-705.5558\n-705.2430\n-705.2427\n-705.2426\n-705.2425\n\n\n1600\n-705.9513\n-705.9562\n-705.9590\n-705.9611\n-705.9627\n-705.9640\n-705.9650\n-705.9660\n-705.9668\n-705.9676\n-705.9682\n-705.9689\n-705.5497\n-705.5496\n-705.5498\n-705.5501\n-705.5504\n-705.5508\n-705.5511\n-705.5515\n-705.5518\n-705.5522\n-705.5525\n-705.5528\n-705.5531\n-705.5534\n-705.5537\n-705.5540\n-705.5543\n-705.5545\n-705.5548\n-705.5550\n-705.5553\n-705.5555\n-705.5558\n-705.5560\n-705.2433\n-705.2429\n-705.2428\n-705.2428\n\n\n1650\n-705.8464\n-705.8516\n-705.8546\n-705.8567\n-705.8583\n-705.8597\n-705.8608\n-705.8618\n-705.8627\n-705.8635\n-705.8642\n-705.8648\n-705.4457\n-705.4456\n-705.4458\n-705.4462\n-705.4465\n-705.4469\n-705.4473\n-705.4476\n-705.4480\n-705.4483\n-705.4487\n-705.4490\n-705.4493\n-705.4496\n-705.4499\n-705.4502\n-705.4505\n-705.4508\n-705.4511\n-705.4513\n-705.4516\n-705.4518\n-705.4521\n-705.4523\n-705.1396\n-705.1393\n-705.1392\n-705.1392\n\n\n1700\n-705.7410\n-705.7464\n-705.7495\n-705.7517\n-705.7534\n-705.7548\n-705.7560\n-705.7570\n-705.7579\n-705.7587\n-705.7595\n-705.7602\n-705.3411\n-705.3411\n-705.3413\n-705.3416\n-705.3420\n-705.3424\n-705.3428\n-705.3432\n-705.3435\n-705.3439\n-705.3443\n-705.3446\n-705.3449\n-705.3453\n-705.3456\n-705.3459\n-705.3462\n-705.3465\n-705.3467\n-705.3470\n-705.3473\n-705.3475\n-705.3478\n-705.3480\n-705.0354\n-705.0350\n-705.0349\n-705.0350\n\n\n1750\n-705.7409\n-705.7462\n-705.7494\n-705.7516\n-705.7533\n-705.7547\n-705.7559\n-705.7569\n-705.7578\n-705.7586\n-705.7594\n-705.7600\n-705.3410\n-705.3410\n-705.3412\n-705.3415\n-705.3419\n-705.3423\n-705.3427\n-705.3431\n-705.3434\n-705.3438\n-705.3442\n-705.3445\n-705.3448\n-705.3452\n-705.3455\n-705.3458\n-705.3461\n-705.3464\n-705.3466\n-705.3469\n-705.3472\n-705.3474\n-705.3477\n-705.3479\n-705.0353\n-705.0350\n-705.0349\n-705.0349\n\n\n1800\n-705.7409\n-705.7462\n-705.7494\n-705.7516\n-705.7533\n-705.7547\n-705.7559\n-705.7569\n-705.7578\n-705.7586\n-705.7594\n-705.7600\n-705.3411\n-705.3410\n-705.3412\n-705.3416\n-705.3420\n-705.3423\n-705.3427\n-705.3431\n-705.3435\n-705.3438\n-705.3442\n-705.3445\n-705.3449\n-705.3452\n-705.3455\n-705.3458\n-705.3461\n-705.3464\n-705.3467\n-705.3469\n-705.3472\n-705.3475\n-705.3477\n-705.3480\n-705.0354\n-705.0350\n-705.0349\n-705.0350\n\n\n1850\n-705.7410\n-705.7463\n-705.7494\n-705.7516\n-705.7533\n-705.7547\n-705.7559\n-705.7570\n-705.7579\n-705.7587\n-705.7594\n-705.7601\n-705.3412\n-705.3411\n-705.3413\n-705.3417\n-705.3420\n-705.3424\n-705.3428\n-705.3432\n-705.3436\n-705.3439\n-705.3443\n-705.3446\n-705.2415\n-705.2416\n-705.2419\n-705.2421\n-705.2423\n-705.2426\n-705.2429\n-705.2431\n-705.2434\n-705.2436\n-705.2439\n-705.2441\n-704.9315\n-704.9312\n-704.9311\n-704.9311\n\n\n1900\n-705.7410\n-705.7464\n-705.7495\n-705.7517\n-705.7534\n-705.7548\n-705.7560\n-705.7571\n-705.7580\n-705.7588\n-705.7595\n-705.7602\n-705.3413\n-705.3412\n-705.3415\n-705.3418\n-705.3422\n-705.3425\n-705.3429\n-705.3433\n-705.3437\n-705.3440\n-705.3444\n-705.3447\n-705.2413\n-705.2415\n-705.2417\n-705.2419\n-705.2422\n-705.2425\n-705.2427\n-705.2430\n-705.2432\n-705.2435\n-705.2437\n-705.2439\n-704.9314\n-704.9311\n-704.9310\n-704.9310\n\n\n1950\n-705.7411\n-705.7465\n-705.7496\n-705.7518\n-705.7535\n-705.7549\n-705.7561\n-705.7572\n-705.7581\n-705.7589\n-705.7596\n-705.7603\n-705.3414\n-705.3413\n-705.3416\n-705.3419\n-705.3423\n-705.3427\n-705.3431\n-705.3434\n-705.3438\n-705.3442\n-705.3445\n-705.3449\n-705.2414\n-705.2415\n-705.2417\n-705.2420\n-705.2422\n-705.2425\n-705.2427\n-705.2430\n-705.2432\n-705.2435\n-705.2437\n-705.2439\n-704.9314\n-704.9311\n-704.9310\n-704.9310\n\n\n2000\n-705.7413\n-705.7466\n-705.7497\n-705.7519\n-705.7536\n-705.7551\n-705.7562\n-705.7573\n-705.7582\n-705.7590\n-705.7597\n-705.7604\n-705.3415\n-705.3415\n-705.3417\n-705.3421\n-705.3424\n-705.3428\n-705.3432\n-705.3436\n-705.3440\n-705.3443\n-705.3447\n-705.3450\n-705.2414\n-705.2416\n-705.2418\n-705.2420\n-705.2423\n-705.2425\n-705.2428\n-705.2430\n-705.2433\n-705.2435\n-705.2438\n-705.2440\n-704.9315\n-704.9312\n-704.9311\n-704.9311\n\n\n2050\n-705.7414\n-705.7467\n-705.7498\n-705.7520\n-705.7538\n-705.7552\n-705.7564\n-705.7574\n-705.7583\n-705.7591\n-705.7598\n-705.7605\n-705.3417\n-705.3416\n-705.3419\n-705.3422\n-705.3426\n-705.3430\n-705.3434\n-705.3437\n-705.3441\n-705.3445\n-705.3448\n-705.3452\n-705.2415\n-705.2416\n-705.2419\n-705.2421\n-705.2424\n-705.2426\n-705.2429\n-705.2431\n-705.2434\n-705.2436\n-705.2439\n-705.2441\n-704.8284\n-704.8279\n-704.8277\n-704.8276\n\n\n2100\n-705.7415\n-705.7468\n-705.7500\n-705.7522\n-705.7539\n-705.7553\n-705.7565\n-705.7575\n-705.7584\n-705.7592\n-705.7600\n-705.7606\n-705.3418\n-705.3418\n-705.3420\n-705.3424\n-705.3427\n-705.3431\n-705.3435\n-705.3439\n-705.3443\n-705.3446\n-705.3450\n-705.3453\n-705.2416\n-705.2418\n-705.2420\n-705.2422\n-705.2425\n-705.2427\n-705.2430\n-705.2432\n-705.2435\n-705.2437\n-705.2440\n-705.2442\n-704.8283\n-704.8278\n-704.8276\n-704.8275\n\n\n2150\n-705.7416\n-705.7470\n-705.7501\n-705.7523\n-705.7540\n-705.7554\n-705.7566\n-705.7576\n-705.7585\n-705.7594\n-705.7601\n-705.7608\n-705.3420\n-705.3419\n-705.3422\n-705.3425\n-705.3429\n-705.3433\n-705.3437\n-705.3440\n-705.3444\n-705.3448\n-705.3451\n-705.3455\n-705.2417\n-705.2419\n-705.2421\n-705.2423\n-705.2426\n-705.2429\n-705.2431\n-705.2434\n-705.2436\n-705.2439\n-705.2441\n-705.2443\n-704.8283\n-704.8278\n-704.8276\n-704.8275\n\n\n2200\n-705.7418\n-705.7471\n-705.7502\n-705.7524\n-705.7541\n-705.7556\n-705.7567\n-705.7578\n-705.7587\n-705.7595\n-705.7602\n-705.7609\n-705.3422\n-705.3421\n-705.3423\n-705.3427\n-705.3431\n-705.3434\n-705.3438\n-705.3442\n-705.3446\n-705.3449\n-705.3453\n-705.3456\n-705.2419\n-705.2420\n-705.2422\n-705.2425\n-705.2427\n-705.2430\n-705.2432\n-705.2435\n-705.2437\n-705.2440\n-705.2442\n-705.2445\n-704.8284\n-704.8279\n-704.8277\n-704.8276\n\n\n2250\n-705.7419\n-705.7472\n-705.7503\n-705.7526\n-705.7543\n-705.7557\n-705.7569\n-705.7579\n-705.7588\n-705.7596\n-705.7604\n-705.7610\n-705.3423\n-705.3423\n-705.3425\n-705.3428\n-705.3432\n-705.3436\n-705.3440\n-705.3444\n-705.3447\n-705.3451\n-705.3454\n-705.3458\n-705.2420\n-705.2422\n-705.2424\n-705.2426\n-705.2429\n-705.2431\n-705.2434\n-705.2436\n-705.2439\n-705.2441\n-705.2444\n-705.2446\n-704.8285\n-704.8280\n-704.8278\n-704.8277\n\n\n2300\n-705.7420\n-705.7474\n-705.7505\n-705.7527\n-705.7544\n-705.7558\n-705.7570\n-705.7580\n-705.7589\n-705.7598\n-705.7605\n-705.7612\n-705.3425\n-705.3424\n-705.3427\n-705.3430\n-705.3434\n-705.3437\n-705.3441\n-705.3445\n-705.3449\n-705.3453\n-705.3456\n-705.3460\n-705.2422\n-705.2423\n-705.2425\n-705.2428\n-705.2430\n-705.2433\n-705.2435\n-705.2438\n-705.2440\n-705.2443\n-705.2445\n-705.2447\n-704.8286\n-704.8281\n-704.8279\n-704.8278\n\n\n2350\n-705.7421\n-705.7475\n-705.7506\n-705.7528\n-705.7545\n-705.7559\n-705.7571\n-705.7582\n-705.7591\n-705.7599\n-705.7606\n-705.7613\n-705.3426\n-705.3426\n-705.3428\n-705.3431\n-705.3435\n-705.3439\n-705.3443\n-705.3447\n-705.3450\n-705.3454\n-705.3458\n-705.3461\n-705.2423\n-705.2424\n-705.2426\n-705.2429\n-705.2431\n-705.2434\n-705.2437\n-705.2439\n-705.2442\n-705.2444\n-705.2446\n-705.2449\n-704.8288\n-704.8282\n-704.8280\n-704.8280\n\n\n2400\n-705.7423\n-705.7476\n-705.7507\n-705.7530\n-705.7547\n-705.7561\n-705.7573\n-705.7583\n-705.7592\n-705.7600\n-705.7607\n-705.7614\n-705.3428\n-705.3427\n-705.3430\n-705.3433\n-705.3437\n-705.3441\n-705.3444\n-705.3448\n-705.3452\n-705.3456\n-705.3459\n-705.3463\n-705.2424\n-705.2426\n-705.2428\n-705.2430\n-705.2433\n-705.2435\n-705.2438\n-705.2441\n-705.2443\n-705.2445\n-705.2448\n-705.2450\n-704.8289\n-704.8284\n-704.8282\n-704.8281\n\n\n2450\n-705.7424\n-705.7477\n-705.7509\n-705.7531\n-705.7548\n-705.7562\n-705.7574\n-705.7584\n-705.7593\n-705.7601\n-705.7609\n-705.7615\n-705.3429\n-705.3429\n-705.3431\n-705.3435\n-705.3438\n-705.3442\n-705.3446\n-705.3450\n-705.3454\n-705.3457\n-705.3461\n-705.3464\n-705.2426\n-705.2427\n-705.2429\n-705.2432\n-705.2434\n-705.2437\n-705.2439\n-705.2442\n-705.2444\n-705.2447\n-705.2449\n-705.2452\n-704.8290\n-704.8285\n-704.8283\n-704.8282\n\n\n2500\n-705.7425\n-705.7479\n-705.7510\n-705.7532\n-705.7549\n-705.7563\n-705.7575\n-705.7586\n-705.7595\n-705.7603\n-705.7610\n-705.7617\n-705.3431\n-705.3430\n-705.3433\n-705.3436\n-705.3440\n-705.3444\n-705.3448\n-705.3451\n-705.3455\n-705.3459\n-705.3462\n-705.3466\n-705.2427\n-705.2429\n-705.2431\n-705.2433\n-705.2436\n-705.2438\n-705.2441\n-705.2443\n-705.2446\n-705.2448\n-705.2451\n-705.2453\n-704.8292\n-704.8287\n-704.8285\n-704.8284\n\n\n\n\n\nAccording to the “leave one out cross validation” method, the optimal set of bandwidths seem to be 1700 metres and 195 days. As expected, larger bandwidths are required because the density of the events are spread both in space and time.\n\n# choosing sample in times (every 10 days)\nsample_time &lt;- seq(min(roadacc$Time), max(roadacc$Time), 10)\n\n\n# calculating densities\ntnkde_densities &lt;- tnkde(lines = roadsbkk,\n                   events = roadacc,\n                   time_field = \"Time\",\n                   w = rep(1, nrow(roadacc)), \n                   samples_loc = samples,\n                   samples_time = sample_time, \n                   kernel_name = \"quartic\",\n                   bw_net = 1700, \n                   bw_time = 195,\n                   adaptive = TRUE,\n                   trim_bw_net = 1800,\n                   trim_bw_time = 200,\n                   method = \"discontinuous\",\n                   div = \"bw\",\n                   max_depth = 5,\n                   digits = 1,\n                   tol = 0.01,\n                   agg = 15,\n                   grid_shape = c(5,5), \n                   verbose  = FALSE)\n\nWe save the tnkde densities as a new rds file to avoid re-running the code above:\n\n\nCode\nwrite_rds(tnkde_densities,\"data/rds/tnkde_densities.rds\")\n\n\n\ntnkde_densities &lt;- read_rds(\"data/rds/tnkde_densities.rds\")\n\n\n# creating a color palette for all the densities\nall_densities &lt;- c(tnkde_densities$k)\ncolor_breaks &lt;- classIntervals(all_densities, n = 10, style = \"kmeans\")\n\n\n# generating a map at each sample time\nall_maps &lt;- lapply(1:ncol(tnkde_densities$k), function(i){\n  time &lt;- sample_time[[i]]\n  date &lt;- as.Date(start) + time\n  \n  samples$density &lt;- (tnkde_densities$k)[,i]\n  samples$density &lt;- samples$density*1000\n  map1 &lt;- tm_shape(samples) + \n  tm_dots(col = \"density\", size = 0.01,\n          breaks = color_breaks$brks, palette = viridis(10)) + \n    tm_layout(legend.show=FALSE, main.title = as.character(date), main.title.size = 0.5)\n  return(map1)\n})\n\nWe save all_maps as a new rds file to avoid re-running the code above:\n\n\nCode\nwrite_rds(all_maps,\"data/rds/all_maps.rds\")\n\n\n\nall_maps &lt;- read_rds(\"data/rds/all_maps.rds\")\n\n\n# creating a gif with all the maps\ntmap_animation(all_maps, filename = \"images/animated_map2.gif\", \n               width = 1000, height = 1000, dpi = 300, delay = 50)\n\n\nknitr::include_graphics(\"images/animated_map2.gif\")\n\n\n\n\n\n\n\n\n\n\n\n\nCombining the insights from all analyses carried out in this exercise:\n\n\n\n\n\n\n\n\n\n\n\nS/N\nKey Topic\nGeneral insights from EDA\nSpatial\nSpatio-Temporal Insights\nRecommendations on next steps\n\n\n\n\n1\nLocation\n\nObserve highest concentration of road accidents in Bangkok, followed by Samut Prakan, Pathum Thani, Samut Sakhon, Nakhon Pathom and Nonthaburi\n\nIncreasing trend in Bangkok and Samut Prakan over the years\nSpace for improvement for Pathum Thani, Samut Sakhon and Nonthaburi as they experience fluctuating number of road accidents over the years\nNakhon Pathom can be last priority of focus as the road accidents have decreased over the years\n\nRoad accidents mostly occur on straight road conditions and on roads with no slopes. Wide curve and grade-separated intersection/ramps are also top road descriptions for road accidents.\n\n\nRoad accidents across BMR are not randomly distributed and exhibit clustering\nRoad accidents occur more intensely along the road lines in Bangkok and Samut Prakan\n\nDense occurrence of road accidents within central Bangkok along intricate road networks\n\nOverall, observe denser occurrence of road accidents at intersections of road segments\n\n-\n\nPrioritise road accident prevention efforts on Bangkok and Samut Prakan, followed by Pathum Thani, Samut Sakhon, Nakhon Pathom and finally Nonthaburi\nWithin the provinces, to conduct in-depth study on conditions of straight roads and roads with no slopes, especially at points where such roads meet at intersections. This can be followed by studies on roads with wide curve and grade-separated intersection/ramps.\nPreventive measures can be:\n\nPublic education campaigns that highlight the risks of road accidents even on seemingly safe straight roads, to increase driver’s and pedestrians’ awareness of risks and not to be complacent.\nClearer signs can be placed along straight roads to remind drivers and pedestrians of safe road practices.\nPlace more cameras along these roads to capture errant/risky behaviour and to send warning/enforcement letters to prevent the same driver/pedestrian from making similar/more severe mistakes in future\n\n\n\n\n2\nTime\n\nRoad accidents tend to occur more often near the start and end of the year\n\nIncreasing trend of road accidents in the later months i.e. Oct to Dec, over the years\n\nRoad accidents seem to occur more on Fri and Sat\nRoad accidents seem to occur more often between 7am to 11pm, with the top two timings at 9am and 7pm\n\n-\n\nRoad accidents tend to occur more intensely at the end of the year, with lower occurrences in the middle segment of the year.\n\nThere could be a high overall accident count at the start of the year but the spatial distribution during this period might be more dispersed\nRoad accidents near the end of the year seem to be more concentrated\n\nRoad accidents occur in high accident counts at the start of the weekend\n\nThe spatial distribution of road accidents on Sun and Mon are more concentrated as compared to Fri and Sat\n\nOccurrence of road accidents is more intense during the hours from 7am to 11pm\n\n\nTo focus on preventive efforts in the later months of the year i.e. ramp up public education campaigns, to patrol the roads more often or to set up more traffic control points as compared to the early months of the year\nTo step up road control measures from Fri to Mon\n\nFor Fri and Sat, the spatial distribution of road accidents are more dispersed hence might require more manpower to form a larger patrol group or more traffic check points to monitor traffic and prevent accidents\nFor Sun and Mon, the spatial distribution of road accidents is more concentrated. A study can be carried out to shortlist the hotspots and patrol or traffice control efforts can be more focused on these areas on these two days\n\nAs the peak hours are at 9am and 7pm, Thai government can considering introducing policies to encourage the population to head to work or school at earlier or later timings to stagger traffic and reduce the risks of accidents. For instance, offering discount toll rates or public transport fees at earlier or later offpeak timings to entice population to utilise the transport modes at different timings.\n\n\n\n3\nWeather conditions\n\nRoad accidents most frequently occur during clear weather conditions followed by rainy and dark conditions\n\n-\n-\n\nTo focus on needle-moving strategies that can prevent road accidents during clear weather conditions i.e. to install more warning signs and speed cameras along the locations stated in S/N 1 for deterrence.\n\n\n\n4\nHuman factors\n\nRoad accidents mostly involve private/passenger car, followed by 4-wheel pickup truck and motorcycle as top 3 vehicles\nTop presumed cause is speeding\nTop accident types are rear-end collision and rollover/fallen on straight road\n\n-\n-\n\nTo focus public education efforts on drivers with private/passenger car, 4-wheel pickup truck and motorcycle licenses i.e. mailers to these group of drivers. As a pre-emptive measure, to place greater emphasis on safety practices and road guidelines when prospective drivers apply for the licenses for these vehicles.\nTo set up more speed cameras along locations in S/N 1 to identify errant drivers and as a form of deterrence.\n\n\n\n\n\n\n\n\nhttps://wiki.openstreetmap.org/wiki/WikiProject_Thailand#Highway_classification\nhttps://cran.r-project.org/web/packages/spNetwork/vignettes/NKDE.html\nhttps://jeremygelb.github.io/spNetwork/articles/web_vignettes/AdaptiveBW.html\nhttps://jeremygelb.github.io/spNetwork/articles/NKDE.html\nhttps://jeremygelb.github.io/spNetwork/articles/TNKDE.html"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01B.html#spatial-point-pattern-analysis-sppa",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01B.html#spatial-point-pattern-analysis-sppa",
    "title": "Take-home Exercise 1B",
    "section": "",
    "text": "We will conduct a Spatial Point Pattern Analysis (SPPA) to evaluate the distribution of road accidents within the Bangkok Metropolitan Region (BMR).\nThe specific questions we would like to answer are as follows:\n\nare the road accidents in BMR randomly distributed throughout the region?\nif no, then where are the locations with higher concentration of road accidents?\n\nSpecifically, we will be carrying out the following SPPA methods:\n\nFirst-order SPPA\nSpatial analysis of road traffic accidents using Network SPPA methods.\nSpatio-temporal analysis of road accidents using Temporal Network SPPA methods.\n\n\n\n\n\n\nBefore we carry out spatial point pattern analysis, we need to convert the data from sf format to ppp format:\n\nroadacc_ppp &lt;- as.ppp(roadacc)\nroadacc_ppp\n\nMarked planar point pattern: 12985 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [591277.5, 710166.1] x [1486845.7, 1576520.5] units\n\n\nThe code chunk below plots roadacc_ppp for visualisation:\n\nplot(roadacc_ppp)\n\n\n\n\n\n\n\n\nWe take a quick look at the summary statistics of the roadacc_ppp object using the code chunk below:\n\nsummary(roadacc_ppp)\n\nMarked planar point pattern:  12985 points\nAverage intensity 1.217956e-06 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 571882 3788970 3833867 4314374 6092695 7570954 \n\nWindow: rectangle = [591277.5, 710166.1] x [1486845.7, 1576520.5] units\n                    (118900 x 89670 units)\nWindow area = 10661300000 square units\n\n\n\n\n\nIn SPPA, a significant issue is the presence of duplicates as the statistical methodology used for spatial point patterns processes is based largely on the assumption that process are simple i.e. that the points cannot be coincident. We check for duplication in a ppp object via the code chunk below:\n\nany(duplicated(roadacc_ppp))\n\n[1] FALSE\n\n\nThe data does not have any duplicated points.\n\n\n\nWhen analysing spatial point patterns, it is a good practice to confine the analysis within a geographical area like Singapore boundary. In spatstat, an object called owin is specially designed to represent this polygonal region. The code chunk below is used to covert provincedata32647 SpatialPolygon object into owin object of spatstat:\n\nprovinceowin &lt;- as.owin(provincedata32647)\n\nThe ouput object can be displayed by using plot() function\n\nplot(provinceowin)\n\n\n\n\n\n\n\n\n\nsummary(provinceowin)\n\nWindow: polygonal boundary\nsingle connected closed polygon with 13779 vertices\nenclosing rectangle: [587893.5, 712440.5] x [1484413.7, 1579076.3] units\n                     (124500 x 94660 units)\nWindow area = 7668990000 square units\nFraction of frame area: 0.65\n\n\n\n\n\nWe extract road accident events that are located within the BMR by using the code chunk below:\n\nroadacc_owin_ppp = roadacc_ppp[provinceowin]\n\n\nplot(roadacc_owin_ppp)\n\n\n\n\n\n\n\n\n\nsummary(roadacc_owin_ppp)\n\nMarked planar point pattern:  12985 points\nAverage intensity 1.693182e-06 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 571882 3788970 3833867 4314374 6092695 7570954 \n\nWindow: polygonal boundary\nsingle connected closed polygon with 13779 vertices\nenclosing rectangle: [587893.5, 712440.5] x [1484413.7, 1579076.3] units\n                     (124500 x 94660 units)\nWindow area = 7668990000 square units\nFraction of frame area: 0.65\n\n\n\n\n\nThe first-order SPPA will study how the intensity of road accidents vary across the BMR i.e. identify whether road accidents are more concentrated in areas due to underlying properties of the spatial environment.\nFor first-order SPPA, we will:\n\nderive the kernel density estimation (KDE) layer for visualising and exploring the intensity of point processes,\nperform Confirmatory SPPA using Nearest Neighbour statistics to determine if the road accidents are randomly distributed or influenced by underlying properties of the spatial environment.\n\n\n\n\nWe will proceed to compute the KDE of road accidents in the BMR. However, before we do so, we convert the unit of measurement to kilometer as the default unit of measurement of EPSG: 32647 is in metres, which would make the values hard to comprehend:\n\nroadacc_owin_ppp.km &lt;- rescale.ppp(roadacc_owin_ppp,1000,\"km\")\n\n\n\n\nWe will derive KDE using bw.diggle() of spatstat as it is an automatic bandwidth selection method and does not require a fixed bandwidth to be defined.\n\nkde_roadacc_bw &lt;- density(roadacc_owin_ppp.km,\n                          sigma = bw.diggle,\n                          edge = TRUE,\n                          kernel = \"gaussian\")\n\n\nplot(kde_roadacc_bw)\n\n\n\n\n\n\n\n\nWe can retrieve the bandwidth used to compute the KDE layer with the code chunk below:\n\nbw &lt;- bw.diggle(roadacc_owin_ppp)\nbw\n\n   sigma \n13.41598 \n\n\n\n\n\nWe convert the KDE output for mapping purposes:\n\ngridded_kde_roadacc_bw &lt;- as.SpatialGridDataFrame.im(kde_roadacc_bw)\nspplot(gridded_kde_roadacc_bw)\n\n\n\n\n\n\n\n\n\n\n\nNext, we will convert the gridded KDE object into a RasterLayer object using raster() of raster package:\n\nkde_roadacc_bw_raster &lt;- raster(kde_roadacc_bw)\n\nWe view the properties of kde_roadacc_bw_raster RasterLayer:\n\nkde_roadacc_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.973023, 0.7395512  (x, y)\nextent     : 587.8935, 712.4405, 1484.414, 1579.076  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : layer \nvalues     : -4.811931e-14, 233.4629  (min, max)\n\n\nNote that the CRS property is NA.\n\n\n\nWe hence assign CRS information to the kde_roadacc_bw_raster RasterLayer:\n\nprojection(kde_roadacc_bw_raster) &lt;- CRS(\"+init=EPSG:32647\")\n\nkde_roadacc_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.973023, 0.7395512  (x, y)\nextent     : 587.8935, 712.4405, 1484.414, 1579.076  (xmin, xmax, ymin, ymax)\ncrs        : +proj=utm +zone=47 +datum=WGS84 +units=m +no_defs \nsource     : memory\nnames      : layer \nvalues     : -4.811931e-14, 233.4629  (min, max)\n\n\nThe CRS property is now completed.\n\n\n\nWe will display the raster in cartographic quality map using tmap package:\n\ntmap_mode('plot')\ntm_shape(kde_roadacc_bw_raster)+   \n  tm_raster(\"layer\",palette = \"viridis\")+   \n  tm_layout(legend.outside = TRUE,             \n            legend.outside.position = \"right\",             \n            legend.position = c(\"right\",\"bottom\"),             \n            main.title = \"Distribution of road accidents (bw.diggle)\", \n            main.title.size = 0.8,             \n            frame = FALSE)\n\n\n\n\n\n\n\n\nFrom the plot above, we note that road accidents occur more intensely along the road lines in Bangkok and Samut Prakan. To better understand how the intensity of road accidents occur across the BMR, we will extract the six provinces as different study areas for analysis and comparison in the next section.\n\n\n\n\n\n\nThe code chunk will be used to extract the different provinces as different study areas:\n\nbkk &lt;- provincedata32647 %&gt;%\n  filter(ADM1_EN == \"Bangkok\")\nnp &lt;- provincedata32647 %&gt;% \n  filter(ADM1_EN == \"Nakhon Pathom\") \nn &lt;- provincedata32647 %&gt;%   \n  filter(ADM1_EN == \"Nonthaburi\") \npt &lt;- provincedata32647 %&gt;%   \n  filter(ADM1_EN == \"Pathum Thani\") \nsp &lt;- provincedata32647 %&gt;%   \n  filter(ADM1_EN == \"Samut Prakan\") \nss &lt;- provincedata32647 %&gt;%   \n  filter(ADM1_EN == \"Samut Sakhon\")\n\n\n\n\n\nbkk_owin = as.owin(bkk)\nnp_owin = as.owin(np) \nn_owin = as.owin(n) \npt_owin = as.owin(pt) \nsp_owin = as.owin(sp) \nss_owin = as.owin(ss)\n\n\n\n\nBy using the code chunk below, we are able to extract road accidents that is within the specific province to carry out our analysis later on.\n\nroadacc_bkk_ppp = roadacc_ppp[bkk_owin]\nroadacc_np_ppp = roadacc_ppp[np_owin]\nroadacc_n_ppp = roadacc_ppp[n_owin]\nroadacc_pt_ppp = roadacc_ppp[pt_owin]\nroadacc_sp_ppp = roadacc_ppp[sp_owin]\nroadacc_ss_ppp = roadacc_ppp[ss_owin]\n\nNext, rescale.ppp() function is used to transform the unit of measurement from metres to kilometres as EPSG: 32647 is in metres which would produce density values that are too small to comprehend.\n\nroadacc_bkk_ppp.km = rescale.ppp(roadacc_bkk_ppp,1000,\"km\")\nroadacc_np_ppp.km = rescale.ppp(roadacc_np_ppp,1000,\"km\")\nroadacc_n_ppp.km = rescale.ppp(roadacc_n_ppp,1000,\"km\")\nroadacc_pt_ppp.km = rescale.ppp(roadacc_pt_ppp,1000,\"km\")\nroadacc_sp_ppp.km = rescale.ppp(roadacc_sp_ppp,1000,\"km\")\nroadacc_ss_ppp.km = rescale.ppp(roadacc_ss_ppp,1000,\"km\")\n\nWe save and load these files to minimise re-running the codes above:\n\n\nCode\nwrite_rds(roadacc_bkk_ppp.km,\"data/rds/roadacc_bkk_ppp.km.rds\")\nwrite_rds(roadacc_np_ppp.km,\"data/rds/roadacc_np_ppp.km.rds\")\nwrite_rds(roadacc_n_ppp.km,\"data/rds/roadacc_n_ppp.km.rds\")\nwrite_rds(roadacc_pt_ppp.km,\"data/rds/roadacc_pt_ppp.km.rds\")\nwrite_rds(roadacc_sp_ppp.km,\"data/rds/roadacc_sp_ppp.km.rds\")\nwrite_rds(roadacc_ss_ppp.km,\"data/rds/roadacc_ss_ppp.km.rds\")\n\n\n\nroadacc_bkk_ppp.km &lt;- read_rds(\"data/rds/roadacc_bkk_ppp.km.rds\")\nroadacc_np_ppp.km &lt;- read_rds(\"data/rds/roadacc_np_ppp.km.rds\")\nroadacc_n_ppp.km &lt;- read_rds(\"data/rds/roadacc_n_ppp.km.rds\")\nroadacc_pt_ppp.km &lt;- read_rds(\"data/rds/roadacc_pt_ppp.km.rds\")\nroadacc_sp_ppp.km &lt;- read_rds(\"data/rds/roadacc_sp_ppp.km.rds\")\nroadacc_ss_ppp.km &lt;- read_rds(\"data/rds/roadacc_ss_ppp.km.rds\")\n\nWe then plot the 6 provinces and the locations of the road accidents:\n\npar(mfrow=c(2,3))\nplot(roadacc_bkk_ppp.km,main=\"Bangkok\")\nplot(roadacc_np_ppp.km,main=\"Nakhon Pathom\")\nplot(roadacc_n_ppp.km,main=\"Nonthaburi\") \nplot(roadacc_pt_ppp.km,main=\"Pathum Thani\")\nplot(roadacc_sp_ppp.km,main=\"Samut Prakan\")\nplot(roadacc_ss_ppp.km,main=\"Samut Sakhon\")\n\n\n\n\n\n\n\n\n\n\n\nWe will also derive KDE using bw.diggle() of spatstat for all six provinces:\n\nkde_bkk_bw &lt;- density(roadacc_bkk_ppp.km,\n                      sigma = bw.diggle,\n                      edge = TRUE,\n                      kernel = \"gaussian\")\nkde_np_bw &lt;- density(roadacc_np_ppp.km,\n                     sigma = bw.diggle,\n                     edge = TRUE,\n                     kernel = \"gaussian\")\nkde_n_bw &lt;- density(roadacc_n_ppp.km,\n                    sigma = bw.diggle,\n                    edge = TRUE,\n                    kernel = \"gaussian\")\nkde_pt_bw &lt;- density(roadacc_pt_ppp.km,\n                     sigma = bw.diggle,\n                     edge = TRUE,\n                     kernel = \"gaussian\")\nkde_sp_bw &lt;- density(roadacc_sp_ppp.km,\n                     sigma = bw.diggle,\n                     edge = TRUE,\n                     kernel = \"gaussian\")\nkde_ss_bw &lt;- density(roadacc_ss_ppp.km,\n                     sigma = bw.diggle,\n                     edge = TRUE,\n                     kernel = \"gaussian\")\n\nWe also save and load these as new rds files to minimise re-running the code above:\n\n\nCode\nwrite_rds(kde_bkk_bw,\"data/rds/kde_bkk_bw.rds\")\nwrite_rds(kde_np_bw,\"data/rds/kde_np_bw.rds\")\nwrite_rds(kde_n_bw,\"data/rds/kde_n_bw.rds\")\nwrite_rds(kde_pt_bw,\"data/rds/kde_pt_bw.rds\")\nwrite_rds(kde_sp_bw,\"data/rds/kde_sp_bw.rds\")\nwrite_rds(kde_ss_bw,\"data/rds/kde_ss_bw.rds\")\n\n\n\nkde_bkk_bw &lt;- read_rds(\"data/rds/kde_bkk_bw.rds\")\nkde_np_bw &lt;- read_rds(\"data/rds/kde_np_bw.rds\")\nkde_n_bw &lt;- read_rds(\"data/rds/kde_n_bw.rds\")\nkde_pt_bw &lt;- read_rds(\"data/rds/kde_pt_bw.rds\")\nkde_sp_bw &lt;- read_rds(\"data/rds/kde_sp_bw.rds\")\nkde_ss_bw &lt;- read_rds(\"data/rds/kde_ss_bw.rds\")\n\nNext, we will convert the KDE object into a RasterLayer object using raster() of raster package and assign the CRS of EPSG 32647:\n\nBangkokNakhon PathomNonthaburiPathum ThaniSamut PrakanSamut Sakhon\n\n\n\nkde_bkk_bw_raster &lt;- raster(kde_bkk_bw)\nprojection(kde_bkk_bw_raster) &lt;- CRS(\"+init=EPSG:32647\")  \nkde_bkk_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.5157047, 0.4002078  (x, y)\nextent     : 643.5344, 709.5446, 1492.136, 1543.363  (xmin, xmax, ymin, ymax)\ncrs        : +proj=utm +zone=47 +datum=WGS84 +units=m +no_defs \nsource     : memory\nnames      : layer \nvalues     : -1.081234e-13, 523.2836  (min, max)\n\n\n\n\n\nkde_np_bw_raster &lt;- raster(kde_np_bw)\nprojection(kde_np_bw_raster) &lt;- CRS(\"+init=EPSG:32647\")  \nkde_np_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4431169, 0.4584598  (x, y)\nextent     : 587.8935, 644.6125, 1509.208, 1567.891  (xmin, xmax, ymin, ymax)\ncrs        : +proj=utm +zone=47 +datum=WGS84 +units=m +no_defs \nsource     : memory\nnames      : layer \nvalues     : -9.825693e-15, 59.06928  (min, max)\n\n\n\n\n\nkde_n_bw_raster &lt;- raster(kde_n_bw)\nprojection(kde_n_bw_raster) &lt;- CRS(\"+init=EPSG:32647\")  \nkde_n_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.2577626, 0.3028132  (x, y)\nextent     : 636.3416, 669.3352, 1524.865, 1563.625  (xmin, xmax, ymin, ymax)\ncrs        : +proj=utm +zone=47 +datum=WGS84 +units=m +no_defs \nsource     : memory\nnames      : layer \nvalues     : -2.80486e-14, 179.3522  (min, max)\n\n\n\n\n\nkde_pt_bw_raster &lt;- raster(kde_pt_bw)\nprojection(kde_pt_bw_raster) &lt;- CRS(\"+init=EPSG:32647\")  \nkde_pt_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.5218025, 0.3122371  (x, y)\nextent     : 643.7786, 710.5693, 1539.11, 1579.076  (xmin, xmax, ymin, ymax)\ncrs        : +proj=utm +zone=47 +datum=WGS84 +units=m +no_defs \nsource     : memory\nnames      : layer \nvalues     : -5.136259e-14, 233.2346  (min, max)\n\n\n\n\n\nkde_sp_bw_raster &lt;- raster(kde_sp_bw)\nprojection(kde_sp_bw_raster) &lt;- CRS(\"+init=EPSG:32647\")  \nkde_sp_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4386052, 0.2064404  (x, y)\nextent     : 656.299, 712.4405, 1490.796, 1517.22  (xmin, xmax, ymin, ymax)\ncrs        : +proj=utm +zone=47 +datum=WGS84 +units=m +no_defs \nsource     : memory\nnames      : layer \nvalues     : -1.479576e-13, 739.9567  (min, max)\n\n\n\n\n\nkde_ss_bw_raster &lt;- raster(kde_ss_bw)\nprojection(kde_ss_bw_raster) &lt;- CRS(\"+init=EPSG:32647\")\nkde_ss_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.332527, 0.2598575  (x, y)\nextent     : 611.1044, 653.6678, 1484.414, 1517.676  (xmin, xmax, ymin, ymax)\ncrs        : +proj=utm +zone=47 +datum=WGS84 +units=m +no_defs \nsource     : memory\nnames      : layer \nvalues     : -5.709496e-14, 324.038  (min, max)\n\n\n\n\n\n\n\n\nWe will display the raster in cartographic quality map using tmap package:\n\nBangkokNakhon PathomNonthaburiPathum ThaniSamut PrakanSamut Sakhon\n\n\n\ntm_shape(kde_bkk_bw_raster)+\n  tm_raster(\"layer\",palette = \"viridis\")+\n  tm_layout(legend.outside = TRUE,\n            legend.outside.position = \"right\",\n            legend.position = c(\"right\",\"bottom\"),\n            main.title = \"Distribution of road accidents in Bangkok\",\n            main.title.size = 0.8,\n            frame = FALSE)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(kde_np_bw_raster)+\n  tm_raster(\"layer\",palette = \"viridis\")+\n  tm_layout(legend.outside = TRUE,\n            legend.outside.position = \"right\",\n            legend.position = c(\"right\",\"bottom\"),\n            main.title = \"Distribution of road accidents in Nakhon Pathom\",\n            main.title.size = 0.8,\n            frame = FALSE)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(kde_n_bw_raster)+\n  tm_raster(\"layer\",palette = \"viridis\")+\n  tm_layout(legend.outside = TRUE,\n            legend.outside.position = \"right\",\n            legend.position = c(\"right\",\"bottom\"),\n            main.title = \"Distribution of road accidents in Nonthaburi\",\n            main.title.size = 0.8,\n            frame = FALSE)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(kde_pt_bw_raster)+\n  tm_raster(\"layer\",palette = \"viridis\")+\n  tm_layout(legend.outside = TRUE,\n            legend.outside.position = \"right\",\n            legend.position = c(\"right\",\"bottom\"),\n            main.title = \"Distribution of road accidents in Pathum Thani\",\n            main.title.size = 0.8,\n            frame = FALSE)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(kde_sp_bw_raster)+\n  tm_raster(\"layer\",palette = \"viridis\")+\n  tm_layout(legend.outside = TRUE,\n            legend.outside.position = \"right\",\n            legend.position = c(\"right\",\"bottom\"),\n            main.title = \"Distribution of road accidents in Samut Prakan\",\n            main.title.size = 0.8,\n            frame = FALSE)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(kde_ss_bw_raster)+\n  tm_raster(\"layer\",palette = \"viridis\")+\n  tm_layout(legend.outside = TRUE,\n            legend.outside.position = \"right\",\n            legend.position = c(\"right\",\"bottom\"),\n            main.title = \"Distribution of road accidents in Samut Sakhon\",\n            main.title.size = 0.8,\n            frame = FALSE)\n\n\n\n\n\n\n\n\n\n\n\nFrom the plots above, we note the maximum KDE for each province (in descending order) and details for each province as follows:\n\nSamut Prakan - up to 600 to 800. Most of the road accidents optically seem to occur at 3 segments.\nBangkok - up to 500 to 600. Most of the road accidents optically seem to occur at major road lines.\nSamut Sakhon: Max density up to 300 to 350. Most of the road accidents seem to occur along the same major road.\nPathum Thani - up to 200 to 250. Most of the road accidents seem to occur along the same major road.\nNonthaburi - up to 150 to 200. Most of the road accidents optically seem to be scattered.\nNakhon Pathom - up to 50 to 60. Most of the road accidents optically seem to be scattered.\n\nFurther comments are as follows:\n\nNotably, while Bangkok is a known tourist destination/major urban hub, it ranks second to Samut Prakan in terms of road accident density.\nRoad accidents seem more scattered in Nonthaburi and Nakhon Pathom which suggest that there could be more complex road systems in these areas where accidents could occur at various points."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01B.html#data-wrangling-for-sppa",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01B.html#data-wrangling-for-sppa",
    "title": "Take-home Exercise 1B",
    "section": "",
    "text": "Before we carry out spatial point pattern analysis, we need to convert the data from sf format to ppp format:\n\nroadacc_ppp &lt;- as.ppp(roadacc)\nroadacc_ppp\n\nMarked planar point pattern: 12985 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [591277.5, 710166.1] x [1486845.7, 1576520.5] units\n\n\nThe code chunk below plots roadacc_ppp for visualisation:\n\nplot(roadacc_ppp)\n\n\n\n\n\n\n\n\nWe take a quick look at the summary statistics of the roadacc_ppp object using the code chunk below:\n\nsummary(roadacc_ppp)\n\nMarked planar point pattern:  12985 points\nAverage intensity 1.217956e-06 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 571882 3788970 3833867 4314374 6092695 7570954 \n\nWindow: rectangle = [591277.5, 710166.1] x [1486845.7, 1576520.5] units\n                    (118900 x 89670 units)\nWindow area = 10661300000 square units\n\n\n\n\n\nIn SPPA, a significant issue is the presence of duplicates as the statistical methodology used for spatial point patterns processes is based largely on the assumption that process are simple i.e. that the points cannot be coincident. We check for duplication in a ppp object via the code chunk below:\n\nany(duplicated(roadacc_ppp))\n\n[1] FALSE\n\n\nThe data does not have any duplicated points.\n\n\n\nWhen analysing spatial point patterns, it is a good practice to confine the analysis within a geographical area like Singapore boundary. In spatstat, an object called owin is specially designed to represent this polygonal region. The code chunk below is used to covert provincedata32647 SpatialPolygon object into owin object of spatstat:\n\nprovinceowin &lt;- as.owin(provincedata32647)\n\nThe ouput object can be displayed by using plot() function\n\nplot(provinceowin)\n\n\n\n\n\n\n\n\n\nsummary(provinceowin)\n\nWindow: polygonal boundary\nsingle connected closed polygon with 13779 vertices\nenclosing rectangle: [587893.5, 712440.5] x [1484413.7, 1579076.3] units\n                     (124500 x 94660 units)\nWindow area = 7668990000 square units\nFraction of frame area: 0.65\n\n\n\n\n\nWe extract road accident events that are located within the BMR by using the code chunk below:\n\nroadacc_owin_ppp = roadacc_ppp[provinceowin]\n\n\nplot(roadacc_owin_ppp)\n\n\n\n\n\n\n\n\n\nsummary(roadacc_owin_ppp)\n\nMarked planar point pattern:  12985 points\nAverage intensity 1.693182e-06 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 571882 3788970 3833867 4314374 6092695 7570954 \n\nWindow: polygonal boundary\nsingle connected closed polygon with 13779 vertices\nenclosing rectangle: [587893.5, 712440.5] x [1484413.7, 1579076.3] units\n                     (124500 x 94660 units)\nWindow area = 7668990000 square units\nFraction of frame area: 0.65"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01B.html#first-order-sppa",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01B.html#first-order-sppa",
    "title": "Take-home Exercise 1B",
    "section": "",
    "text": "The first-order SPPA will study how the intensity of road accidents vary across the BMR i.e. identify whether road accidents are more concentrated in areas due to underlying properties of the spatial environment.\nFor first-order SPPA, we will:\n\nderive the kernel density estimation (KDE) layer for visualising and exploring the intensity of point processes,\nperform Confirmatory SPPA using Nearest Neighbour statistics to determine if the road accidents are randomly distributed or influenced by underlying properties of the spatial environment.\n\n\n\nWe will proceed to compute the KDE of road accidents in the BMR. However, before we do so, we convert the unit of measurement to kilometer as the default unit of measurement of EPSG: 32647 is in metres, which would make the values hard to comprehend:\n\nroadacc_owin_ppp.km &lt;- rescale.ppp(roadacc_owin_ppp,1000,\"km\")\n\n\n\n\nWe will derive KDE using bw.diggle() of spatstat as it is an automatic bandwidth selection method and does not require a fixed bandwidth to be defined.\n\nkde_roadacc_bw &lt;- density(roadacc_owin_ppp.km,\n                          sigma = bw.diggle,\n                          edge = TRUE,\n                          kernel = \"gaussian\")\n\n\nplot(kde_roadacc_bw)\n\n\n\n\n\n\n\n\nWe can retrieve the bandwidth used to compute the KDE layer with the code chunk below:\n\nbw &lt;- bw.diggle(roadacc_owin_ppp)\nbw\n\n   sigma \n13.41598 \n\n\n\n\n\nWe convert the KDE output for mapping purposes:\n\ngridded_kde_roadacc_bw &lt;- as.SpatialGridDataFrame.im(kde_roadacc_bw)\nspplot(gridded_kde_roadacc_bw)\n\n\n\n\n\n\n\n\n\n\n\nNext, we will convert the gridded KDE object into a RasterLayer object using raster() of raster package:\n\nkde_roadacc_bw_raster &lt;- raster(kde_roadacc_bw)\n\nWe view the properties of kde_roadacc_bw_raster RasterLayer:\n\nkde_roadacc_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.973023, 0.7395512  (x, y)\nextent     : 587.8935, 712.4405, 1484.414, 1579.076  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : layer \nvalues     : -4.811931e-14, 233.4629  (min, max)\n\n\nNote that the CRS property is NA.\n\n\n\nWe hence assign CRS information to the kde_roadacc_bw_raster RasterLayer:\n\nprojection(kde_roadacc_bw_raster) &lt;- CRS(\"+init=EPSG:32647\")\n\nkde_roadacc_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.973023, 0.7395512  (x, y)\nextent     : 587.8935, 712.4405, 1484.414, 1579.076  (xmin, xmax, ymin, ymax)\ncrs        : +proj=utm +zone=47 +datum=WGS84 +units=m +no_defs \nsource     : memory\nnames      : layer \nvalues     : -4.811931e-14, 233.4629  (min, max)\n\n\nThe CRS property is now completed.\n\n\n\nWe will display the raster in cartographic quality map using tmap package:\n\ntmap_mode('plot')\ntm_shape(kde_roadacc_bw_raster)+   \n  tm_raster(\"layer\",palette = \"viridis\")+   \n  tm_layout(legend.outside = TRUE,             \n            legend.outside.position = \"right\",             \n            legend.position = c(\"right\",\"bottom\"),             \n            main.title = \"Distribution of road accidents (bw.diggle)\", \n            main.title.size = 0.8,             \n            frame = FALSE)\n\n\n\n\n\n\n\n\nFrom the plot above, we note that road accidents occur more intensely along the road lines in Bangkok and Samut Prakan. To better understand how the intensity of road accidents occur across the BMR, we will extract the six provinces as different study areas for analysis and comparison in the next section.\n\n\n\n\n\n\nThe code chunk will be used to extract the different provinces as different study areas:\n\nbkk &lt;- provincedata32647 %&gt;%\n  filter(ADM1_EN == \"Bangkok\")\nnp &lt;- provincedata32647 %&gt;% \n  filter(ADM1_EN == \"Nakhon Pathom\") \nn &lt;- provincedata32647 %&gt;%   \n  filter(ADM1_EN == \"Nonthaburi\") \npt &lt;- provincedata32647 %&gt;%   \n  filter(ADM1_EN == \"Pathum Thani\") \nsp &lt;- provincedata32647 %&gt;%   \n  filter(ADM1_EN == \"Samut Prakan\") \nss &lt;- provincedata32647 %&gt;%   \n  filter(ADM1_EN == \"Samut Sakhon\")\n\n\n\n\n\nbkk_owin = as.owin(bkk)\nnp_owin = as.owin(np) \nn_owin = as.owin(n) \npt_owin = as.owin(pt) \nsp_owin = as.owin(sp) \nss_owin = as.owin(ss)\n\n\n\n\nBy using the code chunk below, we are able to extract road accidents that is within the specific province to carry out our analysis later on.\n\nroadacc_bkk_ppp = roadacc_ppp[bkk_owin]\nroadacc_np_ppp = roadacc_ppp[np_owin]\nroadacc_n_ppp = roadacc_ppp[n_owin]\nroadacc_pt_ppp = roadacc_ppp[pt_owin]\nroadacc_sp_ppp = roadacc_ppp[sp_owin]\nroadacc_ss_ppp = roadacc_ppp[ss_owin]\n\nNext, rescale.ppp() function is used to transform the unit of measurement from metres to kilometres as EPSG: 32647 is in metres which would produce density values that are too small to comprehend.\n\nroadacc_bkk_ppp.km = rescale.ppp(roadacc_bkk_ppp,1000,\"km\")\nroadacc_np_ppp.km = rescale.ppp(roadacc_np_ppp,1000,\"km\")\nroadacc_n_ppp.km = rescale.ppp(roadacc_n_ppp,1000,\"km\")\nroadacc_pt_ppp.km = rescale.ppp(roadacc_pt_ppp,1000,\"km\")\nroadacc_sp_ppp.km = rescale.ppp(roadacc_sp_ppp,1000,\"km\")\nroadacc_ss_ppp.km = rescale.ppp(roadacc_ss_ppp,1000,\"km\")\n\nWe save and load these files to minimise re-running the codes above:\n\n\nCode\nwrite_rds(roadacc_bkk_ppp.km,\"data/rds/roadacc_bkk_ppp.km.rds\")\nwrite_rds(roadacc_np_ppp.km,\"data/rds/roadacc_np_ppp.km.rds\")\nwrite_rds(roadacc_n_ppp.km,\"data/rds/roadacc_n_ppp.km.rds\")\nwrite_rds(roadacc_pt_ppp.km,\"data/rds/roadacc_pt_ppp.km.rds\")\nwrite_rds(roadacc_sp_ppp.km,\"data/rds/roadacc_sp_ppp.km.rds\")\nwrite_rds(roadacc_ss_ppp.km,\"data/rds/roadacc_ss_ppp.km.rds\")\n\n\n\nroadacc_bkk_ppp.km &lt;- read_rds(\"data/rds/roadacc_bkk_ppp.km.rds\")\nroadacc_np_ppp.km &lt;- read_rds(\"data/rds/roadacc_np_ppp.km.rds\")\nroadacc_n_ppp.km &lt;- read_rds(\"data/rds/roadacc_n_ppp.km.rds\")\nroadacc_pt_ppp.km &lt;- read_rds(\"data/rds/roadacc_pt_ppp.km.rds\")\nroadacc_sp_ppp.km &lt;- read_rds(\"data/rds/roadacc_sp_ppp.km.rds\")\nroadacc_ss_ppp.km &lt;- read_rds(\"data/rds/roadacc_ss_ppp.km.rds\")\n\nWe then plot the 6 provinces and the locations of the road accidents:\n\npar(mfrow=c(2,3))\nplot(roadacc_bkk_ppp.km,main=\"Bangkok\")\nplot(roadacc_np_ppp.km,main=\"Nakhon Pathom\")\nplot(roadacc_n_ppp.km,main=\"Nonthaburi\") \nplot(roadacc_pt_ppp.km,main=\"Pathum Thani\")\nplot(roadacc_sp_ppp.km,main=\"Samut Prakan\")\nplot(roadacc_ss_ppp.km,main=\"Samut Sakhon\")\n\n\n\n\n\n\n\n\n\n\n\nWe will also derive KDE using bw.diggle() of spatstat for all six provinces:\n\nkde_bkk_bw &lt;- density(roadacc_bkk_ppp.km,\n                      sigma = bw.diggle,\n                      edge = TRUE,\n                      kernel = \"gaussian\")\nkde_np_bw &lt;- density(roadacc_np_ppp.km,\n                     sigma = bw.diggle,\n                     edge = TRUE,\n                     kernel = \"gaussian\")\nkde_n_bw &lt;- density(roadacc_n_ppp.km,\n                    sigma = bw.diggle,\n                    edge = TRUE,\n                    kernel = \"gaussian\")\nkde_pt_bw &lt;- density(roadacc_pt_ppp.km,\n                     sigma = bw.diggle,\n                     edge = TRUE,\n                     kernel = \"gaussian\")\nkde_sp_bw &lt;- density(roadacc_sp_ppp.km,\n                     sigma = bw.diggle,\n                     edge = TRUE,\n                     kernel = \"gaussian\")\nkde_ss_bw &lt;- density(roadacc_ss_ppp.km,\n                     sigma = bw.diggle,\n                     edge = TRUE,\n                     kernel = \"gaussian\")\n\nWe also save and load these as new rds files to minimise re-running the code above:\n\n\nCode\nwrite_rds(kde_bkk_bw,\"data/rds/kde_bkk_bw.rds\")\nwrite_rds(kde_np_bw,\"data/rds/kde_np_bw.rds\")\nwrite_rds(kde_n_bw,\"data/rds/kde_n_bw.rds\")\nwrite_rds(kde_pt_bw,\"data/rds/kde_pt_bw.rds\")\nwrite_rds(kde_sp_bw,\"data/rds/kde_sp_bw.rds\")\nwrite_rds(kde_ss_bw,\"data/rds/kde_ss_bw.rds\")\n\n\n\nkde_bkk_bw &lt;- read_rds(\"data/rds/kde_bkk_bw.rds\")\nkde_np_bw &lt;- read_rds(\"data/rds/kde_np_bw.rds\")\nkde_n_bw &lt;- read_rds(\"data/rds/kde_n_bw.rds\")\nkde_pt_bw &lt;- read_rds(\"data/rds/kde_pt_bw.rds\")\nkde_sp_bw &lt;- read_rds(\"data/rds/kde_sp_bw.rds\")\nkde_ss_bw &lt;- read_rds(\"data/rds/kde_ss_bw.rds\")\n\nNext, we will convert the KDE object into a RasterLayer object using raster() of raster package and assign the CRS of EPSG 32647:\n\nBangkokNakhon PathomNonthaburiPathum ThaniSamut PrakanSamut Sakhon\n\n\n\nkde_bkk_bw_raster &lt;- raster(kde_bkk_bw)\nprojection(kde_bkk_bw_raster) &lt;- CRS(\"+init=EPSG:32647\")  \nkde_bkk_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.5157047, 0.4002078  (x, y)\nextent     : 643.5344, 709.5446, 1492.136, 1543.363  (xmin, xmax, ymin, ymax)\ncrs        : +proj=utm +zone=47 +datum=WGS84 +units=m +no_defs \nsource     : memory\nnames      : layer \nvalues     : -1.081234e-13, 523.2836  (min, max)\n\n\n\n\n\nkde_np_bw_raster &lt;- raster(kde_np_bw)\nprojection(kde_np_bw_raster) &lt;- CRS(\"+init=EPSG:32647\")  \nkde_np_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4431169, 0.4584598  (x, y)\nextent     : 587.8935, 644.6125, 1509.208, 1567.891  (xmin, xmax, ymin, ymax)\ncrs        : +proj=utm +zone=47 +datum=WGS84 +units=m +no_defs \nsource     : memory\nnames      : layer \nvalues     : -9.825693e-15, 59.06928  (min, max)\n\n\n\n\n\nkde_n_bw_raster &lt;- raster(kde_n_bw)\nprojection(kde_n_bw_raster) &lt;- CRS(\"+init=EPSG:32647\")  \nkde_n_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.2577626, 0.3028132  (x, y)\nextent     : 636.3416, 669.3352, 1524.865, 1563.625  (xmin, xmax, ymin, ymax)\ncrs        : +proj=utm +zone=47 +datum=WGS84 +units=m +no_defs \nsource     : memory\nnames      : layer \nvalues     : -2.80486e-14, 179.3522  (min, max)\n\n\n\n\n\nkde_pt_bw_raster &lt;- raster(kde_pt_bw)\nprojection(kde_pt_bw_raster) &lt;- CRS(\"+init=EPSG:32647\")  \nkde_pt_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.5218025, 0.3122371  (x, y)\nextent     : 643.7786, 710.5693, 1539.11, 1579.076  (xmin, xmax, ymin, ymax)\ncrs        : +proj=utm +zone=47 +datum=WGS84 +units=m +no_defs \nsource     : memory\nnames      : layer \nvalues     : -5.136259e-14, 233.2346  (min, max)\n\n\n\n\n\nkde_sp_bw_raster &lt;- raster(kde_sp_bw)\nprojection(kde_sp_bw_raster) &lt;- CRS(\"+init=EPSG:32647\")  \nkde_sp_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4386052, 0.2064404  (x, y)\nextent     : 656.299, 712.4405, 1490.796, 1517.22  (xmin, xmax, ymin, ymax)\ncrs        : +proj=utm +zone=47 +datum=WGS84 +units=m +no_defs \nsource     : memory\nnames      : layer \nvalues     : -1.479576e-13, 739.9567  (min, max)\n\n\n\n\n\nkde_ss_bw_raster &lt;- raster(kde_ss_bw)\nprojection(kde_ss_bw_raster) &lt;- CRS(\"+init=EPSG:32647\")\nkde_ss_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.332527, 0.2598575  (x, y)\nextent     : 611.1044, 653.6678, 1484.414, 1517.676  (xmin, xmax, ymin, ymax)\ncrs        : +proj=utm +zone=47 +datum=WGS84 +units=m +no_defs \nsource     : memory\nnames      : layer \nvalues     : -5.709496e-14, 324.038  (min, max)\n\n\n\n\n\n\n\n\nWe will display the raster in cartographic quality map using tmap package:\n\nBangkokNakhon PathomNonthaburiPathum ThaniSamut PrakanSamut Sakhon\n\n\n\ntm_shape(kde_bkk_bw_raster)+\n  tm_raster(\"layer\",palette = \"viridis\")+\n  tm_layout(legend.outside = TRUE,\n            legend.outside.position = \"right\",\n            legend.position = c(\"right\",\"bottom\"),\n            main.title = \"Distribution of road accidents in Bangkok\",\n            main.title.size = 0.8,\n            frame = FALSE)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(kde_np_bw_raster)+\n  tm_raster(\"layer\",palette = \"viridis\")+\n  tm_layout(legend.outside = TRUE,\n            legend.outside.position = \"right\",\n            legend.position = c(\"right\",\"bottom\"),\n            main.title = \"Distribution of road accidents in Nakhon Pathom\",\n            main.title.size = 0.8,\n            frame = FALSE)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(kde_n_bw_raster)+\n  tm_raster(\"layer\",palette = \"viridis\")+\n  tm_layout(legend.outside = TRUE,\n            legend.outside.position = \"right\",\n            legend.position = c(\"right\",\"bottom\"),\n            main.title = \"Distribution of road accidents in Nonthaburi\",\n            main.title.size = 0.8,\n            frame = FALSE)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(kde_pt_bw_raster)+\n  tm_raster(\"layer\",palette = \"viridis\")+\n  tm_layout(legend.outside = TRUE,\n            legend.outside.position = \"right\",\n            legend.position = c(\"right\",\"bottom\"),\n            main.title = \"Distribution of road accidents in Pathum Thani\",\n            main.title.size = 0.8,\n            frame = FALSE)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(kde_sp_bw_raster)+\n  tm_raster(\"layer\",palette = \"viridis\")+\n  tm_layout(legend.outside = TRUE,\n            legend.outside.position = \"right\",\n            legend.position = c(\"right\",\"bottom\"),\n            main.title = \"Distribution of road accidents in Samut Prakan\",\n            main.title.size = 0.8,\n            frame = FALSE)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(kde_ss_bw_raster)+\n  tm_raster(\"layer\",palette = \"viridis\")+\n  tm_layout(legend.outside = TRUE,\n            legend.outside.position = \"right\",\n            legend.position = c(\"right\",\"bottom\"),\n            main.title = \"Distribution of road accidents in Samut Sakhon\",\n            main.title.size = 0.8,\n            frame = FALSE)\n\n\n\n\n\n\n\n\n\n\n\nFrom the plots above, we note the maximum KDE for each province (in descending order) and details for each province as follows:\n\nSamut Prakan - up to 600 to 800. Most of the road accidents optically seem to occur at 3 segments.\nBangkok - up to 500 to 600. Most of the road accidents optically seem to occur at major road lines.\nSamut Sakhon: Max density up to 300 to 350. Most of the road accidents seem to occur along the same major road.\nPathum Thani - up to 200 to 250. Most of the road accidents seem to occur along the same major road.\nNonthaburi - up to 150 to 200. Most of the road accidents optically seem to be scattered.\nNakhon Pathom - up to 50 to 60. Most of the road accidents optically seem to be scattered.\n\nFurther comments are as follows:\n\nNotably, while Bangkok is a known tourist destination/major urban hub, it ranks second to Samut Prakan in terms of road accident density.\nRoad accidents seem more scattered in Nonthaburi and Nakhon Pathom which suggest that there could be more complex road systems in these areas where accidents could occur at various points."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01B.html#nearest-neighbour-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01B.html#nearest-neighbour-analysis",
    "title": "Take-home Exercise 1B",
    "section": "",
    "text": "After running KDE which shows the density of road accidents over the BMR, we will perform the Clark-Evans test of aggregation to statistically validate the degree of spatial clustering or dispersion of the road accident points by comparing the observed mean nearest neighbor distance with the expected average distance between neighbours in a hypothetical random distribution.\nThe test hypotheses are:\nH0: The distribution of road accidents is randomly distributed.\nH1: The distribution of road accidents is not randomly distributed.\nThe 95% confidence interval will be used.\n\n\n\n\n\n\nclarkevans.test(roadacc_owin_ppp.km,\n                correction = \"none\",\n                clipregion = \"province_owin\",\n                alternative = c(\"clustered\"),\n                nsim = 999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  roadacc_owin_ppp.km\nR = 0.19092, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\n\nSince p-value is less than 0.05, there is sufficient evidence to reject the null hypothesis H0 that the distribution of road accidents is randomly distributed.\nThis is further supported by the R value of 0.19092. As this R value is less than 1, it indicates that the pattern exhibits clustering and that the road accidents tend to occur close to one another and not in a dispersed/regular manner.\n\n\n\n\n\nBangkokNakhon PathomNonthaburiPathum ThaniSamut PrakanSamut Sakhon\n\n\n\nclarkevans.test(roadacc_bkk_ppp.km,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  roadacc_bkk_ppp.km\nR = 0.12057, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\n\nclarkevans.test(roadacc_np_ppp.km,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  roadacc_np_ppp.km\nR = 0.28949, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\n\nclarkevans.test(roadacc_n_ppp.km,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  roadacc_n_ppp.km\nR = 0.38919, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\n\nclarkevans.test(roadacc_pt_ppp.km,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  roadacc_pt_ppp.km\nR = 0.24798, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\n\nclarkevans.test(roadacc_sp_ppp.km,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  roadacc_sp_ppp.km\nR = 0.14367, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\n\nclarkevans.test(roadacc_ss_ppp.km,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  roadacc_ss_ppp.km\nR = 0.23989, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\n\nBased on the results above, for which all R values are less than 1 and all p-values are less than 0.05, we reject the null hypothesis at 95% confidence interval. There is sufficient evidence to indicate that the distribution of road accidents in all provinces is not randomly distributed and instead exhibit clustering."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01B.html#network-constrained-spatial-point-patterns-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01B.html#network-constrained-spatial-point-patterns-analysis",
    "title": "Take-home Exercise 1B",
    "section": "",
    "text": "tmap_mode('view')\ntm_shape(roadacc)+\n  tm_dots()+\n  tm_shape(roadsbkk)+\n  tm_lines()\ntmap_mode('plot')"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01B.html#network-kde-nkde-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01B.html#network-kde-nkde-analysis",
    "title": "Take-home Exercise 1B",
    "section": "",
    "text": "Before computing NKDE, the roadsbkk object needs to be cut into lixels with a specified minimal distance. We do this using lixelize_lines() of spNetwork as shown in the code chunk below.\n\nlixels &lt;- lixelize_lines(roadsbkk,                          5000,                          mindist = NULL)\n\n\n\n\nNext, lines_center() of spNetwork will be used to generate a SpatialPointsDataFrame (i.e. samples) with line centre points as shown in the code chunk below:\n\nsamples &lt;- lines_center(lixels)\n\nThe points are located at center of the line based on the length of the line."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01B.html#performing-nkde",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01B.html#performing-nkde",
    "title": "Take-home Exercise 1B",
    "section": "",
    "text": "Prior to performing NKDE calculations:\n\nfuture::plan(future::multisession(workers=2))\n\nWe will compute NKDE using the code chunk below:\n\ndensities &lt;- nkde(roadsbkk,\n                  events = roadacc,\n                  w = rep(1,nrow(roadacc)),\n                  samples = samples,\n                  kernel_name = \"quartic\",\n                  bw = 300,\n                  div = \"bw\",\n                  method = \"discontinuous\",\n                  digits = 1,\n                  tol = 1,\n                  grid_shape = c(10,10),\n                  max_depth = 8,\n                  agg = 5,\n                  sparse = TRUE,\n                  verbose = FALSE)\n\n\n\nBefore visualising NKDE values, we use the code chunk below to insert the computed density values into samples and lixels objects as density field. We also multiply the densities by 1000 to rescale the density values from metres (as the EPSG 32647 projection system is in metres which make the computed density values very small and hard to comprehend) to number of events per kilometer:\n\nsamples$density &lt;- densities*1000 \nlixels$density &lt;- densities*1000"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01B.html#network-constrained-sppa",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01B.html#network-constrained-sppa",
    "title": "Take-home Exercise 1B",
    "section": "",
    "text": "Network constrained SPPA (NetSPPA) is a collection of SAPPA methods specially developed for analysing spatial point events that occur on or alongside a network. In this case, it can be used for the analysis of road accidents that occur on or alongside the road lines network in the BMR.\nBefore we go into the analysis, we visualise the geospatial data (to save bandwidth, we directly use plot mode):\n\ntmap_mode('plot')\ntm_shape(roadacc)+\n  tm_dots(col = \"red\")+\n  tm_shape(roadsbkk)+\n  tm_lines()\n\n\n\n\n\n\n\n\n\n\nNKDE is used to visualise and explore the intensity of point processes i.e. road accidents along the network i.e. road lines.\n\n\n\nBefore we compute NKDE, we need to select an appropriate bandwidth. In this case we will use the K nearest neighbour adaptive bandwidth (reference). Under this method, the K nearest neighbour distance could be used as a locally adapted bandwidth for intensity estimation.\nWe will first use the nearest neighbour distance to understand the distance between road accident points along the road lines in BMR - we do this by running nndist() function on our ppp object:\n\nnnd_dist &lt;- nndist(roadacc_owin_ppp.km)\nsummary(nnd_dist)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n0.00000 0.00123 0.01303 0.07336 0.04663 7.73467 \n\n\nThe median and max distance between road lines in BMR is 0.01303 km and 7.73467 km respectively.\nWe first aggregate events that are very close i.e. round up of median distance ~15 metres away:\n\nroadacc$weight &lt;- 1\nroadacc_agg &lt;- aggregate_points(roadacc,15, weight = \"weight\")\n\nWe then calculate for each event its distance to its 20th neighbour:\n\nknn_dists &lt;- network_knn(origins = roadacc_agg,\n                         lines = roadsbkk,\n                         k = 30,\n                         maxdistance = 5000,\n                         line_weight = \"length\",\n                         digits = 2,\n                         tol = 0.1)\n\n\nbws &lt;- knn_dists$distances[,20]\n\nggplot()+\n  geom_histogram(aes(x=bws),\n                 fill = \"white\",\n                 color = \"black\",\n                 bins = 50)+\n  labs(x = \"distance to 20th neighbour (metres)\")\n\n\n\n\n\n\n\n\nBased on the histogram above, we note that there are some events for which the 20th neighbour is very far. We decide to trim the bandwidth at 10000 metres.\n\ntrimmed_bw &lt;- ifelse(bws &gt; 10000,10000, bws)\n\n\n\n\nBefore computing NKDE, the roadsbkk object needs to be cut into lixels with a specified minimal distance. We do this using lixelize_lines() of spNetwork.\nTo determine the appropriate lixel size to use, we need to consider several factors such as the scale of our study, density of accidents. road network characteristics. Some reasons are provided below:\n\nscale of study: shorter lixels may allow capturing of finer details for study of road accidents at a local scale however longer lixels may be more suitable to study patterns over larger distances.\ndensity of accidents: high road accident density areas may benefit from shorter lixels that would enable the capture of precise clustering on small road segments. however, long lixels can help to smooth out analysis for less dense areas and avoid overrepresenting sparsely populated segments\nroad network characteristics: more complex road networks may benefit from shorter lixels to indicate the finer details of the road lines while larger road networks may work better with longer lixels.\n\nBased on the analysis of K-nearest neighbors with adaptive bandwidth under 9.1.1 Determining appropriate bandwidth, we observe from the histogram that most road accidents occur within 1000m to 2000m of each other. We hence set the lixel lengths within this distance to help capture the density of accidents more effectively:\n\nlixels &lt;- lixelize_lines(roadsbkk,\n                         2000,\n                         mindist = 1000)\nsamples &lt;- lines_center(lixels)\n\n\ndensities &lt;- nkde(lines = roadsbkk,\n                  events = roadacc_agg,\n                  w = roadacc_agg$weight,\n                  samples = samples,\n                  kernel_name = \"quartic\",\n                  bw = trimmed_bw,\n                  div = \"bw\",\n                  adaptive = FALSE,\n                  method = \"simple\",\n                  digits = 1,\n                  tol = 1,\n                  grid_shape = c(5,5),\n                  verbose = FALSE,\n                  diggle_correction = FALSE,\n                  study_area = NULL,\n                  max_depth = 5,\n                  agg = NULL,\n                  sparse = TRUE)\n\nTo minimise re-running the code above, we save densities generated as a new rds file:\n\n\nCode\nwrite_rds(densities,\"data/rds/densities.rds\")\n\n\n\n\nCode\ndensities &lt;- read_rds(\"data/rds/densities.rds\")\n\n\n\n\n\nBefore visualising NKDE values, we insert the computed density values into samples and lixels objects as density field. We also multiply the densities by 1000 to rescale the density values from metres (as the EPSG 32647 projection system is in metres which make the computed density values very small and hard to comprehend) to number of events per kilometer. We then map the result:\n\n# rescaling to help the mapping\nsamples$density &lt;- densities*1000\nlixels$density &lt;- densities*1000\n\n\ncolorRamp &lt;- brewer.pal(n = 5, name = \"Spectral\")\ncolorRamp &lt;- rev(colorRamp)\n\nsamples2 &lt;- samples[order(samples$density),]\ntitle &lt;- paste0(\"Road accident density by kilometres in BMR,\",\n                \"\\nusing an adaptive bandwidth (20th nearest neighbour)\")\n\ntmap_mode('plot')\ntm_shape(roadsbkk) + \n  tm_lines(\"black\") + \n  tm_shape(samples2) + \n  tm_dots(\"density\", style = \"kmeans\", palette = colorRamp, n = 5, size = 0.1) + \n  tm_layout(legend.outside = TRUE, \n            main.title = title, main.title.size = 1)\n\n\nPlotting it in the lixel density format:\n\ncolorRamp &lt;- brewer.pal(n = 5, name = \"RdYlGn\")\ncolorRamp &lt;- rev(colorRamp)\n\nlix_density_break &lt;- quantile(lixels$density, probs = seq(0, 1, length.out = 5))\ntitle &lt;- paste0(\"Road accident density by kilometres in BMR,\",\n                \"\\nusing an adaptive bandwidth (20th nearest neighbour)\")\n\ntmap_mode('plot')\ntm_shape(lixels) +\n  tm_lines(col = \"density\", palette = colorRamp, breaks = lix_density_break) +\n  tm_shape(roadacc_agg) +\n  tm_dots(col = \"black\", size = 0.01)+\n  tm_layout(legend.outside = TRUE, \n            main.title = title, main.title.size = 1)\n\n\n\n\n\n\n\n\nBased on the plot above, we observe the following:\n\nDense occurrence of road accidents within central Bangkok along intricate road networks where there are more complicated road lines\nDenser occurrence of road accidents at intersections of road segments"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01B.html#temporal-network-sppa",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01B.html#temporal-network-sppa",
    "title": "Take-home Exercise 1B",
    "section": "",
    "text": "roadacc$inc_month &lt;- as.numeric(roadacc$inc_month)\nroadacc$inc_dayofweek &lt;- as.numeric(roadacc$inc_dayofweek)\nroadacc$inc_time &lt;- as.numeric(roadacc$inc_time)\n\n\nw &lt;- rep(1,nrow(roadacc))\nsamples &lt;- seq(min(roadacc$inc_month),max(roadacc$inc_month),0.5)\n\nmonth_kernel_val &lt;- data.frame(\n  bw_1 = tkde(roadacc$inc_month, w=w, samples = samples, bw = 1, kernel_name = \"quartic\"),\n  bw_2 = tkde(roadacc$inc_month, w=w, samples = samples, bw = 2, kernel_name = \"quartic\"),\n  bw_3 = tkde(roadacc$inc_month, w=w, samples = samples, bw = 3, kernel_name = \"quartic\"),\n  bw_4 = tkde(roadacc$inc_month, w=w, samples = samples, bw = 4, kernel_name = \"quartic\"),\n  bw_5 = tkde(roadacc$inc_month, w=w, samples = samples, bw = 5, kernel_name = \"quartic\"),\n  bw_6 = tkde(roadacc$inc_month, w=w, samples = samples, bw = 6, kernel_name = \"quartic\"),\n  time = samples\n)\n\n\nmonth_lab &lt;- c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\")\n\ndf_month &lt;- reshape2::melt(month_kernel_val, id.vars = \"time\")\n\ndf_month$variable &lt;- as.factor(df_month$variable)\n\nggplot(data = df_month)+\n  geom_line(aes(x=time,y=value))+\n  scale_x_continuous(breaks =1:12, labels = month_lab) +\n  facet_wrap(vars(variable),ncol=2, scales=\"free\")+\n  labs(title = \"Temporal NKDE for Occurrence of Road Accidents by Month\", x = \"Month\", y=\"Density\")+\n  theme(axis.text = element_text(size = 5))\n\n\n\n\n\n\n\n\nIt seems that a bandwidth of 3 best captures the bimodal shape of the temporal dimension of road accidents.\n\n\n\n\nw &lt;- rep(1,nrow(roadacc))\nsamples &lt;- seq(min(roadacc$inc_dayofweek),max(roadacc$inc_dayofweek),0.5)\n\nday_kernel_val &lt;- data.frame(\n  bw_1 = tkde(roadacc$inc_dayofweek, w=w, samples = samples, bw = 1, kernel_name = \"quartic\"),\n  bw_2 = tkde(roadacc$inc_dayofweek, w=w, samples = samples, bw = 2, kernel_name = \"quartic\"),\n  bw_3 = tkde(roadacc$inc_dayofweek, w=w, samples = samples, bw = 3, kernel_name = \"quartic\"),\n  bw_4 = tkde(roadacc$inc_dayofweek, w=w, samples = samples, bw = 4, kernel_name = \"quartic\"),\n  time = samples\n)\n\n\nday_lab &lt;- c(\"Sun\", \"Mon\", \"Tues\", \"Wed\", \"Thu\", \"Fri\", \"Sat\")\n\ndf_day &lt;- reshape2::melt(day_kernel_val, id.vars = \"day\")\ndf_day$variable &lt;- as.factor(df_day$variable)\n\nggplot(data = df_day)+\n  geom_line(aes(x=inc_dayofweek,y=value))+\n  scale_x_continuous(breaks =7, labels = day_lab) +\n  facet_wrap(vars(variable),ncol=2, scales=\"free\")+\n  labs(title = \"Temporal NKDE for Occurrence of Road Accidents by Day of the Week\", x = \"Day\", y=\"Density\")+\n  theme(axis.text = element_text(size = 5))\n\n\n\n\nBefore considering the spatio-temporal case, we can also investigate the spatial dimension."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01B.html#temporal-sppa",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01B.html#temporal-sppa",
    "title": "Take-home Exercise 1B",
    "section": "",
    "text": "Events recorded on a network often have a temporal dimension. This is also applicable for road accidents in BMR which have incident datetime data. This will allow us to understand the distribution of road accidents across time and identify if there are certain time periods where road accidents might occur more often.\nWe will explore the density of road accidents in time, specifically by month, by day of week and by time of day. EDA exploring these time elements in the data can be found in Part 1A.\n\n\n\nroadacc$inc_month &lt;- as.numeric(roadacc$inc_month)\nroadacc$inc_dayofweek &lt;- as.numeric(roadacc$inc_dayofweek)\nroadacc$inc_time &lt;- as.numeric(roadacc$inc_time)\n\nWe utilise the tkde() function to calculate the temporal kernel density estimate.\nWe initialize the weights by creating a vector w where each element is 1, with a length equal to the number of rows in the roadacc data. This means that each road accident will be equally weight in the KDE calculation.\nWe also generate a sample range starting from the minimum to maximum month in inc_month column of the roadacc dataset, with increments of 0.5. As a recap, inc_month represents the month of the occurrence of the incident.\n\nw &lt;- rep(1,nrow(roadacc))\nsamples &lt;- seq(min(roadacc$inc_month),max(roadacc$inc_month),0.5)\n\nThe kernel density estimation is calculated for several bandwidths (bw 1 to bw 6 as seen in the codes below). Each bandwidth gives a different smoothing effect on the density estimate. bw 1 gives a more sensitive estimate, capturing fine details in the distribution of road accidents while larger bandwidth bw 6 will create a smoother density estimate by averaging over a wider range of data points.\n\nmonth_kernel_val &lt;- data.frame(\n  bw_1 = tkde(roadacc$inc_month, w=w, samples = samples, bw = 1, kernel_name = \"quartic\"),\n  bw_2 = tkde(roadacc$inc_month, w=w, samples = samples, bw = 2, kernel_name = \"quartic\"),\n  bw_3 = tkde(roadacc$inc_month, w=w, samples = samples, bw = 3, kernel_name = \"quartic\"),\n  bw_4 = tkde(roadacc$inc_month, w=w, samples = samples, bw = 4, kernel_name = \"quartic\"),\n  bw_5 = tkde(roadacc$inc_month, w=w, samples = samples, bw = 5, kernel_name = \"quartic\"),\n  bw_6 = tkde(roadacc$inc_month, w=w, samples = samples, bw = 6, kernel_name = \"quartic\"),\n  month = samples\n)\n\n\ndf_month &lt;- reshape2::melt(month_kernel_val, id.vars = \"month\")\n\ndf_month$variable &lt;- as.factor(df_month$variable)\n\nggplot(data = df_month)+\n  geom_line(aes(x=month,y=value))+\n  scale_x_continuous(breaks =1:12, labels = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\")) +\n  facet_wrap(vars(variable),ncol=2, scales=\"free\")+\n  labs(title = \"Temporal KDE for Occurrence of Road Accidents by Month\", x = \"Month\", y=\"Density\")+\n  theme(axis.text = element_text(size = 5))\n\n\n\n\n\n\n\n\nBased on the plots above, we observe that:\n\nthe density curve for bw 1 is more jagged, reflecting more clearly the variations between the months - there are more significant drops in densities of road accidents in Feb, May and Nov while there are significant increases in densities of road accidents slightly before Apr, Oct and Dec.\nthe density curve starts to smooth out from bw 2. bw 3 and bw 4 seem to best capture the bimodal shape of the temporal dimension of road accidents before the bimodal shape starts to be less obvious in bw 5 and is entirely gone in bw 6 (this is hence why we stop at bw 6 and do not explore further bandwidths).\nfor bw 3 and 4, it is clear that occurrence of road accidents is most dense at the start (~Mar to Apr) and end of the year (towards the Oct period), while the occurrence of road accidents is less dense in the middle part of the year. This could be explained by the holiday seasons near the start and end of year that could have led to higher traffic on the roads. Further, the peak near Apr could be explained by the Songkran (Thai New Year) Festival that occurs annually in Apr, which could have led to more traffic and pedestrians on the road, increasing the chances of accidents.\n\n\n\n\nWe conduct a similar analysis to study the distribution of road accidents by day of week. It is important to recall that we assigned the week to start from Monday during the data wrangling steps in Part 1A.\n\nw &lt;- rep(1,nrow(roadacc))\nsamples &lt;- seq(min(roadacc$inc_dayofweek),max(roadacc$inc_dayofweek),0.5)\n\nday_kernel_val &lt;- data.frame(\n  bw_1 = tkde(roadacc$inc_dayofweek, w=w, samples = samples, bw = 1, kernel_name = \"quartic\"),\n  bw_2 = tkde(roadacc$inc_dayofweek, w=w, samples = samples, bw = 2, kernel_name = \"quartic\"),\n  bw_3 = tkde(roadacc$inc_dayofweek, w=w, samples = samples, bw = 3, kernel_name = \"quartic\"),\n  bw_4 = tkde(roadacc$inc_dayofweek, w=w, samples = samples, bw = 4, kernel_name = \"quartic\"),\n  day = samples\n)\n\n\ndf_day &lt;- reshape2::melt(day_kernel_val, id.vars = \"day\")\ndf_day$variable &lt;- as.factor(df_day$variable)\n\nggplot(data = df_day)+\n  geom_line(aes(x=day,y=value))+\n  scale_x_continuous(breaks =1:7, labels = c(\"Mon\",\"Tues\",\"Wed\",\"Thu\",\"Fri\",\"Sat\",\"Sun\")) +\n  facet_wrap(vars(variable),ncol=2, scales=\"free\")+\n  labs(title = \"Temporal KDE for Occurrence of Road Accidents by Day of the Week\", x = \"Day\", y=\"Density\")+\n  theme(axis.text = element_text(size = 5))\n\n\n\n\n\n\n\n\nBased on the plots above, we observe that:\n\nthe density curve for bw 1 is more jagged, reflecting more clearly the variations between the days - there are more significant increases in densities of road accidents from Fri to Sat. This could be explained by Fri and Sat being the start of the weekend and more traffic and pedestrians being out on the road for social activities.\nthe density curve starts to smooth out in bw 2 and seem to best capture the bimodal shape of the temporal dimension of road accidents - the density of road accidents increase between Fri to Sat and then drop on Sun and Mon before increasing on Tues again. As stated in the above point, the increase between Fri and Sat can be explained by these days being the start of the weekend, the drop in Sun and Mon could be due to less traffic as people start to get ready for the work/school week ahead and potentially even Mon blues when less people might travel to work. The increase in road accidents from Tues could be due to the steady stream of office workers/school children heading to office/school.\nThe bimodal shape becomes less obvious/almost entirely gone in bw3 and 4 (this is hence why we stop at bw 4 and do not explore further bandwidths).\n\n\n\n\nWe conduct a similar analysis to study the distribution of road accidents by time of day.\n\nw &lt;- rep(1,nrow(roadacc))\nsamples &lt;- seq(min(roadacc$inc_time),max(roadacc$inc_time),0.5)\n\ntime_kernel_val &lt;- data.frame(\n  bw_1 = tkde(roadacc$inc_time, w=w, samples = samples, bw = 1, kernel_name = \"quartic\"),\n  bw_2 = tkde(roadacc$inc_time, w=w, samples = samples, bw = 2, kernel_name = \"quartic\"),\n  bw_3 = tkde(roadacc$inc_time, w=w, samples = samples, bw = 3, kernel_name = \"quartic\"),\n  bw_4 = tkde(roadacc$inc_time, w=w, samples = samples, bw = 4, kernel_name = \"quartic\"),\n  bw_5 = tkde(roadacc$inc_time, w=w, samples = samples, bw = 5, kernel_name = \"quartic\"),\n  bw_6 = tkde(roadacc$inc_time, w=w, samples = samples, bw = 6, kernel_name = \"quartic\"),\n  time = samples\n)\n\n\ndf_time &lt;- reshape2::melt(time_kernel_val, id.vars = \"time\")\ndf_time$variable &lt;- as.factor(df_time$variable)\n\nggplot(data = df_time)+\n  geom_line(aes(x=time,y=value))+\n  scale_x_continuous(breaks =1:24) +\n  facet_wrap(vars(variable),ncol=2, scales=\"free\")+\n  labs(title = \"Temporal KDE for Occurrence of Road Accidents by Time of Day\", x = \"Time\", y=\"Density\")+\n  theme(axis.text = element_text(size = 5))\n\n\n\n\n\n\n\n\nBased on the plots above, we observe that:\n\nthe density curve for bw 1 is more jagged, reflecting more clearly the variations between the hours of the day - there are more significant increases in densities of road accidents from 7am. This could be explained by 7am being the start of the day and more traffic and pedestrians being out on the road for their daily activities.\nthe density curve starts to smooth out from bw 2 showing the period of 7am to 11am as the peak of the density of road accidents, how it dips from 12pm to 1pm (which could be explained by it being lunch hour and regular workers might be having their lunch rather than being out on the road) and the slight increase between 6pm to 8pm which is the knock-off time for office workers, hence leading to more traffic and pedestrians on the road. the density of road accidents dip significantly from 11pm which could be explained by it being the end of the day for most people hence leading to less traffic on the road and lower chances of road accidents occurring.\nthe density curve starts to smooth out significantly from bw 3 onwards before forming an entirely smooth hump in bw 6 (this is hence why we stop at bw 6 and do not explore further bandwidths)."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01B.html#spatio-temporal-sppa",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01B.html#spatio-temporal-sppa",
    "title": "Take-home Exercise 1B",
    "section": "",
    "text": "We now combine the separate spatial and temporal analysis carried out in sections above under one combined spatio-temporal analysis.\n\nWhile spatial analysis helps us to understand the pattern of events i.e. road accidents across geographical locations, it treats time as static and might miss how phenomena evolves over time.\nWhile temporal analysis studies changes over time, it ignores spatial relationships and might overlook how events at different locations might be interconnected.\nSpatio-temporal analysis provides an understanding of how events, in this case road accidents, are change across both space and time.\n\nUnder this section, the specific research questions we would like to answer are:\n\nare the locations of road accidents in BMR spatially and spatio-temporally independent?\nif the answer is no, where and when do the observed road accidents tend to cluster?\n\n\n\n\n\n\nAs a recap, we visualise the distribution of road accidents by month:\n\ntm_shape(provincedata32647)+\n  tm_polygons()+\n  tm_shape(roadacc)+\n  tm_dots(size=0.05,col = \"blue\",alpha =0.5)+\n  tm_facets(by=\"inc_month\",\n            free.coords = FALSE,\n            drop.units = TRUE)\n\n\n\n\n\n\n\n\nAs can be seen, there seem to be more road accidents in Apr, Oct and Dec.\n\n\n\nIn this section, we will compute STKDE using spattemp.density() of sparr package.\n\n\n\nThe code chunk below removes the unwanted fields from roadacc dataframe as as.ppp() only requires the month and geometry field from the input roadacc sf dataframe.\n\nroadacc_month &lt;- roadacc %&gt;%\n  select(inc_month)\n\n\n\n\nThe code chunk below is used to derive a ppp object frm the roadacc_month sf dataframe:\n\nroadacc_month_ppp &lt;- as.ppp(roadacc_month)\nroadacc_month_ppp\n\nMarked planar point pattern: 12985 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [591277.5, 710166.1] x [1486845.7, 1576520.5] units\n\n\nThe code chunk below is used to check that the output is in the correct object class:\n\nsummary(roadacc_month_ppp)\n\nMarked planar point pattern:  12985 points\nAverage intensity 1.217956e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   4.000   7.000   6.666  10.000  12.000 \n\nWindow: rectangle = [591277.5, 710166.1] x [1486845.7, 1576520.5] units\n                    (118900 x 89670 units)\nWindow area = 10661300000 square units\n\n\nWe note that there are duplicated point events from the code below:\n\nany(duplicated(roadacc_month_ppp))\n\n[1] TRUE\n\n\nWe use the multiplicity() function to count the number of co-incident points:\n\nmultiplicity(roadacc_month_ppp)\n\n    1     2     3     4     5     6     7     8     9    10    11    12    13 \n    1     1     1     2     1     1     1     1     2     1     1     1     1 \n   14    15    16    17    18    19    20    21    22    23    24    25    26 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n   27    28    29    30    31    32    33    34    35    36    37    38    39 \n    1     1     4     1     1     1     2     1     1     6     1     4     4 \n   40    41    42    43    44    45    46    47    48    49    50    51    52 \n    1     1     4     1     1     1     1     1     1     1     1     1     1 \n   53    54    55    56    57    58    59    60    61    62    63    64    65 \n    1     1     1     1     6     6     1     6     1     1     6     3     1 \n   66    67    68    69    70    71    72    73    74    75    76    77    78 \n    6     1     1     1     1     1     1     1     3     2     1     1     1 \n   79    80    81    82    83    84    85    86    87    88    89    90    91 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n   92    93    94    95    96    97    98    99   100   101   102   103   104 \n    1     1     1     2     1     3     1     1     2     1     1     1     1 \n  105   106   107   108   109   110   111   112   113   114   115   116   117 \n    1     1     4     1     1     1    10    10     4     1     1     1     1 \n  118   119   120   121   122   123   124   125   126   127   128   129   130 \n    4     1     1     1    10    10     1     1     1     1     1     1     1 \n  131   132   133   134   135   136   137   138   139   140   141   142   143 \n    1     1     1     1    10     1     1    10     1     1    10     1     1 \n  144   145   146   147   148   149   150   151   152   153   154   155   156 \n   10    10     1     1     1     1     1     1     1     1     1     1    10 \n  157   158   159   160   161   162   163   164   165   166   167   168   169 \n    4     2     1     1     1     1     1     2     2     1     1     1     1 \n  170   171   172   173   174   175   176   177   178   179   180   181   182 \n    1     3     2     4     1     3     1     1     1     1     1     4     4 \n  183   184   185   186   187   188   189   190   191   192   193   194   195 \n    1     1     2     1     3     1     1     1     1     1     3     4     1 \n  196   197   198   199   200   201   202   203   204   205   206   207   208 \n    1     1     1     1     3     1     1     1     1     4     4     1     1 \n  209   210   211   212   213   214   215   216   217   218   219   220   221 \n    4     1     1     1     1     1     1     1     1     1     1     1     1 \n  222   223   224   225   226   227   228   229   230   231   232   233   234 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n  235   236   237   238   239   240   241   242   243   244   245   246   247 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  248   249   250   251   252   253   254   255   256   257   258   259   260 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  261   262   263   264   265   266   267   268   269   270   271   272   273 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  274   275   276   277   278   279   280   281   282   283   284   285   286 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  287   288   289   290   291   292   293   294   295   296   297   298   299 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  300   301   302   303   304   305   306   307   308   309   310   311   312 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  313   314   315   316   317   318   319   320   321   322   323   324   325 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n  326   327   328   329   330   331   332   333   334   335   336   337   338 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  339   340   341   342   343   344   345   346   347   348   349   350   351 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  352   353   354   355   356   357   358   359   360   361   362   363   364 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  365   366   367   368   369   370   371   372   373   374   375   376   377 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  378   379   380   381   382   383   384   385   386   387   388   389   390 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  391   392   393   394   395   396   397   398   399   400   401   402   403 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n  404   405   406   407   408   409   410   411   412   413   414   415   416 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  417   418   419   420   421   422   423   424   425   426   427   428   429 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  430   431   432   433   434   435   436   437   438   439   440   441   442 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  443   444   445   446   447   448   449   450   451   452   453   454   455 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  456   457   458   459   460   461   462   463   464   465   466   467   468 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  469   470   471   472   473   474   475   476   477   478   479   480   481 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  482   483   484   485   486   487   488   489   490   491   492   493   494 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  495   496   497   498   499   500   501   502   503   504   505   506   507 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n  508   509   510   511   512   513   514   515   516   517   518   519   520 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  521   522   523   524   525   526   527   528   529   530   531   532   533 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n  534   535   536   537   538   539   540   541   542   543   544   545   546 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  547   548   549   550   551   552   553   554   555   556   557   558   559 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  560   561   562   563   564   565   566   567   568   569   570   571   572 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  573   574   575   576   577   578   579   580   581   582   583   584   585 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  586   587   588   589   590   591   592   593   594   595   596   597   598 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n  599   600   601   602   603   604   605   606   607   608   609   610   611 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n  612   613   614   615   616   617   618   619   620   621   622   623   624 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  625   626   627   628   629   630   631   632   633   634   635   636   637 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  638   639   640   641   642   643   644   645   646   647   648   649   650 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n  651   652   653   654   655   656   657   658   659   660   661   662   663 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  664   665   666   667   668   669   670   671   672   673   674   675   676 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  677   678   679   680   681   682   683   684   685   686   687   688   689 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n  690   691   692   693   694   695   696   697   698   699   700   701   702 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  703   704   705   706   707   708   709   710   711   712   713   714   715 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n  716   717   718   719   720   721   722   723   724   725   726   727   728 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n  729   730   731   732   733   734   735   736   737   738   739   740   741 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n  742   743   744   745   746   747   748   749   750   751   752   753   754 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n  755   756   757   758   759   760   761   762   763   764   765   766   767 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  768   769   770   771   772   773   774   775   776   777   778   779   780 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n  781   782   783   784   785   786   787   788   789   790   791   792   793 \n    1     1     2     1     1     1     1     1     2     1     1     1     1 \n  794   795   796   797   798   799   800   801   802   803   804   805   806 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  807   808   809   810   811   812   813   814   815   816   817   818   819 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  820   821   822   823   824   825   826   827   828   829   830   831   832 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  833   834   835   836   837   838   839   840   841   842   843   844   845 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n  846   847   848   849   850   851   852   853   854   855   856   857   858 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  859   860   861   862   863   864   865   866   867   868   869   870   871 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n  872   873   874   875   876   877   878   879   880   881   882   883   884 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n  885   886   887   888   889   890   891   892   893   894   895   896   897 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  898   899   900   901   902   903   904   905   906   907   908   909   910 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  911   912   913   914   915   916   917   918   919   920   921   922   923 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n  924   925   926   927   928   929   930   931   932   933   934   935   936 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  937   938   939   940   941   942   943   944   945   946   947   948   949 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  950   951   952   953   954   955   956   957   958   959   960   961   962 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  963   964   965   966   967   968   969   970   971   972   973   974   975 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n  976   977   978   979   980   981   982   983   984   985   986   987   988 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n  989   990   991   992   993   994   995   996   997   998   999  1000  1001 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1002  1003  1004  1005  1006  1007  1008  1009  1010  1011  1012  1013  1014 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1015  1016  1017  1018  1019  1020  1021  1022  1023  1024  1025  1026  1027 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1028  1029  1030  1031  1032  1033  1034  1035  1036  1037  1038  1039  1040 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1041  1042  1043  1044  1045  1046  1047  1048  1049  1050  1051  1052  1053 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1054  1055  1056  1057  1058  1059  1060  1061  1062  1063  1064  1065  1066 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1067  1068  1069  1070  1071  1072  1073  1074  1075  1076  1077  1078  1079 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1080  1081  1082  1083  1084  1085  1086  1087  1088  1089  1090  1091  1092 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 1093  1094  1095  1096  1097  1098  1099  1100  1101  1102  1103  1104  1105 \n    1     1     1     1     2     1     1     1     1     1     3     1     1 \n 1106  1107  1108  1109  1110  1111  1112  1113  1114  1115  1116  1117  1118 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1119  1120  1121  1122  1123  1124  1125  1126  1127  1128  1129  1130  1131 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1132  1133  1134  1135  1136  1137  1138  1139  1140  1141  1142  1143  1144 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1145  1146  1147  1148  1149  1150  1151  1152  1153  1154  1155  1156  1157 \n    1     1     1     2     2     1     1     1     1     1     1     1     2 \n 1158  1159  1160  1161  1162  1163  1164  1165  1166  1167  1168  1169  1170 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1171  1172  1173  1174  1175  1176  1177  1178  1179  1180  1181  1182  1183 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1184  1185  1186  1187  1188  1189  1190  1191  1192  1193  1194  1195  1196 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1197  1198  1199  1200  1201  1202  1203  1204  1205  1206  1207  1208  1209 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1210  1211  1212  1213  1214  1215  1216  1217  1218  1219  1220  1221  1222 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1223  1224  1225  1226  1227  1228  1229  1230  1231  1232  1233  1234  1235 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 1236  1237  1238  1239  1240  1241  1242  1243  1244  1245  1246  1247  1248 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1249  1250  1251  1252  1253  1254  1255  1256  1257  1258  1259  1260  1261 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1262  1263  1264  1265  1266  1267  1268  1269  1270  1271  1272  1273  1274 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 1275  1276  1277  1278  1279  1280  1281  1282  1283  1284  1285  1286  1287 \n    1     1     1     1     1     1     1     1     1     3     1     1     1 \n 1288  1289  1290  1291  1292  1293  1294  1295  1296  1297  1298  1299  1300 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1301  1302  1303  1304  1305  1306  1307  1308  1309  1310  1311  1312  1313 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1314  1315  1316  1317  1318  1319  1320  1321  1322  1323  1324  1325  1326 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1327  1328  1329  1330  1331  1332  1333  1334  1335  1336  1337  1338  1339 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1340  1341  1342  1343  1344  1345  1346  1347  1348  1349  1350  1351  1352 \n    2     1     1     1     1     1     1     1     1     2     1     1     1 \n 1353  1354  1355  1356  1357  1358  1359  1360  1361  1362  1363  1364  1365 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1366  1367  1368  1369  1370  1371  1372  1373  1374  1375  1376  1377  1378 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1379  1380  1381  1382  1383  1384  1385  1386  1387  1388  1389  1390  1391 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1392  1393  1394  1395  1396  1397  1398  1399  1400  1401  1402  1403  1404 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1405  1406  1407  1408  1409  1410  1411  1412  1413  1414  1415  1416  1417 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1418  1419  1420  1421  1422  1423  1424  1425  1426  1427  1428  1429  1430 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1431  1432  1433  1434  1435  1436  1437  1438  1439  1440  1441  1442  1443 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1444  1445  1446  1447  1448  1449  1450  1451  1452  1453  1454  1455  1456 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1457  1458  1459  1460  1461  1462  1463  1464  1465  1466  1467  1468  1469 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1470  1471  1472  1473  1474  1475  1476  1477  1478  1479  1480  1481  1482 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1483  1484  1485  1486  1487  1488  1489  1490  1491  1492  1493  1494  1495 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1496  1497  1498  1499  1500  1501  1502  1503  1504  1505  1506  1507  1508 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1509  1510  1511  1512  1513  1514  1515  1516  1517  1518  1519  1520  1521 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1522  1523  1524  1525  1526  1527  1528  1529  1530  1531  1532  1533  1534 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1535  1536  1537  1538  1539  1540  1541  1542  1543  1544  1545  1546  1547 \n    1     1     1     1     1     1     1     1     1     1     4     1     1 \n 1548  1549  1550  1551  1552  1553  1554  1555  1556  1557  1558  1559  1560 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1561  1562  1563  1564  1565  1566  1567  1568  1569  1570  1571  1572  1573 \n    1     1     1     1     1     1     1     1     1     1     1     4     1 \n 1574  1575  1576  1577  1578  1579  1580  1581  1582  1583  1584  1585  1586 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1587  1588  1589  1590  1591  1592  1593  1594  1595  1596  1597  1598  1599 \n    1     1     1     1     1     2     1     1     1     2     1     1     1 \n 1600  1601  1602  1603  1604  1605  1606  1607  1608  1609  1610  1611  1612 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1613  1614  1615  1616  1617  1618  1619  1620  1621  1622  1623  1624  1625 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1626  1627  1628  1629  1630  1631  1632  1633  1634  1635  1636  1637  1638 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1639  1640  1641  1642  1643  1644  1645  1646  1647  1648  1649  1650  1651 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1652  1653  1654  1655  1656  1657  1658  1659  1660  1661  1662  1663  1664 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 1665  1666  1667  1668  1669  1670  1671  1672  1673  1674  1675  1676  1677 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 1678  1679  1680  1681  1682  1683  1684  1685  1686  1687  1688  1689  1690 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1691  1692  1693  1694  1695  1696  1697  1698  1699  1700  1701  1702  1703 \n    1     2     1     1     1     1     1     1     1     1     1     2     1 \n 1704  1705  1706  1707  1708  1709  1710  1711  1712  1713  1714  1715  1716 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1717  1718  1719  1720  1721  1722  1723  1724  1725  1726  1727  1728  1729 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1730  1731  1732  1733  1734  1735  1736  1737  1738  1739  1740  1741  1742 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1743  1744  1745  1746  1747  1748  1749  1750  1751  1752  1753  1754  1755 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 1756  1757  1758  1759  1760  1761  1762  1763  1764  1765  1766  1767  1768 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1769  1770  1771  1772  1773  1774  1775  1776  1777  1778  1779  1780  1781 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1782  1783  1784  1785  1786  1787  1788  1789  1790  1791  1792  1793  1794 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1795  1796  1797  1798  1799  1800  1801  1802  1803  1804  1805  1806  1807 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1808  1809  1810  1811  1812  1813  1814  1815  1816  1817  1818  1819  1820 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1821  1822  1823  1824  1825  1826  1827  1828  1829  1830  1831  1832  1833 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1834  1835  1836  1837  1838  1839  1840  1841  1842  1843  1844  1845  1846 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1847  1848  1849  1850  1851  1852  1853  1854  1855  1856  1857  1858  1859 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1860  1861  1862  1863  1864  1865  1866  1867  1868  1869  1870  1871  1872 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 1873  1874  1875  1876  1877  1878  1879  1880  1881  1882  1883  1884  1885 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1886  1887  1888  1889  1890  1891  1892  1893  1894  1895  1896  1897  1898 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 1899  1900  1901  1902  1903  1904  1905  1906  1907  1908  1909  1910  1911 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1912  1913  1914  1915  1916  1917  1918  1919  1920  1921  1922  1923  1924 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 1925  1926  1927  1928  1929  1930  1931  1932  1933  1934  1935  1936  1937 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1938  1939  1940  1941  1942  1943  1944  1945  1946  1947  1948  1949  1950 \n    1     1     1     1     1     1     1     1     1     2     1     1     2 \n 1951  1952  1953  1954  1955  1956  1957  1958  1959  1960  1961  1962  1963 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1964  1965  1966  1967  1968  1969  1970  1971  1972  1973  1974  1975  1976 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1977  1978  1979  1980  1981  1982  1983  1984  1985  1986  1987  1988  1989 \n    1     1     1     1     1     1     1     2     1     1     2     1     1 \n 1990  1991  1992  1993  1994  1995  1996  1997  1998  1999  2000  2001  2002 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2003  2004  2005  2006  2007  2008  2009  2010  2011  2012  2013  2014  2015 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 2016  2017  2018  2019  2020  2021  2022  2023  2024  2025  2026  2027  2028 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 2029  2030  2031  2032  2033  2034  2035  2036  2037  2038  2039  2040  2041 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2042  2043  2044  2045  2046  2047  2048  2049  2050  2051  2052  2053  2054 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2055  2056  2057  2058  2059  2060  2061  2062  2063  2064  2065  2066  2067 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 2068  2069  2070  2071  2072  2073  2074  2075  2076  2077  2078  2079  2080 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2081  2082  2083  2084  2085  2086  2087  2088  2089  2090  2091  2092  2093 \n    2     1     1     1     1     1     1     1     1     1     1     1     2 \n 2094  2095  2096  2097  2098  2099  2100  2101  2102  2103  2104  2105  2106 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2107  2108  2109  2110  2111  2112  2113  2114  2115  2116  2117  2118  2119 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 2120  2121  2122  2123  2124  2125  2126  2127  2128  2129  2130  2131  2132 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 2133  2134  2135  2136  2137  2138  2139  2140  2141  2142  2143  2144  2145 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2146  2147  2148  2149  2150  2151  2152  2153  2154  2155  2156  2157  2158 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2159  2160  2161  2162  2163  2164  2165  2166  2167  2168  2169  2170  2171 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 2172  2173  2174  2175  2176  2177  2178  2179  2180  2181  2182  2183  2184 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2185  2186  2187  2188  2189  2190  2191  2192  2193  2194  2195  2196  2197 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 2198  2199  2200  2201  2202  2203  2204  2205  2206  2207  2208  2209  2210 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2211  2212  2213  2214  2215  2216  2217  2218  2219  2220  2221  2222  2223 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2224  2225  2226  2227  2228  2229  2230  2231  2232  2233  2234  2235  2236 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2237  2238  2239  2240  2241  2242  2243  2244  2245  2246  2247  2248  2249 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2250  2251  2252  2253  2254  2255  2256  2257  2258  2259  2260  2261  2262 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 2263  2264  2265  2266  2267  2268  2269  2270  2271  2272  2273  2274  2275 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 2276  2277  2278  2279  2280  2281  2282  2283  2284  2285  2286  2287  2288 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2289  2290  2291  2292  2293  2294  2295  2296  2297  2298  2299  2300  2301 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2302  2303  2304  2305  2306  2307  2308  2309  2310  2311  2312  2313  2314 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2315  2316  2317  2318  2319  2320  2321  2322  2323  2324  2325  2326  2327 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2328  2329  2330  2331  2332  2333  2334  2335  2336  2337  2338  2339  2340 \n    3     1     1     1     1     1     1     1     1     1     2     1     1 \n 2341  2342  2343  2344  2345  2346  2347  2348  2349  2350  2351  2352  2353 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2354  2355  2356  2357  2358  2359  2360  2361  2362  2363  2364  2365  2366 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2367  2368  2369  2370  2371  2372  2373  2374  2375  2376  2377  2378  2379 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2380  2381  2382  2383  2384  2385  2386  2387  2388  2389  2390  2391  2392 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2393  2394  2395  2396  2397  2398  2399  2400  2401  2402  2403  2404  2405 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2406  2407  2408  2409  2410  2411  2412  2413  2414  2415  2416  2417  2418 \n    1     1     1     1     1     1     1     1     1     3     1     1     1 \n 2419  2420  2421  2422  2423  2424  2425  2426  2427  2428  2429  2430  2431 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2432  2433  2434  2435  2436  2437  2438  2439  2440  2441  2442  2443  2444 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2445  2446  2447  2448  2449  2450  2451  2452  2453  2454  2455  2456  2457 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2458  2459  2460  2461  2462  2463  2464  2465  2466  2467  2468  2469  2470 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2471  2472  2473  2474  2475  2476  2477  2478  2479  2480  2481  2482  2483 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2484  2485  2486  2487  2488  2489  2490  2491  2492  2493  2494  2495  2496 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2497  2498  2499  2500  2501  2502  2503  2504  2505  2506  2507  2508  2509 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2510  2511  2512  2513  2514  2515  2516  2517  2518  2519  2520  2521  2522 \n    1     1     1     3     1     1     1     1     1     1     1     1     1 \n 2523  2524  2525  2526  2527  2528  2529  2530  2531  2532  2533  2534  2535 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 2536  2537  2538  2539  2540  2541  2542  2543  2544  2545  2546  2547  2548 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2549  2550  2551  2552  2553  2554  2555  2556  2557  2558  2559  2560  2561 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2562  2563  2564  2565  2566  2567  2568  2569  2570  2571  2572  2573  2574 \n    1     1     2     1     1     1     1     1     1     1     1     3     1 \n 2575  2576  2577  2578  2579  2580  2581  2582  2583  2584  2585  2586  2587 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2588  2589  2590  2591  2592  2593  2594  2595  2596  2597  2598  2599  2600 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2601  2602  2603  2604  2605  2606  2607  2608  2609  2610  2611  2612  2613 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 2614  2615  2616  2617  2618  2619  2620  2621  2622  2623  2624  2625  2626 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2627  2628  2629  2630  2631  2632  2633  2634  2635  2636  2637  2638  2639 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 2640  2641  2642  2643  2644  2645  2646  2647  2648  2649  2650  2651  2652 \n    1     1     1     1     1     3     3     1     1     1     1     1     1 \n 2653  2654  2655  2656  2657  2658  2659  2660  2661  2662  2663  2664  2665 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2666  2667  2668  2669  2670  2671  2672  2673  2674  2675  2676  2677  2678 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2679  2680  2681  2682  2683  2684  2685  2686  2687  2688  2689  2690  2691 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 2692  2693  2694  2695  2696  2697  2698  2699  2700  2701  2702  2703  2704 \n    1     1     3     3     1     1     1     1     1     1     1     1     1 \n 2705  2706  2707  2708  2709  2710  2711  2712  2713  2714  2715  2716  2717 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 2718  2719  2720  2721  2722  2723  2724  2725  2726  2727  2728  2729  2730 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2731  2732  2733  2734  2735  2736  2737  2738  2739  2740  2741  2742  2743 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 2744  2745  2746  2747  2748  2749  2750  2751  2752  2753  2754  2755  2756 \n    1     1     1     1     1     1     1     1     1     1     3     1     1 \n 2757  2758  2759  2760  2761  2762  2763  2764  2765  2766  2767  2768  2769 \n    1     1     1     1     1     1     1     1     2     3     1     1     1 \n 2770  2771  2772  2773  2774  2775  2776  2777  2778  2779  2780  2781  2782 \n    1     1     1     1     1     1     1     1     1     1     1     1     3 \n 2783  2784  2785  2786  2787  2788  2789  2790  2791  2792  2793  2794  2795 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2796  2797  2798  2799  2800  2801  2802  2803  2804  2805  2806  2807  2808 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2809  2810  2811  2812  2813  2814  2815  2816  2817  2818  2819  2820  2821 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2822  2823  2824  2825  2826  2827  2828  2829  2830  2831  2832  2833  2834 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2835  2836  2837  2838  2839  2840  2841  2842  2843  2844  2845  2846  2847 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2848  2849  2850  2851  2852  2853  2854  2855  2856  2857  2858  2859  2860 \n    1     1     1     1     1     1     1     2     1     1     1     1     2 \n 2861  2862  2863  2864  2865  2866  2867  2868  2869  2870  2871  2872  2873 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 2874  2875  2876  2877  2878  2879  2880  2881  2882  2883  2884  2885  2886 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2887  2888  2889  2890  2891  2892  2893  2894  2895  2896  2897  2898  2899 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2900  2901  2902  2903  2904  2905  2906  2907  2908  2909  2910  2911  2912 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2913  2914  2915  2916  2917  2918  2919  2920  2921  2922  2923  2924  2925 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2926  2927  2928  2929  2930  2931  2932  2933  2934  2935  2936  2937  2938 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2939  2940  2941  2942  2943  2944  2945  2946  2947  2948  2949  2950  2951 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2952  2953  2954  2955  2956  2957  2958  2959  2960  2961  2962  2963  2964 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2965  2966  2967  2968  2969  2970  2971  2972  2973  2974  2975  2976  2977 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2978  2979  2980  2981  2982  2983  2984  2985  2986  2987  2988  2989  2990 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2991  2992  2993  2994  2995  2996  2997  2998  2999  3000  3001  3002  3003 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3004  3005  3006  3007  3008  3009  3010  3011  3012  3013  3014  3015  3016 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 3017  3018  3019  3020  3021  3022  3023  3024  3025  3026  3027  3028  3029 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3030  3031  3032  3033  3034  3035  3036  3037  3038  3039  3040  3041  3042 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 3043  3044  3045  3046  3047  3048  3049  3050  3051  3052  3053  3054  3055 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3056  3057  3058  3059  3060  3061  3062  3063  3064  3065  3066  3067  3068 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 3069  3070  3071  3072  3073  3074  3075  3076  3077  3078  3079  3080  3081 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3082  3083  3084  3085  3086  3087  3088  3089  3090  3091  3092  3093  3094 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 3095  3096  3097  3098  3099  3100  3101  3102  3103  3104  3105  3106  3107 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3108  3109  3110  3111  3112  3113  3114  3115  3116  3117  3118  3119  3120 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3121  3122  3123  3124  3125  3126  3127  3128  3129  3130  3131  3132  3133 \n    2     1     1     1     1     1     1     1     1     1     1     1     2 \n 3134  3135  3136  3137  3138  3139  3140  3141  3142  3143  3144  3145  3146 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3147  3148  3149  3150  3151  3152  3153  3154  3155  3156  3157  3158  3159 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3160  3161  3162  3163  3164  3165  3166  3167  3168  3169  3170  3171  3172 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3173  3174  3175  3176  3177  3178  3179  3180  3181  3182  3183  3184  3185 \n    1     1     1     1     1     1     2     1     2     1     1     1     1 \n 3186  3187  3188  3189  3190  3191  3192  3193  3194  3195  3196  3197  3198 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3199  3200  3201  3202  3203  3204  3205  3206  3207  3208  3209  3210  3211 \n    1     2     1     1     1     1     1     1     2     3     1     1     1 \n 3212  3213  3214  3215  3216  3217  3218  3219  3220  3221  3222  3223  3224 \n    1     1     1     1     2     1     1     1     1     3     1     1     1 \n 3225  3226  3227  3228  3229  3230  3231  3232  3233  3234  3235  3236  3237 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3238  3239  3240  3241  3242  3243  3244  3245  3246  3247  3248  3249  3250 \n    3     1     1     1     1     1     2     1     1     1     1     1     1 \n 3251  3252  3253  3254  3255  3256  3257  3258  3259  3260  3261  3262  3263 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 3264  3265  3266  3267  3268  3269  3270  3271  3272  3273  3274  3275  3276 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3277  3278  3279  3280  3281  3282  3283  3284  3285  3286  3287  3288  3289 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 3290  3291  3292  3293  3294  3295  3296  3297  3298  3299  3300  3301  3302 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 3303  3304  3305  3306  3307  3308  3309  3310  3311  3312  3313  3314  3315 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3316  3317  3318  3319  3320  3321  3322  3323  3324  3325  3326  3327  3328 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3329  3330  3331  3332  3333  3334  3335  3336  3337  3338  3339  3340  3341 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 3342  3343  3344  3345  3346  3347  3348  3349  3350  3351  3352  3353  3354 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 3355  3356  3357  3358  3359  3360  3361  3362  3363  3364  3365  3366  3367 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3368  3369  3370  3371  3372  3373  3374  3375  3376  3377  3378  3379  3380 \n    1     1     1     1     1     1     3     1     1     1     1     1     1 \n 3381  3382  3383  3384  3385  3386  3387  3388  3389  3390  3391  3392  3393 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3394  3395  3396  3397  3398  3399  3400  3401  3402  3403  3404  3405  3406 \n    1     1     1     1     1     1     1     2     1     2     1     2     1 \n 3407  3408  3409  3410  3411  3412  3413  3414  3415  3416  3417  3418  3419 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 3420  3421  3422  3423  3424  3425  3426  3427  3428  3429  3430  3431  3432 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 3433  3434  3435  3436  3437  3438  3439  3440  3441  3442  3443  3444  3445 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3446  3447  3448  3449  3450  3451  3452  3453  3454  3455  3456  3457  3458 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3459  3460  3461  3462  3463  3464  3465  3466  3467  3468  3469  3470  3471 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3472  3473  3474  3475  3476  3477  3478  3479  3480  3481  3482  3483  3484 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 3485  3486  3487  3488  3489  3490  3491  3492  3493  3494  3495  3496  3497 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3498  3499  3500  3501  3502  3503  3504  3505  3506  3507  3508  3509  3510 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3511  3512  3513  3514  3515  3516  3517  3518  3519  3520  3521  3522  3523 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3524  3525  3526  3527  3528  3529  3530  3531  3532  3533  3534  3535  3536 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3537  3538  3539  3540  3541  3542  3543  3544  3545  3546  3547  3548  3549 \n    1     1     1     1     3     1     1     1     1     1     1     1     1 \n 3550  3551  3552  3553  3554  3555  3556  3557  3558  3559  3560  3561  3562 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3563  3564  3565  3566  3567  3568  3569  3570  3571  3572  3573  3574  3575 \n    1     1     1     1     1     1     5     2     1     1     1     1     1 \n 3576  3577  3578  3579  3580  3581  3582  3583  3584  3585  3586  3587  3588 \n    1     1     1     1     1     1     1     3     1     1     1     1     1 \n 3589  3590  3591  3592  3593  3594  3595  3596  3597  3598  3599  3600  3601 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3602  3603  3604  3605  3606  3607  3608  3609  3610  3611  3612  3613  3614 \n    1     1     1     1     1     1     1     1     3     1     1     1     1 \n 3615  3616  3617  3618  3619  3620  3621  3622  3623  3624  3625  3626  3627 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 3628  3629  3630  3631  3632  3633  3634  3635  3636  3637  3638  3639  3640 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3641  3642  3643  3644  3645  3646  3647  3648  3649  3650  3651  3652  3653 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3654  3655  3656  3657  3658  3659  3660  3661  3662  3663  3664  3665  3666 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3667  3668  3669  3670  3671  3672  3673  3674  3675  3676  3677  3678  3679 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 3680  3681  3682  3683  3684  3685  3686  3687  3688  3689  3690  3691  3692 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3693  3694  3695  3696  3697  3698  3699  3700  3701  3702  3703  3704  3705 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3706  3707  3708  3709  3710  3711  3712  3713  3714  3715  3716  3717  3718 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 3719  3720  3721  3722  3723  3724  3725  3726  3727  3728  3729  3730  3731 \n    1     2     1     1     1     1     2     1     1     1     1     1     1 \n 3732  3733  3734  3735  3736  3737  3738  3739  3740  3741  3742  3743  3744 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3745  3746  3747  3748  3749  3750  3751  3752  3753  3754  3755  3756  3757 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3758  3759  3760  3761  3762  3763  3764  3765  3766  3767  3768  3769  3770 \n    1     1     1     1     1     1     1     1     1     3     1     1     1 \n 3771  3772  3773  3774  3775  3776  3777  3778  3779  3780  3781  3782  3783 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3784  3785  3786  3787  3788  3789  3790  3791  3792  3793  3794  3795  3796 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3797  3798  3799  3800  3801  3802  3803  3804  3805  3806  3807  3808  3809 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3810  3811  3812  3813  3814  3815  3816  3817  3818  3819  3820  3821  3822 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3823  3824  3825  3826  3827  3828  3829  3830  3831  3832  3833  3834  3835 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 3836  3837  3838  3839  3840  3841  3842  3843  3844  3845  3846  3847  3848 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3849  3850  3851  3852  3853  3854  3855  3856  3857  3858  3859  3860  3861 \n    3     1     1     1     1     1     1     1     1     1     1     1     1 \n 3862  3863  3864  3865  3866  3867  3868  3869  3870  3871  3872  3873  3874 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3875  3876  3877  3878  3879  3880  3881  3882  3883  3884  3885  3886  3887 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3888  3889  3890  3891  3892  3893  3894  3895  3896  3897  3898  3899  3900 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3901  3902  3903  3904  3905  3906  3907  3908  3909  3910  3911  3912  3913 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3914  3915  3916  3917  3918  3919  3920  3921  3922  3923  3924  3925  3926 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3927  3928  3929  3930  3931  3932  3933  3934  3935  3936  3937  3938  3939 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3940  3941  3942  3943  3944  3945  3946  3947  3948  3949  3950  3951  3952 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3953  3954  3955  3956  3957  3958  3959  3960  3961  3962  3963  3964  3965 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 3966  3967  3968  3969  3970  3971  3972  3973  3974  3975  3976  3977  3978 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3979  3980  3981  3982  3983  3984  3985  3986  3987  3988  3989  3990  3991 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3992  3993  3994  3995  3996  3997  3998  3999  4000  4001  4002  4003  4004 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4005  4006  4007  4008  4009  4010  4011  4012  4013  4014  4015  4016  4017 \n    1     1     1     1     1     3     1     1     1     1     1     1     1 \n 4018  4019  4020  4021  4022  4023  4024  4025  4026  4027  4028  4029  4030 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4031  4032  4033  4034  4035  4036  4037  4038  4039  4040  4041  4042  4043 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4044  4045  4046  4047  4048  4049  4050  4051  4052  4053  4054  4055  4056 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4057  4058  4059  4060  4061  4062  4063  4064  4065  4066  4067  4068  4069 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 4070  4071  4072  4073  4074  4075  4076  4077  4078  4079  4080  4081  4082 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4083  4084  4085  4086  4087  4088  4089  4090  4091  4092  4093  4094  4095 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 4096  4097  4098  4099  4100  4101  4102  4103  4104  4105  4106  4107  4108 \n    1     1     1     1     1     2     1     1     1     1     2     1     1 \n 4109  4110  4111  4112  4113  4114  4115  4116  4117  4118  4119  4120  4121 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 4122  4123  4124  4125  4126  4127  4128  4129  4130  4131  4132  4133  4134 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4135  4136  4137  4138  4139  4140  4141  4142  4143  4144  4145  4146  4147 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4148  4149  4150  4151  4152  4153  4154  4155  4156  4157  4158  4159  4160 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4161  4162  4163  4164  4165  4166  4167  4168  4169  4170  4171  4172  4173 \n    1     1     2     1     1     1     1     1     1     1     1     1     2 \n 4174  4175  4176  4177  4178  4179  4180  4181  4182  4183  4184  4185  4186 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 4187  4188  4189  4190  4191  4192  4193  4194  4195  4196  4197  4198  4199 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4200  4201  4202  4203  4204  4205  4206  4207  4208  4209  4210  4211  4212 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4213  4214  4215  4216  4217  4218  4219  4220  4221  4222  4223  4224  4225 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 4226  4227  4228  4229  4230  4231  4232  4233  4234  4235  4236  4237  4238 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4239  4240  4241  4242  4243  4244  4245  4246  4247  4248  4249  4250  4251 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4252  4253  4254  4255  4256  4257  4258  4259  4260  4261  4262  4263  4264 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 4265  4266  4267  4268  4269  4270  4271  4272  4273  4274  4275  4276  4277 \n    1     1     1     1     1     1     1     1     1     1     2     3     1 \n 4278  4279  4280  4281  4282  4283  4284  4285  4286  4287  4288  4289  4290 \n    1     1     1     1     1     1     1     1     3     1     1     1     1 \n 4291  4292  4293  4294  4295  4296  4297  4298  4299  4300  4301  4302  4303 \n    1     1     1     1     1     1     1     1     1     1     1     4     1 \n 4304  4305  4306  4307  4308  4309  4310  4311  4312  4313  4314  4315  4316 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4317  4318  4319  4320  4321  4322  4323  4324  4325  4326  4327  4328  4329 \n    1     1     1     3     1     1     1     1     1     1     1     1     1 \n 4330  4331  4332  4333  4334  4335  4336  4337  4338  4339  4340  4341  4342 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4343  4344  4345  4346  4347  4348  4349  4350  4351  4352  4353  4354  4355 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4356  4357  4358  4359  4360  4361  4362  4363  4364  4365  4366  4367  4368 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4369  4370  4371  4372  4373  4374  4375  4376  4377  4378  4379  4380  4381 \n    1     4     1     1     1     1     1     1     1     1     1     1     1 \n 4382  4383  4384  4385  4386  4387  4388  4389  4390  4391  4392  4393  4394 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4395  4396  4397  4398  4399  4400  4401  4402  4403  4404  4405  4406  4407 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4408  4409  4410  4411  4412  4413  4414  4415  4416  4417  4418  4419  4420 \n    1     1     1     1     4     1     1     1     1     1     1     1     1 \n 4421  4422  4423  4424  4425  4426  4427  4428  4429  4430  4431  4432  4433 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 4434  4435  4436  4437  4438  4439  4440  4441  4442  4443  4444  4445  4446 \n    1     1     4     1     1     1     1     1     1     1     1     1     1 \n 4447  4448  4449  4450  4451  4452  4453  4454  4455  4456  4457  4458  4459 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 4460  4461  4462  4463  4464  4465  4466  4467  4468  4469  4470  4471  4472 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4473  4474  4475  4476  4477  4478  4479  4480  4481  4482  4483  4484  4485 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4486  4487  4488  4489  4490  4491  4492  4493  4494  4495  4496  4497  4498 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4499  4500  4501  4502  4503  4504  4505  4506  4507  4508  4509  4510  4511 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4512  4513  4514  4515  4516  4517  4518  4519  4520  4521  4522  4523  4524 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4525  4526  4527  4528  4529  4530  4531  4532  4533  4534  4535  4536  4537 \n    1     1     2     1     4     1     1     1     1     1     1     1     1 \n 4538  4539  4540  4541  4542  4543  4544  4545  4546  4547  4548  4549  4550 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4551  4552  4553  4554  4555  4556  4557  4558  4559  4560  4561  4562  4563 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 4564  4565  4566  4567  4568  4569  4570  4571  4572  4573  4574  4575  4576 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 4577  4578  4579  4580  4581  4582  4583  4584  4585  4586  4587  4588  4589 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4590  4591  4592  4593  4594  4595  4596  4597  4598  4599  4600  4601  4602 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4603  4604  4605  4606  4607  4608  4609  4610  4611  4612  4613  4614  4615 \n    1     1     1     1     1     1     4     1     1     1     4     1     1 \n 4616  4617  4618  4619  4620  4621  4622  4623  4624  4625  4626  4627  4628 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 4629  4630  4631  4632  4633  4634  4635  4636  4637  4638  4639  4640  4641 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4642  4643  4644  4645  4646  4647  4648  4649  4650  4651  4652  4653  4654 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4655  4656  4657  4658  4659  4660  4661  4662  4663  4664  4665  4666  4667 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 4668  4669  4670  4671  4672  4673  4674  4675  4676  4677  4678  4679  4680 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4681  4682  4683  4684  4685  4686  4687  4688  4689  4690  4691  4692  4693 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4694  4695  4696  4697  4698  4699  4700  4701  4702  4703  4704  4705  4706 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4707  4708  4709  4710  4711  4712  4713  4714  4715  4716  4717  4718  4719 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 4720  4721  4722  4723  4724  4725  4726  4727  4728  4729  4730  4731  4732 \n    1     1     1     1     1     1     1     1     1     1     4     1     1 \n 4733  4734  4735  4736  4737  4738  4739  4740  4741  4742  4743  4744  4745 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4746  4747  4748  4749  4750  4751  4752  4753  4754  4755  4756  4757  4758 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4759  4760  4761  4762  4763  4764  4765  4766  4767  4768  4769  4770  4771 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4772  4773  4774  4775  4776  4777  4778  4779  4780  4781  4782  4783  4784 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4785  4786  4787  4788  4789  4790  4791  4792  4793  4794  4795  4796  4797 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4798  4799  4800  4801  4802  4803  4804  4805  4806  4807  4808  4809  4810 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4811  4812  4813  4814  4815  4816  4817  4818  4819  4820  4821  4822  4823 \n    1     1     1     3     1     1     1     1     1     1     1     1     1 \n 4824  4825  4826  4827  4828  4829  4830  4831  4832  4833  4834  4835  4836 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 4837  4838  4839  4840  4841  4842  4843  4844  4845  4846  4847  4848  4849 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4850  4851  4852  4853  4854  4855  4856  4857  4858  4859  4860  4861  4862 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4863  4864  4865  4866  4867  4868  4869  4870  4871  4872  4873  4874  4875 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 4876  4877  4878  4879  4880  4881  4882  4883  4884  4885  4886  4887  4888 \n    1     1     1     1     1     1     1     1     1     2     5     4     1 \n 4889  4890  4891  4892  4893  4894  4895  4896  4897  4898  4899  4900  4901 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4902  4903  4904  4905  4906  4907  4908  4909  4910  4911  4912  4913  4914 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4915  4916  4917  4918  4919  4920  4921  4922  4923  4924  4925  4926  4927 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4928  4929  4930  4931  4932  4933  4934  4935  4936  4937  4938  4939  4940 \n    1     1     1     1     2     1     1     1     2     1     1     1     2 \n 4941  4942  4943  4944  4945  4946  4947  4948  4949  4950  4951  4952  4953 \n    1     1     1     1     1     1     1     1     1     1     1     1     5 \n 4954  4955  4956  4957  4958  4959  4960  4961  4962  4963  4964  4965  4966 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4967  4968  4969  4970  4971  4972  4973  4974  4975  4976  4977  4978  4979 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4980  4981  4982  4983  4984  4985  4986  4987  4988  4989  4990  4991  4992 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4993  4994  4995  4996  4997  4998  4999  5000  5001  5002  5003  5004  5005 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 5006  5007  5008  5009  5010  5011  5012  5013  5014  5015  5016  5017  5018 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5019  5020  5021  5022  5023  5024  5025  5026  5027  5028  5029  5030  5031 \n    1     1     1     5     1     1     1     1     1     1     1     3     1 \n 5032  5033  5034  5035  5036  5037  5038  5039  5040  5041  5042  5043  5044 \n    1     1     1     1     1     1     1     1     1     1     3     1     1 \n 5045  5046  5047  5048  5049  5050  5051  5052  5053  5054  5055  5056  5057 \n    2     2     4     1     1     1     1     1     1     1     1     1     1 \n 5058  5059  5060  5061  5062  5063  5064  5065  5066  5067  5068  5069  5070 \n    1     1     1     1     1     1     1     1     5     1     1     1     1 \n 5071  5072  5073  5074  5075  5076  5077  5078  5079  5080  5081  5082  5083 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5084  5085  5086  5087  5088  5089  5090  5091  5092  5093  5094  5095  5096 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5097  5098  5099  5100  5101  5102  5103  5104  5105  5106  5107  5108  5109 \n    1     1     1     1     1     1     1     3     1     1     1     1     1 \n 5110  5111  5112  5113  5114  5115  5116  5117  5118  5119  5120  5121  5122 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 5123  5124  5125  5126  5127  5128  5129  5130  5131  5132  5133  5134  5135 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 5136  5137  5138  5139  5140  5141  5142  5143  5144  5145  5146  5147  5148 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5149  5150  5151  5152  5153  5154  5155  5156  5157  5158  5159  5160  5161 \n    1     1     1     3     1     1     1     1     1     1     1     1     1 \n 5162  5163  5164  5165  5166  5167  5168  5169  5170  5171  5172  5173  5174 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5175  5176  5177  5178  5179  5180  5181  5182  5183  5184  5185  5186  5187 \n    2     2     1     1     1     2     1     1     1     1     1     1     1 \n 5188  5189  5190  5191  5192  5193  5194  5195  5196  5197  5198  5199  5200 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5201  5202  5203  5204  5205  5206  5207  5208  5209  5210  5211  5212  5213 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5214  5215  5216  5217  5218  5219  5220  5221  5222  5223  5224  5225  5226 \n    1     1     1     1     1     1     1     1     1     2     1     3     1 \n 5227  5228  5229  5230  5231  5232  5233  5234  5235  5236  5237  5238  5239 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 5240  5241  5242  5243  5244  5245  5246  5247  5248  5249  5250  5251  5252 \n    1     1     1     1     1     1     1     1     1     1     3     1     1 \n 5253  5254  5255  5256  5257  5258  5259  5260  5261  5262  5263  5264  5265 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5266  5267  5268  5269  5270  5271  5272  5273  5274  5275  5276  5277  5278 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5279  5280  5281  5282  5283  5284  5285  5286  5287  5288  5289  5290  5291 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5292  5293  5294  5295  5296  5297  5298  5299  5300  5301  5302  5303  5304 \n    1     1     1     1     1     1     1     2     1     1     1     4     1 \n 5305  5306  5307  5308  5309  5310  5311  5312  5313  5314  5315  5316  5317 \n    1     1     1     1     3     1     1     1     1     1     1     1     1 \n 5318  5319  5320  5321  5322  5323  5324  5325  5326  5327  5328  5329  5330 \n    1     1     1     2     2     1     1     1     1     1     1     1     1 \n 5331  5332  5333  5334  5335  5336  5337  5338  5339  5340  5341  5342  5343 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 5344  5345  5346  5347  5348  5349  5350  5351  5352  5353  5354  5355  5356 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5357  5358  5359  5360  5361  5362  5363  5364  5365  5366  5367  5368  5369 \n    1     1     1     1     1     1     2     1     3     1     1     1     1 \n 5370  5371  5372  5373  5374  5375  5376  5377  5378  5379  5380  5381  5382 \n    1     1     1     1     2     1     1     2     1     1     1     1     1 \n 5383  5384  5385  5386  5387  5388  5389  5390  5391  5392  5393  5394  5395 \n    1     1     1     1     1     1     1     1     1     1     1    13     1 \n 5396  5397  5398  5399  5400  5401  5402  5403  5404  5405  5406  5407  5408 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5409  5410  5411  5412  5413  5414  5415  5416  5417  5418  5419  5420  5421 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5422  5423  5424  5425  5426  5427  5428  5429  5430  5431  5432  5433  5434 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5435  5436  5437  5438  5439  5440  5441  5442  5443  5444  5445  5446  5447 \n    1     1     2     1     2     1     1     1     1     1     1     1     1 \n 5448  5449  5450  5451  5452  5453  5454  5455  5456  5457  5458  5459  5460 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5461  5462  5463  5464  5465  5466  5467  5468  5469  5470  5471  5472  5473 \n    1     1     1     2     1     1     1     1     1     1     1     1     2 \n 5474  5475  5476  5477  5478  5479  5480  5481  5482  5483  5484  5485  5486 \n    1    13     1     1     1     1     1     1     1     1     1     1     1 \n 5487  5488  5489  5490  5491  5492  5493  5494  5495  5496  5497  5498  5499 \n    1     1     1     4     1     1     1     1     1     1     1     1     1 \n 5500  5501  5502  5503  5504  5505  5506  5507  5508  5509  5510  5511  5512 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5513  5514  5515  5516  5517  5518  5519  5520  5521  5522  5523  5524  5525 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5526  5527  5528  5529  5530  5531  5532  5533  5534  5535  5536  5537  5538 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 5539  5540  5541  5542  5543  5544  5545  5546  5547  5548  5549  5550  5551 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 5552  5553  5554  5555  5556  5557  5558  5559  5560  5561  5562  5563  5564 \n    1     1    13     1     1     1     1     1     1     1     1     1     1 \n 5565  5566  5567  5568  5569  5570  5571  5572  5573  5574  5575  5576  5577 \n    1     1     2     1     1     1     1     1     1     1     1     1     2 \n 5578  5579  5580  5581  5582  5583  5584  5585  5586  5587  5588  5589  5590 \n    1     1     1     1     1     1     1     1     1     1     1     1     4 \n 5591  5592  5593  5594  5595  5596  5597  5598  5599  5600  5601  5602  5603 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 5604  5605  5606  5607  5608  5609  5610  5611  5612  5613  5614  5615  5616 \n    1     1     1     1     1     1     1     1    13     1     1     1     1 \n 5617  5618  5619  5620  5621  5622  5623  5624  5625  5626  5627  5628  5629 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 5630  5631  5632  5633  5634  5635  5636  5637  5638  5639  5640  5641  5642 \n    1     1     1     1     1     1     1     1     1     3     1     1     1 \n 5643  5644  5645  5646  5647  5648  5649  5650  5651  5652  5653  5654  5655 \n    4     1     1     1     1     1     1     1     1     1     1     1     1 \n 5656  5657  5658  5659  5660  5661  5662  5663  5664  5665  5666  5667  5668 \n    1     1     1     3     1     1     1     1     1     1     1     1     1 \n 5669  5670  5671  5672  5673  5674  5675  5676  5677  5678  5679  5680  5681 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5682  5683  5684  5685  5686  5687  5688  5689  5690  5691  5692  5693  5694 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 5695  5696  5697  5698  5699  5700  5701  5702  5703  5704  5705  5706  5707 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 5708  5709  5710  5711  5712  5713  5714  5715  5716  5717  5718  5719  5720 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5721  5722  5723  5724  5725  5726  5727  5728  5729  5730  5731  5732  5733 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5734  5735  5736  5737  5738  5739  5740  5741  5742  5743  5744  5745  5746 \n    1     1     1     1     1     1     1     1     1     1     1     3     1 \n 5747  5748  5749  5750  5751  5752  5753  5754  5755  5756  5757  5758  5759 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 5760  5761  5762  5763  5764  5765  5766  5767  5768  5769  5770  5771  5772 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 5773  5774  5775  5776  5777  5778  5779  5780  5781  5782  5783  5784  5785 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 5786  5787  5788  5789  5790  5791  5792  5793  5794  5795  5796  5797  5798 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5799  5800  5801  5802  5803  5804  5805  5806  5807  5808  5809  5810  5811 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5812  5813  5814  5815  5816  5817  5818  5819  5820  5821  5822  5823  5824 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5825  5826  5827  5828  5829  5830  5831  5832  5833  5834  5835  5836  5837 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5838  5839  5840  5841  5842  5843  5844  5845  5846  5847  5848  5849  5850 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5851  5852  5853  5854  5855  5856  5857  5858  5859  5860  5861  5862  5863 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5864  5865  5866  5867  5868  5869  5870  5871  5872  5873  5874  5875  5876 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 5877  5878  5879  5880  5881  5882  5883  5884  5885  5886  5887  5888  5889 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 5890  5891  5892  5893  5894  5895  5896  5897  5898  5899  5900  5901  5902 \n    1     1     1     1     1     1     1     1     1     1     1     1     3 \n 5903  5904  5905  5906  5907  5908  5909  5910  5911  5912  5913  5914  5915 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 5916  5917  5918  5919  5920  5921  5922  5923  5924  5925  5926  5927  5928 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5929  5930  5931  5932  5933  5934  5935  5936  5937  5938  5939  5940  5941 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5942  5943  5944  5945  5946  5947  5948  5949  5950  5951  5952  5953  5954 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5955  5956  5957  5958  5959  5960  5961  5962  5963  5964  5965  5966  5967 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5968  5969  5970  5971  5972  5973  5974  5975  5976  5977  5978  5979  5980 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5981  5982  5983  5984  5985  5986  5987  5988  5989  5990  5991  5992  5993 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5994  5995  5996  5997  5998  5999  6000  6001  6002  6003  6004  6005  6006 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6007  6008  6009  6010  6011  6012  6013  6014  6015  6016  6017  6018  6019 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6020  6021  6022  6023  6024  6025  6026  6027  6028  6029  6030  6031  6032 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 6033  6034  6035  6036  6037  6038  6039  6040  6041  6042  6043  6044  6045 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6046  6047  6048  6049  6050  6051  6052  6053  6054  6055  6056  6057  6058 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6059  6060  6061  6062  6063  6064  6065  6066  6067  6068  6069  6070  6071 \n    1     1     3     1     1     1     1     1     1     1     1     1     1 \n 6072  6073  6074  6075  6076  6077  6078  6079  6080  6081  6082  6083  6084 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6085  6086  6087  6088  6089  6090  6091  6092  6093  6094  6095  6096  6097 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6098  6099  6100  6101  6102  6103  6104  6105  6106  6107  6108  6109  6110 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6111  6112  6113  6114  6115  6116  6117  6118  6119  6120  6121  6122  6123 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 6124  6125  6126  6127  6128  6129  6130  6131  6132  6133  6134  6135  6136 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6137  6138  6139  6140  6141  6142  6143  6144  6145  6146  6147  6148  6149 \n    1     1     4     1     1     1     1     1     1     1     1     1     1 \n 6150  6151  6152  6153  6154  6155  6156  6157  6158  6159  6160  6161  6162 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6163  6164  6165  6166  6167  6168  6169  6170  6171  6172  6173  6174  6175 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 6176  6177  6178  6179  6180  6181  6182  6183  6184  6185  6186  6187  6188 \n    1     1     1     1     1     1     1     1     1     1     1     4     1 \n 6189  6190  6191  6192  6193  6194  6195  6196  6197  6198  6199  6200  6201 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6202  6203  6204  6205  6206  6207  6208  6209  6210  6211  6212  6213  6214 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6215  6216  6217  6218  6219  6220  6221  6222  6223  6224  6225  6226  6227 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6228  6229  6230  6231  6232  6233  6234  6235  6236  6237  6238  6239  6240 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 6241  6242  6243  6244  6245  6246  6247  6248  6249  6250  6251  6252  6253 \n    1     2     1     1     1     1     1     1     1     1     2     1     1 \n 6254  6255  6256  6257  6258  6259  6260  6261  6262  6263  6264  6265  6266 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6267  6268  6269  6270  6271  6272  6273  6274  6275  6276  6277  6278  6279 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6280  6281  6282  6283  6284  6285  6286  6287  6288  6289  6290  6291  6292 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6293  6294  6295  6296  6297  6298  6299  6300  6301  6302  6303  6304  6305 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6306  6307  6308  6309  6310  6311  6312  6313  6314  6315  6316  6317  6318 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6319  6320  6321  6322  6323  6324  6325  6326  6327  6328  6329  6330  6331 \n    1     1     1     3     1     1     1     1     1     1     1     1     1 \n 6332  6333  6334  6335  6336  6337  6338  6339  6340  6341  6342  6343  6344 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6345  6346  6347  6348  6349  6350  6351  6352  6353  6354  6355  6356  6357 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6358  6359  6360  6361  6362  6363  6364  6365  6366  6367  6368  6369  6370 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6371  6372  6373  6374  6375  6376  6377  6378  6379  6380  6381  6382  6383 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 6384  6385  6386  6387  6388  6389  6390  6391  6392  6393  6394  6395  6396 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 6397  6398  6399  6400  6401  6402  6403  6404  6405  6406  6407  6408  6409 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6410  6411  6412  6413  6414  6415  6416  6417  6418  6419  6420  6421  6422 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6423  6424  6425  6426  6427  6428  6429  6430  6431  6432  6433  6434  6435 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6436  6437  6438  6439  6440  6441  6442  6443  6444  6445  6446  6447  6448 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6449  6450  6451  6452  6453  6454  6455  6456  6457  6458  6459  6460  6461 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6462  6463  6464  6465  6466  6467  6468  6469  6470  6471  6472  6473  6474 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6475  6476  6477  6478  6479  6480  6481  6482  6483  6484  6485  6486  6487 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6488  6489  6490  6491  6492  6493  6494  6495  6496  6497  6498  6499  6500 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6501  6502  6503  6504  6505  6506  6507  6508  6509  6510  6511  6512  6513 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6514  6515  6516  6517  6518  6519  6520  6521  6522  6523  6524  6525  6526 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6527  6528  6529  6530  6531  6532  6533  6534  6535  6536  6537  6538  6539 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6540  6541  6542  6543  6544  6545  6546  6547  6548  6549  6550  6551  6552 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 6553  6554  6555  6556  6557  6558  6559  6560  6561  6562  6563  6564  6565 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6566  6567  6568  6569  6570  6571  6572  6573  6574  6575  6576  6577  6578 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6579  6580  6581  6582  6583  6584  6585  6586  6587  6588  6589  6590  6591 \n    1     1     1     1     1     1     1     1     1     1     1     1     3 \n 6592  6593  6594  6595  6596  6597  6598  6599  6600  6601  6602  6603  6604 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6605  6606  6607  6608  6609  6610  6611  6612  6613  6614  6615  6616  6617 \n    1     1     1     1     1     1     1     1     3     1     1     1     1 \n 6618  6619  6620  6621  6622  6623  6624  6625  6626  6627  6628  6629  6630 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6631  6632  6633  6634  6635  6636  6637  6638  6639  6640  6641  6642  6643 \n    1     1     3     1     1     1     1     1     2     2     1     1     1 \n 6644  6645  6646  6647  6648  6649  6650  6651  6652  6653  6654  6655  6656 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 6657  6658  6659  6660  6661  6662  6663  6664  6665  6666  6667  6668  6669 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6670  6671  6672  6673  6674  6675  6676  6677  6678  6679  6680  6681  6682 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6683  6684  6685  6686  6687  6688  6689  6690  6691  6692  6693  6694  6695 \n    2     1     3     1     1     1     3     1     1     1     1     1     1 \n 6696  6697  6698  6699  6700  6701  6702  6703  6704  6705  6706  6707  6708 \n    1     1     1     1     1     1     2     1     1     1     2     1     1 \n 6709  6710  6711  6712  6713  6714  6715  6716  6717  6718  6719  6720  6721 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6722  6723  6724  6725  6726  6727  6728  6729  6730  6731  6732  6733  6734 \n    2     1     1     1     1     1     1     1     3     1     1     1     1 \n 6735  6736  6737  6738  6739  6740  6741  6742  6743  6744  6745  6746  6747 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 6748  6749  6750  6751  6752  6753  6754  6755  6756  6757  6758  6759  6760 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 6761  6762  6763  6764  6765  6766  6767  6768  6769  6770  6771  6772  6773 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 6774  6775  6776  6777  6778  6779  6780  6781  6782  6783  6784  6785  6786 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 6787  6788  6789  6790  6791  6792  6793  6794  6795  6796  6797  6798  6799 \n    1     1     1     1     1     3     1     1     1     1     1     2     1 \n 6800  6801  6802  6803  6804  6805  6806  6807  6808  6809  6810  6811  6812 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6813  6814  6815  6816  6817  6818  6819  6820  6821  6822  6823  6824  6825 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6826  6827  6828  6829  6830  6831  6832  6833  6834  6835  6836  6837  6838 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6839  6840  6841  6842  6843  6844  6845  6846  6847  6848  6849  6850  6851 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 6852  6853  6854  6855  6856  6857  6858  6859  6860  6861  6862  6863  6864 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6865  6866  6867  6868  6869  6870  6871  6872  6873  6874  6875  6876  6877 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6878  6879  6880  6881  6882  6883  6884  6885  6886  6887  6888  6889  6890 \n    1     1     1     3     1     1     1     3     1     1     1     3     1 \n 6891  6892  6893  6894  6895  6896  6897  6898  6899  6900  6901  6902  6903 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6904  6905  6906  6907  6908  6909  6910  6911  6912  6913  6914  6915  6916 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6917  6918  6919  6920  6921  6922  6923  6924  6925  6926  6927  6928  6929 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6930  6931  6932  6933  6934  6935  6936  6937  6938  6939  6940  6941  6942 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 6943  6944  6945  6946  6947  6948  6949  6950  6951  6952  6953  6954  6955 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6956  6957  6958  6959  6960  6961  6962  6963  6964  6965  6966  6967  6968 \n    2     1     1     1     1     1     1     1     1     1     1     1     3 \n 6969  6970  6971  6972  6973  6974  6975  6976  6977  6978  6979  6980  6981 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6982  6983  6984  6985  6986  6987  6988  6989  6990  6991  6992  6993  6994 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6995  6996  6997  6998  6999  7000  7001  7002  7003  7004  7005  7006  7007 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 7008  7009  7010  7011  7012  7013  7014  7015  7016  7017  7018  7019  7020 \n    1     1     1     2     2     3     1     1     1     1     1     1     1 \n 7021  7022  7023  7024  7025  7026  7027  7028  7029  7030  7031  7032  7033 \n    1     1     1     1     1     3     1     1     1     1     1     2     1 \n 7034  7035  7036  7037  7038  7039  7040  7041  7042  7043  7044  7045  7046 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7047  7048  7049  7050  7051  7052  7053  7054  7055  7056  7057  7058  7059 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7060  7061  7062  7063  7064  7065  7066  7067  7068  7069  7070  7071  7072 \n    1     5     1     1     1     1     1     1     1     1     2     1     1 \n 7073  7074  7075  7076  7077  7078  7079  7080  7081  7082  7083  7084  7085 \n    1     1     2     1     1     2     1     1     1     3     1     1     1 \n 7086  7087  7088  7089  7090  7091  7092  7093  7094  7095  7096  7097  7098 \n    1     1     1     1     1     1     1     1     1     3     1     1     1 \n 7099  7100  7101  7102  7103  7104  7105  7106  7107  7108  7109  7110  7111 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7112  7113  7114  7115  7116  7117  7118  7119  7120  7121  7122  7123  7124 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7125  7126  7127  7128  7129  7130  7131  7132  7133  7134  7135  7136  7137 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7138  7139  7140  7141  7142  7143  7144  7145  7146  7147  7148  7149  7150 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7151  7152  7153  7154  7155  7156  7157  7158  7159  7160  7161  7162  7163 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7164  7165  7166  7167  7168  7169  7170  7171  7172  7173  7174  7175  7176 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7177  7178  7179  7180  7181  7182  7183  7184  7185  7186  7187  7188  7189 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7190  7191  7192  7193  7194  7195  7196  7197  7198  7199  7200  7201  7202 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7203  7204  7205  7206  7207  7208  7209  7210  7211  7212  7213  7214  7215 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 7216  7217  7218  7219  7220  7221  7222  7223  7224  7225  7226  7227  7228 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7229  7230  7231  7232  7233  7234  7235  7236  7237  7238  7239  7240  7241 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7242  7243  7244  7245  7246  7247  7248  7249  7250  7251  7252  7253  7254 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7255  7256  7257  7258  7259  7260  7261  7262  7263  7264  7265  7266  7267 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 7268  7269  7270  7271  7272  7273  7274  7275  7276  7277  7278  7279  7280 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7281  7282  7283  7284  7285  7286  7287  7288  7289  7290  7291  7292  7293 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 7294  7295  7296  7297  7298  7299  7300  7301  7302  7303  7304  7305  7306 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7307  7308  7309  7310  7311  7312  7313  7314  7315  7316  7317  7318  7319 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7320  7321  7322  7323  7324  7325  7326  7327  7328  7329  7330  7331  7332 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7333  7334  7335  7336  7337  7338  7339  7340  7341  7342  7343  7344  7345 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7346  7347  7348  7349  7350  7351  7352  7353  7354  7355  7356  7357  7358 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 7359  7360  7361  7362  7363  7364  7365  7366  7367  7368  7369  7370  7371 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7372  7373  7374  7375  7376  7377  7378  7379  7380  7381  7382  7383  7384 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7385  7386  7387  7388  7389  7390  7391  7392  7393  7394  7395  7396  7397 \n    1     1     1     1     3     1     1     1     1     1     1     1     1 \n 7398  7399  7400  7401  7402  7403  7404  7405  7406  7407  7408  7409  7410 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7411  7412  7413  7414  7415  7416  7417  7418  7419  7420  7421  7422  7423 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7424  7425  7426  7427  7428  7429  7430  7431  7432  7433  7434  7435  7436 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7437  7438  7439  7440  7441  7442  7443  7444  7445  7446  7447  7448  7449 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7450  7451  7452  7453  7454  7455  7456  7457  7458  7459  7460  7461  7462 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7463  7464  7465  7466  7467  7468  7469  7470  7471  7472  7473  7474  7475 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7476  7477  7478  7479  7480  7481  7482  7483  7484  7485  7486  7487  7488 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7489  7490  7491  7492  7493  7494  7495  7496  7497  7498  7499  7500  7501 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7502  7503  7504  7505  7506  7507  7508  7509  7510  7511  7512  7513  7514 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7515  7516  7517  7518  7519  7520  7521  7522  7523  7524  7525  7526  7527 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7528  7529  7530  7531  7532  7533  7534  7535  7536  7537  7538  7539  7540 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7541  7542  7543  7544  7545  7546  7547  7548  7549  7550  7551  7552  7553 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 7554  7555  7556  7557  7558  7559  7560  7561  7562  7563  7564  7565  7566 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7567  7568  7569  7570  7571  7572  7573  7574  7575  7576  7577  7578  7579 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7580  7581  7582  7583  7584  7585  7586  7587  7588  7589  7590  7591  7592 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7593  7594  7595  7596  7597  7598  7599  7600  7601  7602  7603  7604  7605 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7606  7607  7608  7609  7610  7611  7612  7613  7614  7615  7616  7617  7618 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7619  7620  7621  7622  7623  7624  7625  7626  7627  7628  7629  7630  7631 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7632  7633  7634  7635  7636  7637  7638  7639  7640  7641  7642  7643  7644 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 7645  7646  7647  7648  7649  7650  7651  7652  7653  7654  7655  7656  7657 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7658  7659  7660  7661  7662  7663  7664  7665  7666  7667  7668  7669  7670 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7671  7672  7673  7674  7675  7676  7677  7678  7679  7680  7681  7682  7683 \n    1     1     4     1     1     1     1     1     1     1     1     1     1 \n 7684  7685  7686  7687  7688  7689  7690  7691  7692  7693  7694  7695  7696 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7697  7698  7699  7700  7701  7702  7703  7704  7705  7706  7707  7708  7709 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7710  7711  7712  7713  7714  7715  7716  7717  7718  7719  7720  7721  7722 \n    1     1     1     1     1     1     1     1     1     2     1     1     2 \n 7723  7724  7725  7726  7727  7728  7729  7730  7731  7732  7733  7734  7735 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7736  7737  7738  7739  7740  7741  7742  7743  7744  7745  7746  7747  7748 \n    1     1     1     1     1     1     1     1     1     1     1     4     1 \n 7749  7750  7751  7752  7753  7754  7755  7756  7757  7758  7759  7760  7761 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7762  7763  7764  7765  7766  7767  7768  7769  7770  7771  7772  7773  7774 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7775  7776  7777  7778  7779  7780  7781  7782  7783  7784  7785  7786  7787 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 7788  7789  7790  7791  7792  7793  7794  7795  7796  7797  7798  7799  7800 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7801  7802  7803  7804  7805  7806  7807  7808  7809  7810  7811  7812  7813 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7814  7815  7816  7817  7818  7819  7820  7821  7822  7823  7824  7825  7826 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7827  7828  7829  7830  7831  7832  7833  7834  7835  7836  7837  7838  7839 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7840  7841  7842  7843  7844  7845  7846  7847  7848  7849  7850  7851  7852 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 7853  7854  7855  7856  7857  7858  7859  7860  7861  7862  7863  7864  7865 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7866  7867  7868  7869  7870  7871  7872  7873  7874  7875  7876  7877  7878 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 7879  7880  7881  7882  7883  7884  7885  7886  7887  7888  7889  7890  7891 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 7892  7893  7894  7895  7896  7897  7898  7899  7900  7901  7902  7903  7904 \n    2     1     3     1     1     1     1     1     1     1     1     1     1 \n 7905  7906  7907  7908  7909  7910  7911  7912  7913  7914  7915  7916  7917 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7918  7919  7920  7921  7922  7923  7924  7925  7926  7927  7928  7929  7930 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 7931  7932  7933  7934  7935  7936  7937  7938  7939  7940  7941  7942  7943 \n    1     1     1     1     1     1     1     1     2     1     2     1     1 \n 7944  7945  7946  7947  7948  7949  7950  7951  7952  7953  7954  7955  7956 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7957  7958  7959  7960  7961  7962  7963  7964  7965  7966  7967  7968  7969 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7970  7971  7972  7973  7974  7975  7976  7977  7978  7979  7980  7981  7982 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 7983  7984  7985  7986  7987  7988  7989  7990  7991  7992  7993  7994  7995 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7996  7997  7998  7999  8000  8001  8002  8003  8004  8005  8006  8007  8008 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8009  8010  8011  8012  8013  8014  8015  8016  8017  8018  8019  8020  8021 \n    1     1     1     1     1     1     1     3     1     1     1     1     1 \n 8022  8023  8024  8025  8026  8027  8028  8029  8030  8031  8032  8033  8034 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8035  8036  8037  8038  8039  8040  8041  8042  8043  8044  8045  8046  8047 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8048  8049  8050  8051  8052  8053  8054  8055  8056  8057  8058  8059  8060 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8061  8062  8063  8064  8065  8066  8067  8068  8069  8070  8071  8072  8073 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8074  8075  8076  8077  8078  8079  8080  8081  8082  8083  8084  8085  8086 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8087  8088  8089  8090  8091  8092  8093  8094  8095  8096  8097  8098  8099 \n    1     1     1     1     1     1     5     1     1     1     1     1     1 \n 8100  8101  8102  8103  8104  8105  8106  8107  8108  8109  8110  8111  8112 \n    1     1     5     1     5     1     1     1     1     1     1     1     1 \n 8113  8114  8115  8116  8117  8118  8119  8120  8121  8122  8123  8124  8125 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8126  8127  8128  8129  8130  8131  8132  8133  8134  8135  8136  8137  8138 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8139  8140  8141  8142  8143  8144  8145  8146  8147  8148  8149  8150  8151 \n    1     1     1     3     1     1     1     1     1     1     1     1     1 \n 8152  8153  8154  8155  8156  8157  8158  8159  8160  8161  8162  8163  8164 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8165  8166  8167  8168  8169  8170  8171  8172  8173  8174  8175  8176  8177 \n    1     5     3     1     1     1     2     1     1     1     1     1     1 \n 8178  8179  8180  8181  8182  8183  8184  8185  8186  8187  8188  8189  8190 \n    1     1     1     1     1     1     1     5     1     1     1     5     1 \n 8191  8192  8193  8194  8195  8196  8197  8198  8199  8200  8201  8202  8203 \n    2     1     1     1     1     1     4     1     4     1     1     1     1 \n 8204  8205  8206  8207  8208  8209  8210  8211  8212  8213  8214  8215  8216 \n    1     1     1     1     1     1     1     1     1     1     5     1     1 \n 8217  8218  8219  8220  8221  8222  8223  8224  8225  8226  8227  8228  8229 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8230  8231  8232  8233  8234  8235  8236  8237  8238  8239  8240  8241  8242 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8243  8244  8245  8246  8247  8248  8249  8250  8251  8252  8253  8254  8255 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8256  8257  8258  8259  8260  8261  8262  8263  8264  8265  8266  8267  8268 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8269  8270  8271  8272  8273  8274  8275  8276  8277  8278  8279  8280  8281 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 8282  8283  8284  8285  8286  8287  8288  8289  8290  8291  8292  8293  8294 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8295  8296  8297  8298  8299  8300  8301  8302  8303  8304  8305  8306  8307 \n    1     1     1     1     1     1     1     1     1     1     1     2     3 \n 8308  8309  8310  8311  8312  8313  8314  8315  8316  8317  8318  8319  8320 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8321  8322  8323  8324  8325  8326  8327  8328  8329  8330  8331  8332  8333 \n    1     1     1     3     1     1     1     1     1     1     1     1     1 \n 8334  8335  8336  8337  8338  8339  8340  8341  8342  8343  8344  8345  8346 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8347  8348  8349  8350  8351  8352  8353  8354  8355  8356  8357  8358  8359 \n    1     1     1     1     3     1     1     1     1     1     1     1     1 \n 8360  8361  8362  8363  8364  8365  8366  8367  8368  8369  8370  8371  8372 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8373  8374  8375  8376  8377  8378  8379  8380  8381  8382  8383  8384  8385 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8386  8387  8388  8389  8390  8391  8392  8393  8394  8395  8396  8397  8398 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 8399  8400  8401  8402  8403  8404  8405  8406  8407  8408  8409  8410  8411 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8412  8413  8414  8415  8416  8417  8418  8419  8420  8421  8422  8423  8424 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8425  8426  8427  8428  8429  8430  8431  8432  8433  8434  8435  8436  8437 \n    4     1     1     1     1     1     1     1     1     1     1     1     1 \n 8438  8439  8440  8441  8442  8443  8444  8445  8446  8447  8448  8449  8450 \n    1     1     1     1     1     3     1     2     1     1     1     1     1 \n 8451  8452  8453  8454  8455  8456  8457  8458  8459  8460  8461  8462  8463 \n    2     1     1     1     1     1     1     2     1     1     2     1     1 \n 8464  8465  8466  8467  8468  8469  8470  8471  8472  8473  8474  8475  8476 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8477  8478  8479  8480  8481  8482  8483  8484  8485  8486  8487  8488  8489 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 8490  8491  8492  8493  8494  8495  8496  8497  8498  8499  8500  8501  8502 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8503  8504  8505  8506  8507  8508  8509  8510  8511  8512  8513  8514  8515 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8516  8517  8518  8519  8520  8521  8522  8523  8524  8525  8526  8527  8528 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8529  8530  8531  8532  8533  8534  8535  8536  8537  8538  8539  8540  8541 \n    1     1     1     1     1     1     1     2     1     2     1     1    13 \n 8542  8543  8544  8545  8546  8547  8548  8549  8550  8551  8552  8553  8554 \n    1     1     1     1     1     1     1    13     1     1     1     1     1 \n 8555  8556  8557  8558  8559  8560  8561  8562  8563  8564  8565  8566  8567 \n    1     1     1     1     3     1     1     1     2     1     2     1     1 \n 8568  8569  8570  8571  8572  8573  8574  8575  8576  8577  8578  8579  8580 \n    1     1     1     1     1     1     3     1     1     1     1     1     1 \n 8581  8582  8583  8584  8585  8586  8587  8588  8589  8590  8591  8592  8593 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8594  8595  8596  8597  8598  8599  8600  8601  8602  8603  8604  8605  8606 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 8607  8608  8609  8610  8611  8612  8613  8614  8615  8616  8617  8618  8619 \n    1     1     1     1     1     1     1     1     1     1     1    13     1 \n 8620  8621  8622  8623  8624  8625  8626  8627  8628  8629  8630  8631  8632 \n    1     1     1     4     1     1     1     1     1     1     1     1     1 \n 8633  8634  8635  8636  8637  8638  8639  8640  8641  8642  8643  8644  8645 \n    4     1     1     1     3     1     1     1     1     1     1     1     1 \n 8646  8647  8648  8649  8650  8651  8652  8653  8654  8655  8656  8657  8658 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 8659  8660  8661  8662  8663  8664  8665  8666  8667  8668  8669  8670  8671 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8672  8673  8674  8675  8676  8677  8678  8679  8680  8681  8682  8683  8684 \n    1     4     1     1     1     1     1     1     1     1     1     4     1 \n 8685  8686  8687  8688  8689  8690  8691  8692  8693  8694  8695  8696  8697 \n    1     1     1     1     1     1     1     1     1     1     1     2     4 \n 8698  8699  8700  8701  8702  8703  8704  8705  8706  8707  8708  8709  8710 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8711  8712  8713  8714  8715  8716  8717  8718  8719  8720  8721  8722  8723 \n    1     1     1     1     4     1     1     1     1     1     2     1     1 \n 8724  8725  8726  8727  8728  8729  8730  8731  8732  8733  8734  8735  8736 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8737  8738  8739  8740  8741  8742  8743  8744  8745  8746  8747  8748  8749 \n    1     1     1     1     1     1     1     1     4     2     1     1     1 \n 8750  8751  8752  8753  8754  8755  8756  8757  8758  8759  8760  8761  8762 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 8763  8764  8765  8766  8767  8768  8769  8770  8771  8772  8773  8774  8775 \n    1     1     1     1     1     1     1     1     1     3     1     1     1 \n 8776  8777  8778  8779  8780  8781  8782  8783  8784  8785  8786  8787  8788 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 8789  8790  8791  8792  8793  8794  8795  8796  8797  8798  8799  8800  8801 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8802  8803  8804  8805  8806  8807  8808  8809  8810  8811  8812  8813  8814 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 8815  8816  8817  8818  8819  8820  8821  8822  8823  8824  8825  8826  8827 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8828  8829  8830  8831  8832  8833  8834  8835  8836  8837  8838  8839  8840 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8841  8842  8843  8844  8845  8846  8847  8848  8849  8850  8851  8852  8853 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 8854  8855  8856  8857  8858  8859  8860  8861  8862  8863  8864  8865  8866 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 8867  8868  8869  8870  8871  8872  8873  8874  8875  8876  8877  8878  8879 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 8880  8881  8882  8883  8884  8885  8886  8887  8888  8889  8890  8891  8892 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8893  8894  8895  8896  8897  8898  8899  8900  8901  8902  8903  8904  8905 \n    3     1     1     1     1     1     1     1     1     1     1     1     1 \n 8906  8907  8908  8909  8910  8911  8912  8913  8914  8915  8916  8917  8918 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8919  8920  8921  8922  8923  8924  8925  8926  8927  8928  8929  8930  8931 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 8932  8933  8934  8935  8936  8937  8938  8939  8940  8941  8942  8943  8944 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 8945  8946  8947  8948  8949  8950  8951  8952  8953  8954  8955  8956  8957 \n    1     1     3     2     1     1     1     2     1     1     1     1     1 \n 8958  8959  8960  8961  8962  8963  8964  8965  8966  8967  8968  8969  8970 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8971  8972  8973  8974  8975  8976  8977  8978  8979  8980  8981  8982  8983 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8984  8985  8986  8987  8988  8989  8990  8991  8992  8993  8994  8995  8996 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8997  8998  8999  9000  9001  9002  9003  9004  9005  9006  9007  9008  9009 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9010  9011  9012  9013  9014  9015  9016  9017  9018  9019  9020  9021  9022 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 9023  9024  9025  9026  9027  9028  9029  9030  9031  9032  9033  9034  9035 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9036  9037  9038  9039  9040  9041  9042  9043  9044  9045  9046  9047  9048 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9049  9050  9051  9052  9053  9054  9055  9056  9057  9058  9059  9060  9061 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9062  9063  9064  9065  9066  9067  9068  9069  9070  9071  9072  9073  9074 \n    1     3     1     1     1     1     1     1     1     1     1     1     1 \n 9075  9076  9077  9078  9079  9080  9081  9082  9083  9084  9085  9086  9087 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 9088  9089  9090  9091  9092  9093  9094  9095  9096  9097  9098  9099  9100 \n    1     1     1     1     1     1     1     1     4     1     1     1     1 \n 9101  9102  9103  9104  9105  9106  9107  9108  9109  9110  9111  9112  9113 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9114  9115  9116  9117  9118  9119  9120  9121  9122  9123  9124  9125  9126 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9127  9128  9129  9130  9131  9132  9133  9134  9135  9136  9137  9138  9139 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9140  9141  9142  9143  9144  9145  9146  9147  9148  9149  9150  9151  9152 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9153  9154  9155  9156  9157  9158  9159  9160  9161  9162  9163  9164  9165 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9166  9167  9168  9169  9170  9171  9172  9173  9174  9175  9176  9177  9178 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 9179  9180  9181  9182  9183  9184  9185  9186  9187  9188  9189  9190  9191 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9192  9193  9194  9195  9196  9197  9198  9199  9200  9201  9202  9203  9204 \n    1     1     1     1     1     1     4     1     1     1     1     1     1 \n 9205  9206  9207  9208  9209  9210  9211  9212  9213  9214  9215  9216  9217 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9218  9219  9220  9221  9222  9223  9224  9225  9226  9227  9228  9229  9230 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9231  9232  9233  9234  9235  9236  9237  9238  9239  9240  9241  9242  9243 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9244  9245  9246  9247  9248  9249  9250  9251  9252  9253  9254  9255  9256 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 9257  9258  9259  9260  9261  9262  9263  9264  9265  9266  9267  9268  9269 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 9270  9271  9272  9273  9274  9275  9276  9277  9278  9279  9280  9281  9282 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 9283  9284  9285  9286  9287  9288  9289  9290  9291  9292  9293  9294  9295 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9296  9297  9298  9299  9300  9301  9302  9303  9304  9305  9306  9307  9308 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 9309  9310  9311  9312  9313  9314  9315  9316  9317  9318  9319  9320  9321 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9322  9323  9324  9325  9326  9327  9328  9329  9330  9331  9332  9333  9334 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9335  9336  9337  9338  9339  9340  9341  9342  9343  9344  9345  9346  9347 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9348  9349  9350  9351  9352  9353  9354  9355  9356  9357  9358  9359  9360 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9361  9362  9363  9364  9365  9366  9367  9368  9369  9370  9371  9372  9373 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9374  9375  9376  9377  9378  9379  9380  9381  9382  9383  9384  9385  9386 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 9387  9388  9389  9390  9391  9392  9393  9394  9395  9396  9397  9398  9399 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9400  9401  9402  9403  9404  9405  9406  9407  9408  9409  9410  9411  9412 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9413  9414  9415  9416  9417  9418  9419  9420  9421  9422  9423  9424  9425 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9426  9427  9428  9429  9430  9431  9432  9433  9434  9435  9436  9437  9438 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9439  9440  9441  9442  9443  9444  9445  9446  9447  9448  9449  9450  9451 \n    1     1     1     1     3     1     1     1     1     1     1     1     1 \n 9452  9453  9454  9455  9456  9457  9458  9459  9460  9461  9462  9463  9464 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 9465  9466  9467  9468  9469  9470  9471  9472  9473  9474  9475  9476  9477 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9478  9479  9480  9481  9482  9483  9484  9485  9486  9487  9488  9489  9490 \n    1     1     1     1     1     1     3     1     1     1     1     3     1 \n 9491  9492  9493  9494  9495  9496  9497  9498  9499  9500  9501  9502  9503 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9504  9505  9506  9507  9508  9509  9510  9511  9512  9513  9514  9515  9516 \n    1     1     1     1     3     1     1     1     1     1     1     1     1 \n 9517  9518  9519  9520  9521  9522  9523  9524  9525  9526  9527  9528  9529 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9530  9531  9532  9533  9534  9535  9536  9537  9538  9539  9540  9541  9542 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9543  9544  9545  9546  9547  9548  9549  9550  9551  9552  9553  9554  9555 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9556  9557  9558  9559  9560  9561  9562  9563  9564  9565  9566  9567  9568 \n    1     1     1     4     1     1     1     1     1     1     1     1     1 \n 9569  9570  9571  9572  9573  9574  9575  9576  9577  9578  9579  9580  9581 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 9582  9583  9584  9585  9586  9587  9588  9589  9590  9591  9592  9593  9594 \n    1     3     1     1     1     1     1     1     1     1     1     1     1 \n 9595  9596  9597  9598  9599  9600  9601  9602  9603  9604  9605  9606  9607 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9608  9609  9610  9611  9612  9613  9614  9615  9616  9617  9618  9619  9620 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9621  9622  9623  9624  9625  9626  9627  9628  9629  9630  9631  9632  9633 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 9634  9635  9636  9637  9638  9639  9640  9641  9642  9643  9644  9645  9646 \n    1     1     1     1     1     1     1     1     1     1     1     3     1 \n 9647  9648  9649  9650  9651  9652  9653  9654  9655  9656  9657  9658  9659 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 9660  9661  9662  9663  9664  9665  9666  9667  9668  9669  9670  9671  9672 \n    1     2     1     1     1     1     1     1     1     1     1     2     1 \n 9673  9674  9675  9676  9677  9678  9679  9680  9681  9682  9683  9684  9685 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9686  9687  9688  9689  9690  9691  9692  9693  9694  9695  9696  9697  9698 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9699  9700  9701  9702  9703  9704  9705  9706  9707  9708  9709  9710  9711 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9712  9713  9714  9715  9716  9717  9718  9719  9720  9721  9722  9723  9724 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9725  9726  9727  9728  9729  9730  9731  9732  9733  9734  9735  9736  9737 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9738  9739  9740  9741  9742  9743  9744  9745  9746  9747  9748  9749  9750 \n    1     1     1     1     1     1     1     1     2     2     1     1     1 \n 9751  9752  9753  9754  9755  9756  9757  9758  9759  9760  9761  9762  9763 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9764  9765  9766  9767  9768  9769  9770  9771  9772  9773  9774  9775  9776 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 9777  9778  9779  9780  9781  9782  9783  9784  9785  9786  9787  9788  9789 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9790  9791  9792  9793  9794  9795  9796  9797  9798  9799  9800  9801  9802 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 9803  9804  9805  9806  9807  9808  9809  9810  9811  9812  9813  9814  9815 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9816  9817  9818  9819  9820  9821  9822  9823  9824  9825  9826  9827  9828 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9829  9830  9831  9832  9833  9834  9835  9836  9837  9838  9839  9840  9841 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 9842  9843  9844  9845  9846  9847  9848  9849  9850  9851  9852  9853  9854 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 9855  9856  9857  9858  9859  9860  9861  9862  9863  9864  9865  9866  9867 \n    1     1     1     1     1     1     3     1     1     2     1     1     1 \n 9868  9869  9870  9871  9872  9873  9874  9875  9876  9877  9878  9879  9880 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 9881  9882  9883  9884  9885  9886  9887  9888  9889  9890  9891  9892  9893 \n    1     1     1     1     3     1     1     1     1     1     1     1     2 \n 9894  9895  9896  9897  9898  9899  9900  9901  9902  9903  9904  9905  9906 \n    1     3     1     1     1     1     1     1     1     1     1     1     1 \n 9907  9908  9909  9910  9911  9912  9913  9914  9915  9916  9917  9918  9919 \n    1     1     3     1     1     1     1     1     1     1     1     1     1 \n 9920  9921  9922  9923  9924  9925  9926  9927  9928  9929  9930  9931  9932 \n    1     1     3     1     1     1     1     1     1     1     1     2     1 \n 9933  9934  9935  9936  9937  9938  9939  9940  9941  9942  9943  9944  9945 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9946  9947  9948  9949  9950  9951  9952  9953  9954  9955  9956  9957  9958 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9959  9960  9961  9962  9963  9964  9965  9966  9967  9968  9969  9970  9971 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9972  9973  9974  9975  9976  9977  9978  9979  9980  9981  9982  9983  9984 \n    1     5     1     1     1     3     1     1     1     1     1     1     1 \n 9985  9986  9987  9988  9989  9990  9991  9992  9993  9994  9995  9996  9997 \n    1     1     1     1     1     1     1     1     1     1     5     1     1 \n 9998  9999 10000 10001 10002 10003 10004 10005 10006 10007 10008 10009 10010 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n10011 10012 10013 10014 10015 10016 10017 10018 10019 10020 10021 10022 10023 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10024 10025 10026 10027 10028 10029 10030 10031 10032 10033 10034 10035 10036 \n    1     1     1     1     1     1     1     1     1     1     1     3     1 \n10037 10038 10039 10040 10041 10042 10043 10044 10045 10046 10047 10048 10049 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10050 10051 10052 10053 10054 10055 10056 10057 10058 10059 10060 10061 10062 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10063 10064 10065 10066 10067 10068 10069 10070 10071 10072 10073 10074 10075 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n10076 10077 10078 10079 10080 10081 10082 10083 10084 10085 10086 10087 10088 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n10089 10090 10091 10092 10093 10094 10095 10096 10097 10098 10099 10100 10101 \n    1     1     1     1     1     1     5     1     1     1     1     1     1 \n10102 10103 10104 10105 10106 10107 10108 10109 10110 10111 10112 10113 10114 \n    1     1     1     1     1     1     1     3     1     1     3     1     1 \n10115 10116 10117 10118 10119 10120 10121 10122 10123 10124 10125 10126 10127 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n10128 10129 10130 10131 10132 10133 10134 10135 10136 10137 10138 10139 10140 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10141 10142 10143 10144 10145 10146 10147 10148 10149 10150 10151 10152 10153 \n    1     1     1     1     1     1     1     1     1     3     1     2     1 \n10154 10155 10156 10157 10158 10159 10160 10161 10162 10163 10164 10165 10166 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10167 10168 10169 10170 10171 10172 10173 10174 10175 10176 10177 10178 10179 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10180 10181 10182 10183 10184 10185 10186 10187 10188 10189 10190 10191 10192 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10193 10194 10195 10196 10197 10198 10199 10200 10201 10202 10203 10204 10205 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n10206 10207 10208 10209 10210 10211 10212 10213 10214 10215 10216 10217 10218 \n    1     1     1     1     1     3     1     1     1     1     1     1     1 \n10219 10220 10221 10222 10223 10224 10225 10226 10227 10228 10229 10230 10231 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10232 10233 10234 10235 10236 10237 10238 10239 10240 10241 10242 10243 10244 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10245 10246 10247 10248 10249 10250 10251 10252 10253 10254 10255 10256 10257 \n    1     1     1     1     1     2     1     1     3     1     1     1     1 \n10258 10259 10260 10261 10262 10263 10264 10265 10266 10267 10268 10269 10270 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10271 10272 10273 10274 10275 10276 10277 10278 10279 10280 10281 10282 10283 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10284 10285 10286 10287 10288 10289 10290 10291 10292 10293 10294 10295 10296 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n10297 10298 10299 10300 10301 10302 10303 10304 10305 10306 10307 10308 10309 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n10310 10311 10312 10313 10314 10315 10316 10317 10318 10319 10320 10321 10322 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10323 10324 10325 10326 10327 10328 10329 10330 10331 10332 10333 10334 10335 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10336 10337 10338 10339 10340 10341 10342 10343 10344 10345 10346 10347 10348 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10349 10350 10351 10352 10353 10354 10355 10356 10357 10358 10359 10360 10361 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n10362 10363 10364 10365 10366 10367 10368 10369 10370 10371 10372 10373 10374 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10375 10376 10377 10378 10379 10380 10381 10382 10383 10384 10385 10386 10387 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10388 10389 10390 10391 10392 10393 10394 10395 10396 10397 10398 10399 10400 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10401 10402 10403 10404 10405 10406 10407 10408 10409 10410 10411 10412 10413 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10414 10415 10416 10417 10418 10419 10420 10421 10422 10423 10424 10425 10426 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n10427 10428 10429 10430 10431 10432 10433 10434 10435 10436 10437 10438 10439 \n    1     1     2     2     1     1     1     1     1     1     1     1     1 \n10440 10441 10442 10443 10444 10445 10446 10447 10448 10449 10450 10451 10452 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10453 10454 10455 10456 10457 10458 10459 10460 10461 10462 10463 10464 10465 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n10466 10467 10468 10469 10470 10471 10472 10473 10474 10475 10476 10477 10478 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n10479 10480 10481 10482 10483 10484 10485 10486 10487 10488 10489 10490 10491 \n    2     1     1     1     1     1     1     1     1     1     1     1     3 \n10492 10493 10494 10495 10496 10497 10498 10499 10500 10501 10502 10503 10504 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n10505 10506 10507 10508 10509 10510 10511 10512 10513 10514 10515 10516 10517 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10518 10519 10520 10521 10522 10523 10524 10525 10526 10527 10528 10529 10530 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10531 10532 10533 10534 10535 10536 10537 10538 10539 10540 10541 10542 10543 \n    1     1     1     1     3     1     1     1     1     1     1     1     1 \n10544 10545 10546 10547 10548 10549 10550 10551 10552 10553 10554 10555 10556 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n10557 10558 10559 10560 10561 10562 10563 10564 10565 10566 10567 10568 10569 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10570 10571 10572 10573 10574 10575 10576 10577 10578 10579 10580 10581 10582 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n10583 10584 10585 10586 10587 10588 10589 10590 10591 10592 10593 10594 10595 \n    1     1     1     1     2     1     1     1     1     2     1     1     1 \n10596 10597 10598 10599 10600 10601 10602 10603 10604 10605 10606 10607 10608 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10609 10610 10611 10612 10613 10614 10615 10616 10617 10618 10619 10620 10621 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10622 10623 10624 10625 10626 10627 10628 10629 10630 10631 10632 10633 10634 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10635 10636 10637 10638 10639 10640 10641 10642 10643 10644 10645 10646 10647 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10648 10649 10650 10651 10652 10653 10654 10655 10656 10657 10658 10659 10660 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n10661 10662 10663 10664 10665 10666 10667 10668 10669 10670 10671 10672 10673 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10674 10675 10676 10677 10678 10679 10680 10681 10682 10683 10684 10685 10686 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n10687 10688 10689 10690 10691 10692 10693 10694 10695 10696 10697 10698 10699 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10700 10701 10702 10703 10704 10705 10706 10707 10708 10709 10710 10711 10712 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10713 10714 10715 10716 10717 10718 10719 10720 10721 10722 10723 10724 10725 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10726 10727 10728 10729 10730 10731 10732 10733 10734 10735 10736 10737 10738 \n    1     1     4     1     1     1     1     1     1     1     1     1     1 \n10739 10740 10741 10742 10743 10744 10745 10746 10747 10748 10749 10750 10751 \n    1     1     1     1     1     1     1     4     1     1     2     1     1 \n10752 10753 10754 10755 10756 10757 10758 10759 10760 10761 10762 10763 10764 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10765 10766 10767 10768 10769 10770 10771 10772 10773 10774 10775 10776 10777 \n    1     1     1     1     2     1     1     1     4     1     1     1     1 \n10778 10779 10780 10781 10782 10783 10784 10785 10786 10787 10788 10789 10790 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10791 10792 10793 10794 10795 10796 10797 10798 10799 10800 10801 10802 10803 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10804 10805 10806 10807 10808 10809 10810 10811 10812 10813 10814 10815 10816 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10817 10818 10819 10820 10821 10822 10823 10824 10825 10826 10827 10828 10829 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10830 10831 10832 10833 10834 10835 10836 10837 10838 10839 10840 10841 10842 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10843 10844 10845 10846 10847 10848 10849 10850 10851 10852 10853 10854 10855 \n    1     1     4     1     1     1     1     1     1     1     1     1     1 \n10856 10857 10858 10859 10860 10861 10862 10863 10864 10865 10866 10867 10868 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10869 10870 10871 10872 10873 10874 10875 10876 10877 10878 10879 10880 10881 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10882 10883 10884 10885 10886 10887 10888 10889 10890 10891 10892 10893 10894 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10895 10896 10897 10898 10899 10900 10901 10902 10903 10904 10905 10906 10907 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10908 10909 10910 10911 10912 10913 10914 10915 10916 10917 10918 10919 10920 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10921 10922 10923 10924 10925 10926 10927 10928 10929 10930 10931 10932 10933 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10934 10935 10936 10937 10938 10939 10940 10941 10942 10943 10944 10945 10946 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n10947 10948 10949 10950 10951 10952 10953 10954 10955 10956 10957 10958 10959 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10960 10961 10962 10963 10964 10965 10966 10967 10968 10969 10970 10971 10972 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n10973 10974 10975 10976 10977 10978 10979 10980 10981 10982 10983 10984 10985 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n10986 10987 10988 10989 10990 10991 10992 10993 10994 10995 10996 10997 10998 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n10999 11000 11001 11002 11003 11004 11005 11006 11007 11008 11009 11010 11011 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11012 11013 11014 11015 11016 11017 11018 11019 11020 11021 11022 11023 11024 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11025 11026 11027 11028 11029 11030 11031 11032 11033 11034 11035 11036 11037 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n11038 11039 11040 11041 11042 11043 11044 11045 11046 11047 11048 11049 11050 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11051 11052 11053 11054 11055 11056 11057 11058 11059 11060 11061 11062 11063 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n11064 11065 11066 11067 11068 11069 11070 11071 11072 11073 11074 11075 11076 \n    1     1     1     1     1     2     1     1     3     1     1     2     1 \n11077 11078 11079 11080 11081 11082 11083 11084 11085 11086 11087 11088 11089 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11090 11091 11092 11093 11094 11095 11096 11097 11098 11099 11100 11101 11102 \n    1     2     1     1     1     1     1     1     1     3     1     1     1 \n11103 11104 11105 11106 11107 11108 11109 11110 11111 11112 11113 11114 11115 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n11116 11117 11118 11119 11120 11121 11122 11123 11124 11125 11126 11127 11128 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11129 11130 11131 11132 11133 11134 11135 11136 11137 11138 11139 11140 11141 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n11142 11143 11144 11145 11146 11147 11148 11149 11150 11151 11152 11153 11154 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n11155 11156 11157 11158 11159 11160 11161 11162 11163 11164 11165 11166 11167 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11168 11169 11170 11171 11172 11173 11174 11175 11176 11177 11178 11179 11180 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n11181 11182 11183 11184 11185 11186 11187 11188 11189 11190 11191 11192 11193 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n11194 11195 11196 11197 11198 11199 11200 11201 11202 11203 11204 11205 11206 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11207 11208 11209 11210 11211 11212 11213 11214 11215 11216 11217 11218 11219 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11220 11221 11222 11223 11224 11225 11226 11227 11228 11229 11230 11231 11232 \n    2     2     1     1     1     1     1     1     1     1     1     1     1 \n11233 11234 11235 11236 11237 11238 11239 11240 11241 11242 11243 11244 11245 \n    1     1     1     2     1     1     2     1     1     1     1     2     1 \n11246 11247 11248 11249 11250 11251 11252 11253 11254 11255 11256 11257 11258 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11259 11260 11261 11262 11263 11264 11265 11266 11267 11268 11269 11270 11271 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11272 11273 11274 11275 11276 11277 11278 11279 11280 11281 11282 11283 11284 \n    1     1     1     1     1     1     3     1     1     1     1     1     1 \n11285 11286 11287 11288 11289 11290 11291 11292 11293 11294 11295 11296 11297 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11298 11299 11300 11301 11302 11303 11304 11305 11306 11307 11308 11309 11310 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11311 11312 11313 11314 11315 11316 11317 11318 11319 11320 11321 11322 11323 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11324 11325 11326 11327 11328 11329 11330 11331 11332 11333 11334 11335 11336 \n    5     1     1     1     1     1     1     1     1     5     1     1     1 \n11337 11338 11339 11340 11341 11342 11343 11344 11345 11346 11347 11348 11349 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11350 11351 11352 11353 11354 11355 11356 11357 11358 11359 11360 11361 11362 \n    1     2     1     1     1     1     1     2     1     1     1     1     1 \n11363 11364 11365 11366 11367 11368 11369 11370 11371 11372 11373 11374 11375 \n    1     1     1     1     1     5     1     1     1     1     1     1     1 \n11376 11377 11378 11379 11380 11381 11382 11383 11384 11385 11386 11387 11388 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11389 11390 11391 11392 11393 11394 11395 11396 11397 11398 11399 11400 11401 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11402 11403 11404 11405 11406 11407 11408 11409 11410 11411 11412 11413 11414 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n11415 11416 11417 11418 11419 11420 11421 11422 11423 11424 11425 11426 11427 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11428 11429 11430 11431 11432 11433 11434 11435 11436 11437 11438 11439 11440 \n    1     1     1     1     5     1     1     1     1     1     1     1     1 \n11441 11442 11443 11444 11445 11446 11447 11448 11449 11450 11451 11452 11453 \n    1     1     1     1     1     1     1     1     1     1     1     2     2 \n11454 11455 11456 11457 11458 11459 11460 11461 11462 11463 11464 11465 11466 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n11467 11468 11469 11470 11471 11472 11473 11474 11475 11476 11477 11478 11479 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11480 11481 11482 11483 11484 11485 11486 11487 11488 11489 11490 11491 11492 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n11493 11494 11495 11496 11497 11498 11499 11500 11501 11502 11503 11504 11505 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11506 11507 11508 11509 11510 11511 11512 11513 11514 11515 11516 11517 11518 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11519 11520 11521 11522 11523 11524 11525 11526 11527 11528 11529 11530 11531 \n    1     2     2     1     1     1     1     1     1     1     1     1     1 \n11532 11533 11534 11535 11536 11537 11538 11539 11540 11541 11542 11543 11544 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11545 11546 11547 11548 11549 11550 11551 11552 11553 11554 11555 11556 11557 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n11558 11559 11560 11561 11562 11563 11564 11565 11566 11567 11568 11569 11570 \n    1     1     3     1     1     1     1     1     1     1     1     3     1 \n11571 11572 11573 11574 11575 11576 11577 11578 11579 11580 11581 11582 11583 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n11584 11585 11586 11587 11588 11589 11590 11591 11592 11593 11594 11595 11596 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n11597 11598 11599 11600 11601 11602 11603 11604 11605 11606 11607 11608 11609 \n    1     1     1     1     1     1     1     1     1     1     1     1     3 \n11610 11611 11612 11613 11614 11615 11616 11617 11618 11619 11620 11621 11622 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11623 11624 11625 11626 11627 11628 11629 11630 11631 11632 11633 11634 11635 \n    3     1     1     1     1     1     1     1     1     2     1     1     1 \n11636 11637 11638 11639 11640 11641 11642 11643 11644 11645 11646 11647 11648 \n    1     1     1     4     1     1     1     1     1     1     1     1     1 \n11649 11650 11651 11652 11653 11654 11655 11656 11657 11658 11659 11660 11661 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n11662 11663 11664 11665 11666 11667 11668 11669 11670 11671 11672 11673 11674 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n11675 11676 11677 11678 11679 11680 11681 11682 11683 11684 11685 11686 11687 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n11688 11689 11690 11691 11692 11693 11694 11695 11696 11697 11698 11699 11700 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11701 11702 11703 11704 11705 11706 11707 11708 11709 11710 11711 11712 11713 \n    1     1     1     1     1     1     1     1     2     2     1     1     1 \n11714 11715 11716 11717 11718 11719 11720 11721 11722 11723 11724 11725 11726 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11727 11728 11729 11730 11731 11732 11733 11734 11735 11736 11737 11738 11739 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11740 11741 11742 11743 11744 11745 11746 11747 11748 11749 11750 11751 11752 \n    1     1     1     1     1     1     1     1     4     1     1     1     1 \n11753 11754 11755 11756 11757 11758 11759 11760 11761 11762 11763 11764 11765 \n    1     2     1     1     1     2     2     1     1     1     1     1     1 \n11766 11767 11768 11769 11770 11771 11772 11773 11774 11775 11776 11777 11778 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n11779 11780 11781 11782 11783 11784 11785 11786 11787 11788 11789 11790 11791 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11792 11793 11794 11795 11796 11797 11798 11799 11800 11801 11802 11803 11804 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11805 11806 11807 11808 11809 11810 11811 11812 11813 11814 11815 11816 11817 \n    2     1     1     2     1     1     1     1     1     1     1     1     1 \n11818 11819 11820 11821 11822 11823 11824 11825 11826 11827 11828 11829 11830 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11831 11832 11833 11834 11835 11836 11837 11838 11839 11840 11841 11842 11843 \n    3     1     1     1     1     1     1     1     2     2     1     1     1 \n11844 11845 11846 11847 11848 11849 11850 11851 11852 11853 11854 11855 11856 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n11857 11858 11859 11860 11861 11862 11863 11864 11865 11866 11867 11868 11869 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11870 11871 11872 11873 11874 11875 11876 11877 11878 11879 11880 11881 11882 \n    1     1     1     1     1     1     1     1     1     1     1     3     1 \n11883 11884 11885 11886 11887 11888 11889 11890 11891 11892 11893 11894 11895 \n    1     1     3     1     1     1     1     1     2     2     1     1     1 \n11896 11897 11898 11899 11900 11901 11902 11903 11904 11905 11906 11907 11908 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11909 11910 11911 11912 11913 11914 11915 11916 11917 11918 11919 11920 11921 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11922 11923 11924 11925 11926 11927 11928 11929 11930 11931 11932 11933 11934 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11935 11936 11937 11938 11939 11940 11941 11942 11943 11944 11945 11946 11947 \n    1     1     1     1     1     2     1     1     1     1     2     1     1 \n11948 11949 11950 11951 11952 11953 11954 11955 11956 11957 11958 11959 11960 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11961 11962 11963 11964 11965 11966 11967 11968 11969 11970 11971 11972 11973 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n11974 11975 11976 11977 11978 11979 11980 11981 11982 11983 11984 11985 11986 \n    1     1     1     1     1     1     1     1     1     1     1    13     1 \n11987 11988 11989 11990 11991 11992 11993 11994 11995 11996 11997 11998 11999 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n12000 12001 12002 12003 12004 12005 12006 12007 12008 12009 12010 12011 12012 \n    1     4     1     2     1     1     1     1     1     1     1     1     1 \n12013 12014 12015 12016 12017 12018 12019 12020 12021 12022 12023 12024 12025 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12026 12027 12028 12029 12030 12031 12032 12033 12034 12035 12036 12037 12038 \n    3     1     1     1     1     1     1     1     1     1     1     1     1 \n12039 12040 12041 12042 12043 12044 12045 12046 12047 12048 12049 12050 12051 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12052 12053 12054 12055 12056 12057 12058 12059 12060 12061 12062 12063 12064 \n    1     1     1    13     1     1     1     1     1     1     2     1     1 \n12065 12066 12067 12068 12069 12070 12071 12072 12073 12074 12075 12076 12077 \n    1     1     1     1     1     3     1     1     1     1     1     1     2 \n12078 12079 12080 12081 12082 12083 12084 12085 12086 12087 12088 12089 12090 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n12091 12092 12093 12094 12095 12096 12097 12098 12099 12100 12101 12102 12103 \n    1     1     1     1     1     1     1     1     3     2     2     1     1 \n12104 12105 12106 12107 12108 12109 12110 12111 12112 12113 12114 12115 12116 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n12117 12118 12119 12120 12121 12122 12123 12124 12125 12126 12127 12128 12129 \n    1     1     1     1     1     1     1     2    13     1     1     1     1 \n12130 12131 12132 12133 12134 12135 12136 12137 12138 12139 12140 12141 12142 \n    2     1     1     1     1     1     1     1     1     4     1     1     1 \n12143 12144 12145 12146 12147 12148 12149 12150 12151 12152 12153 12154 12155 \n    1     1     1     1    13     1     1     1     1     1     1     1     1 \n12156 12157 12158 12159 12160 12161 12162 12163 12164 12165 12166 12167 12168 \n    1     1     1     1     1     1     1    13     1     1     1     1     1 \n12169 12170 12171 12172 12173 12174 12175 12176 12177 12178 12179 12180 12181 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12182 12183 12184 12185 12186 12187 12188 12189 12190 12191 12192 12193 12194 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n12195 12196 12197 12198 12199 12200 12201 12202 12203 12204 12205 12206 12207 \n    1     1     1     1     1    13     1     1     3     1     1     1     1 \n12208 12209 12210 12211 12212 12213 12214 12215 12216 12217 12218 12219 12220 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n12221 12222 12223 12224 12225 12226 12227 12228 12229 12230 12231 12232 12233 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n12234 12235 12236 12237 12238 12239 12240 12241 12242 12243 12244 12245 12246 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12247 12248 12249 12250 12251 12252 12253 12254 12255 12256 12257 12258 12259 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n12260 12261 12262 12263 12264 12265 12266 12267 12268 12269 12270 12271 12272 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n12273 12274 12275 12276 12277 12278 12279 12280 12281 12282 12283 12284 12285 \n    1     1     1     2     1     1     1     1     3     1     1     1     1 \n12286 12287 12288 12289 12290 12291 12292 12293 12294 12295 12296 12297 12298 \n    1     1     1     1     1     1     3     1     1     1     1     1     1 \n12299 12300 12301 12302 12303 12304 12305 12306 12307 12308 12309 12310 12311 \n    1     1     1     1     2     3     1     1     1     1     1     1     1 \n12312 12313 12314 12315 12316 12317 12318 12319 12320 12321 12322 12323 12324 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n12325 12326 12327 12328 12329 12330 12331 12332 12333 12334 12335 12336 12337 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12338 12339 12340 12341 12342 12343 12344 12345 12346 12347 12348 12349 12350 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12351 12352 12353 12354 12355 12356 12357 12358 12359 12360 12361 12362 12363 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n12364 12365 12366 12367 12368 12369 12370 12371 12372 12373 12374 12375 12376 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n12377 12378 12379 12380 12381 12382 12383 12384 12385 12386 12387 12388 12389 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12390 12391 12392 12393 12394 12395 12396 12397 12398 12399 12400 12401 12402 \n    1     1     1     1     1     2     2     1     1     2     1     1     1 \n12403 12404 12405 12406 12407 12408 12409 12410 12411 12412 12413 12414 12415 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12416 12417 12418 12419 12420 12421 12422 12423 12424 12425 12426 12427 12428 \n    1     1     1     1     1     3     1     1     2     1     1     1     1 \n12429 12430 12431 12432 12433 12434 12435 12436 12437 12438 12439 12440 12441 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n12442 12443 12444 12445 12446 12447 12448 12449 12450 12451 12452 12453 12454 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12455 12456 12457 12458 12459 12460 12461 12462 12463 12464 12465 12466 12467 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n12468 12469 12470 12471 12472 12473 12474 12475 12476 12477 12478 12479 12480 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12481 12482 12483 12484 12485 12486 12487 12488 12489 12490 12491 12492 12493 \n    2     1     1     1     1     1     1     1     1     1     1     2     1 \n12494 12495 12496 12497 12498 12499 12500 12501 12502 12503 12504 12505 12506 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12507 12508 12509 12510 12511 12512 12513 12514 12515 12516 12517 12518 12519 \n    1     1     1     2     1     1     1     1     2     1     1     1     1 \n12520 12521 12522 12523 12524 12525 12526 12527 12528 12529 12530 12531 12532 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12533 12534 12535 12536 12537 12538 12539 12540 12541 12542 12543 12544 12545 \n    1     1     2     1     1     3     1     1     1     2     1     1     1 \n12546 12547 12548 12549 12550 12551 12552 12553 12554 12555 12556 12557 12558 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12559 12560 12561 12562 12563 12564 12565 12566 12567 12568 12569 12570 12571 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n12572 12573 12574 12575 12576 12577 12578 12579 12580 12581 12582 12583 12584 \n    2     1     1     1     1     1     1     3     1     1     1     1     1 \n12585 12586 12587 12588 12589 12590 12591 12592 12593 12594 12595 12596 12597 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12598 12599 12600 12601 12602 12603 12604 12605 12606 12607 12608 12609 12610 \n    1     1     2     1     1     1     1     1     1     2     1     1     1 \n12611 12612 12613 12614 12615 12616 12617 12618 12619 12620 12621 12622 12623 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n12624 12625 12626 12627 12628 12629 12630 12631 12632 12633 12634 12635 12636 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12637 12638 12639 12640 12641 12642 12643 12644 12645 12646 12647 12648 12649 \n    1     4     1     1     1     1     1     1     1     1     1     2     1 \n12650 12651 12652 12653 12654 12655 12656 12657 12658 12659 12660 12661 12662 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n12663 12664 12665 12666 12667 12668 12669 12670 12671 12672 12673 12674 12675 \n    1     1     1     2     1     1     1     1     1     1     2     1     1 \n12676 12677 12678 12679 12680 12681 12682 12683 12684 12685 12686 12687 12688 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n12689 12690 12691 12692 12693 12694 12695 12696 12697 12698 12699 12700 12701 \n    2     2     2     1     1     1     1     1     1     1     1     1     2 \n12702 12703 12704 12705 12706 12707 12708 12709 12710 12711 12712 12713 12714 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12715 12716 12717 12718 12719 12720 12721 12722 12723 12724 12725 12726 12727 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n12728 12729 12730 12731 12732 12733 12734 12735 12736 12737 12738 12739 12740 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n12741 12742 12743 12744 12745 12746 12747 12748 12749 12750 12751 12752 12753 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12754 12755 12756 12757 12758 12759 12760 12761 12762 12763 12764 12765 12766 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n12767 12768 12769 12770 12771 12772 12773 12774 12775 12776 12777 12778 12779 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n12780 12781 12782 12783 12784 12785 12786 12787 12788 12789 12790 12791 12792 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n12793 12794 12795 12796 12797 12798 12799 12800 12801 12802 12803 12804 12805 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n12806 12807 12808 12809 12810 12811 12812 12813 12814 12815 12816 12817 12818 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n12819 12820 12821 12822 12823 12824 12825 12826 12827 12828 12829 12830 12831 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12832 12833 12834 12835 12836 12837 12838 12839 12840 12841 12842 12843 12844 \n    1     1     1     1     1     1     1     1     1     2     4     1     1 \n12845 12846 12847 12848 12849 12850 12851 12852 12853 12854 12855 12856 12857 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12858 12859 12860 12861 12862 12863 12864 12865 12866 12867 12868 12869 12870 \n    1     1     1     1     1     2     2     1     2     1     1     1     1 \n12871 12872 12873 12874 12875 12876 12877 12878 12879 12880 12881 12882 12883 \n    1     1     2     1     1     1     1     1     2     1     1     1     1 \n12884 12885 12886 12887 12888 12889 12890 12891 12892 12893 12894 12895 12896 \n    4     1     1     1     1     1     1     1     1     1     4     1     1 \n12897 12898 12899 12900 12901 12902 12903 12904 12905 12906 12907 12908 12909 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n12910 12911 12912 12913 12914 12915 12916 12917 12918 12919 12920 12921 12922 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12923 12924 12925 12926 12927 12928 12929 12930 12931 12932 12933 12934 12935 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n12936 12937 12938 12939 12940 12941 12942 12943 12944 12945 12946 12947 12948 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12949 12950 12951 12952 12953 12954 12955 12956 12957 12958 12959 12960 12961 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n12962 12963 12964 12965 12966 12967 12968 12969 12970 12971 12972 12973 12974 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12975 12976 12977 12978 12979 12980 12981 12982 12983 12984 12985 \n    1     1     1     1     1     1     1     1     1     1     1 \n\n\n\nsum(multiplicity(roadacc_month_ppp) &gt; 1)\n\n[1] 639\n\n\nThe output shows that there are 639 duplicated point events.\nWe will resolve this using jittering, which will add a small pertubation to the duplicate points so that they do not occupy the exact same space:\n\nroadacc_month_ppp_jit &lt;- rjitter(roadacc_month_ppp,\n                                 retry = TRUE,\n                                 nsim = 99,\n                                 drop = TRUE)\n\nWe then check for duplicated points to determine if the jittering was carried out successfully:\n\nany(duplicated(roadacc_month_ppp_jit))\n\n[1] FALSE\n\n\nThe output indicates that there are no duplicated points.\n\n\n\nThe code chunk below is used to combine roadacc_month_ppp and provinceowin into one object:\n\nroadacc_month_owin_ppp &lt;- roadacc_month_ppp[provinceowin]\n\n\nsummary(roadacc_month_owin_ppp)\n\nMarked planar point pattern:  12985 points\nAverage intensity 1.693182e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   4.000   7.000   6.666  10.000  12.000 \n\nWindow: polygonal boundary\nsingle connected closed polygon with 13779 vertices\nenclosing rectangle: [587893.5, 712440.5] x [1484413.7, 1579076.3] units\n                     (124500 x 94660 units)\nWindow area = 7668990000 square units\nFraction of frame area: 0.65\n\n\nWe plot the roadacc_month_owin_ppp object to examine the correctness of the output object:\n\nplot(roadacc_month_owin_ppp)\n\n\n\n\n\n\n\n\n\n\n\nWe first use BOOT.spattemp() to determine the spatial bandwidth and the scalar temporal bandwidth for use in subsequent calculation.\n\nset.seed(1234) \nBOOT.spattemp(roadacc_month_owin_ppp)\n\n\nNext, we use spattemp.density() of sparr package to compute the STKDE, with h and lambda values derived in previous step.\n\nst_kde &lt;- spattemp.density(roadacc_month_owin_ppp,\n                           h=2300,\n                           lambda=2)\nsummary(st_kde)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 2300 (spatial)\n  lambda = 2 (temporal)\n\nNo. of observations\n  12985 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [587893.5, 712440.5] x [1484414, 1579076]\n\nTemporal bound\n  [1, 12]\n\nEvaluation\n  128 x 128 x 12 trivariate lattice\n  Density range: [1.159346e-17, 2.144321e-10]\n\n\n\n\n\n\n\nCode\nfirsthalfyear &lt;- c(1,2,3,4,5,6)\n\npar(mfrow=c(2,3))\nfor(i in firsthalfyear){ \n  plot(st_kde, i, \n       override.par=FALSE, \n       fix.range=TRUE, \n       main=paste(\"KDE at month\",i))\n}\n\n\n\n\n\n\n\n\n\n\n\nCode\nsecondhalfyear &lt;- c(7,8,9,10,11,12)\n\npar(mfrow=c(2,3))\nfor(i in secondhalfyear){ \n  plot(st_kde, i, \n       override.par=FALSE, \n       fix.range=TRUE, \n       main=paste(\"KDE at month\",i))\n}\n\n\n\n\n\n\n\n\n\nObservations from the Temporal KDE and Spatio-Temporal KDE plots are summarised in the table below:\n\n\n\n\n\n\n\n\nObservation from Temporal KDE\nObservation from Spatio-Temporal KDE\nConclusion from both observations\n\n\n\n\n\nOccurrence of road accidents is most dense at the start (especially towards Mar to Apr) and end of the year (towards the Oct period), while the occurrence of road accidents is less dense in the middle part of the year.\n\n\nDense occurrence of road accidents in the later half of the year i.e Oct to Dec, as compared to the earlier half of the year.\n\nWhile there are differences in temporal KDE and Spatio-Temporal KDE plots, together they indicate the following:\n\nRoad accidents tend to occur more intensely at the end of the year, with lower occurrences in the middle segment of the year.\nThere could be a high overall accident count in Mar to Apr but the spatial distribution during this period might be more dispersed, leading to less prominent hotspots in the KDE maps.\nOct to Dec seem to have high overall accident counts that are concentrated leading to very prominent hotspots in the KDE map.\n\n\n\n\n\n\n\n\n\n\nWe run similar steps in section 11.1 above to study the distribution of road accidents by day of week.\n\ntm_shape(provincedata32647)+\n  tm_polygons()+\n  tm_shape(roadacc)+\n  tm_dots(size=0.05,col = \"blue\",alpha =0.5)+\n  tm_facets(by=\"inc_dayofweek\",\n            free.coords = FALSE,\n            drop.units = TRUE)\n\n\n\n\n\n\n\n\nVisually, there seem to be more road accidents on Fri and Sat.\n\n\n\n\n\n\n\nroadacc_day_ppp &lt;- roadacc %&gt;%\n  select(inc_dayofweek) %&gt;%\n  as.ppp()\n\nWe note that there are duplicated point events from the code below:\n\nany(duplicated(roadacc_day_ppp))\n\n[1] TRUE\n\n\nWe use the multiplicity() function to count the number of co-incident points:\n\nmultiplicity(roadacc_day_ppp)\n\n    1     2     3     4     5     6     7     8     9    10    11    12    13 \n    1     1     1     2     1     2     1     1     2     1     1     1     1 \n   14    15    16    17    18    19    20    21    22    23    24    25    26 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n   27    28    29    30    31    32    33    34    35    36    37    38    39 \n    1     1     4     1     1     1     1     1     1     1     1     4     4 \n   40    41    42    43    44    45    46    47    48    49    50    51    52 \n    1     1     4     1     1     1     1     1     1     1     1     1     1 \n   53    54    55    56    57    58    59    60    61    62    63    64    65 \n    1     1     1     1     5     5     1     5     1     1     5     1     1 \n   66    67    68    69    70    71    72    73    74    75    76    77    78 \n    5     1     1     1     1     1     1     1     1     1     1     2     1 \n   79    80    81    82    83    84    85    86    87    88    89    90    91 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n   92    93    94    95    96    97    98    99   100   101   102   103   104 \n    1     1     1     2     1     1     1     1     2     1     1     2     1 \n  105   106   107   108   109   110   111   112   113   114   115   116   117 \n    1     1     2     1     1     1     2     2     2     1     1     1     1 \n  118   119   120   121   122   123   124   125   126   127   128   129   130 \n    2     1     1     1     3     3     1     1     1     1     1     1     1 \n  131   132   133   134   135   136   137   138   139   140   141   142   143 \n    1     1     1     1     2     1     1     2     1     1     3     1     1 \n  144   145   146   147   148   149   150   151   152   153   154   155   156 \n    3     3     1     2     1     1     1     1     1     1     1     1     1 \n  157   158   159   160   161   162   163   164   165   166   167   168   169 \n    1     2     1     1     1     1     1     2     1     1     1     1     1 \n  170   171   172   173   174   175   176   177   178   179   180   181   182 \n    1     2     1     1     1     1     1     1     1     1     1     2     2 \n  183   184   185   186   187   188   189   190   191   192   193   194   195 \n    1     1     1     1     2     1     1     1     1     1     2     1     1 \n  196   197   198   199   200   201   202   203   204   205   206   207   208 \n    1     1     1     1     2     1     1     1     1     3     3     1     1 \n  209   210   211   212   213   214   215   216   217   218   219   220   221 \n    3     1     1     1     1     1     1     1     1     1     1     2     1 \n  222   223   224   225   226   227   228   229   230   231   232   233   234 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  235   236   237   238   239   240   241   242   243   244   245   246   247 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  248   249   250   251   252   253   254   255   256   257   258   259   260 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n  261   262   263   264   265   266   267   268   269   270   271   272   273 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  274   275   276   277   278   279   280   281   282   283   284   285   286 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  287   288   289   290   291   292   293   294   295   296   297   298   299 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  300   301   302   303   304   305   306   307   308   309   310   311   312 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n  313   314   315   316   317   318   319   320   321   322   323   324   325 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  326   327   328   329   330   331   332   333   334   335   336   337   338 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  339   340   341   342   343   344   345   346   347   348   349   350   351 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n  352   353   354   355   356   357   358   359   360   361   362   363   364 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  365   366   367   368   369   370   371   372   373   374   375   376   377 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  378   379   380   381   382   383   384   385   386   387   388   389   390 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  391   392   393   394   395   396   397   398   399   400   401   402   403 \n    1     3     1     1     1     1     1     1     1     1     1     1     1 \n  404   405   406   407   408   409   410   411   412   413   414   415   416 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n  417   418   419   420   421   422   423   424   425   426   427   428   429 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n  430   431   432   433   434   435   436   437   438   439   440   441   442 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  443   444   445   446   447   448   449   450   451   452   453   454   455 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  456   457   458   459   460   461   462   463   464   465   466   467   468 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  469   470   471   472   473   474   475   476   477   478   479   480   481 \n    1     3     1     1     1     1     1     1     1     1     1     1     1 \n  482   483   484   485   486   487   488   489   490   491   492   493   494 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n  495   496   497   498   499   500   501   502   503   504   505   506   507 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  508   509   510   511   512   513   514   515   516   517   518   519   520 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  521   522   523   524   525   526   527   528   529   530   531   532   533 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  534   535   536   537   538   539   540   541   542   543   544   545   546 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  547   548   549   550   551   552   553   554   555   556   557   558   559 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  560   561   562   563   564   565   566   567   568   569   570   571   572 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  573   574   575   576   577   578   579   580   581   582   583   584   585 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  586   587   588   589   590   591   592   593   594   595   596   597   598 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  599   600   601   602   603   604   605   606   607   608   609   610   611 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  612   613   614   615   616   617   618   619   620   621   622   623   624 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  625   626   627   628   629   630   631   632   633   634   635   636   637 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  638   639   640   641   642   643   644   645   646   647   648   649   650 \n    1     1     3     1     1     3     1     1     1     1     1     1     1 \n  651   652   653   654   655   656   657   658   659   660   661   662   663 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  664   665   666   667   668   669   670   671   672   673   674   675   676 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  677   678   679   680   681   682   683   684   685   686   687   688   689 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  690   691   692   693   694   695   696   697   698   699   700   701   702 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  703   704   705   706   707   708   709   710   711   712   713   714   715 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  716   717   718   719   720   721   722   723   724   725   726   727   728 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  729   730   731   732   733   734   735   736   737   738   739   740   741 \n    1     1     1     1     1     1     1     1     1     3     1     1     1 \n  742   743   744   745   746   747   748   749   750   751   752   753   754 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  755   756   757   758   759   760   761   762   763   764   765   766   767 \n    3     1     1     2     1     2     1     1     1     1     1     1     1 \n  768   769   770   771   772   773   774   775   776   777   778   779   780 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  781   782   783   784   785   786   787   788   789   790   791   792   793 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  794   795   796   797   798   799   800   801   802   803   804   805   806 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  807   808   809   810   811   812   813   814   815   816   817   818   819 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n  820   821   822   823   824   825   826   827   828   829   830   831   832 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n  833   834   835   836   837   838   839   840   841   842   843   844   845 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  846   847   848   849   850   851   852   853   854   855   856   857   858 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n  859   860   861   862   863   864   865   866   867   868   869   870   871 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n  872   873   874   875   876   877   878   879   880   881   882   883   884 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n  885   886   887   888   889   890   891   892   893   894   895   896   897 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  898   899   900   901   902   903   904   905   906   907   908   909   910 \n    1     2     1     1     1     1     1     2     1     1     1     1     1 \n  911   912   913   914   915   916   917   918   919   920   921   922   923 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  924   925   926   927   928   929   930   931   932   933   934   935   936 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n  937   938   939   940   941   942   943   944   945   946   947   948   949 \n    1     1     1     1     3     1     1     1     1     1     1     1     1 \n  950   951   952   953   954   955   956   957   958   959   960   961   962 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  963   964   965   966   967   968   969   970   971   972   973   974   975 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n  976   977   978   979   980   981   982   983   984   985   986   987   988 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  989   990   991   992   993   994   995   996   997   998   999  1000  1001 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1002  1003  1004  1005  1006  1007  1008  1009  1010  1011  1012  1013  1014 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 1015  1016  1017  1018  1019  1020  1021  1022  1023  1024  1025  1026  1027 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1028  1029  1030  1031  1032  1033  1034  1035  1036  1037  1038  1039  1040 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1041  1042  1043  1044  1045  1046  1047  1048  1049  1050  1051  1052  1053 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1054  1055  1056  1057  1058  1059  1060  1061  1062  1063  1064  1065  1066 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1067  1068  1069  1070  1071  1072  1073  1074  1075  1076  1077  1078  1079 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 1080  1081  1082  1083  1084  1085  1086  1087  1088  1089  1090  1091  1092 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1093  1094  1095  1096  1097  1098  1099  1100  1101  1102  1103  1104  1105 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 1106  1107  1108  1109  1110  1111  1112  1113  1114  1115  1116  1117  1118 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1119  1120  1121  1122  1123  1124  1125  1126  1127  1128  1129  1130  1131 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1132  1133  1134  1135  1136  1137  1138  1139  1140  1141  1142  1143  1144 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 1145  1146  1147  1148  1149  1150  1151  1152  1153  1154  1155  1156  1157 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1158  1159  1160  1161  1162  1163  1164  1165  1166  1167  1168  1169  1170 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1171  1172  1173  1174  1175  1176  1177  1178  1179  1180  1181  1182  1183 \n    3     1     1     2     1     1     1     1     1     1     1     1     1 \n 1184  1185  1186  1187  1188  1189  1190  1191  1192  1193  1194  1195  1196 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 1197  1198  1199  1200  1201  1202  1203  1204  1205  1206  1207  1208  1209 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1210  1211  1212  1213  1214  1215  1216  1217  1218  1219  1220  1221  1222 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1223  1224  1225  1226  1227  1228  1229  1230  1231  1232  1233  1234  1235 \n    4     1     1     1     1     1     1     1     1     1     1     1     1 \n 1236  1237  1238  1239  1240  1241  1242  1243  1244  1245  1246  1247  1248 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 1249  1250  1251  1252  1253  1254  1255  1256  1257  1258  1259  1260  1261 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1262  1263  1264  1265  1266  1267  1268  1269  1270  1271  1272  1273  1274 \n    1     1     4     1     1     1     1     1     1     1     1     1     1 \n 1275  1276  1277  1278  1279  1280  1281  1282  1283  1284  1285  1286  1287 \n    1     2     1     1     1     1     1     1     1     2     1     1     1 \n 1288  1289  1290  1291  1292  1293  1294  1295  1296  1297  1298  1299  1300 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1301  1302  1303  1304  1305  1306  1307  1308  1309  1310  1311  1312  1313 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1314  1315  1316  1317  1318  1319  1320  1321  1322  1323  1324  1325  1326 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1327  1328  1329  1330  1331  1332  1333  1334  1335  1336  1337  1338  1339 \n    1     1     1     2     1     1     1     1     1     1     2     1     1 \n 1340  1341  1342  1343  1344  1345  1346  1347  1348  1349  1350  1351  1352 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 1353  1354  1355  1356  1357  1358  1359  1360  1361  1362  1363  1364  1365 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 1366  1367  1368  1369  1370  1371  1372  1373  1374  1375  1376  1377  1378 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 1379  1380  1381  1382  1383  1384  1385  1386  1387  1388  1389  1390  1391 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1392  1393  1394  1395  1396  1397  1398  1399  1400  1401  1402  1403  1404 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1405  1406  1407  1408  1409  1410  1411  1412  1413  1414  1415  1416  1417 \n    1     1     2     1     1     1     1     1     1     1     1     1     2 \n 1418  1419  1420  1421  1422  1423  1424  1425  1426  1427  1428  1429  1430 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1431  1432  1433  1434  1435  1436  1437  1438  1439  1440  1441  1442  1443 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1444  1445  1446  1447  1448  1449  1450  1451  1452  1453  1454  1455  1456 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1457  1458  1459  1460  1461  1462  1463  1464  1465  1466  1467  1468  1469 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1470  1471  1472  1473  1474  1475  1476  1477  1478  1479  1480  1481  1482 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1483  1484  1485  1486  1487  1488  1489  1490  1491  1492  1493  1494  1495 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 1496  1497  1498  1499  1500  1501  1502  1503  1504  1505  1506  1507  1508 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1509  1510  1511  1512  1513  1514  1515  1516  1517  1518  1519  1520  1521 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1522  1523  1524  1525  1526  1527  1528  1529  1530  1531  1532  1533  1534 \n    1     1     2     2     1     1     1     1     1     1     1     1     1 \n 1535  1536  1537  1538  1539  1540  1541  1542  1543  1544  1545  1546  1547 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1548  1549  1550  1551  1552  1553  1554  1555  1556  1557  1558  1559  1560 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1561  1562  1563  1564  1565  1566  1567  1568  1569  1570  1571  1572  1573 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 1574  1575  1576  1577  1578  1579  1580  1581  1582  1583  1584  1585  1586 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 1587  1588  1589  1590  1591  1592  1593  1594  1595  1596  1597  1598  1599 \n    1     1     1     1     1     2     1     1     1     2     1     1     1 \n 1600  1601  1602  1603  1604  1605  1606  1607  1608  1609  1610  1611  1612 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1613  1614  1615  1616  1617  1618  1619  1620  1621  1622  1623  1624  1625 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1626  1627  1628  1629  1630  1631  1632  1633  1634  1635  1636  1637  1638 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1639  1640  1641  1642  1643  1644  1645  1646  1647  1648  1649  1650  1651 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 1652  1653  1654  1655  1656  1657  1658  1659  1660  1661  1662  1663  1664 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1665  1666  1667  1668  1669  1670  1671  1672  1673  1674  1675  1676  1677 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 1678  1679  1680  1681  1682  1683  1684  1685  1686  1687  1688  1689  1690 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1691  1692  1693  1694  1695  1696  1697  1698  1699  1700  1701  1702  1703 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1704  1705  1706  1707  1708  1709  1710  1711  1712  1713  1714  1715  1716 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 1717  1718  1719  1720  1721  1722  1723  1724  1725  1726  1727  1728  1729 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1730  1731  1732  1733  1734  1735  1736  1737  1738  1739  1740  1741  1742 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1743  1744  1745  1746  1747  1748  1749  1750  1751  1752  1753  1754  1755 \n    1     2     1     2     1     1     1     1     1     1     1     2     1 \n 1756  1757  1758  1759  1760  1761  1762  1763  1764  1765  1766  1767  1768 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 1769  1770  1771  1772  1773  1774  1775  1776  1777  1778  1779  1780  1781 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 1782  1783  1784  1785  1786  1787  1788  1789  1790  1791  1792  1793  1794 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1795  1796  1797  1798  1799  1800  1801  1802  1803  1804  1805  1806  1807 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1808  1809  1810  1811  1812  1813  1814  1815  1816  1817  1818  1819  1820 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1821  1822  1823  1824  1825  1826  1827  1828  1829  1830  1831  1832  1833 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1834  1835  1836  1837  1838  1839  1840  1841  1842  1843  1844  1845  1846 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1847  1848  1849  1850  1851  1852  1853  1854  1855  1856  1857  1858  1859 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1860  1861  1862  1863  1864  1865  1866  1867  1868  1869  1870  1871  1872 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1873  1874  1875  1876  1877  1878  1879  1880  1881  1882  1883  1884  1885 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1886  1887  1888  1889  1890  1891  1892  1893  1894  1895  1896  1897  1898 \n    2     2     1     1     1     1     1     1     1     1     1     1     1 \n 1899  1900  1901  1902  1903  1904  1905  1906  1907  1908  1909  1910  1911 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1912  1913  1914  1915  1916  1917  1918  1919  1920  1921  1922  1923  1924 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 1925  1926  1927  1928  1929  1930  1931  1932  1933  1934  1935  1936  1937 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1938  1939  1940  1941  1942  1943  1944  1945  1946  1947  1948  1949  1950 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 1951  1952  1953  1954  1955  1956  1957  1958  1959  1960  1961  1962  1963 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1964  1965  1966  1967  1968  1969  1970  1971  1972  1973  1974  1975  1976 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1977  1978  1979  1980  1981  1982  1983  1984  1985  1986  1987  1988  1989 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 1990  1991  1992  1993  1994  1995  1996  1997  1998  1999  2000  2001  2002 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2003  2004  2005  2006  2007  2008  2009  2010  2011  2012  2013  2014  2015 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2016  2017  2018  2019  2020  2021  2022  2023  2024  2025  2026  2027  2028 \n    1     1     1     1     2     1     1     1     1     1     1     1     2 \n 2029  2030  2031  2032  2033  2034  2035  2036  2037  2038  2039  2040  2041 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2042  2043  2044  2045  2046  2047  2048  2049  2050  2051  2052  2053  2054 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2055  2056  2057  2058  2059  2060  2061  2062  2063  2064  2065  2066  2067 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2068  2069  2070  2071  2072  2073  2074  2075  2076  2077  2078  2079  2080 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 2081  2082  2083  2084  2085  2086  2087  2088  2089  2090  2091  2092  2093 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 2094  2095  2096  2097  2098  2099  2100  2101  2102  2103  2104  2105  2106 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 2107  2108  2109  2110  2111  2112  2113  2114  2115  2116  2117  2118  2119 \n    1     1     1     2     1     1     1     1     1     1     4     1     1 \n 2120  2121  2122  2123  2124  2125  2126  2127  2128  2129  2130  2131  2132 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 2133  2134  2135  2136  2137  2138  2139  2140  2141  2142  2143  2144  2145 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2146  2147  2148  2149  2150  2151  2152  2153  2154  2155  2156  2157  2158 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 2159  2160  2161  2162  2163  2164  2165  2166  2167  2168  2169  2170  2171 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2172  2173  2174  2175  2176  2177  2178  2179  2180  2181  2182  2183  2184 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 2185  2186  2187  2188  2189  2190  2191  2192  2193  2194  2195  2196  2197 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2198  2199  2200  2201  2202  2203  2204  2205  2206  2207  2208  2209  2210 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2211  2212  2213  2214  2215  2216  2217  2218  2219  2220  2221  2222  2223 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2224  2225  2226  2227  2228  2229  2230  2231  2232  2233  2234  2235  2236 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 2237  2238  2239  2240  2241  2242  2243  2244  2245  2246  2247  2248  2249 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2250  2251  2252  2253  2254  2255  2256  2257  2258  2259  2260  2261  2262 \n    1     1     1     1     1     1     1     1     1     1     2     3     1 \n 2263  2264  2265  2266  2267  2268  2269  2270  2271  2272  2273  2274  2275 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2276  2277  2278  2279  2280  2281  2282  2283  2284  2285  2286  2287  2288 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 2289  2290  2291  2292  2293  2294  2295  2296  2297  2298  2299  2300  2301 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2302  2303  2304  2305  2306  2307  2308  2309  2310  2311  2312  2313  2314 \n    2     1     1     2     1     1     1     1     1     1     1     1     1 \n 2315  2316  2317  2318  2319  2320  2321  2322  2323  2324  2325  2326  2327 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2328  2329  2330  2331  2332  2333  2334  2335  2336  2337  2338  2339  2340 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 2341  2342  2343  2344  2345  2346  2347  2348  2349  2350  2351  2352  2353 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 2354  2355  2356  2357  2358  2359  2360  2361  2362  2363  2364  2365  2366 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 2367  2368  2369  2370  2371  2372  2373  2374  2375  2376  2377  2378  2379 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 2380  2381  2382  2383  2384  2385  2386  2387  2388  2389  2390  2391  2392 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 2393  2394  2395  2396  2397  2398  2399  2400  2401  2402  2403  2404  2405 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2406  2407  2408  2409  2410  2411  2412  2413  2414  2415  2416  2417  2418 \n    2     1     1     1     1     1     1     1     1     3     1     1     1 \n 2419  2420  2421  2422  2423  2424  2425  2426  2427  2428  2429  2430  2431 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 2432  2433  2434  2435  2436  2437  2438  2439  2440  2441  2442  2443  2444 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 2445  2446  2447  2448  2449  2450  2451  2452  2453  2454  2455  2456  2457 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2458  2459  2460  2461  2462  2463  2464  2465  2466  2467  2468  2469  2470 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2471  2472  2473  2474  2475  2476  2477  2478  2479  2480  2481  2482  2483 \n    1     1     1     1     1     1     1     3     2     1     2     1     1 \n 2484  2485  2486  2487  2488  2489  2490  2491  2492  2493  2494  2495  2496 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2497  2498  2499  2500  2501  2502  2503  2504  2505  2506  2507  2508  2509 \n    1     1     1     1     1     1     1     1     1     1     3     1     1 \n 2510  2511  2512  2513  2514  2515  2516  2517  2518  2519  2520  2521  2522 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2523  2524  2525  2526  2527  2528  2529  2530  2531  2532  2533  2534  2535 \n    1     1     1     1     1     1     1     1     1     3     1     1     1 \n 2536  2537  2538  2539  2540  2541  2542  2543  2544  2545  2546  2547  2548 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2549  2550  2551  2552  2553  2554  2555  2556  2557  2558  2559  2560  2561 \n    1     1     1     1     1     1     1     1     1     1     1     1     3 \n 2562  2563  2564  2565  2566  2567  2568  2569  2570  2571  2572  2573  2574 \n    1     1     1     1     1     1     2     1     1     1     1     2     1 \n 2575  2576  2577  2578  2579  2580  2581  2582  2583  2584  2585  2586  2587 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2588  2589  2590  2591  2592  2593  2594  2595  2596  2597  2598  2599  2600 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2601  2602  2603  2604  2605  2606  2607  2608  2609  2610  2611  2612  2613 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2614  2615  2616  2617  2618  2619  2620  2621  2622  2623  2624  2625  2626 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2627  2628  2629  2630  2631  2632  2633  2634  2635  2636  2637  2638  2639 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2640  2641  2642  2643  2644  2645  2646  2647  2648  2649  2650  2651  2652 \n    1     1     1     1     1     4     4     1     1     1     1     1     1 \n 2653  2654  2655  2656  2657  2658  2659  2660  2661  2662  2663  2664  2665 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2666  2667  2668  2669  2670  2671  2672  2673  2674  2675  2676  2677  2678 \n    1     1     3     1     1     1     1     1     1     1     1     1     1 \n 2679  2680  2681  2682  2683  2684  2685  2686  2687  2688  2689  2690  2691 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 2692  2693  2694  2695  2696  2697  2698  2699  2700  2701  2702  2703  2704 \n    1     1     3     3     1     1     1     1     1     1     1     1     1 \n 2705  2706  2707  2708  2709  2710  2711  2712  2713  2714  2715  2716  2717 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 2718  2719  2720  2721  2722  2723  2724  2725  2726  2727  2728  2729  2730 \n    2     1     1     2     1     1     1     1     1     1     1     1     1 \n 2731  2732  2733  2734  2735  2736  2737  2738  2739  2740  2741  2742  2743 \n    1     1     1     1     1     1     2     1     1     1     2     1     1 \n 2744  2745  2746  2747  2748  2749  2750  2751  2752  2753  2754  2755  2756 \n    1     1     1     1     1     2     1     1     1     1     3     1     1 \n 2757  2758  2759  2760  2761  2762  2763  2764  2765  2766  2767  2768  2769 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 2770  2771  2772  2773  2774  2775  2776  2777  2778  2779  2780  2781  2782 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 2783  2784  2785  2786  2787  2788  2789  2790  2791  2792  2793  2794  2795 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 2796  2797  2798  2799  2800  2801  2802  2803  2804  2805  2806  2807  2808 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2809  2810  2811  2812  2813  2814  2815  2816  2817  2818  2819  2820  2821 \n    1     1     1     1     1     1     1     1     1     1     3     1     1 \n 2822  2823  2824  2825  2826  2827  2828  2829  2830  2831  2832  2833  2834 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2835  2836  2837  2838  2839  2840  2841  2842  2843  2844  2845  2846  2847 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2848  2849  2850  2851  2852  2853  2854  2855  2856  2857  2858  2859  2860 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 2861  2862  2863  2864  2865  2866  2867  2868  2869  2870  2871  2872  2873 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 2874  2875  2876  2877  2878  2879  2880  2881  2882  2883  2884  2885  2886 \n    1     1     1     1     1     3     1     1     1     1     1     1     1 \n 2887  2888  2889  2890  2891  2892  2893  2894  2895  2896  2897  2898  2899 \n    1     1     1     1     1     2     1     1     3     1     1     2     1 \n 2900  2901  2902  2903  2904  2905  2906  2907  2908  2909  2910  2911  2912 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2913  2914  2915  2916  2917  2918  2919  2920  2921  2922  2923  2924  2925 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2926  2927  2928  2929  2930  2931  2932  2933  2934  2935  2936  2937  2938 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2939  2940  2941  2942  2943  2944  2945  2946  2947  2948  2949  2950  2951 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2952  2953  2954  2955  2956  2957  2958  2959  2960  2961  2962  2963  2964 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2965  2966  2967  2968  2969  2970  2971  2972  2973  2974  2975  2976  2977 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2978  2979  2980  2981  2982  2983  2984  2985  2986  2987  2988  2989  2990 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 2991  2992  2993  2994  2995  2996  2997  2998  2999  3000  3001  3002  3003 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3004  3005  3006  3007  3008  3009  3010  3011  3012  3013  3014  3015  3016 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3017  3018  3019  3020  3021  3022  3023  3024  3025  3026  3027  3028  3029 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3030  3031  3032  3033  3034  3035  3036  3037  3038  3039  3040  3041  3042 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3043  3044  3045  3046  3047  3048  3049  3050  3051  3052  3053  3054  3055 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3056  3057  3058  3059  3060  3061  3062  3063  3064  3065  3066  3067  3068 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3069  3070  3071  3072  3073  3074  3075  3076  3077  3078  3079  3080  3081 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3082  3083  3084  3085  3086  3087  3088  3089  3090  3091  3092  3093  3094 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3095  3096  3097  3098  3099  3100  3101  3102  3103  3104  3105  3106  3107 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 3108  3109  3110  3111  3112  3113  3114  3115  3116  3117  3118  3119  3120 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3121  3122  3123  3124  3125  3126  3127  3128  3129  3130  3131  3132  3133 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3134  3135  3136  3137  3138  3139  3140  3141  3142  3143  3144  3145  3146 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3147  3148  3149  3150  3151  3152  3153  3154  3155  3156  3157  3158  3159 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3160  3161  3162  3163  3164  3165  3166  3167  3168  3169  3170  3171  3172 \n    1     1     1     1     4     1     1     1     1     2     1     1     1 \n 3173  3174  3175  3176  3177  3178  3179  3180  3181  3182  3183  3184  3185 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 3186  3187  3188  3189  3190  3191  3192  3193  3194  3195  3196  3197  3198 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3199  3200  3201  3202  3203  3204  3205  3206  3207  3208  3209  3210  3211 \n    1     1     1     1     1     1     1     1     1     4     1     1     1 \n 3212  3213  3214  3215  3216  3217  3218  3219  3220  3221  3222  3223  3224 \n    1     1     1     1     3     1     1     1     1     1     1     3     1 \n 3225  3226  3227  3228  3229  3230  3231  3232  3233  3234  3235  3236  3237 \n    1     1     1     1     1     1     1     1     1     4     1     1     1 \n 3238  3239  3240  3241  3242  3243  3244  3245  3246  3247  3248  3249  3250 \n    2     1     1     1     1     1     3     1     1     1     1     1     1 \n 3251  3252  3253  3254  3255  3256  3257  3258  3259  3260  3261  3262  3263 \n    1     1     1     1     1     1     1     1     1     2     1     1     2 \n 3264  3265  3266  3267  3268  3269  3270  3271  3272  3273  3274  3275  3276 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3277  3278  3279  3280  3281  3282  3283  3284  3285  3286  3287  3288  3289 \n    1     1     2     1     1     1     1     1     1     1     3     1     1 \n 3290  3291  3292  3293  3294  3295  3296  3297  3298  3299  3300  3301  3302 \n    1     1     1     1     1     1     4     1     1     1     1     1     1 \n 3303  3304  3305  3306  3307  3308  3309  3310  3311  3312  3313  3314  3315 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3316  3317  3318  3319  3320  3321  3322  3323  3324  3325  3326  3327  3328 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3329  3330  3331  3332  3333  3334  3335  3336  3337  3338  3339  3340  3341 \n    1     1     1     3     1     1     1     1     1     1     1     1     1 \n 3342  3343  3344  3345  3346  3347  3348  3349  3350  3351  3352  3353  3354 \n    1     1     1     1     1     1     1     4     1     1     1     1     1 \n 3355  3356  3357  3358  3359  3360  3361  3362  3363  3364  3365  3366  3367 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3368  3369  3370  3371  3372  3373  3374  3375  3376  3377  3378  3379  3380 \n    1     1     1     1     1     1     3     1     1     1     1     1     1 \n 3381  3382  3383  3384  3385  3386  3387  3388  3389  3390  3391  3392  3393 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 3394  3395  3396  3397  3398  3399  3400  3401  3402  3403  3404  3405  3406 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 3407  3408  3409  3410  3411  3412  3413  3414  3415  3416  3417  3418  3419 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3420  3421  3422  3423  3424  3425  3426  3427  3428  3429  3430  3431  3432 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3433  3434  3435  3436  3437  3438  3439  3440  3441  3442  3443  3444  3445 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3446  3447  3448  3449  3450  3451  3452  3453  3454  3455  3456  3457  3458 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3459  3460  3461  3462  3463  3464  3465  3466  3467  3468  3469  3470  3471 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3472  3473  3474  3475  3476  3477  3478  3479  3480  3481  3482  3483  3484 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 3485  3486  3487  3488  3489  3490  3491  3492  3493  3494  3495  3496  3497 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 3498  3499  3500  3501  3502  3503  3504  3505  3506  3507  3508  3509  3510 \n    1     2     1     1     1     1     1     1     2     1     1     1     1 \n 3511  3512  3513  3514  3515  3516  3517  3518  3519  3520  3521  3522  3523 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3524  3525  3526  3527  3528  3529  3530  3531  3532  3533  3534  3535  3536 \n    1     1     1     1     1     1     1     1     1     1     1     1     4 \n 3537  3538  3539  3540  3541  3542  3543  3544  3545  3546  3547  3548  3549 \n    1     2     1     1     9     1     1     2     1     1     1     1     1 \n 3550  3551  3552  3553  3554  3555  3556  3557  3558  3559  3560  3561  3562 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3563  3564  3565  3566  3567  3568  3569  3570  3571  3572  3573  3574  3575 \n    1     1     1     1     1     1     4     1     1     1     1     1     1 \n 3576  3577  3578  3579  3580  3581  3582  3583  3584  3585  3586  3587  3588 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 3589  3590  3591  3592  3593  3594  3595  3596  3597  3598  3599  3600  3601 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 3602  3603  3604  3605  3606  3607  3608  3609  3610  3611  3612  3613  3614 \n    1     1     1     1     1     1     1     1    16     1     1     1     1 \n 3615  3616  3617  3618  3619  3620  3621  3622  3623  3624  3625  3626  3627 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3628  3629  3630  3631  3632  3633  3634  3635  3636  3637  3638  3639  3640 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3641  3642  3643  3644  3645  3646  3647  3648  3649  3650  3651  3652  3653 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3654  3655  3656  3657  3658  3659  3660  3661  3662  3663  3664  3665  3666 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3667  3668  3669  3670  3671  3672  3673  3674  3675  3676  3677  3678  3679 \n    1     1     1     2     1     1     1     1     1     1     1     2     1 \n 3680  3681  3682  3683  3684  3685  3686  3687  3688  3689  3690  3691  3692 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3693  3694  3695  3696  3697  3698  3699  3700  3701  3702  3703  3704  3705 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 3706  3707  3708  3709  3710  3711  3712  3713  3714  3715  3716  3717  3718 \n    1     1     2     1     1     1     1     1     1     2     1     1     2 \n 3719  3720  3721  3722  3723  3724  3725  3726  3727  3728  3729  3730  3731 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 3732  3733  3734  3735  3736  3737  3738  3739  3740  3741  3742  3743  3744 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3745  3746  3747  3748  3749  3750  3751  3752  3753  3754  3755  3756  3757 \n    1     1     1     1     1     1     1     4     1     1     1     1     1 \n 3758  3759  3760  3761  3762  3763  3764  3765  3766  3767  3768  3769  3770 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 3771  3772  3773  3774  3775  3776  3777  3778  3779  3780  3781  3782  3783 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3784  3785  3786  3787  3788  3789  3790  3791  3792  3793  3794  3795  3796 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3797  3798  3799  3800  3801  3802  3803  3804  3805  3806  3807  3808  3809 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3810  3811  3812  3813  3814  3815  3816  3817  3818  3819  3820  3821  3822 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3823  3824  3825  3826  3827  3828  3829  3830  3831  3832  3833  3834  3835 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3836  3837  3838  3839  3840  3841  3842  3843  3844  3845  3846  3847  3848 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 3849  3850  3851  3852  3853  3854  3855  3856  3857  3858  3859  3860  3861 \n    3     1     1     1     1     1     1     1     1     1     1     1     1 \n 3862  3863  3864  3865  3866  3867  3868  3869  3870  3871  3872  3873  3874 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3875  3876  3877  3878  3879  3880  3881  3882  3883  3884  3885  3886  3887 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3888  3889  3890  3891  3892  3893  3894  3895  3896  3897  3898  3899  3900 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3901  3902  3903  3904  3905  3906  3907  3908  3909  3910  3911  3912  3913 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3914  3915  3916  3917  3918  3919  3920  3921  3922  3923  3924  3925  3926 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3927  3928  3929  3930  3931  3932  3933  3934  3935  3936  3937  3938  3939 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 3940  3941  3942  3943  3944  3945  3946  3947  3948  3949  3950  3951  3952 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3953  3954  3955  3956  3957  3958  3959  3960  3961  3962  3963  3964  3965 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 3966  3967  3968  3969  3970  3971  3972  3973  3974  3975  3976  3977  3978 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 3979  3980  3981  3982  3983  3984  3985  3986  3987  3988  3989  3990  3991 \n    1     1     4     1     1     1     1     1     1     1     1     1     1 \n 3992  3993  3994  3995  3996  3997  3998  3999  4000  4001  4002  4003  4004 \n    1     1     2     1     1     1     2     1     1     1     1     1     1 \n 4005  4006  4007  4008  4009  4010  4011  4012  4013  4014  4015  4016  4017 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4018  4019  4020  4021  4022  4023  4024  4025  4026  4027  4028  4029  4030 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4031  4032  4033  4034  4035  4036  4037  4038  4039  4040  4041  4042  4043 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4044  4045  4046  4047  4048  4049  4050  4051  4052  4053  4054  4055  4056 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4057  4058  4059  4060  4061  4062  4063  4064  4065  4066  4067  4068  4069 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4070  4071  4072  4073  4074  4075  4076  4077  4078  4079  4080  4081  4082 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4083  4084  4085  4086  4087  4088  4089  4090  4091  4092  4093  4094  4095 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4096  4097  4098  4099  4100  4101  4102  4103  4104  4105  4106  4107  4108 \n    1     1     2     1     1     3     1     1     1     1     1     1     1 \n 4109  4110  4111  4112  4113  4114  4115  4116  4117  4118  4119  4120  4121 \n    1     1     1     2     1     1     1     1     1     1     3     1     1 \n 4122  4123  4124  4125  4126  4127  4128  4129  4130  4131  4132  4133  4134 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4135  4136  4137  4138  4139  4140  4141  4142  4143  4144  4145  4146  4147 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4148  4149  4150  4151  4152  4153  4154  4155  4156  4157  4158  4159  4160 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4161  4162  4163  4164  4165  4166  4167  4168  4169  4170  4171  4172  4173 \n    1     1     3     1     1     1     1     1     1     1     1     1     2 \n 4174  4175  4176  4177  4178  4179  4180  4181  4182  4183  4184  4185  4186 \n    1     4     1     1     1     1     1     1     1     1     1     1     1 \n 4187  4188  4189  4190  4191  4192  4193  4194  4195  4196  4197  4198  4199 \n    1     1     2     1     1     1     1     1     1     1     2     1     1 \n 4200  4201  4202  4203  4204  4205  4206  4207  4208  4209  4210  4211  4212 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4213  4214  4215  4216  4217  4218  4219  4220  4221  4222  4223  4224  4225 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4226  4227  4228  4229  4230  4231  4232  4233  4234  4235  4236  4237  4238 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4239  4240  4241  4242  4243  4244  4245  4246  4247  4248  4249  4250  4251 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4252  4253  4254  4255  4256  4257  4258  4259  4260  4261  4262  4263  4264 \n    1     1     2     3     1     1     1     1     1     1     1     1     1 \n 4265  4266  4267  4268  4269  4270  4271  4272  4273  4274  4275  4276  4277 \n    1     1     1     1     1     1     1     1     1     3     2     1     1 \n 4278  4279  4280  4281  4282  4283  4284  4285  4286  4287  4288  4289  4290 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4291  4292  4293  4294  4295  4296  4297  4298  4299  4300  4301  4302  4303 \n    1     1     1     2     1     1     1     1     1     1     1     3     1 \n 4304  4305  4306  4307  4308  4309  4310  4311  4312  4313  4314  4315  4316 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4317  4318  4319  4320  4321  4322  4323  4324  4325  4326  4327  4328  4329 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4330  4331  4332  4333  4334  4335  4336  4337  4338  4339  4340  4341  4342 \n    1     1     2     1     1     2     1     1     1     1     1     1     2 \n 4343  4344  4345  4346  4347  4348  4349  4350  4351  4352  4353  4354  4355 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 4356  4357  4358  4359  4360  4361  4362  4363  4364  4365  4366  4367  4368 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4369  4370  4371  4372  4373  4374  4375  4376  4377  4378  4379  4380  4381 \n    1     3     1     1     4     1     1     1     1     1     1     1     1 \n 4382  4383  4384  4385  4386  4387  4388  4389  4390  4391  4392  4393  4394 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 4395  4396  4397  4398  4399  4400  4401  4402  4403  4404  4405  4406  4407 \n    1     1     1     1     1     1     1     1     1     3     1     1     1 \n 4408  4409  4410  4411  4412  4413  4414  4415  4416  4417  4418  4419  4420 \n    1     1     1     1     2     1     1     1     1     1     1     3     1 \n 4421  4422  4423  4424  4425  4426  4427  4428  4429  4430  4431  4432  4433 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4434  4435  4436  4437  4438  4439  4440  4441  4442  4443  4444  4445  4446 \n    1     1     3     1     1     1     1     1     1     1     1     1     2 \n 4447  4448  4449  4450  4451  4452  4453  4454  4455  4456  4457  4458  4459 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4460  4461  4462  4463  4464  4465  4466  4467  4468  4469  4470  4471  4472 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4473  4474  4475  4476  4477  4478  4479  4480  4481  4482  4483  4484  4485 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 4486  4487  4488  4489  4490  4491  4492  4493  4494  4495  4496  4497  4498 \n    1     1     1     1     1     1     1     1     1     3     1     1     1 \n 4499  4500  4501  4502  4503  4504  4505  4506  4507  4508  4509  4510  4511 \n    1     1     1     1     1     2     1     1     1     1     1     1     2 \n 4512  4513  4514  4515  4516  4517  4518  4519  4520  4521  4522  4523  4524 \n    2     1     1     1     1     1     1     1     2     1     1     1     1 \n 4525  4526  4527  4528  4529  4530  4531  4532  4533  4534  4535  4536  4537 \n    1     1     1     1     4     2     1     1     1     1     1     1     1 \n 4538  4539  4540  4541  4542  4543  4544  4545  4546  4547  4548  4549  4550 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4551  4552  4553  4554  4555  4556  4557  4558  4559  4560  4561  4562  4563 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 4564  4565  4566  4567  4568  4569  4570  4571  4572  4573  4574  4575  4576 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4577  4578  4579  4580  4581  4582  4583  4584  4585  4586  4587  4588  4589 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4590  4591  4592  4593  4594  4595  4596  4597  4598  4599  4600  4601  4602 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4603  4604  4605  4606  4607  4608  4609  4610  4611  4612  4613  4614  4615 \n    1     1     1     1     1     1     3     1     1     5     3     1     1 \n 4616  4617  4618  4619  4620  4621  4622  4623  4624  4625  4626  4627  4628 \n    1     1     1     1     1     1     1     1     1     3     1     1     1 \n 4629  4630  4631  4632  4633  4634  4635  4636  4637  4638  4639  4640  4641 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 4642  4643  4644  4645  4646  4647  4648  4649  4650  4651  4652  4653  4654 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4655  4656  4657  4658  4659  4660  4661  4662  4663  4664  4665  4666  4667 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 4668  4669  4670  4671  4672  4673  4674  4675  4676  4677  4678  4679  4680 \n    1     1     1     1     1     1     1     1     4     1     1     1     1 \n 4681  4682  4683  4684  4685  4686  4687  4688  4689  4690  4691  4692  4693 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4694  4695  4696  4697  4698  4699  4700  4701  4702  4703  4704  4705  4706 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4707  4708  4709  4710  4711  4712  4713  4714  4715  4716  4717  4718  4719 \n    1     1     2     1     1     1     1     1     1     2     1     1     1 \n 4720  4721  4722  4723  4724  4725  4726  4727  4728  4729  4730  4731  4732 \n    1     1     1     1     1     1     1     1     1     1     4     1     1 \n 4733  4734  4735  4736  4737  4738  4739  4740  4741  4742  4743  4744  4745 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 4746  4747  4748  4749  4750  4751  4752  4753  4754  4755  4756  4757  4758 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4759  4760  4761  4762  4763  4764  4765  4766  4767  4768  4769  4770  4771 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 4772  4773  4774  4775  4776  4777  4778  4779  4780  4781  4782  4783  4784 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4785  4786  4787  4788  4789  4790  4791  4792  4793  4794  4795  4796  4797 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4798  4799  4800  4801  4802  4803  4804  4805  4806  4807  4808  4809  4810 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4811  4812  4813  4814  4815  4816  4817  4818  4819  4820  4821  4822  4823 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4824  4825  4826  4827  4828  4829  4830  4831  4832  4833  4834  4835  4836 \n    3     1     1     1     1     1     1     1     1     1     1     1     1 \n 4837  4838  4839  4840  4841  4842  4843  4844  4845  4846  4847  4848  4849 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4850  4851  4852  4853  4854  4855  4856  4857  4858  4859  4860  4861  4862 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4863  4864  4865  4866  4867  4868  4869  4870  4871  4872  4873  4874  4875 \n    1     1     1     1     4     1     1     1     1     1     1     1     1 \n 4876  4877  4878  4879  4880  4881  4882  4883  4884  4885  4886  4887  4888 \n    1     1     1     1     1     1     1     1     1     1    16     2     1 \n 4889  4890  4891  4892  4893  4894  4895  4896  4897  4898  4899  4900  4901 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 4902  4903  4904  4905  4906  4907  4908  4909  4910  4911  4912  4913  4914 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 4915  4916  4917  4918  4919  4920  4921  4922  4923  4924  4925  4926  4927 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4928  4929  4930  4931  4932  4933  4934  4935  4936  4937  4938  4939  4940 \n    1     1     1     1     1     1     2     1     1     1     1     1     4 \n 4941  4942  4943  4944  4945  4946  4947  4948  4949  4950  4951  4952  4953 \n    1     1     3     1     1     1     1     1     1     1     1     1     1 \n 4954  4955  4956  4957  4958  4959  4960  4961  4962  4963  4964  4965  4966 \n    4     1     1     1     1     1     1     1     1     1     1     1     1 \n 4967  4968  4969  4970  4971  4972  4973  4974  4975  4976  4977  4978  4979 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4980  4981  4982  4983  4984  4985  4986  4987  4988  4989  4990  4991  4992 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 4993  4994  4995  4996  4997  4998  4999  5000  5001  5002  5003  5004  5005 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5006  5007  5008  5009  5010  5011  5012  5013  5014  5015  5016  5017  5018 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 5019  5020  5021  5022  5023  5024  5025  5026  5027  5028  5029  5030  5031 \n    1     1     1     3     1     1     1     1     1     1     1     1     2 \n 5032  5033  5034  5035  5036  5037  5038  5039  5040  5041  5042  5043  5044 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 5045  5046  5047  5048  5049  5050  5051  5052  5053  5054  5055  5056  5057 \n    6     2     6     1     1     1     1     2     1     1     1     1     1 \n 5058  5059  5060  5061  5062  5063  5064  5065  5066  5067  5068  5069  5070 \n    1     1     1     1     1     1     1     1     3     1     1     1     2 \n 5071  5072  5073  5074  5075  5076  5077  5078  5079  5080  5081  5082  5083 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5084  5085  5086  5087  5088  5089  5090  5091  5092  5093  5094  5095  5096 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5097  5098  5099  5100  5101  5102  5103  5104  5105  5106  5107  5108  5109 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 5110  5111  5112  5113  5114  5115  5116  5117  5118  5119  5120  5121  5122 \n    1     1     1     1     1     1     1     1     1     1     1     1     3 \n 5123  5124  5125  5126  5127  5128  5129  5130  5131  5132  5133  5134  5135 \n    1     4     1     1     1     1     1     1     1     1     1     1     1 \n 5136  5137  5138  5139  5140  5141  5142  5143  5144  5145  5146  5147  5148 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5149  5150  5151  5152  5153  5154  5155  5156  5157  5158  5159  5160  5161 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 5162  5163  5164  5165  5166  5167  5168  5169  5170  5171  5172  5173  5174 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5175  5176  5177  5178  5179  5180  5181  5182  5183  5184  5185  5186  5187 \n    2     2     1     1     1     2     1     1     1     2     1     1     1 \n 5188  5189  5190  5191  5192  5193  5194  5195  5196  5197  5198  5199  5200 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5201  5202  5203  5204  5205  5206  5207  5208  5209  5210  5211  5212  5213 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5214  5215  5216  5217  5218  5219  5220  5221  5222  5223  5224  5225  5226 \n    1     1     1     1     1     1     1     1     1     1     2    16     1 \n 5227  5228  5229  5230  5231  5232  5233  5234  5235  5236  5237  5238  5239 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 5240  5241  5242  5243  5244  5245  5246  5247  5248  5249  5250  5251  5252 \n    1     1     1     1     1     1     1     2     1     1     4     1     1 \n 5253  5254  5255  5256  5257  5258  5259  5260  5261  5262  5263  5264  5265 \n    1     1     1     1     1     1     1     1     3     1     1     1     1 \n 5266  5267  5268  5269  5270  5271  5272  5273  5274  5275  5276  5277  5278 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5279  5280  5281  5282  5283  5284  5285  5286  5287  5288  5289  5290  5291 \n    1     1     1     1     1     1     1     1     2     2     1     1     1 \n 5292  5293  5294  5295  5296  5297  5298  5299  5300  5301  5302  5303  5304 \n    1     1     2     1     1     1     1     1     1     1     1     2     1 \n 5305  5306  5307  5308  5309  5310  5311  5312  5313  5314  5315  5316  5317 \n    1     1     1     1     4     1     1     1     1     1     2     1     1 \n 5318  5319  5320  5321  5322  5323  5324  5325  5326  5327  5328  5329  5330 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 5331  5332  5333  5334  5335  5336  5337  5338  5339  5340  5341  5342  5343 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 5344  5345  5346  5347  5348  5349  5350  5351  5352  5353  5354  5355  5356 \n    1     1     1     1     1     1     1     1     1     1     1     3     1 \n 5357  5358  5359  5360  5361  5362  5363  5364  5365  5366  5367  5368  5369 \n    1     1     1     1     1     1     4     1     4     1     1     1     1 \n 5370  5371  5372  5373  5374  5375  5376  5377  5378  5379  5380  5381  5382 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 5383  5384  5385  5386  5387  5388  5389  5390  5391  5392  5393  5394  5395 \n    1     1     1     1     1     1     1     1     1     3     2    16     1 \n 5396  5397  5398  5399  5400  5401  5402  5403  5404  5405  5406  5407  5408 \n    3     1     1     1     1     1     1     1     1     1     1     1     1 \n 5409  5410  5411  5412  5413  5414  5415  5416  5417  5418  5419  5420  5421 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5422  5423  5424  5425  5426  5427  5428  5429  5430  5431  5432  5433  5434 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5435  5436  5437  5438  5439  5440  5441  5442  5443  5444  5445  5446  5447 \n    1     1     3     1     1     1     1     1     1     1     1     1     2 \n 5448  5449  5450  5451  5452  5453  5454  5455  5456  5457  5458  5459  5460 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 5461  5462  5463  5464  5465  5466  5467  5468  5469  5470  5471  5472  5473 \n    1     1     3     2     1     1     1     1     1     1     1     1     2 \n 5474  5475  5476  5477  5478  5479  5480  5481  5482  5483  5484  5485  5486 \n    1    16     1     1     1     1     1     1     1     1     1     1     1 \n 5487  5488  5489  5490  5491  5492  5493  5494  5495  5496  5497  5498  5499 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5500  5501  5502  5503  5504  5505  5506  5507  5508  5509  5510  5511  5512 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5513  5514  5515  5516  5517  5518  5519  5520  5521  5522  5523  5524  5525 \n    1     1     1     1     1     1     1     3     1     1     1     1     2 \n 5526  5527  5528  5529  5530  5531  5532  5533  5534  5535  5536  5537  5538 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 5539  5540  5541  5542  5543  5544  5545  5546  5547  5548  5549  5550  5551 \n    1     1     1     1     1     2     1     1     1     1     1     1     2 \n 5552  5553  5554  5555  5556  5557  5558  5559  5560  5561  5562  5563  5564 \n    2     1    16     1     1     1     1     1     1     1     1     1     1 \n 5565  5566  5567  5568  5569  5570  5571  5572  5573  5574  5575  5576  5577 \n    1     1     1     1     1     1     1     1     1     1     1     1     3 \n 5578  5579  5580  5581  5582  5583  5584  5585  5586  5587  5588  5589  5590 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 5591  5592  5593  5594  5595  5596  5597  5598  5599  5600  5601  5602  5603 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5604  5605  5606  5607  5608  5609  5610  5611  5612  5613  5614  5615  5616 \n    1     1     1     1     1     1     1     1    16     1     1     2     1 \n 5617  5618  5619  5620  5621  5622  5623  5624  5625  5626  5627  5628  5629 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5630  5631  5632  5633  5634  5635  5636  5637  5638  5639  5640  5641  5642 \n    1     1     1     1     2     1     1     1     1     4     1     1     1 \n 5643  5644  5645  5646  5647  5648  5649  5650  5651  5652  5653  5654  5655 \n    3     5     1     1     1     1     1     1     1     1     1     1     3 \n 5656  5657  5658  5659  5660  5661  5662  5663  5664  5665  5666  5667  5668 \n    1     1     1     4     1     1     1     1     1     1     1     1     1 \n 5669  5670  5671  5672  5673  5674  5675  5676  5677  5678  5679  5680  5681 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5682  5683  5684  5685  5686  5687  5688  5689  5690  5691  5692  5693  5694 \n    1     1     1     1     1     1     1     1     1     2     1     1     4 \n 5695  5696  5697  5698  5699  5700  5701  5702  5703  5704  5705  5706  5707 \n    1     1     1     1     1     1     5     1     1     1     1     1     1 \n 5708  5709  5710  5711  5712  5713  5714  5715  5716  5717  5718  5719  5720 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 5721  5722  5723  5724  5725  5726  5727  5728  5729  5730  5731  5732  5733 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5734  5735  5736  5737  5738  5739  5740  5741  5742  5743  5744  5745  5746 \n    1     1     1     1     1     1     1     1     1     1     2     5     1 \n 5747  5748  5749  5750  5751  5752  5753  5754  5755  5756  5757  5758  5759 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 5760  5761  5762  5763  5764  5765  5766  5767  5768  5769  5770  5771  5772 \n    1     1     1     1     1     1    16     1     1     2     1     1     1 \n 5773  5774  5775  5776  5777  5778  5779  5780  5781  5782  5783  5784  5785 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 5786  5787  5788  5789  5790  5791  5792  5793  5794  5795  5796  5797  5798 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 5799  5800  5801  5802  5803  5804  5805  5806  5807  5808  5809  5810  5811 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 5812  5813  5814  5815  5816  5817  5818  5819  5820  5821  5822  5823  5824 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5825  5826  5827  5828  5829  5830  5831  5832  5833  5834  5835  5836  5837 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5838  5839  5840  5841  5842  5843  5844  5845  5846  5847  5848  5849  5850 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 5851  5852  5853  5854  5855  5856  5857  5858  5859  5860  5861  5862  5863 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5864  5865  5866  5867  5868  5869  5870  5871  5872  5873  5874  5875  5876 \n    1     1     1     1     1     2     2     1     1     1     1     1     1 \n 5877  5878  5879  5880  5881  5882  5883  5884  5885  5886  5887  5888  5889 \n    1     1     1     1     1     1     1     1     3     1     1     1     1 \n 5890  5891  5892  5893  5894  5895  5896  5897  5898  5899  5900  5901  5902 \n    1     1     1     1     1     1     1     1     1     1     1     1     5 \n 5903  5904  5905  5906  5907  5908  5909  5910  5911  5912  5913  5914  5915 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 5916  5917  5918  5919  5920  5921  5922  5923  5924  5925  5926  5927  5928 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 5929  5930  5931  5932  5933  5934  5935  5936  5937  5938  5939  5940  5941 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5942  5943  5944  5945  5946  5947  5948  5949  5950  5951  5952  5953  5954 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5955  5956  5957  5958  5959  5960  5961  5962  5963  5964  5965  5966  5967 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 5968  5969  5970  5971  5972  5973  5974  5975  5976  5977  5978  5979  5980 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5981  5982  5983  5984  5985  5986  5987  5988  5989  5990  5991  5992  5993 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 5994  5995  5996  5997  5998  5999  6000  6001  6002  6003  6004  6005  6006 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6007  6008  6009  6010  6011  6012  6013  6014  6015  6016  6017  6018  6019 \n    4     1     2     1     1     1     1     1     1     1     1     1     1 \n 6020  6021  6022  6023  6024  6025  6026  6027  6028  6029  6030  6031  6032 \n    1     1     1     1     1     1     6     1     1     1     1     1     1 \n 6033  6034  6035  6036  6037  6038  6039  6040  6041  6042  6043  6044  6045 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6046  6047  6048  6049  6050  6051  6052  6053  6054  6055  6056  6057  6058 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6059  6060  6061  6062  6063  6064  6065  6066  6067  6068  6069  6070  6071 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6072  6073  6074  6075  6076  6077  6078  6079  6080  6081  6082  6083  6084 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6085  6086  6087  6088  6089  6090  6091  6092  6093  6094  6095  6096  6097 \n    1     1     1     1     1     1     1     4     1     1     1     1     1 \n 6098  6099  6100  6101  6102  6103  6104  6105  6106  6107  6108  6109  6110 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6111  6112  6113  6114  6115  6116  6117  6118  6119  6120  6121  6122  6123 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 6124  6125  6126  6127  6128  6129  6130  6131  6132  6133  6134  6135  6136 \n    1     1     1     3     1     1     1     1     1     1     1     1     1 \n 6137  6138  6139  6140  6141  6142  6143  6144  6145  6146  6147  6148  6149 \n    1     1     4     2     1     1     1     1     1     1     1     1     1 \n 6150  6151  6152  6153  6154  6155  6156  6157  6158  6159  6160  6161  6162 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6163  6164  6165  6166  6167  6168  6169  6170  6171  6172  6173  6174  6175 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 6176  6177  6178  6179  6180  6181  6182  6183  6184  6185  6186  6187  6188 \n    1     1     1     1     1     1     1     1     1     1     1     9     1 \n 6189  6190  6191  6192  6193  6194  6195  6196  6197  6198  6199  6200  6201 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6202  6203  6204  6205  6206  6207  6208  6209  6210  6211  6212  6213  6214 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6215  6216  6217  6218  6219  6220  6221  6222  6223  6224  6225  6226  6227 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6228  6229  6230  6231  6232  6233  6234  6235  6236  6237  6238  6239  6240 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6241  6242  6243  6244  6245  6246  6247  6248  6249  6250  6251  6252  6253 \n    1     2     1     1     1     1     1     1     1     1     2     2     1 \n 6254  6255  6256  6257  6258  6259  6260  6261  6262  6263  6264  6265  6266 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6267  6268  6269  6270  6271  6272  6273  6274  6275  6276  6277  6278  6279 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6280  6281  6282  6283  6284  6285  6286  6287  6288  6289  6290  6291  6292 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6293  6294  6295  6296  6297  6298  6299  6300  6301  6302  6303  6304  6305 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6306  6307  6308  6309  6310  6311  6312  6313  6314  6315  6316  6317  6318 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6319  6320  6321  6322  6323  6324  6325  6326  6327  6328  6329  6330  6331 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6332  6333  6334  6335  6336  6337  6338  6339  6340  6341  6342  6343  6344 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6345  6346  6347  6348  6349  6350  6351  6352  6353  6354  6355  6356  6357 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6358  6359  6360  6361  6362  6363  6364  6365  6366  6367  6368  6369  6370 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6371  6372  6373  6374  6375  6376  6377  6378  6379  6380  6381  6382  6383 \n    1     2     1     1     1     1     1     1     1     1     1     1     5 \n 6384  6385  6386  6387  6388  6389  6390  6391  6392  6393  6394  6395  6396 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6397  6398  6399  6400  6401  6402  6403  6404  6405  6406  6407  6408  6409 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 6410  6411  6412  6413  6414  6415  6416  6417  6418  6419  6420  6421  6422 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6423  6424  6425  6426  6427  6428  6429  6430  6431  6432  6433  6434  6435 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 6436  6437  6438  6439  6440  6441  6442  6443  6444  6445  6446  6447  6448 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 6449  6450  6451  6452  6453  6454  6455  6456  6457  6458  6459  6460  6461 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6462  6463  6464  6465  6466  6467  6468  6469  6470  6471  6472  6473  6474 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6475  6476  6477  6478  6479  6480  6481  6482  6483  6484  6485  6486  6487 \n    1     1     1     1     1     1     1     1     1     1     1     2     2 \n 6488  6489  6490  6491  6492  6493  6494  6495  6496  6497  6498  6499  6500 \n    1     1     1     1     1     1     1     1     2     1     3     1     1 \n 6501  6502  6503  6504  6505  6506  6507  6508  6509  6510  6511  6512  6513 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6514  6515  6516  6517  6518  6519  6520  6521  6522  6523  6524  6525  6526 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6527  6528  6529  6530  6531  6532  6533  6534  6535  6536  6537  6538  6539 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6540  6541  6542  6543  6544  6545  6546  6547  6548  6549  6550  6551  6552 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6553  6554  6555  6556  6557  6558  6559  6560  6561  6562  6563  6564  6565 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6566  6567  6568  6569  6570  6571  6572  6573  6574  6575  6576  6577  6578 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6579  6580  6581  6582  6583  6584  6585  6586  6587  6588  6589  6590  6591 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 6592  6593  6594  6595  6596  6597  6598  6599  6600  6601  6602  6603  6604 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6605  6606  6607  6608  6609  6610  6611  6612  6613  6614  6615  6616  6617 \n    1     2     1     1     1     1     1     1     2     1     1     1     1 \n 6618  6619  6620  6621  6622  6623  6624  6625  6626  6627  6628  6629  6630 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6631  6632  6633  6634  6635  6636  6637  6638  6639  6640  6641  6642  6643 \n    1     1     3     1     1     1     1     1     2     2     1     1     1 \n 6644  6645  6646  6647  6648  6649  6650  6651  6652  6653  6654  6655  6656 \n    1     1     1     1     1     1     2     1     1     1     1     2     1 \n 6657  6658  6659  6660  6661  6662  6663  6664  6665  6666  6667  6668  6669 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 6670  6671  6672  6673  6674  6675  6676  6677  6678  6679  6680  6681  6682 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6683  6684  6685  6686  6687  6688  6689  6690  6691  6692  6693  6694  6695 \n    2     1     3     1     1     1     8     1     1     1     1     1     1 \n 6696  6697  6698  6699  6700  6701  6702  6703  6704  6705  6706  6707  6708 \n    1     1     2     1     1     1     2     1     1     1     1     1     1 \n 6709  6710  6711  6712  6713  6714  6715  6716  6717  6718  6719  6720  6721 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6722  6723  6724  6725  6726  6727  6728  6729  6730  6731  6732  6733  6734 \n    2     1     1     1     1     1     1     1     4     1     1     1     1 \n 6735  6736  6737  6738  6739  6740  6741  6742  6743  6744  6745  6746  6747 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 6748  6749  6750  6751  6752  6753  6754  6755  6756  6757  6758  6759  6760 \n    1     1     1     1     1     3     1     1     1     1     1     1     1 \n 6761  6762  6763  6764  6765  6766  6767  6768  6769  6770  6771  6772  6773 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 6774  6775  6776  6777  6778  6779  6780  6781  6782  6783  6784  6785  6786 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 6787  6788  6789  6790  6791  6792  6793  6794  6795  6796  6797  6798  6799 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 6800  6801  6802  6803  6804  6805  6806  6807  6808  6809  6810  6811  6812 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6813  6814  6815  6816  6817  6818  6819  6820  6821  6822  6823  6824  6825 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6826  6827  6828  6829  6830  6831  6832  6833  6834  6835  6836  6837  6838 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6839  6840  6841  6842  6843  6844  6845  6846  6847  6848  6849  6850  6851 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6852  6853  6854  6855  6856  6857  6858  6859  6860  6861  6862  6863  6864 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6865  6866  6867  6868  6869  6870  6871  6872  6873  6874  6875  6876  6877 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6878  6879  6880  6881  6882  6883  6884  6885  6886  6887  6888  6889  6890 \n    1     1     1     1     1     1     1     4     1     1     1     2     1 \n 6891  6892  6893  6894  6895  6896  6897  6898  6899  6900  6901  6902  6903 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6904  6905  6906  6907  6908  6909  6910  6911  6912  6913  6914  6915  6916 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6917  6918  6919  6920  6921  6922  6923  6924  6925  6926  6927  6928  6929 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 6930  6931  6932  6933  6934  6935  6936  6937  6938  6939  6940  6941  6942 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6943  6944  6945  6946  6947  6948  6949  6950  6951  6952  6953  6954  6955 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 6956  6957  6958  6959  6960  6961  6962  6963  6964  6965  6966  6967  6968 \n    1     1     1     1     1     1     1     1     1     1     1     1    16 \n 6969  6970  6971  6972  6973  6974  6975  6976  6977  6978  6979  6980  6981 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 6982  6983  6984  6985  6986  6987  6988  6989  6990  6991  6992  6993  6994 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6995  6996  6997  6998  6999  7000  7001  7002  7003  7004  7005  7006  7007 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7008  7009  7010  7011  7012  7013  7014  7015  7016  7017  7018  7019  7020 \n    1     1     1     3     3     8     1     1     1     1     1     1     1 \n 7021  7022  7023  7024  7025  7026  7027  7028  7029  7030  7031  7032  7033 \n    1     1     1     1     1     2     1     1     1     1     3     1     1 \n 7034  7035  7036  7037  7038  7039  7040  7041  7042  7043  7044  7045  7046 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7047  7048  7049  7050  7051  7052  7053  7054  7055  7056  7057  7058  7059 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7060  7061  7062  7063  7064  7065  7066  7067  7068  7069  7070  7071  7072 \n    1     2     1     1     1     1     1     1     1     1     2     1     1 \n 7073  7074  7075  7076  7077  7078  7079  7080  7081  7082  7083  7084  7085 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 7086  7087  7088  7089  7090  7091  7092  7093  7094  7095  7096  7097  7098 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7099  7100  7101  7102  7103  7104  7105  7106  7107  7108  7109  7110  7111 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7112  7113  7114  7115  7116  7117  7118  7119  7120  7121  7122  7123  7124 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 7125  7126  7127  7128  7129  7130  7131  7132  7133  7134  7135  7136  7137 \n    1     1     1     1     1     1     1     2     1     1     1     1     3 \n 7138  7139  7140  7141  7142  7143  7144  7145  7146  7147  7148  7149  7150 \n    1     1     1     1     1     1     1     1     1     1     1     4     1 \n 7151  7152  7153  7154  7155  7156  7157  7158  7159  7160  7161  7162  7163 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7164  7165  7166  7167  7168  7169  7170  7171  7172  7173  7174  7175  7176 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7177  7178  7179  7180  7181  7182  7183  7184  7185  7186  7187  7188  7189 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7190  7191  7192  7193  7194  7195  7196  7197  7198  7199  7200  7201  7202 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7203  7204  7205  7206  7207  7208  7209  7210  7211  7212  7213  7214  7215 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7216  7217  7218  7219  7220  7221  7222  7223  7224  7225  7226  7227  7228 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7229  7230  7231  7232  7233  7234  7235  7236  7237  7238  7239  7240  7241 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7242  7243  7244  7245  7246  7247  7248  7249  7250  7251  7252  7253  7254 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7255  7256  7257  7258  7259  7260  7261  7262  7263  7264  7265  7266  7267 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7268  7269  7270  7271  7272  7273  7274  7275  7276  7277  7278  7279  7280 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7281  7282  7283  7284  7285  7286  7287  7288  7289  7290  7291  7292  7293 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7294  7295  7296  7297  7298  7299  7300  7301  7302  7303  7304  7305  7306 \n    1     1     1     1     1     1     1     3     1     1     2     1     1 \n 7307  7308  7309  7310  7311  7312  7313  7314  7315  7316  7317  7318  7319 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7320  7321  7322  7323  7324  7325  7326  7327  7328  7329  7330  7331  7332 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7333  7334  7335  7336  7337  7338  7339  7340  7341  7342  7343  7344  7345 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7346  7347  7348  7349  7350  7351  7352  7353  7354  7355  7356  7357  7358 \n    1     1     1     1     1     1     1     1     1     3     1     1     1 \n 7359  7360  7361  7362  7363  7364  7365  7366  7367  7368  7369  7370  7371 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 7372  7373  7374  7375  7376  7377  7378  7379  7380  7381  7382  7383  7384 \n    1     1     1     1     1     2     1     1     1     2     1     1     1 \n 7385  7386  7387  7388  7389  7390  7391  7392  7393  7394  7395  7396  7397 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7398  7399  7400  7401  7402  7403  7404  7405  7406  7407  7408  7409  7410 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7411  7412  7413  7414  7415  7416  7417  7418  7419  7420  7421  7422  7423 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7424  7425  7426  7427  7428  7429  7430  7431  7432  7433  7434  7435  7436 \n    1     1     1     1     1     1     3     1     1     1     1     1     1 \n 7437  7438  7439  7440  7441  7442  7443  7444  7445  7446  7447  7448  7449 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 7450  7451  7452  7453  7454  7455  7456  7457  7458  7459  7460  7461  7462 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7463  7464  7465  7466  7467  7468  7469  7470  7471  7472  7473  7474  7475 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 7476  7477  7478  7479  7480  7481  7482  7483  7484  7485  7486  7487  7488 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7489  7490  7491  7492  7493  7494  7495  7496  7497  7498  7499  7500  7501 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7502  7503  7504  7505  7506  7507  7508  7509  7510  7511  7512  7513  7514 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7515  7516  7517  7518  7519  7520  7521  7522  7523  7524  7525  7526  7527 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 7528  7529  7530  7531  7532  7533  7534  7535  7536  7537  7538  7539  7540 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7541  7542  7543  7544  7545  7546  7547  7548  7549  7550  7551  7552  7553 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7554  7555  7556  7557  7558  7559  7560  7561  7562  7563  7564  7565  7566 \n    1     4     1     1     1     1     1     1     1     1     1     1     1 \n 7567  7568  7569  7570  7571  7572  7573  7574  7575  7576  7577  7578  7579 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7580  7581  7582  7583  7584  7585  7586  7587  7588  7589  7590  7591  7592 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7593  7594  7595  7596  7597  7598  7599  7600  7601  7602  7603  7604  7605 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 7606  7607  7608  7609  7610  7611  7612  7613  7614  7615  7616  7617  7618 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 7619  7620  7621  7622  7623  7624  7625  7626  7627  7628  7629  7630  7631 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7632  7633  7634  7635  7636  7637  7638  7639  7640  7641  7642  7643  7644 \n    1     1     1     2     3     1     1     1     1     1     1     1     1 \n 7645  7646  7647  7648  7649  7650  7651  7652  7653  7654  7655  7656  7657 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 7658  7659  7660  7661  7662  7663  7664  7665  7666  7667  7668  7669  7670 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7671  7672  7673  7674  7675  7676  7677  7678  7679  7680  7681  7682  7683 \n    1     1     8     2     1     2     1     1     1     1     1     1     1 \n 7684  7685  7686  7687  7688  7689  7690  7691  7692  7693  7694  7695  7696 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 7697  7698  7699  7700  7701  7702  7703  7704  7705  7706  7707  7708  7709 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7710  7711  7712  7713  7714  7715  7716  7717  7718  7719  7720  7721  7722 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 7723  7724  7725  7726  7727  7728  7729  7730  7731  7732  7733  7734  7735 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7736  7737  7738  7739  7740  7741  7742  7743  7744  7745  7746  7747  7748 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 7749  7750  7751  7752  7753  7754  7755  7756  7757  7758  7759  7760  7761 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 7762  7763  7764  7765  7766  7767  7768  7769  7770  7771  7772  7773  7774 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7775  7776  7777  7778  7779  7780  7781  7782  7783  7784  7785  7786  7787 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7788  7789  7790  7791  7792  7793  7794  7795  7796  7797  7798  7799  7800 \n    1     1     2     1     1     1     1     2     1     1     1     1     1 \n 7801  7802  7803  7804  7805  7806  7807  7808  7809  7810  7811  7812  7813 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 7814  7815  7816  7817  7818  7819  7820  7821  7822  7823  7824  7825  7826 \n    1     1     3     1     1     1     1     1     1     1     1     1     1 \n 7827  7828  7829  7830  7831  7832  7833  7834  7835  7836  7837  7838  7839 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 7840  7841  7842  7843  7844  7845  7846  7847  7848  7849  7850  7851  7852 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7853  7854  7855  7856  7857  7858  7859  7860  7861  7862  7863  7864  7865 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7866  7867  7868  7869  7870  7871  7872  7873  7874  7875  7876  7877  7878 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 7879  7880  7881  7882  7883  7884  7885  7886  7887  7888  7889  7890  7891 \n    1     1     2     1     1     1     1     1     1     1     2     1     1 \n 7892  7893  7894  7895  7896  7897  7898  7899  7900  7901  7902  7903  7904 \n    1     1     4     1     1     1     1     1     1     1     1     1     1 \n 7905  7906  7907  7908  7909  7910  7911  7912  7913  7914  7915  7916  7917 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7918  7919  7920  7921  7922  7923  7924  7925  7926  7927  7928  7929  7930 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7931  7932  7933  7934  7935  7936  7937  7938  7939  7940  7941  7942  7943 \n    1     1     1     1     1     1     1     2     3     1     3     1     1 \n 7944  7945  7946  7947  7948  7949  7950  7951  7952  7953  7954  7955  7956 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7957  7958  7959  7960  7961  7962  7963  7964  7965  7966  7967  7968  7969 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7970  7971  7972  7973  7974  7975  7976  7977  7978  7979  7980  7981  7982 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7983  7984  7985  7986  7987  7988  7989  7990  7991  7992  7993  7994  7995 \n    3     1     1     2     1     1     1     1     1     1     1     1     1 \n 7996  7997  7998  7999  8000  8001  8002  8003  8004  8005  8006  8007  8008 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8009  8010  8011  8012  8013  8014  8015  8016  8017  8018  8019  8020  8021 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8022  8023  8024  8025  8026  8027  8028  8029  8030  8031  8032  8033  8034 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 8035  8036  8037  8038  8039  8040  8041  8042  8043  8044  8045  8046  8047 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8048  8049  8050  8051  8052  8053  8054  8055  8056  8057  8058  8059  8060 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8061  8062  8063  8064  8065  8066  8067  8068  8069  8070  8071  8072  8073 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8074  8075  8076  8077  8078  8079  8080  8081  8082  8083  8084  8085  8086 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8087  8088  8089  8090  8091  8092  8093  8094  8095  8096  8097  8098  8099 \n    1     1     1     2     1     1     2     1     1     1     1     1     1 \n 8100  8101  8102  8103  8104  8105  8106  8107  8108  8109  8110  8111  8112 \n    1     1     2     1     2     1     1     2     1     1     1     1     1 \n 8113  8114  8115  8116  8117  8118  8119  8120  8121  8122  8123  8124  8125 \n    1     1     1     1     1     1     1     1     1     2     1     2     1 \n 8126  8127  8128  8129  8130  8131  8132  8133  8134  8135  8136  8137  8138 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8139  8140  8141  8142  8143  8144  8145  8146  8147  8148  8149  8150  8151 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8152  8153  8154  8155  8156  8157  8158  8159  8160  8161  8162  8163  8164 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 8165  8166  8167  8168  8169  8170  8171  8172  8173  8174  8175  8176  8177 \n    1     1     1     1     1     1     2     1     2     1     1     1     1 \n 8178  8179  8180  8181  8182  8183  8184  8185  8186  8187  8188  8189  8190 \n    1     1     1     1     1     1     1     1     1     1     1     3     1 \n 8191  8192  8193  8194  8195  8196  8197  8198  8199  8200  8201  8202  8203 \n    1     1     1     1     1     1     6     2     6     1     1     1     1 \n 8204  8205  8206  8207  8208  8209  8210  8211  8212  8213  8214  8215  8216 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 8217  8218  8219  8220  8221  8222  8223  8224  8225  8226  8227  8228  8229 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8230  8231  8232  8233  8234  8235  8236  8237  8238  8239  8240  8241  8242 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8243  8244  8245  8246  8247  8248  8249  8250  8251  8252  8253  8254  8255 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8256  8257  8258  8259  8260  8261  8262  8263  8264  8265  8266  8267  8268 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8269  8270  8271  8272  8273  8274  8275  8276  8277  8278  8279  8280  8281 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8282  8283  8284  8285  8286  8287  8288  8289  8290  8291  8292  8293  8294 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8295  8296  8297  8298  8299  8300  8301  8302  8303  8304  8305  8306  8307 \n    1     1     1     1     1     1     1     1     1     3     1     3     6 \n 8308  8309  8310  8311  8312  8313  8314  8315  8316  8317  8318  8319  8320 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 8321  8322  8323  8324  8325  8326  8327  8328  8329  8330  8331  8332  8333 \n    1     1     1    16     1     1     1     1     1     1     1     1     1 \n 8334  8335  8336  8337  8338  8339  8340  8341  8342  8343  8344  8345  8346 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 8347  8348  8349  8350  8351  8352  8353  8354  8355  8356  8357  8358  8359 \n    1     3     1     1     2     1     1     1     1     1     1     2     1 \n 8360  8361  8362  8363  8364  8365  8366  8367  8368  8369  8370  8371  8372 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8373  8374  8375  8376  8377  8378  8379  8380  8381  8382  8383  8384  8385 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8386  8387  8388  8389  8390  8391  8392  8393  8394  8395  8396  8397  8398 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8399  8400  8401  8402  8403  8404  8405  8406  8407  8408  8409  8410  8411 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8412  8413  8414  8415  8416  8417  8418  8419  8420  8421  8422  8423  8424 \n    1     1     2     1     1     1     1     1     1     1     1     2     1 \n 8425  8426  8427  8428  8429  8430  8431  8432  8433  8434  8435  8436  8437 \n    2     1     1     1     1     1     1     1     1     1     2     1     1 \n 8438  8439  8440  8441  8442  8443  8444  8445  8446  8447  8448  8449  8450 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8451  8452  8453  8454  8455  8456  8457  8458  8459  8460  8461  8462  8463 \n    1     1     1     1     1     1     1     2     1     1     1     2     1 \n 8464  8465  8466  8467  8468  8469  8470  8471  8472  8473  8474  8475  8476 \n    1     2     1     1     1     1     1     1     1     1     2     5     1 \n 8477  8478  8479  8480  8481  8482  8483  8484  8485  8486  8487  8488  8489 \n    1     1     1     1     1     1     1     1     1     1     3     2     1 \n 8490  8491  8492  8493  8494  8495  8496  8497  8498  8499  8500  8501  8502 \n    1     1     1     1     1     1     3     3     1     1     1     1     1 \n 8503  8504  8505  8506  8507  8508  8509  8510  8511  8512  8513  8514  8515 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8516  8517  8518  8519  8520  8521  8522  8523  8524  8525  8526  8527  8528 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8529  8530  8531  8532  8533  8534  8535  8536  8537  8538  8539  8540  8541 \n    1     1     1     1     1     1     1     1     1     2     1     1     9 \n 8542  8543  8544  8545  8546  8547  8548  8549  8550  8551  8552  8553  8554 \n    1     1     1     1     1     1     1    16     1     2     2     1     1 \n 8555  8556  8557  8558  8559  8560  8561  8562  8563  8564  8565  8566  8567 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 8568  8569  8570  8571  8572  8573  8574  8575  8576  8577  8578  8579  8580 \n    1     1     1     1     1     1     2     2     1     1     1     1     1 \n 8581  8582  8583  8584  8585  8586  8587  8588  8589  8590  8591  8592  8593 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 8594  8595  8596  8597  8598  8599  8600  8601  8602  8603  8604  8605  8606 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 8607  8608  8609  8610  8611  8612  8613  8614  8615  8616  8617  8618  8619 \n    1     1     1     1     1     2     1     1     1     1     1    16     1 \n 8620  8621  8622  8623  8624  8625  8626  8627  8628  8629  8630  8631  8632 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8633  8634  8635  8636  8637  8638  8639  8640  8641  8642  8643  8644  8645 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8646  8647  8648  8649  8650  8651  8652  8653  8654  8655  8656  8657  8658 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8659  8660  8661  8662  8663  8664  8665  8666  8667  8668  8669  8670  8671 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8672  8673  8674  8675  8676  8677  8678  8679  8680  8681  8682  8683  8684 \n    1     2     1     1     1     1     1     1     1     1     1     6     1 \n 8685  8686  8687  8688  8689  8690  8691  8692  8693  8694  8695  8696  8697 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 8698  8699  8700  8701  8702  8703  8704  8705  8706  8707  8708  8709  8710 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 8711  8712  8713  8714  8715  8716  8717  8718  8719  8720  8721  8722  8723 \n    1     1     1     1     3     1     1     1     1     1     1     1     1 \n 8724  8725  8726  8727  8728  8729  8730  8731  8732  8733  8734  8735  8736 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8737  8738  8739  8740  8741  8742  8743  8744  8745  8746  8747  8748  8749 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 8750  8751  8752  8753  8754  8755  8756  8757  8758  8759  8760  8761  8762 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 8763  8764  8765  8766  8767  8768  8769  8770  8771  8772  8773  8774  8775 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 8776  8777  8778  8779  8780  8781  8782  8783  8784  8785  8786  8787  8788 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 8789  8790  8791  8792  8793  8794  8795  8796  8797  8798  8799  8800  8801 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8802  8803  8804  8805  8806  8807  8808  8809  8810  8811  8812  8813  8814 \n    1     1     4     1     1     1     1     1     2     1     1     1     1 \n 8815  8816  8817  8818  8819  8820  8821  8822  8823  8824  8825  8826  8827 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8828  8829  8830  8831  8832  8833  8834  8835  8836  8837  8838  8839  8840 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 8841  8842  8843  8844  8845  8846  8847  8848  8849  8850  8851  8852  8853 \n    1     2     1     1     1     1     1     2     3     1     1     1     1 \n 8854  8855  8856  8857  8858  8859  8860  8861  8862  8863  8864  8865  8866 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8867  8868  8869  8870  8871  8872  8873  8874  8875  8876  8877  8878  8879 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8880  8881  8882  8883  8884  8885  8886  8887  8888  8889  8890  8891  8892 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8893  8894  8895  8896  8897  8898  8899  8900  8901  8902  8903  8904  8905 \n    4     1     1     1     1     1     2     1     1     1     1     1     1 \n 8906  8907  8908  8909  8910  8911  8912  8913  8914  8915  8916  8917  8918 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8919  8920  8921  8922  8923  8924  8925  8926  8927  8928  8929  8930  8931 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8932  8933  8934  8935  8936  8937  8938  8939  8940  8941  8942  8943  8944 \n    1     1     1     1     1     1     1     1     2     1     2     1     1 \n 8945  8946  8947  8948  8949  8950  8951  8952  8953  8954  8955  8956  8957 \n    1     2     6     4     1     1     1     1     1     1     1     1     1 \n 8958  8959  8960  8961  8962  8963  8964  8965  8966  8967  8968  8969  8970 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8971  8972  8973  8974  8975  8976  8977  8978  8979  8980  8981  8982  8983 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8984  8985  8986  8987  8988  8989  8990  8991  8992  8993  8994  8995  8996 \n    1     1     2     1     1     1     2     1     1     1     1     1     1 \n 8997  8998  8999  9000  9001  9002  9003  9004  9005  9006  9007  9008  9009 \n    1     1     1     1     1     2     6     2     1     1     1     1     1 \n 9010  9011  9012  9013  9014  9015  9016  9017  9018  9019  9020  9021  9022 \n    1     1     1     1     9     4     1     1     1     1     1     1     2 \n 9023  9024  9025  9026  9027  9028  9029  9030  9031  9032  9033  9034  9035 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 9036  9037  9038  9039  9040  9041  9042  9043  9044  9045  9046  9047  9048 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9049  9050  9051  9052  9053  9054  9055  9056  9057  9058  9059  9060  9061 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 9062  9063  9064  9065  9066  9067  9068  9069  9070  9071  9072  9073  9074 \n    1     2     2     1     1     1     1     1     1     3     1     1     1 \n 9075  9076  9077  9078  9079  9080  9081  9082  9083  9084  9085  9086  9087 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 9088  9089  9090  9091  9092  9093  9094  9095  9096  9097  9098  9099  9100 \n    1     1     1     1     1     1     1     1     9     2     1     1     1 \n 9101  9102  9103  9104  9105  9106  9107  9108  9109  9110  9111  9112  9113 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9114  9115  9116  9117  9118  9119  9120  9121  9122  9123  9124  9125  9126 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9127  9128  9129  9130  9131  9132  9133  9134  9135  9136  9137  9138  9139 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 9140  9141  9142  9143  9144  9145  9146  9147  9148  9149  9150  9151  9152 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 9153  9154  9155  9156  9157  9158  9159  9160  9161  9162  9163  9164  9165 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9166  9167  9168  9169  9170  9171  9172  9173  9174  9175  9176  9177  9178 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9179  9180  9181  9182  9183  9184  9185  9186  9187  9188  9189  9190  9191 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9192  9193  9194  9195  9196  9197  9198  9199  9200  9201  9202  9203  9204 \n    1     1     1     1     1     1     8     1     1     1     1     1     1 \n 9205  9206  9207  9208  9209  9210  9211  9212  9213  9214  9215  9216  9217 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9218  9219  9220  9221  9222  9223  9224  9225  9226  9227  9228  9229  9230 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 9231  9232  9233  9234  9235  9236  9237  9238  9239  9240  9241  9242  9243 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9244  9245  9246  9247  9248  9249  9250  9251  9252  9253  9254  9255  9256 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9257  9258  9259  9260  9261  9262  9263  9264  9265  9266  9267  9268  9269 \n    1     1     1     1     1     1     1     1     1     1     3     1     1 \n 9270  9271  9272  9273  9274  9275  9276  9277  9278  9279  9280  9281  9282 \n    1     3     1     1     4     1     1     1     1     1     1     1     1 \n 9283  9284  9285  9286  9287  9288  9289  9290  9291  9292  9293  9294  9295 \n    1     1     1     1     1     2     1     1     1     1     1     1     2 \n 9296  9297  9298  9299  9300  9301  9302  9303  9304  9305  9306  9307  9308 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9309  9310  9311  9312  9313  9314  9315  9316  9317  9318  9319  9320  9321 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9322  9323  9324  9325  9326  9327  9328  9329  9330  9331  9332  9333  9334 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9335  9336  9337  9338  9339  9340  9341  9342  9343  9344  9345  9346  9347 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9348  9349  9350  9351  9352  9353  9354  9355  9356  9357  9358  9359  9360 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9361  9362  9363  9364  9365  9366  9367  9368  9369  9370  9371  9372  9373 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9374  9375  9376  9377  9378  9379  9380  9381  9382  9383  9384  9385  9386 \n    1     1     1     1     1     1     1     2     1     1     1     1     2 \n 9387  9388  9389  9390  9391  9392  9393  9394  9395  9396  9397  9398  9399 \n    1     1     1     1     1     1     1     1     1     4     1     1     1 \n 9400  9401  9402  9403  9404  9405  9406  9407  9408  9409  9410  9411  9412 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9413  9414  9415  9416  9417  9418  9419  9420  9421  9422  9423  9424  9425 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9426  9427  9428  9429  9430  9431  9432  9433  9434  9435  9436  9437  9438 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9439  9440  9441  9442  9443  9444  9445  9446  9447  9448  9449  9450  9451 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9452  9453  9454  9455  9456  9457  9458  9459  9460  9461  9462  9463  9464 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9465  9466  9467  9468  9469  9470  9471  9472  9473  9474  9475  9476  9477 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9478  9479  9480  9481  9482  9483  9484  9485  9486  9487  9488  9489  9490 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 9491  9492  9493  9494  9495  9496  9497  9498  9499  9500  9501  9502  9503 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9504  9505  9506  9507  9508  9509  9510  9511  9512  9513  9514  9515  9516 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9517  9518  9519  9520  9521  9522  9523  9524  9525  9526  9527  9528  9529 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9530  9531  9532  9533  9534  9535  9536  9537  9538  9539  9540  9541  9542 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 9543  9544  9545  9546  9547  9548  9549  9550  9551  9552  9553  9554  9555 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9556  9557  9558  9559  9560  9561  9562  9563  9564  9565  9566  9567  9568 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 9569  9570  9571  9572  9573  9574  9575  9576  9577  9578  9579  9580  9581 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9582  9583  9584  9585  9586  9587  9588  9589  9590  9591  9592  9593  9594 \n    1     3     1     3     1     1     1     1     1     1     1     1     1 \n 9595  9596  9597  9598  9599  9600  9601  9602  9603  9604  9605  9606  9607 \n    1     3     1     1     1     4     1     1     1     1     1     1     1 \n 9608  9609  9610  9611  9612  9613  9614  9615  9616  9617  9618  9619  9620 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9621  9622  9623  9624  9625  9626  9627  9628  9629  9630  9631  9632  9633 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9634  9635  9636  9637  9638  9639  9640  9641  9642  9643  9644  9645  9646 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9647  9648  9649  9650  9651  9652  9653  9654  9655  9656  9657  9658  9659 \n    1     1     1     1     1     1     1     1     5     1     1     2     1 \n 9660  9661  9662  9663  9664  9665  9666  9667  9668  9669  9670  9671  9672 \n    1     2     1     1     1     1     1     1     1     1     1     2     1 \n 9673  9674  9675  9676  9677  9678  9679  9680  9681  9682  9683  9684  9685 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9686  9687  9688  9689  9690  9691  9692  9693  9694  9695  9696  9697  9698 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9699  9700  9701  9702  9703  9704  9705  9706  9707  9708  9709  9710  9711 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 9712  9713  9714  9715  9716  9717  9718  9719  9720  9721  9722  9723  9724 \n    1     1     1     1     1     1     2     1     1     3     1     1     1 \n 9725  9726  9727  9728  9729  9730  9731  9732  9733  9734  9735  9736  9737 \n    1     3     1     1     1     1     1     1     1     1     1     1     1 \n 9738  9739  9740  9741  9742  9743  9744  9745  9746  9747  9748  9749  9750 \n    1     1     1     1     2     1     1     1     2     2     1     1     1 \n 9751  9752  9753  9754  9755  9756  9757  9758  9759  9760  9761  9762  9763 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 9764  9765  9766  9767  9768  9769  9770  9771  9772  9773  9774  9775  9776 \n    4     1     1     1     1     2     1     1     1     1     2     2     1 \n 9777  9778  9779  9780  9781  9782  9783  9784  9785  9786  9787  9788  9789 \n    1     1     1     2     1     2     1     1     1     1     1     2     2 \n 9790  9791  9792  9793  9794  9795  9796  9797  9798  9799  9800  9801  9802 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9803  9804  9805  9806  9807  9808  9809  9810  9811  9812  9813  9814  9815 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9816  9817  9818  9819  9820  9821  9822  9823  9824  9825  9826  9827  9828 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9829  9830  9831  9832  9833  9834  9835  9836  9837  9838  9839  9840  9841 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 9842  9843  9844  9845  9846  9847  9848  9849  9850  9851  9852  9853  9854 \n    1     1     2     1     1     1     1     1     1     2     1     1     2 \n 9855  9856  9857  9858  9859  9860  9861  9862  9863  9864  9865  9866  9867 \n    1     1     1     1     1     1     4     1     1     2     1     1     1 \n 9868  9869  9870  9871  9872  9873  9874  9875  9876  9877  9878  9879  9880 \n    1     1     1     1     1     1     1     2     1     1     2     1     1 \n 9881  9882  9883  9884  9885  9886  9887  9888  9889  9890  9891  9892  9893 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 9894  9895  9896  9897  9898  9899  9900  9901  9902  9903  9904  9905  9906 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 9907  9908  9909  9910  9911  9912  9913  9914  9915  9916  9917  9918  9919 \n    1     2     1     1     1     1     1     1     2     1     1     1     1 \n 9920  9921  9922  9923  9924  9925  9926  9927  9928  9929  9930  9931  9932 \n    1     1     3     1     1     1     1     3     1     1     1     2     1 \n 9933  9934  9935  9936  9937  9938  9939  9940  9941  9942  9943  9944  9945 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9946  9947  9948  9949  9950  9951  9952  9953  9954  9955  9956  9957  9958 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9959  9960  9961  9962  9963  9964  9965  9966  9967  9968  9969  9970  9971 \n    1     1     1     1     1     1     1     1     1     1     1     1     3 \n 9972  9973  9974  9975  9976  9977  9978  9979  9980  9981  9982  9983  9984 \n    1     2     2     1     1     2     1     1     1     1     1     1     1 \n 9985  9986  9987  9988  9989  9990  9991  9992  9993  9994  9995  9996  9997 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9998  9999 10000 10001 10002 10003 10004 10005 10006 10007 10008 10009 10010 \n    1     1     1     1     1     1     1     1     3     1     1     1     1 \n10011 10012 10013 10014 10015 10016 10017 10018 10019 10020 10021 10022 10023 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10024 10025 10026 10027 10028 10029 10030 10031 10032 10033 10034 10035 10036 \n    1     1     1     1     1     2     1     1     1     1     1     2     1 \n10037 10038 10039 10040 10041 10042 10043 10044 10045 10046 10047 10048 10049 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10050 10051 10052 10053 10054 10055 10056 10057 10058 10059 10060 10061 10062 \n    1     1     1     1     3     1     1     1     1     1     1     1     1 \n10063 10064 10065 10066 10067 10068 10069 10070 10071 10072 10073 10074 10075 \n    1     1     1     1     1     1     1     1     1     4     1     1     1 \n10076 10077 10078 10079 10080 10081 10082 10083 10084 10085 10086 10087 10088 \n    1     1     5     1     1     1     1     1     2     1     1     4     1 \n10089 10090 10091 10092 10093 10094 10095 10096 10097 10098 10099 10100 10101 \n    1     1     1     1     1     1     2     1     1     2     1     1     1 \n10102 10103 10104 10105 10106 10107 10108 10109 10110 10111 10112 10113 10114 \n    1     2     1     1     1     1     1     2     1     1     1     1     1 \n10115 10116 10117 10118 10119 10120 10121 10122 10123 10124 10125 10126 10127 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10128 10129 10130 10131 10132 10133 10134 10135 10136 10137 10138 10139 10140 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n10141 10142 10143 10144 10145 10146 10147 10148 10149 10150 10151 10152 10153 \n    1     1     1     1     1     1     1     1     1     2     1     3     1 \n10154 10155 10156 10157 10158 10159 10160 10161 10162 10163 10164 10165 10166 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10167 10168 10169 10170 10171 10172 10173 10174 10175 10176 10177 10178 10179 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n10180 10181 10182 10183 10184 10185 10186 10187 10188 10189 10190 10191 10192 \n    1     1     1     1     1     3     1     1     1     1     1     1     1 \n10193 10194 10195 10196 10197 10198 10199 10200 10201 10202 10203 10204 10205 \n    1     3     1     1     9     1     1     1     1     1     1     1     1 \n10206 10207 10208 10209 10210 10211 10212 10213 10214 10215 10216 10217 10218 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10219 10220 10221 10222 10223 10224 10225 10226 10227 10228 10229 10230 10231 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10232 10233 10234 10235 10236 10237 10238 10239 10240 10241 10242 10243 10244 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10245 10246 10247 10248 10249 10250 10251 10252 10253 10254 10255 10256 10257 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n10258 10259 10260 10261 10262 10263 10264 10265 10266 10267 10268 10269 10270 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n10271 10272 10273 10274 10275 10276 10277 10278 10279 10280 10281 10282 10283 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10284 10285 10286 10287 10288 10289 10290 10291 10292 10293 10294 10295 10296 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10297 10298 10299 10300 10301 10302 10303 10304 10305 10306 10307 10308 10309 \n    1     1     1     1     1     4     1     1     1     1     1     1     1 \n10310 10311 10312 10313 10314 10315 10316 10317 10318 10319 10320 10321 10322 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10323 10324 10325 10326 10327 10328 10329 10330 10331 10332 10333 10334 10335 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10336 10337 10338 10339 10340 10341 10342 10343 10344 10345 10346 10347 10348 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10349 10350 10351 10352 10353 10354 10355 10356 10357 10358 10359 10360 10361 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10362 10363 10364 10365 10366 10367 10368 10369 10370 10371 10372 10373 10374 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n10375 10376 10377 10378 10379 10380 10381 10382 10383 10384 10385 10386 10387 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10388 10389 10390 10391 10392 10393 10394 10395 10396 10397 10398 10399 10400 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10401 10402 10403 10404 10405 10406 10407 10408 10409 10410 10411 10412 10413 \n    1     1     1     1     3     1     1     1     1     1     1     2     1 \n10414 10415 10416 10417 10418 10419 10420 10421 10422 10423 10424 10425 10426 \n    1     1     1     1     3     1     1     1     1     1     1     2     1 \n10427 10428 10429 10430 10431 10432 10433 10434 10435 10436 10437 10438 10439 \n    1     1     2     2     1     1     1     1     1     1     1     1     1 \n10440 10441 10442 10443 10444 10445 10446 10447 10448 10449 10450 10451 10452 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10453 10454 10455 10456 10457 10458 10459 10460 10461 10462 10463 10464 10465 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n10466 10467 10468 10469 10470 10471 10472 10473 10474 10475 10476 10477 10478 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n10479 10480 10481 10482 10483 10484 10485 10486 10487 10488 10489 10490 10491 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10492 10493 10494 10495 10496 10497 10498 10499 10500 10501 10502 10503 10504 \n    1     1     1     1     2     1     1     5     1     1     1     1     1 \n10505 10506 10507 10508 10509 10510 10511 10512 10513 10514 10515 10516 10517 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10518 10519 10520 10521 10522 10523 10524 10525 10526 10527 10528 10529 10530 \n    1     1     1     1     1     1     1     1     1     1     1     3     1 \n10531 10532 10533 10534 10535 10536 10537 10538 10539 10540 10541 10542 10543 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10544 10545 10546 10547 10548 10549 10550 10551 10552 10553 10554 10555 10556 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n10557 10558 10559 10560 10561 10562 10563 10564 10565 10566 10567 10568 10569 \n    4     1     2     1     1     1     1     1     2     1     1     1     1 \n10570 10571 10572 10573 10574 10575 10576 10577 10578 10579 10580 10581 10582 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10583 10584 10585 10586 10587 10588 10589 10590 10591 10592 10593 10594 10595 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n10596 10597 10598 10599 10600 10601 10602 10603 10604 10605 10606 10607 10608 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10609 10610 10611 10612 10613 10614 10615 10616 10617 10618 10619 10620 10621 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10622 10623 10624 10625 10626 10627 10628 10629 10630 10631 10632 10633 10634 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10635 10636 10637 10638 10639 10640 10641 10642 10643 10644 10645 10646 10647 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n10648 10649 10650 10651 10652 10653 10654 10655 10656 10657 10658 10659 10660 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10661 10662 10663 10664 10665 10666 10667 10668 10669 10670 10671 10672 10673 \n    1     1     1     1     1     1     1     2     1     1     2     1     1 \n10674 10675 10676 10677 10678 10679 10680 10681 10682 10683 10684 10685 10686 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n10687 10688 10689 10690 10691 10692 10693 10694 10695 10696 10697 10698 10699 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10700 10701 10702 10703 10704 10705 10706 10707 10708 10709 10710 10711 10712 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n10713 10714 10715 10716 10717 10718 10719 10720 10721 10722 10723 10724 10725 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10726 10727 10728 10729 10730 10731 10732 10733 10734 10735 10736 10737 10738 \n    1     1     9     1     1     1     1     1     1     1     1     1     1 \n10739 10740 10741 10742 10743 10744 10745 10746 10747 10748 10749 10750 10751 \n    1     1     3     1     1     1     1     3     1     1     2     1     1 \n10752 10753 10754 10755 10756 10757 10758 10759 10760 10761 10762 10763 10764 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10765 10766 10767 10768 10769 10770 10771 10772 10773 10774 10775 10776 10777 \n    1     1     1     1     2     6     1     1     8     1     1     1     1 \n10778 10779 10780 10781 10782 10783 10784 10785 10786 10787 10788 10789 10790 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10791 10792 10793 10794 10795 10796 10797 10798 10799 10800 10801 10802 10803 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n10804 10805 10806 10807 10808 10809 10810 10811 10812 10813 10814 10815 10816 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10817 10818 10819 10820 10821 10822 10823 10824 10825 10826 10827 10828 10829 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10830 10831 10832 10833 10834 10835 10836 10837 10838 10839 10840 10841 10842 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10843 10844 10845 10846 10847 10848 10849 10850 10851 10852 10853 10854 10855 \n    1     1    16     1     1     1     1     1     1     1     1     1     1 \n10856 10857 10858 10859 10860 10861 10862 10863 10864 10865 10866 10867 10868 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n10869 10870 10871 10872 10873 10874 10875 10876 10877 10878 10879 10880 10881 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n10882 10883 10884 10885 10886 10887 10888 10889 10890 10891 10892 10893 10894 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n10895 10896 10897 10898 10899 10900 10901 10902 10903 10904 10905 10906 10907 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10908 10909 10910 10911 10912 10913 10914 10915 10916 10917 10918 10919 10920 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n10921 10922 10923 10924 10925 10926 10927 10928 10929 10930 10931 10932 10933 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10934 10935 10936 10937 10938 10939 10940 10941 10942 10943 10944 10945 10946 \n    1     1     1     1     1     1     2     3     1     1     1     1     1 \n10947 10948 10949 10950 10951 10952 10953 10954 10955 10956 10957 10958 10959 \n    1     1     1     1     1     1     1     1     1     9     1     1     1 \n10960 10961 10962 10963 10964 10965 10966 10967 10968 10969 10970 10971 10972 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n10973 10974 10975 10976 10977 10978 10979 10980 10981 10982 10983 10984 10985 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10986 10987 10988 10989 10990 10991 10992 10993 10994 10995 10996 10997 10998 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10999 11000 11001 11002 11003 11004 11005 11006 11007 11008 11009 11010 11011 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11012 11013 11014 11015 11016 11017 11018 11019 11020 11021 11022 11023 11024 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11025 11026 11027 11028 11029 11030 11031 11032 11033 11034 11035 11036 11037 \n    1     1     1     1     2     1     2     1     1     1     1     1     1 \n11038 11039 11040 11041 11042 11043 11044 11045 11046 11047 11048 11049 11050 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n11051 11052 11053 11054 11055 11056 11057 11058 11059 11060 11061 11062 11063 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n11064 11065 11066 11067 11068 11069 11070 11071 11072 11073 11074 11075 11076 \n    1     1     1     1     1     2     1     1     4     1     1     2     1 \n11077 11078 11079 11080 11081 11082 11083 11084 11085 11086 11087 11088 11089 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n11090 11091 11092 11093 11094 11095 11096 11097 11098 11099 11100 11101 11102 \n    1     2     1     1     1     1     1     1     1     3     1     1     1 \n11103 11104 11105 11106 11107 11108 11109 11110 11111 11112 11113 11114 11115 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11116 11117 11118 11119 11120 11121 11122 11123 11124 11125 11126 11127 11128 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n11129 11130 11131 11132 11133 11134 11135 11136 11137 11138 11139 11140 11141 \n    3     1     1     1     1     1     1     1     1     1     1     1     1 \n11142 11143 11144 11145 11146 11147 11148 11149 11150 11151 11152 11153 11154 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11155 11156 11157 11158 11159 11160 11161 11162 11163 11164 11165 11166 11167 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11168 11169 11170 11171 11172 11173 11174 11175 11176 11177 11178 11179 11180 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11181 11182 11183 11184 11185 11186 11187 11188 11189 11190 11191 11192 11193 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n11194 11195 11196 11197 11198 11199 11200 11201 11202 11203 11204 11205 11206 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n11207 11208 11209 11210 11211 11212 11213 11214 11215 11216 11217 11218 11219 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11220 11221 11222 11223 11224 11225 11226 11227 11228 11229 11230 11231 11232 \n    2     2     1     1     1     1     1     1     1     1     1     2     1 \n11233 11234 11235 11236 11237 11238 11239 11240 11241 11242 11243 11244 11245 \n    1     1     1     1     1     1     3     1     2     1     1     2     1 \n11246 11247 11248 11249 11250 11251 11252 11253 11254 11255 11256 11257 11258 \n    1     2     1     1     1     2     1     1     1     1     1     1     1 \n11259 11260 11261 11262 11263 11264 11265 11266 11267 11268 11269 11270 11271 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11272 11273 11274 11275 11276 11277 11278 11279 11280 11281 11282 11283 11284 \n    2     1     1     1     1     1     2     1     1     1     1     1     1 \n11285 11286 11287 11288 11289 11290 11291 11292 11293 11294 11295 11296 11297 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11298 11299 11300 11301 11302 11303 11304 11305 11306 11307 11308 11309 11310 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n11311 11312 11313 11314 11315 11316 11317 11318 11319 11320 11321 11322 11323 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11324 11325 11326 11327 11328 11329 11330 11331 11332 11333 11334 11335 11336 \n   16     1     1     1     1     1     1     1     1     3     1     1     1 \n11337 11338 11339 11340 11341 11342 11343 11344 11345 11346 11347 11348 11349 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11350 11351 11352 11353 11354 11355 11356 11357 11358 11359 11360 11361 11362 \n    1     3     1     1     1     1     1     2     1     1     1     1     1 \n11363 11364 11365 11366 11367 11368 11369 11370 11371 11372 11373 11374 11375 \n    1     1     1     1     2     8     1     1     1     1     1     1     1 \n11376 11377 11378 11379 11380 11381 11382 11383 11384 11385 11386 11387 11388 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n11389 11390 11391 11392 11393 11394 11395 11396 11397 11398 11399 11400 11401 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11402 11403 11404 11405 11406 11407 11408 11409 11410 11411 11412 11413 11414 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n11415 11416 11417 11418 11419 11420 11421 11422 11423 11424 11425 11426 11427 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11428 11429 11430 11431 11432 11433 11434 11435 11436 11437 11438 11439 11440 \n    1     1     1     1     8     1     1     1     3     1     1     1     1 \n11441 11442 11443 11444 11445 11446 11447 11448 11449 11450 11451 11452 11453 \n    1     1     1     1     1     1     1     1     1     1     1     2     2 \n11454 11455 11456 11457 11458 11459 11460 11461 11462 11463 11464 11465 11466 \n    1     1     1     1     1     1     1     1     1     1     1     1     3 \n11467 11468 11469 11470 11471 11472 11473 11474 11475 11476 11477 11478 11479 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n11480 11481 11482 11483 11484 11485 11486 11487 11488 11489 11490 11491 11492 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11493 11494 11495 11496 11497 11498 11499 11500 11501 11502 11503 11504 11505 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11506 11507 11508 11509 11510 11511 11512 11513 11514 11515 11516 11517 11518 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11519 11520 11521 11522 11523 11524 11525 11526 11527 11528 11529 11530 11531 \n    1     1     6     1     1     1     1     1     1     1     1     1     1 \n11532 11533 11534 11535 11536 11537 11538 11539 11540 11541 11542 11543 11544 \n    1     1     1     1     1     2     3     1     1     1     1     1     1 \n11545 11546 11547 11548 11549 11550 11551 11552 11553 11554 11555 11556 11557 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11558 11559 11560 11561 11562 11563 11564 11565 11566 11567 11568 11569 11570 \n    1     1     1     1     2     1     1     1     1     1     1     2     1 \n11571 11572 11573 11574 11575 11576 11577 11578 11579 11580 11581 11582 11583 \n    1     1     1     1     1     1     1     1     1     3     1     1     1 \n11584 11585 11586 11587 11588 11589 11590 11591 11592 11593 11594 11595 11596 \n    1     1     1     1     1     2     2     1     1     1     1     1     4 \n11597 11598 11599 11600 11601 11602 11603 11604 11605 11606 11607 11608 11609 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11610 11611 11612 11613 11614 11615 11616 11617 11618 11619 11620 11621 11622 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11623 11624 11625 11626 11627 11628 11629 11630 11631 11632 11633 11634 11635 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n11636 11637 11638 11639 11640 11641 11642 11643 11644 11645 11646 11647 11648 \n    1     1     1     4     1     1     1     1     1     1     1     2     1 \n11649 11650 11651 11652 11653 11654 11655 11656 11657 11658 11659 11660 11661 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11662 11663 11664 11665 11666 11667 11668 11669 11670 11671 11672 11673 11674 \n    1     1     4     2     1     1     1     1     1     1     1     1     1 \n11675 11676 11677 11678 11679 11680 11681 11682 11683 11684 11685 11686 11687 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11688 11689 11690 11691 11692 11693 11694 11695 11696 11697 11698 11699 11700 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11701 11702 11703 11704 11705 11706 11707 11708 11709 11710 11711 11712 11713 \n    1     1     1     1     1     1     1     1     3     1     1     1     1 \n11714 11715 11716 11717 11718 11719 11720 11721 11722 11723 11724 11725 11726 \n    1     1     1     2     1     1     1     2     1     1     1     1     1 \n11727 11728 11729 11730 11731 11732 11733 11734 11735 11736 11737 11738 11739 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11740 11741 11742 11743 11744 11745 11746 11747 11748 11749 11750 11751 11752 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n11753 11754 11755 11756 11757 11758 11759 11760 11761 11762 11763 11764 11765 \n    1     2     1     1     1     1     2     1     1     1     1     1     1 \n11766 11767 11768 11769 11770 11771 11772 11773 11774 11775 11776 11777 11778 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11779 11780 11781 11782 11783 11784 11785 11786 11787 11788 11789 11790 11791 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11792 11793 11794 11795 11796 11797 11798 11799 11800 11801 11802 11803 11804 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11805 11806 11807 11808 11809 11810 11811 11812 11813 11814 11815 11816 11817 \n    2     1     1     2     1     1     1     1     1     1     1     1     1 \n11818 11819 11820 11821 11822 11823 11824 11825 11826 11827 11828 11829 11830 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n11831 11832 11833 11834 11835 11836 11837 11838 11839 11840 11841 11842 11843 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11844 11845 11846 11847 11848 11849 11850 11851 11852 11853 11854 11855 11856 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n11857 11858 11859 11860 11861 11862 11863 11864 11865 11866 11867 11868 11869 \n    1     1     1     1     1     1     1     1     1     1     1     4     1 \n11870 11871 11872 11873 11874 11875 11876 11877 11878 11879 11880 11881 11882 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11883 11884 11885 11886 11887 11888 11889 11890 11891 11892 11893 11894 11895 \n    2     1     2     1     1     1     1     2     2     1     1     1     1 \n11896 11897 11898 11899 11900 11901 11902 11903 11904 11905 11906 11907 11908 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11909 11910 11911 11912 11913 11914 11915 11916 11917 11918 11919 11920 11921 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11922 11923 11924 11925 11926 11927 11928 11929 11930 11931 11932 11933 11934 \n    1     1     1     1     1     1     1     1     1     4     2     1     1 \n11935 11936 11937 11938 11939 11940 11941 11942 11943 11944 11945 11946 11947 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11948 11949 11950 11951 11952 11953 11954 11955 11956 11957 11958 11959 11960 \n    3     1     1     1     1     1     1     1     1     1     1     1     1 \n11961 11962 11963 11964 11965 11966 11967 11968 11969 11970 11971 11972 11973 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11974 11975 11976 11977 11978 11979 11980 11981 11982 11983 11984 11985 11986 \n    1     1     1     1     1     1     1     1     1     1     1     4     1 \n11987 11988 11989 11990 11991 11992 11993 11994 11995 11996 11997 11998 11999 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12000 12001 12002 12003 12004 12005 12006 12007 12008 12009 12010 12011 12012 \n    2     3     1     3     1     1     3     1     1     1     1     1     1 \n12013 12014 12015 12016 12017 12018 12019 12020 12021 12022 12023 12024 12025 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12026 12027 12028 12029 12030 12031 12032 12033 12034 12035 12036 12037 12038 \n    4     1     1     1     1     1     1     1     1     1     1     1     1 \n12039 12040 12041 12042 12043 12044 12045 12046 12047 12048 12049 12050 12051 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n12052 12053 12054 12055 12056 12057 12058 12059 12060 12061 12062 12063 12064 \n    1     1     1    16     1     1     1     1     1     1     1     1     1 \n12065 12066 12067 12068 12069 12070 12071 12072 12073 12074 12075 12076 12077 \n    1     1     1     1     1     2     2     1     1     1     1     1     2 \n12078 12079 12080 12081 12082 12083 12084 12085 12086 12087 12088 12089 12090 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n12091 12092 12093 12094 12095 12096 12097 12098 12099 12100 12101 12102 12103 \n    1     1     1     1     1     1     1     1     1     3     1     1     1 \n12104 12105 12106 12107 12108 12109 12110 12111 12112 12113 12114 12115 12116 \n    1     1     1     1     1     1     1     3     1     1     1     1     1 \n12117 12118 12119 12120 12121 12122 12123 12124 12125 12126 12127 12128 12129 \n    1     1     2     1     1     1     1     2     9     1     1     1     1 \n12130 12131 12132 12133 12134 12135 12136 12137 12138 12139 12140 12141 12142 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n12143 12144 12145 12146 12147 12148 12149 12150 12151 12152 12153 12154 12155 \n    1     1     1     1    16     1     1     1     1     1     1     1     1 \n12156 12157 12158 12159 12160 12161 12162 12163 12164 12165 12166 12167 12168 \n    1     1     1     1     1     1     1     4     1     1     1     1     1 \n12169 12170 12171 12172 12173 12174 12175 12176 12177 12178 12179 12180 12181 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n12182 12183 12184 12185 12186 12187 12188 12189 12190 12191 12192 12193 12194 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12195 12196 12197 12198 12199 12200 12201 12202 12203 12204 12205 12206 12207 \n    1     1     1     1     1     8     1     1     6     1     1     1     1 \n12208 12209 12210 12211 12212 12213 12214 12215 12216 12217 12218 12219 12220 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12221 12222 12223 12224 12225 12226 12227 12228 12229 12230 12231 12232 12233 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12234 12235 12236 12237 12238 12239 12240 12241 12242 12243 12244 12245 12246 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12247 12248 12249 12250 12251 12252 12253 12254 12255 12256 12257 12258 12259 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n12260 12261 12262 12263 12264 12265 12266 12267 12268 12269 12270 12271 12272 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12273 12274 12275 12276 12277 12278 12279 12280 12281 12282 12283 12284 12285 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n12286 12287 12288 12289 12290 12291 12292 12293 12294 12295 12296 12297 12298 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12299 12300 12301 12302 12303 12304 12305 12306 12307 12308 12309 12310 12311 \n    1     1     1     1     3     2     1     1     1     1     1     1     1 \n12312 12313 12314 12315 12316 12317 12318 12319 12320 12321 12322 12323 12324 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12325 12326 12327 12328 12329 12330 12331 12332 12333 12334 12335 12336 12337 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12338 12339 12340 12341 12342 12343 12344 12345 12346 12347 12348 12349 12350 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12351 12352 12353 12354 12355 12356 12357 12358 12359 12360 12361 12362 12363 \n    2     2     1     1     1     1     1     1     1     1     1     1     1 \n12364 12365 12366 12367 12368 12369 12370 12371 12372 12373 12374 12375 12376 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n12377 12378 12379 12380 12381 12382 12383 12384 12385 12386 12387 12388 12389 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12390 12391 12392 12393 12394 12395 12396 12397 12398 12399 12400 12401 12402 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n12403 12404 12405 12406 12407 12408 12409 12410 12411 12412 12413 12414 12415 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12416 12417 12418 12419 12420 12421 12422 12423 12424 12425 12426 12427 12428 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12429 12430 12431 12432 12433 12434 12435 12436 12437 12438 12439 12440 12441 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12442 12443 12444 12445 12446 12447 12448 12449 12450 12451 12452 12453 12454 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12455 12456 12457 12458 12459 12460 12461 12462 12463 12464 12465 12466 12467 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12468 12469 12470 12471 12472 12473 12474 12475 12476 12477 12478 12479 12480 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12481 12482 12483 12484 12485 12486 12487 12488 12489 12490 12491 12492 12493 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12494 12495 12496 12497 12498 12499 12500 12501 12502 12503 12504 12505 12506 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12507 12508 12509 12510 12511 12512 12513 12514 12515 12516 12517 12518 12519 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12520 12521 12522 12523 12524 12525 12526 12527 12528 12529 12530 12531 12532 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n12533 12534 12535 12536 12537 12538 12539 12540 12541 12542 12543 12544 12545 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12546 12547 12548 12549 12550 12551 12552 12553 12554 12555 12556 12557 12558 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12559 12560 12561 12562 12563 12564 12565 12566 12567 12568 12569 12570 12571 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12572 12573 12574 12575 12576 12577 12578 12579 12580 12581 12582 12583 12584 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n12585 12586 12587 12588 12589 12590 12591 12592 12593 12594 12595 12596 12597 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12598 12599 12600 12601 12602 12603 12604 12605 12606 12607 12608 12609 12610 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n12611 12612 12613 12614 12615 12616 12617 12618 12619 12620 12621 12622 12623 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n12624 12625 12626 12627 12628 12629 12630 12631 12632 12633 12634 12635 12636 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12637 12638 12639 12640 12641 12642 12643 12644 12645 12646 12647 12648 12649 \n    1     3     1     1     1     1     1     1     1     1     1     1     1 \n12650 12651 12652 12653 12654 12655 12656 12657 12658 12659 12660 12661 12662 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12663 12664 12665 12666 12667 12668 12669 12670 12671 12672 12673 12674 12675 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12676 12677 12678 12679 12680 12681 12682 12683 12684 12685 12686 12687 12688 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12689 12690 12691 12692 12693 12694 12695 12696 12697 12698 12699 12700 12701 \n    1     3     3     1     1     1     1     1     1     1     1     1     1 \n12702 12703 12704 12705 12706 12707 12708 12709 12710 12711 12712 12713 12714 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12715 12716 12717 12718 12719 12720 12721 12722 12723 12724 12725 12726 12727 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n12728 12729 12730 12731 12732 12733 12734 12735 12736 12737 12738 12739 12740 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n12741 12742 12743 12744 12745 12746 12747 12748 12749 12750 12751 12752 12753 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12754 12755 12756 12757 12758 12759 12760 12761 12762 12763 12764 12765 12766 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n12767 12768 12769 12770 12771 12772 12773 12774 12775 12776 12777 12778 12779 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n12780 12781 12782 12783 12784 12785 12786 12787 12788 12789 12790 12791 12792 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12793 12794 12795 12796 12797 12798 12799 12800 12801 12802 12803 12804 12805 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12806 12807 12808 12809 12810 12811 12812 12813 12814 12815 12816 12817 12818 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12819 12820 12821 12822 12823 12824 12825 12826 12827 12828 12829 12830 12831 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12832 12833 12834 12835 12836 12837 12838 12839 12840 12841 12842 12843 12844 \n    1     1     1     1     1     1     1     1     1     1     3     1     1 \n12845 12846 12847 12848 12849 12850 12851 12852 12853 12854 12855 12856 12857 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12858 12859 12860 12861 12862 12863 12864 12865 12866 12867 12868 12869 12870 \n    1     1     1     1     1     2     2     1     1     1     1     1     1 \n12871 12872 12873 12874 12875 12876 12877 12878 12879 12880 12881 12882 12883 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n12884 12885 12886 12887 12888 12889 12890 12891 12892 12893 12894 12895 12896 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n12897 12898 12899 12900 12901 12902 12903 12904 12905 12906 12907 12908 12909 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12910 12911 12912 12913 12914 12915 12916 12917 12918 12919 12920 12921 12922 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n12923 12924 12925 12926 12927 12928 12929 12930 12931 12932 12933 12934 12935 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12936 12937 12938 12939 12940 12941 12942 12943 12944 12945 12946 12947 12948 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12949 12950 12951 12952 12953 12954 12955 12956 12957 12958 12959 12960 12961 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12962 12963 12964 12965 12966 12967 12968 12969 12970 12971 12972 12973 12974 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12975 12976 12977 12978 12979 12980 12981 12982 12983 12984 12985 \n    1     1     1     1     1     1     1     1     1     1     1 \n\n\n\nsum(multiplicity(roadacc_day_ppp) &gt; 1)\n\n[1] 779\n\n\nThe output shows that there are 779 duplicated point events.\nWe will resolve this using jittering, which will add a small pertubation to the duplicate points so that they do not occupy the exact same space:\n\nroadacc_day_ppp_jit &lt;- rjitter(roadacc_day_ppp,\n                                 retry = TRUE,\n                                 nsim = 99,\n                                 drop = TRUE)\n\nWe then check for duplicated points to determine if the jittering was carried out successfully:\n\nany(duplicated(roadacc_day_ppp_jit))\n\n[1] FALSE\n\n\nThe output indicates that there are no duplicated points.\n\n\n\nNext, we combine the ppp object and the owin object:\n\nroadacc_day_owin_ppp &lt;- roadacc_day_ppp[provinceowin]\n\n\nsummary(roadacc_day_owin_ppp)\n\nMarked planar point pattern:  12985 points\nAverage intensity 1.693182e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   2.000   4.000   4.061   6.000   7.000 \n\nWindow: polygonal boundary\nsingle connected closed polygon with 13779 vertices\nenclosing rectangle: [587893.5, 712440.5] x [1484413.7, 1579076.3] units\n                     (124500 x 94660 units)\nWindow area = 7668990000 square units\nFraction of frame area: 0.65\n\n\nWe plot the roadacc_day_owin_ppp object to examine the correctness of the output object:\n\nplot(roadacc_day_owin_ppp)\n\n\n\n\n\n\n\n\n\n\n\nWe first use BOOT.spattemp() to determine the spatial bandwidth and the scalar temporal bandwidth for use in subsequent calculation.\n\nset.seed(1234)\nBOOT.spattemp(roadacc_day_owin_ppp)\n\n\nNext, we use spattemp.density() of sparr package to compute the STKDE, with h and lambda values derived in previous step.\n\nst_kde_day &lt;- spattemp.density(roadacc_day_owin_ppp,\n                               h = 2500 ,\n                               lambda = 0.7) \nsummary(st_kde_day)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 2500 (spatial)\n  lambda = 0.7 (temporal)\n\nNo. of observations\n  12985 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [587893.5, 712440.5] x [1484414, 1579076]\n\nTemporal bound\n  [1, 7]\n\nEvaluation\n  128 x 128 x 7 trivariate lattice\n  Density range: [5.882033e-17, 3.954459e-10]\n\n\n\n\n\n\nfullweek &lt;- c(1,2,3,4,5,6,7)\npar(mfrow=c(2,3)) \nfor(i in fullweek){\n  plot(st_kde_day, i,\n       override.par=FALSE,\n       fix.range=TRUE,\n       main=paste(\"KDE at day\",i))\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservations from the Temporal KDE and Spatio-Temporal KDE plots are summarised in the table below:\n\n\n\n\n\n\n\n\nObservation from Temporal KDE\nObservation from Spatio-Temporal KDE\nConclusion from both observations\n\n\n\n\n\nOccurrence of road accidents is most dense on Fri and Sat\n\n\nDense occurrence of road accidents from Fri to Mon, however road accidents on Sun and Mon seem to be more spatially concentrated than Fri and Sat\n\nWhile there are differences in temporal KDE and Spatio-Temporal KDE plots, together they indicate the following:\n\nRoad accidents occur in high accident counts at the start of the weekend\nThe spatial distribution of road accidents on Sun and Mon are more concentrated as compared to Fri and Sat, leading to more prominent hotspots in the KDE map.\n\nThis could potentially be explained by Fri and Sat being the start of the weekend vs Sun and Mon which are closer to the start of the week and while people may venture out to different places to carry out their social activities on Fri and Sat, they may travel to a smaller subset of locations i.e. home on Sun to rest before the start of the week or to work/school on Mon for the start of the week, hence leading to more concentrated occurrences of road accidents on Sun and Mon.\n\n\n\n\n\n\n\n\nWe run similar steps as above to study the distribution of road accidents by time of day.\n\n\n\n\n\n\n\nroadacc_time_ppp &lt;- roadacc %&gt;%\n  select(inc_time) %&gt;%\n  as.ppp()\n\nWe note that there are duplicated point events from the code below:\n\nany(duplicated(roadacc_time_ppp))\n\n[1] TRUE\n\n\nWe use the multiplicity() function to count the number of co-incident points:\n\nmultiplicity(roadacc_time_ppp)\n\n    1     2     3     4     5     6     7     8     9    10    11    12    13 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n   14    15    16    17    18    19    20    21    22    23    24    25    26 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n   27    28    29    30    31    32    33    34    35    36    37    38    39 \n    1     1     1     1     1     1     1     1     1     3     1     2     2 \n   40    41    42    43    44    45    46    47    48    49    50    51    52 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n   53    54    55    56    57    58    59    60    61    62    63    64    65 \n    1     1     1     1     1     3     1     3     1     1     1     1     1 \n   66    67    68    69    70    71    72    73    74    75    76    77    78 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n   79    80    81    82    83    84    85    86    87    88    89    90    91 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n   92    93    94    95    96    97    98    99   100   101   102   103   104 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  105   106   107   108   109   110   111   112   113   114   115   116   117 \n    1     1     1     1     1     1     2     2     2     1     1     1     1 \n  118   119   120   121   122   123   124   125   126   127   128   129   130 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n  131   132   133   134   135   136   137   138   139   140   141   142   143 \n    1     1     1     1     2     2     1     1     1     1     2     1     1 \n  144   145   146   147   148   149   150   151   152   153   154   155   156 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n  157   158   159   160   161   162   163   164   165   166   167   168   169 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  170   171   172   173   174   175   176   177   178   179   180   181   182 \n    1     1     1     1     1     1     1     1     1     1     1     2     2 \n  183   184   185   186   187   188   189   190   191   192   193   194   195 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  196   197   198   199   200   201   202   203   204   205   206   207   208 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  209   210   211   212   213   214   215   216   217   218   219   220   221 \n    1     1     1     1     1     1     1     1     1     1     1     3     1 \n  222   223   224   225   226   227   228   229   230   231   232   233   234 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  235   236   237   238   239   240   241   242   243   244   245   246   247 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  248   249   250   251   252   253   254   255   256   257   258   259   260 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  261   262   263   264   265   266   267   268   269   270   271   272   273 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  274   275   276   277   278   279   280   281   282   283   284   285   286 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  287   288   289   290   291   292   293   294   295   296   297   298   299 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  300   301   302   303   304   305   306   307   308   309   310   311   312 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  313   314   315   316   317   318   319   320   321   322   323   324   325 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  326   327   328   329   330   331   332   333   334   335   336   337   338 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  339   340   341   342   343   344   345   346   347   348   349   350   351 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  352   353   354   355   356   357   358   359   360   361   362   363   364 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  365   366   367   368   369   370   371   372   373   374   375   376   377 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  378   379   380   381   382   383   384   385   386   387   388   389   390 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  391   392   393   394   395   396   397   398   399   400   401   402   403 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n  404   405   406   407   408   409   410   411   412   413   414   415   416 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  417   418   419   420   421   422   423   424   425   426   427   428   429 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  430   431   432   433   434   435   436   437   438   439   440   441   442 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  443   444   445   446   447   448   449   450   451   452   453   454   455 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  456   457   458   459   460   461   462   463   464   465   466   467   468 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  469   470   471   472   473   474   475   476   477   478   479   480   481 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  482   483   484   485   486   487   488   489   490   491   492   493   494 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  495   496   497   498   499   500   501   502   503   504   505   506   507 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  508   509   510   511   512   513   514   515   516   517   518   519   520 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  521   522   523   524   525   526   527   528   529   530   531   532   533 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n  534   535   536   537   538   539   540   541   542   543   544   545   546 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  547   548   549   550   551   552   553   554   555   556   557   558   559 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  560   561   562   563   564   565   566   567   568   569   570   571   572 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  573   574   575   576   577   578   579   580   581   582   583   584   585 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  586   587   588   589   590   591   592   593   594   595   596   597   598 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  599   600   601   602   603   604   605   606   607   608   609   610   611 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  612   613   614   615   616   617   618   619   620   621   622   623   624 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  625   626   627   628   629   630   631   632   633   634   635   636   637 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  638   639   640   641   642   643   644   645   646   647   648   649   650 \n    1     1     3     1     1     1     1     1     1     1     1     1     1 \n  651   652   653   654   655   656   657   658   659   660   661   662   663 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  664   665   666   667   668   669   670   671   672   673   674   675   676 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  677   678   679   680   681   682   683   684   685   686   687   688   689 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  690   691   692   693   694   695   696   697   698   699   700   701   702 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n  703   704   705   706   707   708   709   710   711   712   713   714   715 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  716   717   718   719   720   721   722   723   724   725   726   727   728 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n  729   730   731   732   733   734   735   736   737   738   739   740   741 \n    1     1     1     1     1     1     1     1     1     3     1     1     1 \n  742   743   744   745   746   747   748   749   750   751   752   753   754 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  755   756   757   758   759   760   761   762   763   764   765   766   767 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  768   769   770   771   772   773   774   775   776   777   778   779   780 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  781   782   783   784   785   786   787   788   789   790   791   792   793 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  794   795   796   797   798   799   800   801   802   803   804   805   806 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  807   808   809   810   811   812   813   814   815   816   817   818   819 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  820   821   822   823   824   825   826   827   828   829   830   831   832 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  833   834   835   836   837   838   839   840   841   842   843   844   845 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  846   847   848   849   850   851   852   853   854   855   856   857   858 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  859   860   861   862   863   864   865   866   867   868   869   870   871 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  872   873   874   875   876   877   878   879   880   881   882   883   884 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n  885   886   887   888   889   890   891   892   893   894   895   896   897 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  898   899   900   901   902   903   904   905   906   907   908   909   910 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n  911   912   913   914   915   916   917   918   919   920   921   922   923 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  924   925   926   927   928   929   930   931   932   933   934   935   936 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  937   938   939   940   941   942   943   944   945   946   947   948   949 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  950   951   952   953   954   955   956   957   958   959   960   961   962 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  963   964   965   966   967   968   969   970   971   972   973   974   975 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n  976   977   978   979   980   981   982   983   984   985   986   987   988 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  989   990   991   992   993   994   995   996   997   998   999  1000  1001 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1002  1003  1004  1005  1006  1007  1008  1009  1010  1011  1012  1013  1014 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1015  1016  1017  1018  1019  1020  1021  1022  1023  1024  1025  1026  1027 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1028  1029  1030  1031  1032  1033  1034  1035  1036  1037  1038  1039  1040 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1041  1042  1043  1044  1045  1046  1047  1048  1049  1050  1051  1052  1053 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1054  1055  1056  1057  1058  1059  1060  1061  1062  1063  1064  1065  1066 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1067  1068  1069  1070  1071  1072  1073  1074  1075  1076  1077  1078  1079 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1080  1081  1082  1083  1084  1085  1086  1087  1088  1089  1090  1091  1092 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 1093  1094  1095  1096  1097  1098  1099  1100  1101  1102  1103  1104  1105 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1106  1107  1108  1109  1110  1111  1112  1113  1114  1115  1116  1117  1118 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1119  1120  1121  1122  1123  1124  1125  1126  1127  1128  1129  1130  1131 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 1132  1133  1134  1135  1136  1137  1138  1139  1140  1141  1142  1143  1144 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1145  1146  1147  1148  1149  1150  1151  1152  1153  1154  1155  1156  1157 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1158  1159  1160  1161  1162  1163  1164  1165  1166  1167  1168  1169  1170 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1171  1172  1173  1174  1175  1176  1177  1178  1179  1180  1181  1182  1183 \n    3     1     1     1     1     1     1     1     1     1     1     1     1 \n 1184  1185  1186  1187  1188  1189  1190  1191  1192  1193  1194  1195  1196 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1197  1198  1199  1200  1201  1202  1203  1204  1205  1206  1207  1208  1209 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1210  1211  1212  1213  1214  1215  1216  1217  1218  1219  1220  1221  1222 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 1223  1224  1225  1226  1227  1228  1229  1230  1231  1232  1233  1234  1235 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 1236  1237  1238  1239  1240  1241  1242  1243  1244  1245  1246  1247  1248 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1249  1250  1251  1252  1253  1254  1255  1256  1257  1258  1259  1260  1261 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1262  1263  1264  1265  1266  1267  1268  1269  1270  1271  1272  1273  1274 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 1275  1276  1277  1278  1279  1280  1281  1282  1283  1284  1285  1286  1287 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1288  1289  1290  1291  1292  1293  1294  1295  1296  1297  1298  1299  1300 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1301  1302  1303  1304  1305  1306  1307  1308  1309  1310  1311  1312  1313 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1314  1315  1316  1317  1318  1319  1320  1321  1322  1323  1324  1325  1326 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1327  1328  1329  1330  1331  1332  1333  1334  1335  1336  1337  1338  1339 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 1340  1341  1342  1343  1344  1345  1346  1347  1348  1349  1350  1351  1352 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 1353  1354  1355  1356  1357  1358  1359  1360  1361  1362  1363  1364  1365 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1366  1367  1368  1369  1370  1371  1372  1373  1374  1375  1376  1377  1378 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1379  1380  1381  1382  1383  1384  1385  1386  1387  1388  1389  1390  1391 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1392  1393  1394  1395  1396  1397  1398  1399  1400  1401  1402  1403  1404 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 1405  1406  1407  1408  1409  1410  1411  1412  1413  1414  1415  1416  1417 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1418  1419  1420  1421  1422  1423  1424  1425  1426  1427  1428  1429  1430 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1431  1432  1433  1434  1435  1436  1437  1438  1439  1440  1441  1442  1443 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1444  1445  1446  1447  1448  1449  1450  1451  1452  1453  1454  1455  1456 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1457  1458  1459  1460  1461  1462  1463  1464  1465  1466  1467  1468  1469 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1470  1471  1472  1473  1474  1475  1476  1477  1478  1479  1480  1481  1482 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1483  1484  1485  1486  1487  1488  1489  1490  1491  1492  1493  1494  1495 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 1496  1497  1498  1499  1500  1501  1502  1503  1504  1505  1506  1507  1508 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1509  1510  1511  1512  1513  1514  1515  1516  1517  1518  1519  1520  1521 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 1522  1523  1524  1525  1526  1527  1528  1529  1530  1531  1532  1533  1534 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1535  1536  1537  1538  1539  1540  1541  1542  1543  1544  1545  1546  1547 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 1548  1549  1550  1551  1552  1553  1554  1555  1556  1557  1558  1559  1560 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1561  1562  1563  1564  1565  1566  1567  1568  1569  1570  1571  1572  1573 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1574  1575  1576  1577  1578  1579  1580  1581  1582  1583  1584  1585  1586 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1587  1588  1589  1590  1591  1592  1593  1594  1595  1596  1597  1598  1599 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 1600  1601  1602  1603  1604  1605  1606  1607  1608  1609  1610  1611  1612 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1613  1614  1615  1616  1617  1618  1619  1620  1621  1622  1623  1624  1625 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1626  1627  1628  1629  1630  1631  1632  1633  1634  1635  1636  1637  1638 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1639  1640  1641  1642  1643  1644  1645  1646  1647  1648  1649  1650  1651 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1652  1653  1654  1655  1656  1657  1658  1659  1660  1661  1662  1663  1664 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1665  1666  1667  1668  1669  1670  1671  1672  1673  1674  1675  1676  1677 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1678  1679  1680  1681  1682  1683  1684  1685  1686  1687  1688  1689  1690 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1691  1692  1693  1694  1695  1696  1697  1698  1699  1700  1701  1702  1703 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1704  1705  1706  1707  1708  1709  1710  1711  1712  1713  1714  1715  1716 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1717  1718  1719  1720  1721  1722  1723  1724  1725  1726  1727  1728  1729 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1730  1731  1732  1733  1734  1735  1736  1737  1738  1739  1740  1741  1742 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1743  1744  1745  1746  1747  1748  1749  1750  1751  1752  1753  1754  1755 \n    1     1     1     2     1     1     1     1     1     1     1     2     1 \n 1756  1757  1758  1759  1760  1761  1762  1763  1764  1765  1766  1767  1768 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1769  1770  1771  1772  1773  1774  1775  1776  1777  1778  1779  1780  1781 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 1782  1783  1784  1785  1786  1787  1788  1789  1790  1791  1792  1793  1794 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1795  1796  1797  1798  1799  1800  1801  1802  1803  1804  1805  1806  1807 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1808  1809  1810  1811  1812  1813  1814  1815  1816  1817  1818  1819  1820 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1821  1822  1823  1824  1825  1826  1827  1828  1829  1830  1831  1832  1833 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1834  1835  1836  1837  1838  1839  1840  1841  1842  1843  1844  1845  1846 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1847  1848  1849  1850  1851  1852  1853  1854  1855  1856  1857  1858  1859 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1860  1861  1862  1863  1864  1865  1866  1867  1868  1869  1870  1871  1872 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 1873  1874  1875  1876  1877  1878  1879  1880  1881  1882  1883  1884  1885 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1886  1887  1888  1889  1890  1891  1892  1893  1894  1895  1896  1897  1898 \n    1     2     1     1     1     1     1     1     1     1     2     1     1 \n 1899  1900  1901  1902  1903  1904  1905  1906  1907  1908  1909  1910  1911 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1912  1913  1914  1915  1916  1917  1918  1919  1920  1921  1922  1923  1924 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1925  1926  1927  1928  1929  1930  1931  1932  1933  1934  1935  1936  1937 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1938  1939  1940  1941  1942  1943  1944  1945  1946  1947  1948  1949  1950 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1951  1952  1953  1954  1955  1956  1957  1958  1959  1960  1961  1962  1963 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1964  1965  1966  1967  1968  1969  1970  1971  1972  1973  1974  1975  1976 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1977  1978  1979  1980  1981  1982  1983  1984  1985  1986  1987  1988  1989 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1990  1991  1992  1993  1994  1995  1996  1997  1998  1999  2000  2001  2002 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2003  2004  2005  2006  2007  2008  2009  2010  2011  2012  2013  2014  2015 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2016  2017  2018  2019  2020  2021  2022  2023  2024  2025  2026  2027  2028 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2029  2030  2031  2032  2033  2034  2035  2036  2037  2038  2039  2040  2041 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2042  2043  2044  2045  2046  2047  2048  2049  2050  2051  2052  2053  2054 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2055  2056  2057  2058  2059  2060  2061  2062  2063  2064  2065  2066  2067 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 2068  2069  2070  2071  2072  2073  2074  2075  2076  2077  2078  2079  2080 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 2081  2082  2083  2084  2085  2086  2087  2088  2089  2090  2091  2092  2093 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2094  2095  2096  2097  2098  2099  2100  2101  2102  2103  2104  2105  2106 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 2107  2108  2109  2110  2111  2112  2113  2114  2115  2116  2117  2118  2119 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 2120  2121  2122  2123  2124  2125  2126  2127  2128  2129  2130  2131  2132 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2133  2134  2135  2136  2137  2138  2139  2140  2141  2142  2143  2144  2145 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 2146  2147  2148  2149  2150  2151  2152  2153  2154  2155  2156  2157  2158 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 2159  2160  2161  2162  2163  2164  2165  2166  2167  2168  2169  2170  2171 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2172  2173  2174  2175  2176  2177  2178  2179  2180  2181  2182  2183  2184 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2185  2186  2187  2188  2189  2190  2191  2192  2193  2194  2195  2196  2197 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2198  2199  2200  2201  2202  2203  2204  2205  2206  2207  2208  2209  2210 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2211  2212  2213  2214  2215  2216  2217  2218  2219  2220  2221  2222  2223 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2224  2225  2226  2227  2228  2229  2230  2231  2232  2233  2234  2235  2236 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 2237  2238  2239  2240  2241  2242  2243  2244  2245  2246  2247  2248  2249 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2250  2251  2252  2253  2254  2255  2256  2257  2258  2259  2260  2261  2262 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2263  2264  2265  2266  2267  2268  2269  2270  2271  2272  2273  2274  2275 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 2276  2277  2278  2279  2280  2281  2282  2283  2284  2285  2286  2287  2288 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2289  2290  2291  2292  2293  2294  2295  2296  2297  2298  2299  2300  2301 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2302  2303  2304  2305  2306  2307  2308  2309  2310  2311  2312  2313  2314 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 2315  2316  2317  2318  2319  2320  2321  2322  2323  2324  2325  2326  2327 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2328  2329  2330  2331  2332  2333  2334  2335  2336  2337  2338  2339  2340 \n    3     1     1     1     1     1     1     1     1     1     1     1     1 \n 2341  2342  2343  2344  2345  2346  2347  2348  2349  2350  2351  2352  2353 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2354  2355  2356  2357  2358  2359  2360  2361  2362  2363  2364  2365  2366 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2367  2368  2369  2370  2371  2372  2373  2374  2375  2376  2377  2378  2379 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2380  2381  2382  2383  2384  2385  2386  2387  2388  2389  2390  2391  2392 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2393  2394  2395  2396  2397  2398  2399  2400  2401  2402  2403  2404  2405 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2406  2407  2408  2409  2410  2411  2412  2413  2414  2415  2416  2417  2418 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2419  2420  2421  2422  2423  2424  2425  2426  2427  2428  2429  2430  2431 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2432  2433  2434  2435  2436  2437  2438  2439  2440  2441  2442  2443  2444 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2445  2446  2447  2448  2449  2450  2451  2452  2453  2454  2455  2456  2457 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2458  2459  2460  2461  2462  2463  2464  2465  2466  2467  2468  2469  2470 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2471  2472  2473  2474  2475  2476  2477  2478  2479  2480  2481  2482  2483 \n    1     1     1     1     1     1     1     2     2     1     1     1     1 \n 2484  2485  2486  2487  2488  2489  2490  2491  2492  2493  2494  2495  2496 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2497  2498  2499  2500  2501  2502  2503  2504  2505  2506  2507  2508  2509 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 2510  2511  2512  2513  2514  2515  2516  2517  2518  2519  2520  2521  2522 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2523  2524  2525  2526  2527  2528  2529  2530  2531  2532  2533  2534  2535 \n    1     1     1     1     1     1     1     1     1     3     1     1     1 \n 2536  2537  2538  2539  2540  2541  2542  2543  2544  2545  2546  2547  2548 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2549  2550  2551  2552  2553  2554  2555  2556  2557  2558  2559  2560  2561 \n    1     1     1     1     1     1     1     1     1     1     1     1     3 \n 2562  2563  2564  2565  2566  2567  2568  2569  2570  2571  2572  2573  2574 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 2575  2576  2577  2578  2579  2580  2581  2582  2583  2584  2585  2586  2587 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2588  2589  2590  2591  2592  2593  2594  2595  2596  2597  2598  2599  2600 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2601  2602  2603  2604  2605  2606  2607  2608  2609  2610  2611  2612  2613 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2614  2615  2616  2617  2618  2619  2620  2621  2622  2623  2624  2625  2626 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2627  2628  2629  2630  2631  2632  2633  2634  2635  2636  2637  2638  2639 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2640  2641  2642  2643  2644  2645  2646  2647  2648  2649  2650  2651  2652 \n    1     1     1     1     1     2     2     1     1     1     1     1     1 \n 2653  2654  2655  2656  2657  2658  2659  2660  2661  2662  2663  2664  2665 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2666  2667  2668  2669  2670  2671  2672  2673  2674  2675  2676  2677  2678 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2679  2680  2681  2682  2683  2684  2685  2686  2687  2688  2689  2690  2691 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 2692  2693  2694  2695  2696  2697  2698  2699  2700  2701  2702  2703  2704 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 2705  2706  2707  2708  2709  2710  2711  2712  2713  2714  2715  2716  2717 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 2718  2719  2720  2721  2722  2723  2724  2725  2726  2727  2728  2729  2730 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2731  2732  2733  2734  2735  2736  2737  2738  2739  2740  2741  2742  2743 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2744  2745  2746  2747  2748  2749  2750  2751  2752  2753  2754  2755  2756 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2757  2758  2759  2760  2761  2762  2763  2764  2765  2766  2767  2768  2769 \n    1     1     1     1     1     1     1     1     2     2     1     1     1 \n 2770  2771  2772  2773  2774  2775  2776  2777  2778  2779  2780  2781  2782 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 2783  2784  2785  2786  2787  2788  2789  2790  2791  2792  2793  2794  2795 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2796  2797  2798  2799  2800  2801  2802  2803  2804  2805  2806  2807  2808 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2809  2810  2811  2812  2813  2814  2815  2816  2817  2818  2819  2820  2821 \n    1     1     1     1     1     1     1     1     1     1     3     1     1 \n 2822  2823  2824  2825  2826  2827  2828  2829  2830  2831  2832  2833  2834 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2835  2836  2837  2838  2839  2840  2841  2842  2843  2844  2845  2846  2847 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2848  2849  2850  2851  2852  2853  2854  2855  2856  2857  2858  2859  2860 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2861  2862  2863  2864  2865  2866  2867  2868  2869  2870  2871  2872  2873 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2874  2875  2876  2877  2878  2879  2880  2881  2882  2883  2884  2885  2886 \n    1     1     1     1     1     3     1     1     1     1     1     1     1 \n 2887  2888  2889  2890  2891  2892  2893  2894  2895  2896  2897  2898  2899 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2900  2901  2902  2903  2904  2905  2906  2907  2908  2909  2910  2911  2912 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2913  2914  2915  2916  2917  2918  2919  2920  2921  2922  2923  2924  2925 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2926  2927  2928  2929  2930  2931  2932  2933  2934  2935  2936  2937  2938 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2939  2940  2941  2942  2943  2944  2945  2946  2947  2948  2949  2950  2951 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2952  2953  2954  2955  2956  2957  2958  2959  2960  2961  2962  2963  2964 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2965  2966  2967  2968  2969  2970  2971  2972  2973  2974  2975  2976  2977 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2978  2979  2980  2981  2982  2983  2984  2985  2986  2987  2988  2989  2990 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2991  2992  2993  2994  2995  2996  2997  2998  2999  3000  3001  3002  3003 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3004  3005  3006  3007  3008  3009  3010  3011  3012  3013  3014  3015  3016 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3017  3018  3019  3020  3021  3022  3023  3024  3025  3026  3027  3028  3029 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3030  3031  3032  3033  3034  3035  3036  3037  3038  3039  3040  3041  3042 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 3043  3044  3045  3046  3047  3048  3049  3050  3051  3052  3053  3054  3055 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3056  3057  3058  3059  3060  3061  3062  3063  3064  3065  3066  3067  3068 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3069  3070  3071  3072  3073  3074  3075  3076  3077  3078  3079  3080  3081 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3082  3083  3084  3085  3086  3087  3088  3089  3090  3091  3092  3093  3094 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3095  3096  3097  3098  3099  3100  3101  3102  3103  3104  3105  3106  3107 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 3108  3109  3110  3111  3112  3113  3114  3115  3116  3117  3118  3119  3120 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3121  3122  3123  3124  3125  3126  3127  3128  3129  3130  3131  3132  3133 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 3134  3135  3136  3137  3138  3139  3140  3141  3142  3143  3144  3145  3146 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3147  3148  3149  3150  3151  3152  3153  3154  3155  3156  3157  3158  3159 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3160  3161  3162  3163  3164  3165  3166  3167  3168  3169  3170  3171  3172 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 3173  3174  3175  3176  3177  3178  3179  3180  3181  3182  3183  3184  3185 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 3186  3187  3188  3189  3190  3191  3192  3193  3194  3195  3196  3197  3198 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3199  3200  3201  3202  3203  3204  3205  3206  3207  3208  3209  3210  3211 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3212  3213  3214  3215  3216  3217  3218  3219  3220  3221  3222  3223  3224 \n    1     1     1     1     1     1     1     1     1     3     1     1     1 \n 3225  3226  3227  3228  3229  3230  3231  3232  3233  3234  3235  3236  3237 \n    1     1     1     1     1     1     1     1     1     2     1     2     1 \n 3238  3239  3240  3241  3242  3243  3244  3245  3246  3247  3248  3249  3250 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 3251  3252  3253  3254  3255  3256  3257  3258  3259  3260  3261  3262  3263 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3264  3265  3266  3267  3268  3269  3270  3271  3272  3273  3274  3275  3276 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 3277  3278  3279  3280  3281  3282  3283  3284  3285  3286  3287  3288  3289 \n    1     1     2     1     1     1     2     1     1     1     1     1     1 \n 3290  3291  3292  3293  3294  3295  3296  3297  3298  3299  3300  3301  3302 \n    1     1     1     1     1     1     2     2     1     1     1     1     1 \n 3303  3304  3305  3306  3307  3308  3309  3310  3311  3312  3313  3314  3315 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3316  3317  3318  3319  3320  3321  3322  3323  3324  3325  3326  3327  3328 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3329  3330  3331  3332  3333  3334  3335  3336  3337  3338  3339  3340  3341 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 3342  3343  3344  3345  3346  3347  3348  3349  3350  3351  3352  3353  3354 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3355  3356  3357  3358  3359  3360  3361  3362  3363  3364  3365  3366  3367 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3368  3369  3370  3371  3372  3373  3374  3375  3376  3377  3378  3379  3380 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3381  3382  3383  3384  3385  3386  3387  3388  3389  3390  3391  3392  3393 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 3394  3395  3396  3397  3398  3399  3400  3401  3402  3403  3404  3405  3406 \n    1     1     1     1     1     1     1     1     1     3     1     1     1 \n 3407  3408  3409  3410  3411  3412  3413  3414  3415  3416  3417  3418  3419 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 3420  3421  3422  3423  3424  3425  3426  3427  3428  3429  3430  3431  3432 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 3433  3434  3435  3436  3437  3438  3439  3440  3441  3442  3443  3444  3445 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3446  3447  3448  3449  3450  3451  3452  3453  3454  3455  3456  3457  3458 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3459  3460  3461  3462  3463  3464  3465  3466  3467  3468  3469  3470  3471 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3472  3473  3474  3475  3476  3477  3478  3479  3480  3481  3482  3483  3484 \n    3     1     2     1     1     1     1     1     1     1     1     1     1 \n 3485  3486  3487  3488  3489  3490  3491  3492  3493  3494  3495  3496  3497 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 3498  3499  3500  3501  3502  3503  3504  3505  3506  3507  3508  3509  3510 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3511  3512  3513  3514  3515  3516  3517  3518  3519  3520  3521  3522  3523 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3524  3525  3526  3527  3528  3529  3530  3531  3532  3533  3534  3535  3536 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3537  3538  3539  3540  3541  3542  3543  3544  3545  3546  3547  3548  3549 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3550  3551  3552  3553  3554  3555  3556  3557  3558  3559  3560  3561  3562 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 3563  3564  3565  3566  3567  3568  3569  3570  3571  3572  3573  3574  3575 \n    1     1     1     1     1     1     1     3     1     1     1     1     1 \n 3576  3577  3578  3579  3580  3581  3582  3583  3584  3585  3586  3587  3588 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 3589  3590  3591  3592  3593  3594  3595  3596  3597  3598  3599  3600  3601 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 3602  3603  3604  3605  3606  3607  3608  3609  3610  3611  3612  3613  3614 \n    1     1     1     1     1     1     1     1     7     1     1     1     1 \n 3615  3616  3617  3618  3619  3620  3621  3622  3623  3624  3625  3626  3627 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3628  3629  3630  3631  3632  3633  3634  3635  3636  3637  3638  3639  3640 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3641  3642  3643  3644  3645  3646  3647  3648  3649  3650  3651  3652  3653 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3654  3655  3656  3657  3658  3659  3660  3661  3662  3663  3664  3665  3666 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3667  3668  3669  3670  3671  3672  3673  3674  3675  3676  3677  3678  3679 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3680  3681  3682  3683  3684  3685  3686  3687  3688  3689  3690  3691  3692 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3693  3694  3695  3696  3697  3698  3699  3700  3701  3702  3703  3704  3705 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3706  3707  3708  3709  3710  3711  3712  3713  3714  3715  3716  3717  3718 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3719  3720  3721  3722  3723  3724  3725  3726  3727  3728  3729  3730  3731 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3732  3733  3734  3735  3736  3737  3738  3739  3740  3741  3742  3743  3744 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3745  3746  3747  3748  3749  3750  3751  3752  3753  3754  3755  3756  3757 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3758  3759  3760  3761  3762  3763  3764  3765  3766  3767  3768  3769  3770 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3771  3772  3773  3774  3775  3776  3777  3778  3779  3780  3781  3782  3783 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3784  3785  3786  3787  3788  3789  3790  3791  3792  3793  3794  3795  3796 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3797  3798  3799  3800  3801  3802  3803  3804  3805  3806  3807  3808  3809 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3810  3811  3812  3813  3814  3815  3816  3817  3818  3819  3820  3821  3822 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3823  3824  3825  3826  3827  3828  3829  3830  3831  3832  3833  3834  3835 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3836  3837  3838  3839  3840  3841  3842  3843  3844  3845  3846  3847  3848 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3849  3850  3851  3852  3853  3854  3855  3856  3857  3858  3859  3860  3861 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3862  3863  3864  3865  3866  3867  3868  3869  3870  3871  3872  3873  3874 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3875  3876  3877  3878  3879  3880  3881  3882  3883  3884  3885  3886  3887 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3888  3889  3890  3891  3892  3893  3894  3895  3896  3897  3898  3899  3900 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3901  3902  3903  3904  3905  3906  3907  3908  3909  3910  3911  3912  3913 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3914  3915  3916  3917  3918  3919  3920  3921  3922  3923  3924  3925  3926 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3927  3928  3929  3930  3931  3932  3933  3934  3935  3936  3937  3938  3939 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3940  3941  3942  3943  3944  3945  3946  3947  3948  3949  3950  3951  3952 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3953  3954  3955  3956  3957  3958  3959  3960  3961  3962  3963  3964  3965 \n    1     4     1     1     1     1     1     1     1     1     1     1     1 \n 3966  3967  3968  3969  3970  3971  3972  3973  3974  3975  3976  3977  3978 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3979  3980  3981  3982  3983  3984  3985  3986  3987  3988  3989  3990  3991 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3992  3993  3994  3995  3996  3997  3998  3999  4000  4001  4002  4003  4004 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4005  4006  4007  4008  4009  4010  4011  4012  4013  4014  4015  4016  4017 \n    1     1     1     1     1     3     1     1     1     1     1     1     1 \n 4018  4019  4020  4021  4022  4023  4024  4025  4026  4027  4028  4029  4030 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4031  4032  4033  4034  4035  4036  4037  4038  4039  4040  4041  4042  4043 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4044  4045  4046  4047  4048  4049  4050  4051  4052  4053  4054  4055  4056 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4057  4058  4059  4060  4061  4062  4063  4064  4065  4066  4067  4068  4069 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4070  4071  4072  4073  4074  4075  4076  4077  4078  4079  4080  4081  4082 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4083  4084  4085  4086  4087  4088  4089  4090  4091  4092  4093  4094  4095 \n    1     1     1     1     1     3     1     1     1     1     1     1     1 \n 4096  4097  4098  4099  4100  4101  4102  4103  4104  4105  4106  4107  4108 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4109  4110  4111  4112  4113  4114  4115  4116  4117  4118  4119  4120  4121 \n    1     1     1     1     1     1     1     1     1     1     3     1     1 \n 4122  4123  4124  4125  4126  4127  4128  4129  4130  4131  4132  4133  4134 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4135  4136  4137  4138  4139  4140  4141  4142  4143  4144  4145  4146  4147 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4148  4149  4150  4151  4152  4153  4154  4155  4156  4157  4158  4159  4160 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4161  4162  4163  4164  4165  4166  4167  4168  4169  4170  4171  4172  4173 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4174  4175  4176  4177  4178  4179  4180  4181  4182  4183  4184  4185  4186 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4187  4188  4189  4190  4191  4192  4193  4194  4195  4196  4197  4198  4199 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4200  4201  4202  4203  4204  4205  4206  4207  4208  4209  4210  4211  4212 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4213  4214  4215  4216  4217  4218  4219  4220  4221  4222  4223  4224  4225 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4226  4227  4228  4229  4230  4231  4232  4233  4234  4235  4236  4237  4238 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4239  4240  4241  4242  4243  4244  4245  4246  4247  4248  4249  4250  4251 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4252  4253  4254  4255  4256  4257  4258  4259  4260  4261  4262  4263  4264 \n    1     1     2     2     1     1     1     2     1     1     1     1     1 \n 4265  4266  4267  4268  4269  4270  4271  4272  4273  4274  4275  4276  4277 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4278  4279  4280  4281  4282  4283  4284  4285  4286  4287  4288  4289  4290 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 4291  4292  4293  4294  4295  4296  4297  4298  4299  4300  4301  4302  4303 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 4304  4305  4306  4307  4308  4309  4310  4311  4312  4313  4314  4315  4316 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4317  4318  4319  4320  4321  4322  4323  4324  4325  4326  4327  4328  4329 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4330  4331  4332  4333  4334  4335  4336  4337  4338  4339  4340  4341  4342 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4343  4344  4345  4346  4347  4348  4349  4350  4351  4352  4353  4354  4355 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4356  4357  4358  4359  4360  4361  4362  4363  4364  4365  4366  4367  4368 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4369  4370  4371  4372  4373  4374  4375  4376  4377  4378  4379  4380  4381 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4382  4383  4384  4385  4386  4387  4388  4389  4390  4391  4392  4393  4394 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4395  4396  4397  4398  4399  4400  4401  4402  4403  4404  4405  4406  4407 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4408  4409  4410  4411  4412  4413  4414  4415  4416  4417  4418  4419  4420 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4421  4422  4423  4424  4425  4426  4427  4428  4429  4430  4431  4432  4433 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4434  4435  4436  4437  4438  4439  4440  4441  4442  4443  4444  4445  4446 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4447  4448  4449  4450  4451  4452  4453  4454  4455  4456  4457  4458  4459 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4460  4461  4462  4463  4464  4465  4466  4467  4468  4469  4470  4471  4472 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4473  4474  4475  4476  4477  4478  4479  4480  4481  4482  4483  4484  4485 \n    1     1     1     1     1     2     1     1     1     1     1     2     1 \n 4486  4487  4488  4489  4490  4491  4492  4493  4494  4495  4496  4497  4498 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 4499  4500  4501  4502  4503  4504  4505  4506  4507  4508  4509  4510  4511 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 4512  4513  4514  4515  4516  4517  4518  4519  4520  4521  4522  4523  4524 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 4525  4526  4527  4528  4529  4530  4531  4532  4533  4534  4535  4536  4537 \n    1     1     1     1     3     1     1     1     1     1     1     1     1 \n 4538  4539  4540  4541  4542  4543  4544  4545  4546  4547  4548  4549  4550 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4551  4552  4553  4554  4555  4556  4557  4558  4559  4560  4561  4562  4563 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4564  4565  4566  4567  4568  4569  4570  4571  4572  4573  4574  4575  4576 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4577  4578  4579  4580  4581  4582  4583  4584  4585  4586  4587  4588  4589 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4590  4591  4592  4593  4594  4595  4596  4597  4598  4599  4600  4601  4602 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4603  4604  4605  4606  4607  4608  4609  4610  4611  4612  4613  4614  4615 \n    1     1     1     1     1     1     3     1     1     1     2     1     1 \n 4616  4617  4618  4619  4620  4621  4622  4623  4624  4625  4626  4627  4628 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 4629  4630  4631  4632  4633  4634  4635  4636  4637  4638  4639  4640  4641 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4642  4643  4644  4645  4646  4647  4648  4649  4650  4651  4652  4653  4654 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4655  4656  4657  4658  4659  4660  4661  4662  4663  4664  4665  4666  4667 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4668  4669  4670  4671  4672  4673  4674  4675  4676  4677  4678  4679  4680 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 4681  4682  4683  4684  4685  4686  4687  4688  4689  4690  4691  4692  4693 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4694  4695  4696  4697  4698  4699  4700  4701  4702  4703  4704  4705  4706 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4707  4708  4709  4710  4711  4712  4713  4714  4715  4716  4717  4718  4719 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4720  4721  4722  4723  4724  4725  4726  4727  4728  4729  4730  4731  4732 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 4733  4734  4735  4736  4737  4738  4739  4740  4741  4742  4743  4744  4745 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 4746  4747  4748  4749  4750  4751  4752  4753  4754  4755  4756  4757  4758 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4759  4760  4761  4762  4763  4764  4765  4766  4767  4768  4769  4770  4771 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4772  4773  4774  4775  4776  4777  4778  4779  4780  4781  4782  4783  4784 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 4785  4786  4787  4788  4789  4790  4791  4792  4793  4794  4795  4796  4797 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4798  4799  4800  4801  4802  4803  4804  4805  4806  4807  4808  4809  4810 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4811  4812  4813  4814  4815  4816  4817  4818  4819  4820  4821  4822  4823 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4824  4825  4826  4827  4828  4829  4830  4831  4832  4833  4834  4835  4836 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 4837  4838  4839  4840  4841  4842  4843  4844  4845  4846  4847  4848  4849 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4850  4851  4852  4853  4854  4855  4856  4857  4858  4859  4860  4861  4862 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4863  4864  4865  4866  4867  4868  4869  4870  4871  4872  4873  4874  4875 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 4876  4877  4878  4879  4880  4881  4882  4883  4884  4885  4886  4887  4888 \n    1     1     1     1     1     1     1     1     1     1     5     2     1 \n 4889  4890  4891  4892  4893  4894  4895  4896  4897  4898  4899  4900  4901 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 4902  4903  4904  4905  4906  4907  4908  4909  4910  4911  4912  4913  4914 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4915  4916  4917  4918  4919  4920  4921  4922  4923  4924  4925  4926  4927 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4928  4929  4930  4931  4932  4933  4934  4935  4936  4937  4938  4939  4940 \n    1     1     1     1     1     1     3     1     1     1     1     1     1 \n 4941  4942  4943  4944  4945  4946  4947  4948  4949  4950  4951  4952  4953 \n    1     1     1     1     1     1     1     1     1     1     1     1     3 \n 4954  4955  4956  4957  4958  4959  4960  4961  4962  4963  4964  4965  4966 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 4967  4968  4969  4970  4971  4972  4973  4974  4975  4976  4977  4978  4979 \n    1     1     1     1     1     1     1     1     3     1     1     1     1 \n 4980  4981  4982  4983  4984  4985  4986  4987  4988  4989  4990  4991  4992 \n    1     1     1     1     1     1     1     1     1     1     1     1     4 \n 4993  4994  4995  4996  4997  4998  4999  5000  5001  5002  5003  5004  5005 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5006  5007  5008  5009  5010  5011  5012  5013  5014  5015  5016  5017  5018 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5019  5020  5021  5022  5023  5024  5025  5026  5027  5028  5029  5030  5031 \n    1     1     1     3     1     1     1     1     1     1     1     1     1 \n 5032  5033  5034  5035  5036  5037  5038  5039  5040  5041  5042  5043  5044 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5045  5046  5047  5048  5049  5050  5051  5052  5053  5054  5055  5056  5057 \n    2     2     1     1     1     1     1     1     1     1     1     1     1 \n 5058  5059  5060  5061  5062  5063  5064  5065  5066  5067  5068  5069  5070 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 5071  5072  5073  5074  5075  5076  5077  5078  5079  5080  5081  5082  5083 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5084  5085  5086  5087  5088  5089  5090  5091  5092  5093  5094  5095  5096 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5097  5098  5099  5100  5101  5102  5103  5104  5105  5106  5107  5108  5109 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5110  5111  5112  5113  5114  5115  5116  5117  5118  5119  5120  5121  5122 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 5123  5124  5125  5126  5127  5128  5129  5130  5131  5132  5133  5134  5135 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 5136  5137  5138  5139  5140  5141  5142  5143  5144  5145  5146  5147  5148 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5149  5150  5151  5152  5153  5154  5155  5156  5157  5158  5159  5160  5161 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 5162  5163  5164  5165  5166  5167  5168  5169  5170  5171  5172  5173  5174 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5175  5176  5177  5178  5179  5180  5181  5182  5183  5184  5185  5186  5187 \n    2     2     1     1     1     1     1     1     1     1     1     1     1 \n 5188  5189  5190  5191  5192  5193  5194  5195  5196  5197  5198  5199  5200 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5201  5202  5203  5204  5205  5206  5207  5208  5209  5210  5211  5212  5213 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5214  5215  5216  5217  5218  5219  5220  5221  5222  5223  5224  5225  5226 \n    1     1     1     1     1     1     1     1     1     1     2     5     1 \n 5227  5228  5229  5230  5231  5232  5233  5234  5235  5236  5237  5238  5239 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5240  5241  5242  5243  5244  5245  5246  5247  5248  5249  5250  5251  5252 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 5253  5254  5255  5256  5257  5258  5259  5260  5261  5262  5263  5264  5265 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 5266  5267  5268  5269  5270  5271  5272  5273  5274  5275  5276  5277  5278 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5279  5280  5281  5282  5283  5284  5285  5286  5287  5288  5289  5290  5291 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5292  5293  5294  5295  5296  5297  5298  5299  5300  5301  5302  5303  5304 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 5305  5306  5307  5308  5309  5310  5311  5312  5313  5314  5315  5316  5317 \n    1     1     1     1     6     1     1     1     1     1     2     1     1 \n 5318  5319  5320  5321  5322  5323  5324  5325  5326  5327  5328  5329  5330 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5331  5332  5333  5334  5335  5336  5337  5338  5339  5340  5341  5342  5343 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5344  5345  5346  5347  5348  5349  5350  5351  5352  5353  5354  5355  5356 \n    1     1     1     1     3     1     1     1     1     1     1     3     2 \n 5357  5358  5359  5360  5361  5362  5363  5364  5365  5366  5367  5368  5369 \n    1     1     1     1     1     1     2     1     2     1     1     1     1 \n 5370  5371  5372  5373  5374  5375  5376  5377  5378  5379  5380  5381  5382 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5383  5384  5385  5386  5387  5388  5389  5390  5391  5392  5393  5394  5395 \n    1     2     1     1     1     1     1     1     1     1     1     2     1 \n 5396  5397  5398  5399  5400  5401  5402  5403  5404  5405  5406  5407  5408 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5409  5410  5411  5412  5413  5414  5415  5416  5417  5418  5419  5420  5421 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5422  5423  5424  5425  5426  5427  5428  5429  5430  5431  5432  5433  5434 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5435  5436  5437  5438  5439  5440  5441  5442  5443  5444  5445  5446  5447 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5448  5449  5450  5451  5452  5453  5454  5455  5456  5457  5458  5459  5460 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5461  5462  5463  5464  5465  5466  5467  5468  5469  5470  5471  5472  5473 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5474  5475  5476  5477  5478  5479  5480  5481  5482  5483  5484  5485  5486 \n    1     5     1     1     1     1     1     1     1     1     1     1     1 \n 5487  5488  5489  5490  5491  5492  5493  5494  5495  5496  5497  5498  5499 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5500  5501  5502  5503  5504  5505  5506  5507  5508  5509  5510  5511  5512 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5513  5514  5515  5516  5517  5518  5519  5520  5521  5522  5523  5524  5525 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5526  5527  5528  5529  5530  5531  5532  5533  5534  5535  5536  5537  5538 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5539  5540  5541  5542  5543  5544  5545  5546  5547  5548  5549  5550  5551 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5552  5553  5554  5555  5556  5557  5558  5559  5560  5561  5562  5563  5564 \n    1     1     6     1     1     1     1     1     1     1     1     1     1 \n 5565  5566  5567  5568  5569  5570  5571  5572  5573  5574  5575  5576  5577 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5578  5579  5580  5581  5582  5583  5584  5585  5586  5587  5588  5589  5590 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5591  5592  5593  5594  5595  5596  5597  5598  5599  5600  5601  5602  5603 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 5604  5605  5606  5607  5608  5609  5610  5611  5612  5613  5614  5615  5616 \n    1     1     1     1     1     1     1     1     5     1     1     1     1 \n 5617  5618  5619  5620  5621  5622  5623  5624  5625  5626  5627  5628  5629 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5630  5631  5632  5633  5634  5635  5636  5637  5638  5639  5640  5641  5642 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5643  5644  5645  5646  5647  5648  5649  5650  5651  5652  5653  5654  5655 \n    1     4     1     1     1     1     1     1     1     1     1     1     2 \n 5656  5657  5658  5659  5660  5661  5662  5663  5664  5665  5666  5667  5668 \n    1     1     1     4     1     1     1     1     1     1     1     1     1 \n 5669  5670  5671  5672  5673  5674  5675  5676  5677  5678  5679  5680  5681 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5682  5683  5684  5685  5686  5687  5688  5689  5690  5691  5692  5693  5694 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5695  5696  5697  5698  5699  5700  5701  5702  5703  5704  5705  5706  5707 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 5708  5709  5710  5711  5712  5713  5714  5715  5716  5717  5718  5719  5720 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5721  5722  5723  5724  5725  5726  5727  5728  5729  5730  5731  5732  5733 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5734  5735  5736  5737  5738  5739  5740  5741  5742  5743  5744  5745  5746 \n    1     1     1     1     1     1     1     1     1     1     1     4     1 \n 5747  5748  5749  5750  5751  5752  5753  5754  5755  5756  5757  5758  5759 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5760  5761  5762  5763  5764  5765  5766  5767  5768  5769  5770  5771  5772 \n    1     1     1     1     1     1     7     1     1     2     1     1     1 \n 5773  5774  5775  5776  5777  5778  5779  5780  5781  5782  5783  5784  5785 \n    1     1     1     1     1     1     1     1     1     1     4     1     2 \n 5786  5787  5788  5789  5790  5791  5792  5793  5794  5795  5796  5797  5798 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5799  5800  5801  5802  5803  5804  5805  5806  5807  5808  5809  5810  5811 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5812  5813  5814  5815  5816  5817  5818  5819  5820  5821  5822  5823  5824 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5825  5826  5827  5828  5829  5830  5831  5832  5833  5834  5835  5836  5837 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5838  5839  5840  5841  5842  5843  5844  5845  5846  5847  5848  5849  5850 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5851  5852  5853  5854  5855  5856  5857  5858  5859  5860  5861  5862  5863 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 5864  5865  5866  5867  5868  5869  5870  5871  5872  5873  5874  5875  5876 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5877  5878  5879  5880  5881  5882  5883  5884  5885  5886  5887  5888  5889 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5890  5891  5892  5893  5894  5895  5896  5897  5898  5899  5900  5901  5902 \n    1     1     1     1     1     1     1     1     1     1     1     1     4 \n 5903  5904  5905  5906  5907  5908  5909  5910  5911  5912  5913  5914  5915 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5916  5917  5918  5919  5920  5921  5922  5923  5924  5925  5926  5927  5928 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5929  5930  5931  5932  5933  5934  5935  5936  5937  5938  5939  5940  5941 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5942  5943  5944  5945  5946  5947  5948  5949  5950  5951  5952  5953  5954 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5955  5956  5957  5958  5959  5960  5961  5962  5963  5964  5965  5966  5967 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 5968  5969  5970  5971  5972  5973  5974  5975  5976  5977  5978  5979  5980 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 5981  5982  5983  5984  5985  5986  5987  5988  5989  5990  5991  5992  5993 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5994  5995  5996  5997  5998  5999  6000  6001  6002  6003  6004  6005  6006 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6007  6008  6009  6010  6011  6012  6013  6014  6015  6016  6017  6018  6019 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6020  6021  6022  6023  6024  6025  6026  6027  6028  6029  6030  6031  6032 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6033  6034  6035  6036  6037  6038  6039  6040  6041  6042  6043  6044  6045 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6046  6047  6048  6049  6050  6051  6052  6053  6054  6055  6056  6057  6058 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6059  6060  6061  6062  6063  6064  6065  6066  6067  6068  6069  6070  6071 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6072  6073  6074  6075  6076  6077  6078  6079  6080  6081  6082  6083  6084 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6085  6086  6087  6088  6089  6090  6091  6092  6093  6094  6095  6096  6097 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6098  6099  6100  6101  6102  6103  6104  6105  6106  6107  6108  6109  6110 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6111  6112  6113  6114  6115  6116  6117  6118  6119  6120  6121  6122  6123 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 6124  6125  6126  6127  6128  6129  6130  6131  6132  6133  6134  6135  6136 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6137  6138  6139  6140  6141  6142  6143  6144  6145  6146  6147  6148  6149 \n    1     1     6     1     1     1     1     1     1     1     1     1     1 \n 6150  6151  6152  6153  6154  6155  6156  6157  6158  6159  6160  6161  6162 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 6163  6164  6165  6166  6167  6168  6169  6170  6171  6172  6173  6174  6175 \n    1     4     1     1     1     1     1     1     1     1     1     1     1 \n 6176  6177  6178  6179  6180  6181  6182  6183  6184  6185  6186  6187  6188 \n    1     1     1     2     1     1     1     1     1     1     1     3     1 \n 6189  6190  6191  6192  6193  6194  6195  6196  6197  6198  6199  6200  6201 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 6202  6203  6204  6205  6206  6207  6208  6209  6210  6211  6212  6213  6214 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6215  6216  6217  6218  6219  6220  6221  6222  6223  6224  6225  6226  6227 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6228  6229  6230  6231  6232  6233  6234  6235  6236  6237  6238  6239  6240 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6241  6242  6243  6244  6245  6246  6247  6248  6249  6250  6251  6252  6253 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6254  6255  6256  6257  6258  6259  6260  6261  6262  6263  6264  6265  6266 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6267  6268  6269  6270  6271  6272  6273  6274  6275  6276  6277  6278  6279 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6280  6281  6282  6283  6284  6285  6286  6287  6288  6289  6290  6291  6292 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6293  6294  6295  6296  6297  6298  6299  6300  6301  6302  6303  6304  6305 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6306  6307  6308  6309  6310  6311  6312  6313  6314  6315  6316  6317  6318 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6319  6320  6321  6322  6323  6324  6325  6326  6327  6328  6329  6330  6331 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 6332  6333  6334  6335  6336  6337  6338  6339  6340  6341  6342  6343  6344 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6345  6346  6347  6348  6349  6350  6351  6352  6353  6354  6355  6356  6357 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6358  6359  6360  6361  6362  6363  6364  6365  6366  6367  6368  6369  6370 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6371  6372  6373  6374  6375  6376  6377  6378  6379  6380  6381  6382  6383 \n    2     1     1     1     1     1     2     1     2     1     1     1     1 \n 6384  6385  6386  6387  6388  6389  6390  6391  6392  6393  6394  6395  6396 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 6397  6398  6399  6400  6401  6402  6403  6404  6405  6406  6407  6408  6409 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6410  6411  6412  6413  6414  6415  6416  6417  6418  6419  6420  6421  6422 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6423  6424  6425  6426  6427  6428  6429  6430  6431  6432  6433  6434  6435 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6436  6437  6438  6439  6440  6441  6442  6443  6444  6445  6446  6447  6448 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6449  6450  6451  6452  6453  6454  6455  6456  6457  6458  6459  6460  6461 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6462  6463  6464  6465  6466  6467  6468  6469  6470  6471  6472  6473  6474 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 6475  6476  6477  6478  6479  6480  6481  6482  6483  6484  6485  6486  6487 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 6488  6489  6490  6491  6492  6493  6494  6495  6496  6497  6498  6499  6500 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6501  6502  6503  6504  6505  6506  6507  6508  6509  6510  6511  6512  6513 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6514  6515  6516  6517  6518  6519  6520  6521  6522  6523  6524  6525  6526 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6527  6528  6529  6530  6531  6532  6533  6534  6535  6536  6537  6538  6539 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6540  6541  6542  6543  6544  6545  6546  6547  6548  6549  6550  6551  6552 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6553  6554  6555  6556  6557  6558  6559  6560  6561  6562  6563  6564  6565 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 6566  6567  6568  6569  6570  6571  6572  6573  6574  6575  6576  6577  6578 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6579  6580  6581  6582  6583  6584  6585  6586  6587  6588  6589  6590  6591 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6592  6593  6594  6595  6596  6597  6598  6599  6600  6601  6602  6603  6604 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6605  6606  6607  6608  6609  6610  6611  6612  6613  6614  6615  6616  6617 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6618  6619  6620  6621  6622  6623  6624  6625  6626  6627  6628  6629  6630 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6631  6632  6633  6634  6635  6636  6637  6638  6639  6640  6641  6642  6643 \n    1     1     1     1     1     1     1     1     2     2     1     1     1 \n 6644  6645  6646  6647  6648  6649  6650  6651  6652  6653  6654  6655  6656 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 6657  6658  6659  6660  6661  6662  6663  6664  6665  6666  6667  6668  6669 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6670  6671  6672  6673  6674  6675  6676  6677  6678  6679  6680  6681  6682 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6683  6684  6685  6686  6687  6688  6689  6690  6691  6692  6693  6694  6695 \n    1     1     1     2     1     1     2     1     1     1     1     1     1 \n 6696  6697  6698  6699  6700  6701  6702  6703  6704  6705  6706  6707  6708 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6709  6710  6711  6712  6713  6714  6715  6716  6717  6718  6719  6720  6721 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6722  6723  6724  6725  6726  6727  6728  6729  6730  6731  6732  6733  6734 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 6735  6736  6737  6738  6739  6740  6741  6742  6743  6744  6745  6746  6747 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6748  6749  6750  6751  6752  6753  6754  6755  6756  6757  6758  6759  6760 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6761  6762  6763  6764  6765  6766  6767  6768  6769  6770  6771  6772  6773 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 6774  6775  6776  6777  6778  6779  6780  6781  6782  6783  6784  6785  6786 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6787  6788  6789  6790  6791  6792  6793  6794  6795  6796  6797  6798  6799 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 6800  6801  6802  6803  6804  6805  6806  6807  6808  6809  6810  6811  6812 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6813  6814  6815  6816  6817  6818  6819  6820  6821  6822  6823  6824  6825 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6826  6827  6828  6829  6830  6831  6832  6833  6834  6835  6836  6837  6838 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6839  6840  6841  6842  6843  6844  6845  6846  6847  6848  6849  6850  6851 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 6852  6853  6854  6855  6856  6857  6858  6859  6860  6861  6862  6863  6864 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6865  6866  6867  6868  6869  6870  6871  6872  6873  6874  6875  6876  6877 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6878  6879  6880  6881  6882  6883  6884  6885  6886  6887  6888  6889  6890 \n    1     1     1     2     1     1     1     2     1     1     1     1     1 \n 6891  6892  6893  6894  6895  6896  6897  6898  6899  6900  6901  6902  6903 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6904  6905  6906  6907  6908  6909  6910  6911  6912  6913  6914  6915  6916 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6917  6918  6919  6920  6921  6922  6923  6924  6925  6926  6927  6928  6929 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6930  6931  6932  6933  6934  6935  6936  6937  6938  6939  6940  6941  6942 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6943  6944  6945  6946  6947  6948  6949  6950  6951  6952  6953  6954  6955 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6956  6957  6958  6959  6960  6961  6962  6963  6964  6965  6966  6967  6968 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 6969  6970  6971  6972  6973  6974  6975  6976  6977  6978  6979  6980  6981 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6982  6983  6984  6985  6986  6987  6988  6989  6990  6991  6992  6993  6994 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6995  6996  6997  6998  6999  7000  7001  7002  7003  7004  7005  7006  7007 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7008  7009  7010  7011  7012  7013  7014  7015  7016  7017  7018  7019  7020 \n    1     1     1     3     3     2     1     1     1     1     1     1     1 \n 7021  7022  7023  7024  7025  7026  7027  7028  7029  7030  7031  7032  7033 \n    1     1     2     1     1     1     1     1     1     1     2     1     1 \n 7034  7035  7036  7037  7038  7039  7040  7041  7042  7043  7044  7045  7046 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7047  7048  7049  7050  7051  7052  7053  7054  7055  7056  7057  7058  7059 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7060  7061  7062  7063  7064  7065  7066  7067  7068  7069  7070  7071  7072 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7073  7074  7075  7076  7077  7078  7079  7080  7081  7082  7083  7084  7085 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 7086  7087  7088  7089  7090  7091  7092  7093  7094  7095  7096  7097  7098 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 7099  7100  7101  7102  7103  7104  7105  7106  7107  7108  7109  7110  7111 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7112  7113  7114  7115  7116  7117  7118  7119  7120  7121  7122  7123  7124 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7125  7126  7127  7128  7129  7130  7131  7132  7133  7134  7135  7136  7137 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 7138  7139  7140  7141  7142  7143  7144  7145  7146  7147  7148  7149  7150 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 7151  7152  7153  7154  7155  7156  7157  7158  7159  7160  7161  7162  7163 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7164  7165  7166  7167  7168  7169  7170  7171  7172  7173  7174  7175  7176 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7177  7178  7179  7180  7181  7182  7183  7184  7185  7186  7187  7188  7189 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7190  7191  7192  7193  7194  7195  7196  7197  7198  7199  7200  7201  7202 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7203  7204  7205  7206  7207  7208  7209  7210  7211  7212  7213  7214  7215 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7216  7217  7218  7219  7220  7221  7222  7223  7224  7225  7226  7227  7228 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7229  7230  7231  7232  7233  7234  7235  7236  7237  7238  7239  7240  7241 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7242  7243  7244  7245  7246  7247  7248  7249  7250  7251  7252  7253  7254 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7255  7256  7257  7258  7259  7260  7261  7262  7263  7264  7265  7266  7267 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7268  7269  7270  7271  7272  7273  7274  7275  7276  7277  7278  7279  7280 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7281  7282  7283  7284  7285  7286  7287  7288  7289  7290  7291  7292  7293 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7294  7295  7296  7297  7298  7299  7300  7301  7302  7303  7304  7305  7306 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7307  7308  7309  7310  7311  7312  7313  7314  7315  7316  7317  7318  7319 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7320  7321  7322  7323  7324  7325  7326  7327  7328  7329  7330  7331  7332 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7333  7334  7335  7336  7337  7338  7339  7340  7341  7342  7343  7344  7345 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7346  7347  7348  7349  7350  7351  7352  7353  7354  7355  7356  7357  7358 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7359  7360  7361  7362  7363  7364  7365  7366  7367  7368  7369  7370  7371 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7372  7373  7374  7375  7376  7377  7378  7379  7380  7381  7382  7383  7384 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7385  7386  7387  7388  7389  7390  7391  7392  7393  7394  7395  7396  7397 \n    1     1     1     1     3     1     1     1     1     1     1     1     1 \n 7398  7399  7400  7401  7402  7403  7404  7405  7406  7407  7408  7409  7410 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7411  7412  7413  7414  7415  7416  7417  7418  7419  7420  7421  7422  7423 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7424  7425  7426  7427  7428  7429  7430  7431  7432  7433  7434  7435  7436 \n    1     1     2     1     1     2     1     1     1     1     1     1     1 \n 7437  7438  7439  7440  7441  7442  7443  7444  7445  7446  7447  7448  7449 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7450  7451  7452  7453  7454  7455  7456  7457  7458  7459  7460  7461  7462 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7463  7464  7465  7466  7467  7468  7469  7470  7471  7472  7473  7474  7475 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7476  7477  7478  7479  7480  7481  7482  7483  7484  7485  7486  7487  7488 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7489  7490  7491  7492  7493  7494  7495  7496  7497  7498  7499  7500  7501 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7502  7503  7504  7505  7506  7507  7508  7509  7510  7511  7512  7513  7514 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7515  7516  7517  7518  7519  7520  7521  7522  7523  7524  7525  7526  7527 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 7528  7529  7530  7531  7532  7533  7534  7535  7536  7537  7538  7539  7540 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 7541  7542  7543  7544  7545  7546  7547  7548  7549  7550  7551  7552  7553 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 7554  7555  7556  7557  7558  7559  7560  7561  7562  7563  7564  7565  7566 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 7567  7568  7569  7570  7571  7572  7573  7574  7575  7576  7577  7578  7579 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7580  7581  7582  7583  7584  7585  7586  7587  7588  7589  7590  7591  7592 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7593  7594  7595  7596  7597  7598  7599  7600  7601  7602  7603  7604  7605 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7606  7607  7608  7609  7610  7611  7612  7613  7614  7615  7616  7617  7618 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7619  7620  7621  7622  7623  7624  7625  7626  7627  7628  7629  7630  7631 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7632  7633  7634  7635  7636  7637  7638  7639  7640  7641  7642  7643  7644 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7645  7646  7647  7648  7649  7650  7651  7652  7653  7654  7655  7656  7657 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7658  7659  7660  7661  7662  7663  7664  7665  7666  7667  7668  7669  7670 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7671  7672  7673  7674  7675  7676  7677  7678  7679  7680  7681  7682  7683 \n    1     1     4     2     1     2     1     1     1     1     1     1     1 \n 7684  7685  7686  7687  7688  7689  7690  7691  7692  7693  7694  7695  7696 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7697  7698  7699  7700  7701  7702  7703  7704  7705  7706  7707  7708  7709 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7710  7711  7712  7713  7714  7715  7716  7717  7718  7719  7720  7721  7722 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7723  7724  7725  7726  7727  7728  7729  7730  7731  7732  7733  7734  7735 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7736  7737  7738  7739  7740  7741  7742  7743  7744  7745  7746  7747  7748 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 7749  7750  7751  7752  7753  7754  7755  7756  7757  7758  7759  7760  7761 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n 7762  7763  7764  7765  7766  7767  7768  7769  7770  7771  7772  7773  7774 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7775  7776  7777  7778  7779  7780  7781  7782  7783  7784  7785  7786  7787 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 7788  7789  7790  7791  7792  7793  7794  7795  7796  7797  7798  7799  7800 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 7801  7802  7803  7804  7805  7806  7807  7808  7809  7810  7811  7812  7813 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7814  7815  7816  7817  7818  7819  7820  7821  7822  7823  7824  7825  7826 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 7827  7828  7829  7830  7831  7832  7833  7834  7835  7836  7837  7838  7839 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7840  7841  7842  7843  7844  7845  7846  7847  7848  7849  7850  7851  7852 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7853  7854  7855  7856  7857  7858  7859  7860  7861  7862  7863  7864  7865 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7866  7867  7868  7869  7870  7871  7872  7873  7874  7875  7876  7877  7878 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7879  7880  7881  7882  7883  7884  7885  7886  7887  7888  7889  7890  7891 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7892  7893  7894  7895  7896  7897  7898  7899  7900  7901  7902  7903  7904 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 7905  7906  7907  7908  7909  7910  7911  7912  7913  7914  7915  7916  7917 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7918  7919  7920  7921  7922  7923  7924  7925  7926  7927  7928  7929  7930 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7931  7932  7933  7934  7935  7936  7937  7938  7939  7940  7941  7942  7943 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7944  7945  7946  7947  7948  7949  7950  7951  7952  7953  7954  7955  7956 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7957  7958  7959  7960  7961  7962  7963  7964  7965  7966  7967  7968  7969 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7970  7971  7972  7973  7974  7975  7976  7977  7978  7979  7980  7981  7982 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7983  7984  7985  7986  7987  7988  7989  7990  7991  7992  7993  7994  7995 \n    2     1     1     1     2     1     1     1     1     1     1     1     1 \n 7996  7997  7998  7999  8000  8001  8002  8003  8004  8005  8006  8007  8008 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8009  8010  8011  8012  8013  8014  8015  8016  8017  8018  8019  8020  8021 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8022  8023  8024  8025  8026  8027  8028  8029  8030  8031  8032  8033  8034 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8035  8036  8037  8038  8039  8040  8041  8042  8043  8044  8045  8046  8047 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 8048  8049  8050  8051  8052  8053  8054  8055  8056  8057  8058  8059  8060 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8061  8062  8063  8064  8065  8066  8067  8068  8069  8070  8071  8072  8073 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8074  8075  8076  8077  8078  8079  8080  8081  8082  8083  8084  8085  8086 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8087  8088  8089  8090  8091  8092  8093  8094  8095  8096  8097  8098  8099 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8100  8101  8102  8103  8104  8105  8106  8107  8108  8109  8110  8111  8112 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8113  8114  8115  8116  8117  8118  8119  8120  8121  8122  8123  8124  8125 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8126  8127  8128  8129  8130  8131  8132  8133  8134  8135  8136  8137  8138 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8139  8140  8141  8142  8143  8144  8145  8146  8147  8148  8149  8150  8151 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8152  8153  8154  8155  8156  8157  8158  8159  8160  8161  8162  8163  8164 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8165  8166  8167  8168  8169  8170  8171  8172  8173  8174  8175  8176  8177 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 8178  8179  8180  8181  8182  8183  8184  8185  8186  8187  8188  8189  8190 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8191  8192  8193  8194  8195  8196  8197  8198  8199  8200  8201  8202  8203 \n    1     1     1     1     1     1     1     1     3     1     1     1     1 \n 8204  8205  8206  8207  8208  8209  8210  8211  8212  8213  8214  8215  8216 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8217  8218  8219  8220  8221  8222  8223  8224  8225  8226  8227  8228  8229 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 8230  8231  8232  8233  8234  8235  8236  8237  8238  8239  8240  8241  8242 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8243  8244  8245  8246  8247  8248  8249  8250  8251  8252  8253  8254  8255 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 8256  8257  8258  8259  8260  8261  8262  8263  8264  8265  8266  8267  8268 \n    1     1     1     1     1     1     1     1     3     1     1     1     1 \n 8269  8270  8271  8272  8273  8274  8275  8276  8277  8278  8279  8280  8281 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 8282  8283  8284  8285  8286  8287  8288  8289  8290  8291  8292  8293  8294 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8295  8296  8297  8298  8299  8300  8301  8302  8303  8304  8305  8306  8307 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 8308  8309  8310  8311  8312  8313  8314  8315  8316  8317  8318  8319  8320 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 8321  8322  8323  8324  8325  8326  8327  8328  8329  8330  8331  8332  8333 \n    1     1     1     4     1     1     1     1     1     1     1     1     1 \n 8334  8335  8336  8337  8338  8339  8340  8341  8342  8343  8344  8345  8346 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8347  8348  8349  8350  8351  8352  8353  8354  8355  8356  8357  8358  8359 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8360  8361  8362  8363  8364  8365  8366  8367  8368  8369  8370  8371  8372 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8373  8374  8375  8376  8377  8378  8379  8380  8381  8382  8383  8384  8385 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8386  8387  8388  8389  8390  8391  8392  8393  8394  8395  8396  8397  8398 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8399  8400  8401  8402  8403  8404  8405  8406  8407  8408  8409  8410  8411 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 8412  8413  8414  8415  8416  8417  8418  8419  8420  8421  8422  8423  8424 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8425  8426  8427  8428  8429  8430  8431  8432  8433  8434  8435  8436  8437 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n 8438  8439  8440  8441  8442  8443  8444  8445  8446  8447  8448  8449  8450 \n    1     1     1     1     1     3     1     1     1     1     1     1     1 \n 8451  8452  8453  8454  8455  8456  8457  8458  8459  8460  8461  8462  8463 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8464  8465  8466  8467  8468  8469  8470  8471  8472  8473  8474  8475  8476 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 8477  8478  8479  8480  8481  8482  8483  8484  8485  8486  8487  8488  8489 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 8490  8491  8492  8493  8494  8495  8496  8497  8498  8499  8500  8501  8502 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8503  8504  8505  8506  8507  8508  8509  8510  8511  8512  8513  8514  8515 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8516  8517  8518  8519  8520  8521  8522  8523  8524  8525  8526  8527  8528 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8529  8530  8531  8532  8533  8534  8535  8536  8537  8538  8539  8540  8541 \n    1     1     1     1     1     1     1     1     1     1     1     1     5 \n 8542  8543  8544  8545  8546  8547  8548  8549  8550  8551  8552  8553  8554 \n    3     1     1     1     1     1     1     7     1     1     1     1     1 \n 8555  8556  8557  8558  8559  8560  8561  8562  8563  8564  8565  8566  8567 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8568  8569  8570  8571  8572  8573  8574  8575  8576  8577  8578  8579  8580 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 8581  8582  8583  8584  8585  8586  8587  8588  8589  8590  8591  8592  8593 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8594  8595  8596  8597  8598  8599  8600  8601  8602  8603  8604  8605  8606 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8607  8608  8609  8610  8611  8612  8613  8614  8615  8616  8617  8618  8619 \n    1     1     1     1     1     1     1     1     1     1     1     3     1 \n 8620  8621  8622  8623  8624  8625  8626  8627  8628  8629  8630  8631  8632 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8633  8634  8635  8636  8637  8638  8639  8640  8641  8642  8643  8644  8645 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 8646  8647  8648  8649  8650  8651  8652  8653  8654  8655  8656  8657  8658 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8659  8660  8661  8662  8663  8664  8665  8666  8667  8668  8669  8670  8671 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8672  8673  8674  8675  8676  8677  8678  8679  8680  8681  8682  8683  8684 \n    1     1     1     1     1     1     3     1     1     1     1     1     1 \n 8685  8686  8687  8688  8689  8690  8691  8692  8693  8694  8695  8696  8697 \n    1     1     1     1     1     1     1     1     1     1     1     1     3 \n 8698  8699  8700  8701  8702  8703  8704  8705  8706  8707  8708  8709  8710 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 8711  8712  8713  8714  8715  8716  8717  8718  8719  8720  8721  8722  8723 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 8724  8725  8726  8727  8728  8729  8730  8731  8732  8733  8734  8735  8736 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8737  8738  8739  8740  8741  8742  8743  8744  8745  8746  8747  8748  8749 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8750  8751  8752  8753  8754  8755  8756  8757  8758  8759  8760  8761  8762 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8763  8764  8765  8766  8767  8768  8769  8770  8771  8772  8773  8774  8775 \n    1     1     1     1     1     1     1     1     1     4     1     1     1 \n 8776  8777  8778  8779  8780  8781  8782  8783  8784  8785  8786  8787  8788 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8789  8790  8791  8792  8793  8794  8795  8796  8797  8798  8799  8800  8801 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8802  8803  8804  8805  8806  8807  8808  8809  8810  8811  8812  8813  8814 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8815  8816  8817  8818  8819  8820  8821  8822  8823  8824  8825  8826  8827 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8828  8829  8830  8831  8832  8833  8834  8835  8836  8837  8838  8839  8840 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8841  8842  8843  8844  8845  8846  8847  8848  8849  8850  8851  8852  8853 \n    1     1     1     1     2     1     1     1     2     1     1     1     1 \n 8854  8855  8856  8857  8858  8859  8860  8861  8862  8863  8864  8865  8866 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8867  8868  8869  8870  8871  8872  8873  8874  8875  8876  8877  8878  8879 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8880  8881  8882  8883  8884  8885  8886  8887  8888  8889  8890  8891  8892 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8893  8894  8895  8896  8897  8898  8899  8900  8901  8902  8903  8904  8905 \n    4     1     1     1     1     1     1     1     1     1     1     1     1 \n 8906  8907  8908  8909  8910  8911  8912  8913  8914  8915  8916  8917  8918 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8919  8920  8921  8922  8923  8924  8925  8926  8927  8928  8929  8930  8931 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8932  8933  8934  8935  8936  8937  8938  8939  8940  8941  8942  8943  8944 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8945  8946  8947  8948  8949  8950  8951  8952  8953  8954  8955  8956  8957 \n    1     1     4     1     2     1     1     1     1     1     1     1     1 \n 8958  8959  8960  8961  8962  8963  8964  8965  8966  8967  8968  8969  8970 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 8971  8972  8973  8974  8975  8976  8977  8978  8979  8980  8981  8982  8983 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8984  8985  8986  8987  8988  8989  8990  8991  8992  8993  8994  8995  8996 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 8997  8998  8999  9000  9001  9002  9003  9004  9005  9006  9007  9008  9009 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 9010  9011  9012  9013  9014  9015  9016  9017  9018  9019  9020  9021  9022 \n    1     1     1     1     3     1     1     1     1     1     1     1     2 \n 9023  9024  9025  9026  9027  9028  9029  9030  9031  9032  9033  9034  9035 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9036  9037  9038  9039  9040  9041  9042  9043  9044  9045  9046  9047  9048 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9049  9050  9051  9052  9053  9054  9055  9056  9057  9058  9059  9060  9061 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9062  9063  9064  9065  9066  9067  9068  9069  9070  9071  9072  9073  9074 \n    1     4     1     1     1     1     1     1     1     1     1     1     1 \n 9075  9076  9077  9078  9079  9080  9081  9082  9083  9084  9085  9086  9087 \n    1     1     1     1     3     1     1     1     1     1     1     1     1 \n 9088  9089  9090  9091  9092  9093  9094  9095  9096  9097  9098  9099  9100 \n    1     1     1     1     1     1     1     1     4     1     1     1     1 \n 9101  9102  9103  9104  9105  9106  9107  9108  9109  9110  9111  9112  9113 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9114  9115  9116  9117  9118  9119  9120  9121  9122  9123  9124  9125  9126 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9127  9128  9129  9130  9131  9132  9133  9134  9135  9136  9137  9138  9139 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9140  9141  9142  9143  9144  9145  9146  9147  9148  9149  9150  9151  9152 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9153  9154  9155  9156  9157  9158  9159  9160  9161  9162  9163  9164  9165 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n 9166  9167  9168  9169  9170  9171  9172  9173  9174  9175  9176  9177  9178 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9179  9180  9181  9182  9183  9184  9185  9186  9187  9188  9189  9190  9191 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9192  9193  9194  9195  9196  9197  9198  9199  9200  9201  9202  9203  9204 \n    1     1     1     1     1     1     7     1     1     1     1     1     1 \n 9205  9206  9207  9208  9209  9210  9211  9212  9213  9214  9215  9216  9217 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9218  9219  9220  9221  9222  9223  9224  9225  9226  9227  9228  9229  9230 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 9231  9232  9233  9234  9235  9236  9237  9238  9239  9240  9241  9242  9243 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9244  9245  9246  9247  9248  9249  9250  9251  9252  9253  9254  9255  9256 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9257  9258  9259  9260  9261  9262  9263  9264  9265  9266  9267  9268  9269 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9270  9271  9272  9273  9274  9275  9276  9277  9278  9279  9280  9281  9282 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9283  9284  9285  9286  9287  9288  9289  9290  9291  9292  9293  9294  9295 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n 9296  9297  9298  9299  9300  9301  9302  9303  9304  9305  9306  9307  9308 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 9309  9310  9311  9312  9313  9314  9315  9316  9317  9318  9319  9320  9321 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9322  9323  9324  9325  9326  9327  9328  9329  9330  9331  9332  9333  9334 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9335  9336  9337  9338  9339  9340  9341  9342  9343  9344  9345  9346  9347 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9348  9349  9350  9351  9352  9353  9354  9355  9356  9357  9358  9359  9360 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9361  9362  9363  9364  9365  9366  9367  9368  9369  9370  9371  9372  9373 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9374  9375  9376  9377  9378  9379  9380  9381  9382  9383  9384  9385  9386 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n 9387  9388  9389  9390  9391  9392  9393  9394  9395  9396  9397  9398  9399 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 9400  9401  9402  9403  9404  9405  9406  9407  9408  9409  9410  9411  9412 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9413  9414  9415  9416  9417  9418  9419  9420  9421  9422  9423  9424  9425 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9426  9427  9428  9429  9430  9431  9432  9433  9434  9435  9436  9437  9438 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9439  9440  9441  9442  9443  9444  9445  9446  9447  9448  9449  9450  9451 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9452  9453  9454  9455  9456  9457  9458  9459  9460  9461  9462  9463  9464 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9465  9466  9467  9468  9469  9470  9471  9472  9473  9474  9475  9476  9477 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9478  9479  9480  9481  9482  9483  9484  9485  9486  9487  9488  9489  9490 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9491  9492  9493  9494  9495  9496  9497  9498  9499  9500  9501  9502  9503 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 9504  9505  9506  9507  9508  9509  9510  9511  9512  9513  9514  9515  9516 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9517  9518  9519  9520  9521  9522  9523  9524  9525  9526  9527  9528  9529 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9530  9531  9532  9533  9534  9535  9536  9537  9538  9539  9540  9541  9542 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9543  9544  9545  9546  9547  9548  9549  9550  9551  9552  9553  9554  9555 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 9556  9557  9558  9559  9560  9561  9562  9563  9564  9565  9566  9567  9568 \n    1     1     2     2     1     1     1     1     1     1     1     1     1 \n 9569  9570  9571  9572  9573  9574  9575  9576  9577  9578  9579  9580  9581 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9582  9583  9584  9585  9586  9587  9588  9589  9590  9591  9592  9593  9594 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n 9595  9596  9597  9598  9599  9600  9601  9602  9603  9604  9605  9606  9607 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 9608  9609  9610  9611  9612  9613  9614  9615  9616  9617  9618  9619  9620 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9621  9622  9623  9624  9625  9626  9627  9628  9629  9630  9631  9632  9633 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n 9634  9635  9636  9637  9638  9639  9640  9641  9642  9643  9644  9645  9646 \n    1     1     1     1     1     1     1     1     1     1     3     1     1 \n 9647  9648  9649  9650  9651  9652  9653  9654  9655  9656  9657  9658  9659 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 9660  9661  9662  9663  9664  9665  9666  9667  9668  9669  9670  9671  9672 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9673  9674  9675  9676  9677  9678  9679  9680  9681  9682  9683  9684  9685 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9686  9687  9688  9689  9690  9691  9692  9693  9694  9695  9696  9697  9698 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9699  9700  9701  9702  9703  9704  9705  9706  9707  9708  9709  9710  9711 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9712  9713  9714  9715  9716  9717  9718  9719  9720  9721  9722  9723  9724 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n 9725  9726  9727  9728  9729  9730  9731  9732  9733  9734  9735  9736  9737 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9738  9739  9740  9741  9742  9743  9744  9745  9746  9747  9748  9749  9750 \n    1     1     1     1     1     1     1     1     2     2     1     1     1 \n 9751  9752  9753  9754  9755  9756  9757  9758  9759  9760  9761  9762  9763 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9764  9765  9766  9767  9768  9769  9770  9771  9772  9773  9774  9775  9776 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9777  9778  9779  9780  9781  9782  9783  9784  9785  9786  9787  9788  9789 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9790  9791  9792  9793  9794  9795  9796  9797  9798  9799  9800  9801  9802 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9803  9804  9805  9806  9807  9808  9809  9810  9811  9812  9813  9814  9815 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9816  9817  9818  9819  9820  9821  9822  9823  9824  9825  9826  9827  9828 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9829  9830  9831  9832  9833  9834  9835  9836  9837  9838  9839  9840  9841 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n 9842  9843  9844  9845  9846  9847  9848  9849  9850  9851  9852  9853  9854 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9855  9856  9857  9858  9859  9860  9861  9862  9863  9864  9865  9866  9867 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n 9868  9869  9870  9871  9872  9873  9874  9875  9876  9877  9878  9879  9880 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9881  9882  9883  9884  9885  9886  9887  9888  9889  9890  9891  9892  9893 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n 9894  9895  9896  9897  9898  9899  9900  9901  9902  9903  9904  9905  9906 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n 9907  9908  9909  9910  9911  9912  9913  9914  9915  9916  9917  9918  9919 \n    1     1     2     1     1     1     1     1     2     1     1     1     1 \n 9920  9921  9922  9923  9924  9925  9926  9927  9928  9929  9930  9931  9932 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n 9933  9934  9935  9936  9937  9938  9939  9940  9941  9942  9943  9944  9945 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9946  9947  9948  9949  9950  9951  9952  9953  9954  9955  9956  9957  9958 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9959  9960  9961  9962  9963  9964  9965  9966  9967  9968  9969  9970  9971 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9972  9973  9974  9975  9976  9977  9978  9979  9980  9981  9982  9983  9984 \n    1     2     1     1     1     1     2     1     1     1     1     1     1 \n 9985  9986  9987  9988  9989  9990  9991  9992  9993  9994  9995  9996  9997 \n    1     1     1     2     1     1     1     1     1     1     2     1     1 \n 9998  9999 10000 10001 10002 10003 10004 10005 10006 10007 10008 10009 10010 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10011 10012 10013 10014 10015 10016 10017 10018 10019 10020 10021 10022 10023 \n    1     1     1     1     1     1     1     3     1     1     1     1     1 \n10024 10025 10026 10027 10028 10029 10030 10031 10032 10033 10034 10035 10036 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10037 10038 10039 10040 10041 10042 10043 10044 10045 10046 10047 10048 10049 \n    3     1     1     1     1     1     1     1     1     1     1     1     1 \n10050 10051 10052 10053 10054 10055 10056 10057 10058 10059 10060 10061 10062 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10063 10064 10065 10066 10067 10068 10069 10070 10071 10072 10073 10074 10075 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10076 10077 10078 10079 10080 10081 10082 10083 10084 10085 10086 10087 10088 \n    1     1     2     1     1     1     1     1     2     1     1     1     1 \n10089 10090 10091 10092 10093 10094 10095 10096 10097 10098 10099 10100 10101 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10102 10103 10104 10105 10106 10107 10108 10109 10110 10111 10112 10113 10114 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10115 10116 10117 10118 10119 10120 10121 10122 10123 10124 10125 10126 10127 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10128 10129 10130 10131 10132 10133 10134 10135 10136 10137 10138 10139 10140 \n    1     1     1     1     1     1     1     1     1     1     3     1     1 \n10141 10142 10143 10144 10145 10146 10147 10148 10149 10150 10151 10152 10153 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10154 10155 10156 10157 10158 10159 10160 10161 10162 10163 10164 10165 10166 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10167 10168 10169 10170 10171 10172 10173 10174 10175 10176 10177 10178 10179 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10180 10181 10182 10183 10184 10185 10186 10187 10188 10189 10190 10191 10192 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10193 10194 10195 10196 10197 10198 10199 10200 10201 10202 10203 10204 10205 \n    1     2     1     1     6     1     1     1     1     1     1     1     1 \n10206 10207 10208 10209 10210 10211 10212 10213 10214 10215 10216 10217 10218 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10219 10220 10221 10222 10223 10224 10225 10226 10227 10228 10229 10230 10231 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10232 10233 10234 10235 10236 10237 10238 10239 10240 10241 10242 10243 10244 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10245 10246 10247 10248 10249 10250 10251 10252 10253 10254 10255 10256 10257 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n10258 10259 10260 10261 10262 10263 10264 10265 10266 10267 10268 10269 10270 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10271 10272 10273 10274 10275 10276 10277 10278 10279 10280 10281 10282 10283 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10284 10285 10286 10287 10288 10289 10290 10291 10292 10293 10294 10295 10296 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10297 10298 10299 10300 10301 10302 10303 10304 10305 10306 10307 10308 10309 \n    2     1     1     1     1     2     1     1     1     1     1     1     1 \n10310 10311 10312 10313 10314 10315 10316 10317 10318 10319 10320 10321 10322 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10323 10324 10325 10326 10327 10328 10329 10330 10331 10332 10333 10334 10335 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10336 10337 10338 10339 10340 10341 10342 10343 10344 10345 10346 10347 10348 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n10349 10350 10351 10352 10353 10354 10355 10356 10357 10358 10359 10360 10361 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10362 10363 10364 10365 10366 10367 10368 10369 10370 10371 10372 10373 10374 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10375 10376 10377 10378 10379 10380 10381 10382 10383 10384 10385 10386 10387 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10388 10389 10390 10391 10392 10393 10394 10395 10396 10397 10398 10399 10400 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10401 10402 10403 10404 10405 10406 10407 10408 10409 10410 10411 10412 10413 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10414 10415 10416 10417 10418 10419 10420 10421 10422 10423 10424 10425 10426 \n    1     1     1     1     1     1     1     1     1     1     1     5     1 \n10427 10428 10429 10430 10431 10432 10433 10434 10435 10436 10437 10438 10439 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10440 10441 10442 10443 10444 10445 10446 10447 10448 10449 10450 10451 10452 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10453 10454 10455 10456 10457 10458 10459 10460 10461 10462 10463 10464 10465 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10466 10467 10468 10469 10470 10471 10472 10473 10474 10475 10476 10477 10478 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n10479 10480 10481 10482 10483 10484 10485 10486 10487 10488 10489 10490 10491 \n    1     1     1     1     1     1     2     1     1     1     1     1     2 \n10492 10493 10494 10495 10496 10497 10498 10499 10500 10501 10502 10503 10504 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n10505 10506 10507 10508 10509 10510 10511 10512 10513 10514 10515 10516 10517 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10518 10519 10520 10521 10522 10523 10524 10525 10526 10527 10528 10529 10530 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10531 10532 10533 10534 10535 10536 10537 10538 10539 10540 10541 10542 10543 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10544 10545 10546 10547 10548 10549 10550 10551 10552 10553 10554 10555 10556 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n10557 10558 10559 10560 10561 10562 10563 10564 10565 10566 10567 10568 10569 \n    2     1     1     1     1     1     1     1     1     1     1     2     1 \n10570 10571 10572 10573 10574 10575 10576 10577 10578 10579 10580 10581 10582 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10583 10584 10585 10586 10587 10588 10589 10590 10591 10592 10593 10594 10595 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n10596 10597 10598 10599 10600 10601 10602 10603 10604 10605 10606 10607 10608 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10609 10610 10611 10612 10613 10614 10615 10616 10617 10618 10619 10620 10621 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10622 10623 10624 10625 10626 10627 10628 10629 10630 10631 10632 10633 10634 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10635 10636 10637 10638 10639 10640 10641 10642 10643 10644 10645 10646 10647 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10648 10649 10650 10651 10652 10653 10654 10655 10656 10657 10658 10659 10660 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10661 10662 10663 10664 10665 10666 10667 10668 10669 10670 10671 10672 10673 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n10674 10675 10676 10677 10678 10679 10680 10681 10682 10683 10684 10685 10686 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10687 10688 10689 10690 10691 10692 10693 10694 10695 10696 10697 10698 10699 \n    1     1     1     2     1     4     1     1     1     1     1     1     1 \n10700 10701 10702 10703 10704 10705 10706 10707 10708 10709 10710 10711 10712 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10713 10714 10715 10716 10717 10718 10719 10720 10721 10722 10723 10724 10725 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10726 10727 10728 10729 10730 10731 10732 10733 10734 10735 10736 10737 10738 \n    1     1     5     1     1     1     1     1     1     1     1     1     1 \n10739 10740 10741 10742 10743 10744 10745 10746 10747 10748 10749 10750 10751 \n    3     1     3     1     1     1     2     2     1     1     2     1     1 \n10752 10753 10754 10755 10756 10757 10758 10759 10760 10761 10762 10763 10764 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10765 10766 10767 10768 10769 10770 10771 10772 10773 10774 10775 10776 10777 \n    1     1     1     1     1     2     1     1     6     1     1     1     1 \n10778 10779 10780 10781 10782 10783 10784 10785 10786 10787 10788 10789 10790 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10791 10792 10793 10794 10795 10796 10797 10798 10799 10800 10801 10802 10803 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10804 10805 10806 10807 10808 10809 10810 10811 10812 10813 10814 10815 10816 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10817 10818 10819 10820 10821 10822 10823 10824 10825 10826 10827 10828 10829 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10830 10831 10832 10833 10834 10835 10836 10837 10838 10839 10840 10841 10842 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10843 10844 10845 10846 10847 10848 10849 10850 10851 10852 10853 10854 10855 \n    1     1     7     1     1     1     1     1     1     1     1     1     1 \n10856 10857 10858 10859 10860 10861 10862 10863 10864 10865 10866 10867 10868 \n    1     1     1     1     2     1     1     1     1     1     1     2     1 \n10869 10870 10871 10872 10873 10874 10875 10876 10877 10878 10879 10880 10881 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n10882 10883 10884 10885 10886 10887 10888 10889 10890 10891 10892 10893 10894 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n10895 10896 10897 10898 10899 10900 10901 10902 10903 10904 10905 10906 10907 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10908 10909 10910 10911 10912 10913 10914 10915 10916 10917 10918 10919 10920 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10921 10922 10923 10924 10925 10926 10927 10928 10929 10930 10931 10932 10933 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10934 10935 10936 10937 10938 10939 10940 10941 10942 10943 10944 10945 10946 \n    1     1     1     1     1     1     1     2     1     1     2     1     1 \n10947 10948 10949 10950 10951 10952 10953 10954 10955 10956 10957 10958 10959 \n    1     1     1     1     1     1     1     1     1     6     1     1     1 \n10960 10961 10962 10963 10964 10965 10966 10967 10968 10969 10970 10971 10972 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10973 10974 10975 10976 10977 10978 10979 10980 10981 10982 10983 10984 10985 \n    1     1     1     1     1     1     1     3     1     1     1     1     1 \n10986 10987 10988 10989 10990 10991 10992 10993 10994 10995 10996 10997 10998 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10999 11000 11001 11002 11003 11004 11005 11006 11007 11008 11009 11010 11011 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11012 11013 11014 11015 11016 11017 11018 11019 11020 11021 11022 11023 11024 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11025 11026 11027 11028 11029 11030 11031 11032 11033 11034 11035 11036 11037 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11038 11039 11040 11041 11042 11043 11044 11045 11046 11047 11048 11049 11050 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11051 11052 11053 11054 11055 11056 11057 11058 11059 11060 11061 11062 11063 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11064 11065 11066 11067 11068 11069 11070 11071 11072 11073 11074 11075 11076 \n    1     1     1     1     1     1     1     1     2     1     1     2     1 \n11077 11078 11079 11080 11081 11082 11083 11084 11085 11086 11087 11088 11089 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11090 11091 11092 11093 11094 11095 11096 11097 11098 11099 11100 11101 11102 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n11103 11104 11105 11106 11107 11108 11109 11110 11111 11112 11113 11114 11115 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11116 11117 11118 11119 11120 11121 11122 11123 11124 11125 11126 11127 11128 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11129 11130 11131 11132 11133 11134 11135 11136 11137 11138 11139 11140 11141 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11142 11143 11144 11145 11146 11147 11148 11149 11150 11151 11152 11153 11154 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11155 11156 11157 11158 11159 11160 11161 11162 11163 11164 11165 11166 11167 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11168 11169 11170 11171 11172 11173 11174 11175 11176 11177 11178 11179 11180 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11181 11182 11183 11184 11185 11186 11187 11188 11189 11190 11191 11192 11193 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11194 11195 11196 11197 11198 11199 11200 11201 11202 11203 11204 11205 11206 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11207 11208 11209 11210 11211 11212 11213 11214 11215 11216 11217 11218 11219 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11220 11221 11222 11223 11224 11225 11226 11227 11228 11229 11230 11231 11232 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11233 11234 11235 11236 11237 11238 11239 11240 11241 11242 11243 11244 11245 \n    1     1     1     1     1     1     2     1     1     1     1     2     1 \n11246 11247 11248 11249 11250 11251 11252 11253 11254 11255 11256 11257 11258 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11259 11260 11261 11262 11263 11264 11265 11266 11267 11268 11269 11270 11271 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11272 11273 11274 11275 11276 11277 11278 11279 11280 11281 11282 11283 11284 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11285 11286 11287 11288 11289 11290 11291 11292 11293 11294 11295 11296 11297 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11298 11299 11300 11301 11302 11303 11304 11305 11306 11307 11308 11309 11310 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11311 11312 11313 11314 11315 11316 11317 11318 11319 11320 11321 11322 11323 \n    1     1     1     1     1     1     1     1     2     1     1     1     1 \n11324 11325 11326 11327 11328 11329 11330 11331 11332 11333 11334 11335 11336 \n    5     1     1     1     1     1     1     1     1     1     1     1     1 \n11337 11338 11339 11340 11341 11342 11343 11344 11345 11346 11347 11348 11349 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11350 11351 11352 11353 11354 11355 11356 11357 11358 11359 11360 11361 11362 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11363 11364 11365 11366 11367 11368 11369 11370 11371 11372 11373 11374 11375 \n    1     1     1     1     1     3     1     1     1     1     1     1     1 \n11376 11377 11378 11379 11380 11381 11382 11383 11384 11385 11386 11387 11388 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11389 11390 11391 11392 11393 11394 11395 11396 11397 11398 11399 11400 11401 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11402 11403 11404 11405 11406 11407 11408 11409 11410 11411 11412 11413 11414 \n    1     2     1     1     1     1     1     1     1     1     1     1     2 \n11415 11416 11417 11418 11419 11420 11421 11422 11423 11424 11425 11426 11427 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11428 11429 11430 11431 11432 11433 11434 11435 11436 11437 11438 11439 11440 \n    1     1     1     1     3     1     1     1     1     1     1     1     1 \n11441 11442 11443 11444 11445 11446 11447 11448 11449 11450 11451 11452 11453 \n    1     1     1     1     1     1     1     1     1     1     1     2     2 \n11454 11455 11456 11457 11458 11459 11460 11461 11462 11463 11464 11465 11466 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n11467 11468 11469 11470 11471 11472 11473 11474 11475 11476 11477 11478 11479 \n    1     2     1     1     1     1     1     1     1     1     1     1     1 \n11480 11481 11482 11483 11484 11485 11486 11487 11488 11489 11490 11491 11492 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11493 11494 11495 11496 11497 11498 11499 11500 11501 11502 11503 11504 11505 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11506 11507 11508 11509 11510 11511 11512 11513 11514 11515 11516 11517 11518 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11519 11520 11521 11522 11523 11524 11525 11526 11527 11528 11529 11530 11531 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n11532 11533 11534 11535 11536 11537 11538 11539 11540 11541 11542 11543 11544 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11545 11546 11547 11548 11549 11550 11551 11552 11553 11554 11555 11556 11557 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11558 11559 11560 11561 11562 11563 11564 11565 11566 11567 11568 11569 11570 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n11571 11572 11573 11574 11575 11576 11577 11578 11579 11580 11581 11582 11583 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11584 11585 11586 11587 11588 11589 11590 11591 11592 11593 11594 11595 11596 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n11597 11598 11599 11600 11601 11602 11603 11604 11605 11606 11607 11608 11609 \n    1     1     1     1     1     1     1     2     1     1     1     1     3 \n11610 11611 11612 11613 11614 11615 11616 11617 11618 11619 11620 11621 11622 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11623 11624 11625 11626 11627 11628 11629 11630 11631 11632 11633 11634 11635 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11636 11637 11638 11639 11640 11641 11642 11643 11644 11645 11646 11647 11648 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11649 11650 11651 11652 11653 11654 11655 11656 11657 11658 11659 11660 11661 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11662 11663 11664 11665 11666 11667 11668 11669 11670 11671 11672 11673 11674 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11675 11676 11677 11678 11679 11680 11681 11682 11683 11684 11685 11686 11687 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11688 11689 11690 11691 11692 11693 11694 11695 11696 11697 11698 11699 11700 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11701 11702 11703 11704 11705 11706 11707 11708 11709 11710 11711 11712 11713 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11714 11715 11716 11717 11718 11719 11720 11721 11722 11723 11724 11725 11726 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11727 11728 11729 11730 11731 11732 11733 11734 11735 11736 11737 11738 11739 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11740 11741 11742 11743 11744 11745 11746 11747 11748 11749 11750 11751 11752 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11753 11754 11755 11756 11757 11758 11759 11760 11761 11762 11763 11764 11765 \n    1     1     1     1     1     1     2     1     1     1     1     1     1 \n11766 11767 11768 11769 11770 11771 11772 11773 11774 11775 11776 11777 11778 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n11779 11780 11781 11782 11783 11784 11785 11786 11787 11788 11789 11790 11791 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11792 11793 11794 11795 11796 11797 11798 11799 11800 11801 11802 11803 11804 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11805 11806 11807 11808 11809 11810 11811 11812 11813 11814 11815 11816 11817 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n11818 11819 11820 11821 11822 11823 11824 11825 11826 11827 11828 11829 11830 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11831 11832 11833 11834 11835 11836 11837 11838 11839 11840 11841 11842 11843 \n    3     1     1     1     1     1     1     1     1     1     1     1     1 \n11844 11845 11846 11847 11848 11849 11850 11851 11852 11853 11854 11855 11856 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n11857 11858 11859 11860 11861 11862 11863 11864 11865 11866 11867 11868 11869 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11870 11871 11872 11873 11874 11875 11876 11877 11878 11879 11880 11881 11882 \n    1     1     1     1     1     1     1     1     1     1     1     2     1 \n11883 11884 11885 11886 11887 11888 11889 11890 11891 11892 11893 11894 11895 \n    2     1     2     1     1     1     1     1     1     1     1     1     1 \n11896 11897 11898 11899 11900 11901 11902 11903 11904 11905 11906 11907 11908 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11909 11910 11911 11912 11913 11914 11915 11916 11917 11918 11919 11920 11921 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11922 11923 11924 11925 11926 11927 11928 11929 11930 11931 11932 11933 11934 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n11935 11936 11937 11938 11939 11940 11941 11942 11943 11944 11945 11946 11947 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11948 11949 11950 11951 11952 11953 11954 11955 11956 11957 11958 11959 11960 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11961 11962 11963 11964 11965 11966 11967 11968 11969 11970 11971 11972 11973 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11974 11975 11976 11977 11978 11979 11980 11981 11982 11983 11984 11985 11986 \n    1     1     1     1     1     1     1     1     1     1     1     5     1 \n11987 11988 11989 11990 11991 11992 11993 11994 11995 11996 11997 11998 11999 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12000 12001 12002 12003 12004 12005 12006 12007 12008 12009 12010 12011 12012 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12013 12014 12015 12016 12017 12018 12019 12020 12021 12022 12023 12024 12025 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12026 12027 12028 12029 12030 12031 12032 12033 12034 12035 12036 12037 12038 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12039 12040 12041 12042 12043 12044 12045 12046 12047 12048 12049 12050 12051 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12052 12053 12054 12055 12056 12057 12058 12059 12060 12061 12062 12063 12064 \n    1     1     1     7     1     1     2     1     1     1     2     1     1 \n12065 12066 12067 12068 12069 12070 12071 12072 12073 12074 12075 12076 12077 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12078 12079 12080 12081 12082 12083 12084 12085 12086 12087 12088 12089 12090 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12091 12092 12093 12094 12095 12096 12097 12098 12099 12100 12101 12102 12103 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n12104 12105 12106 12107 12108 12109 12110 12111 12112 12113 12114 12115 12116 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12117 12118 12119 12120 12121 12122 12123 12124 12125 12126 12127 12128 12129 \n    1     1     1     1     1     1     1     1     3     1     1     1     1 \n12130 12131 12132 12133 12134 12135 12136 12137 12138 12139 12140 12141 12142 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n12143 12144 12145 12146 12147 12148 12149 12150 12151 12152 12153 12154 12155 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12156 12157 12158 12159 12160 12161 12162 12163 12164 12165 12166 12167 12168 \n    1     1     1     1     1     1     1     7     1     1     1     1     1 \n12169 12170 12171 12172 12173 12174 12175 12176 12177 12178 12179 12180 12181 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12182 12183 12184 12185 12186 12187 12188 12189 12190 12191 12192 12193 12194 \n    1     1     1     1     1     1     2     1     2     1     1     1     1 \n12195 12196 12197 12198 12199 12200 12201 12202 12203 12204 12205 12206 12207 \n    1     1     1     1     1     5     1     1     1     1     1     1     1 \n12208 12209 12210 12211 12212 12213 12214 12215 12216 12217 12218 12219 12220 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12221 12222 12223 12224 12225 12226 12227 12228 12229 12230 12231 12232 12233 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12234 12235 12236 12237 12238 12239 12240 12241 12242 12243 12244 12245 12246 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12247 12248 12249 12250 12251 12252 12253 12254 12255 12256 12257 12258 12259 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12260 12261 12262 12263 12264 12265 12266 12267 12268 12269 12270 12271 12272 \n    1     1     3     1     1     1     1     1     1     1     1     1     3 \n12273 12274 12275 12276 12277 12278 12279 12280 12281 12282 12283 12284 12285 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12286 12287 12288 12289 12290 12291 12292 12293 12294 12295 12296 12297 12298 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12299 12300 12301 12302 12303 12304 12305 12306 12307 12308 12309 12310 12311 \n    1     1     1     1     2     1     1     1     1     1     1     1     1 \n12312 12313 12314 12315 12316 12317 12318 12319 12320 12321 12322 12323 12324 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12325 12326 12327 12328 12329 12330 12331 12332 12333 12334 12335 12336 12337 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n12338 12339 12340 12341 12342 12343 12344 12345 12346 12347 12348 12349 12350 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12351 12352 12353 12354 12355 12356 12357 12358 12359 12360 12361 12362 12363 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12364 12365 12366 12367 12368 12369 12370 12371 12372 12373 12374 12375 12376 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12377 12378 12379 12380 12381 12382 12383 12384 12385 12386 12387 12388 12389 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12390 12391 12392 12393 12394 12395 12396 12397 12398 12399 12400 12401 12402 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12403 12404 12405 12406 12407 12408 12409 12410 12411 12412 12413 12414 12415 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12416 12417 12418 12419 12420 12421 12422 12423 12424 12425 12426 12427 12428 \n    1     1     1     1     1     2     1     1     1     1     1     1     1 \n12429 12430 12431 12432 12433 12434 12435 12436 12437 12438 12439 12440 12441 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12442 12443 12444 12445 12446 12447 12448 12449 12450 12451 12452 12453 12454 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12455 12456 12457 12458 12459 12460 12461 12462 12463 12464 12465 12466 12467 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n12468 12469 12470 12471 12472 12473 12474 12475 12476 12477 12478 12479 12480 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12481 12482 12483 12484 12485 12486 12487 12488 12489 12490 12491 12492 12493 \n    2     1     1     1     1     1     1     1     1     1     1     1     1 \n12494 12495 12496 12497 12498 12499 12500 12501 12502 12503 12504 12505 12506 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12507 12508 12509 12510 12511 12512 12513 12514 12515 12516 12517 12518 12519 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n12520 12521 12522 12523 12524 12525 12526 12527 12528 12529 12530 12531 12532 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12533 12534 12535 12536 12537 12538 12539 12540 12541 12542 12543 12544 12545 \n    1     1     2     1     1     1     1     1     1     1     1     1     1 \n12546 12547 12548 12549 12550 12551 12552 12553 12554 12555 12556 12557 12558 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12559 12560 12561 12562 12563 12564 12565 12566 12567 12568 12569 12570 12571 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12572 12573 12574 12575 12576 12577 12578 12579 12580 12581 12582 12583 12584 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12585 12586 12587 12588 12589 12590 12591 12592 12593 12594 12595 12596 12597 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12598 12599 12600 12601 12602 12603 12604 12605 12606 12607 12608 12609 12610 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12611 12612 12613 12614 12615 12616 12617 12618 12619 12620 12621 12622 12623 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12624 12625 12626 12627 12628 12629 12630 12631 12632 12633 12634 12635 12636 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12637 12638 12639 12640 12641 12642 12643 12644 12645 12646 12647 12648 12649 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12650 12651 12652 12653 12654 12655 12656 12657 12658 12659 12660 12661 12662 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12663 12664 12665 12666 12667 12668 12669 12670 12671 12672 12673 12674 12675 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12676 12677 12678 12679 12680 12681 12682 12683 12684 12685 12686 12687 12688 \n    1     1     1     1     1     1     1     2     1     1     1     1     1 \n12689 12690 12691 12692 12693 12694 12695 12696 12697 12698 12699 12700 12701 \n    1     1     2     1     1     1     1     1     1     1     1     1     2 \n12702 12703 12704 12705 12706 12707 12708 12709 12710 12711 12712 12713 12714 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12715 12716 12717 12718 12719 12720 12721 12722 12723 12724 12725 12726 12727 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12728 12729 12730 12731 12732 12733 12734 12735 12736 12737 12738 12739 12740 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12741 12742 12743 12744 12745 12746 12747 12748 12749 12750 12751 12752 12753 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12754 12755 12756 12757 12758 12759 12760 12761 12762 12763 12764 12765 12766 \n    1     1     1     2     1     1     1     1     1     1     1     2     1 \n12767 12768 12769 12770 12771 12772 12773 12774 12775 12776 12777 12778 12779 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12780 12781 12782 12783 12784 12785 12786 12787 12788 12789 12790 12791 12792 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12793 12794 12795 12796 12797 12798 12799 12800 12801 12802 12803 12804 12805 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12806 12807 12808 12809 12810 12811 12812 12813 12814 12815 12816 12817 12818 \n    1     1     1     2     1     1     1     1     1     1     1     1     1 \n12819 12820 12821 12822 12823 12824 12825 12826 12827 12828 12829 12830 12831 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12832 12833 12834 12835 12836 12837 12838 12839 12840 12841 12842 12843 12844 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12845 12846 12847 12848 12849 12850 12851 12852 12853 12854 12855 12856 12857 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12858 12859 12860 12861 12862 12863 12864 12865 12866 12867 12868 12869 12870 \n    1     1     1     1     1     2     2     1     1     1     1     1     1 \n12871 12872 12873 12874 12875 12876 12877 12878 12879 12880 12881 12882 12883 \n    1     1     2     1     1     1     1     1     2     1     1     1     1 \n12884 12885 12886 12887 12888 12889 12890 12891 12892 12893 12894 12895 12896 \n    1     1     1     1     1     1     1     1     1     1     2     1     1 \n12897 12898 12899 12900 12901 12902 12903 12904 12905 12906 12907 12908 12909 \n    1     1     1     1     1     1     1     1     1     1     1     1     2 \n12910 12911 12912 12913 12914 12915 12916 12917 12918 12919 12920 12921 12922 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12923 12924 12925 12926 12927 12928 12929 12930 12931 12932 12933 12934 12935 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12936 12937 12938 12939 12940 12941 12942 12943 12944 12945 12946 12947 12948 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12949 12950 12951 12952 12953 12954 12955 12956 12957 12958 12959 12960 12961 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12962 12963 12964 12965 12966 12967 12968 12969 12970 12971 12972 12973 12974 \n    1     1     1     1     1     1     1     1     1     2     1     1     1 \n12975 12976 12977 12978 12979 12980 12981 12982 12983 12984 12985 \n    1     1     1     1     1     1     1     1     1     1     1 \n\n\n\nsum(multiplicity(roadacc_time_ppp) &gt; 1)\n\n[1] 395\n\n\nThe output shows that there are 395 duplicated point events.\nWe will resolve this using jittering, which will add a small pertubation to the duplicate points so that they do not occupy the exact same space:\n\nroadacc_time_ppp_jit &lt;- rjitter(roadacc_time_ppp,\n                               retry = TRUE,\n                               nsim = 99,\n                               drop = TRUE)\n\nWe then check for duplicated points to determine if the jittering was carried out successfully:\n\nany(duplicated(roadacc_time_ppp_jit))\n\n[1] FALSE\n\n\nThe output indicates that there are no duplicated points.\n\n\n\nNext, we combine the ppp object and the owin object:\n\nroadacc_time_owin_ppp &lt;- roadacc_time_ppp[provinceowin]\n\n\nsummary(roadacc_time_owin_ppp)\n\nMarked planar point pattern:  12985 points\nAverage intensity 1.693182e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    7.00   13.00   12.33   18.00   23.00 \n\nWindow: polygonal boundary\nsingle connected closed polygon with 13779 vertices\nenclosing rectangle: [587893.5, 712440.5] x [1484413.7, 1579076.3] units\n                     (124500 x 94660 units)\nWindow area = 7668990000 square units\nFraction of frame area: 0.65\n\n\nWe plot the roadacc_time_owin_ppp object to examine the correctness of the output object:\n\nplot(roadacc_time_owin_ppp)\n\n\n\n\n\n\n\n\n\n\n\nWe first use BOOT.spattemp() to determine the spatial bandwidth and the scalar temporal bandwidth for use in subsequent calculation.\n\nset.seed(1234) \nBOOT.spattemp(roadacc_time_owin_ppp)\n\n\nNext, we use spattemp.density() of sparr package to compute the STKDE, with h and lambda values derived in previous step.\n\nst_kde_time &lt;- spattemp.density(roadacc_time_owin_ppp,\n                               h = 2400 ,\n                               lambda = 2)\nsummary(st_kde_time)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 2400 (spatial)\n  lambda = 2 (temporal)\n\nNo. of observations\n  12985 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [587893.5, 712440.5] x [1484414, 1579076]\n\nTemporal bound\n  [0, 23]\n\nEvaluation\n  128 x 128 x 24 trivariate lattice\n  Density range: [8.479442e-20, 8.976694e-11]\n\n\n\n\n\nBased on the EDA carried out in Part 1A, we note that the distribution of road accidents across time can be divided into four different time segments:\n\n12am to 6am: Midnight to dawn\n7am to 11am: Morning\n12pm to 5pm: Midday\n6pm to 11pm: Evening to night\n\n\n\n\n\n\nCode\nmidnighttodawn &lt;- c(0,1,2,3,4,5,6)\n\npar(mfrow=c(2,3))  \n\nfor(i in midnighttodawn){\n  plot(st_kde_time, i,\n       override.par=FALSE,\n       fix.range=TRUE,\n       main=paste(\"KDE at time\",i))\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nmorning &lt;- c(7,8,9,10,11)\n\npar(mfrow=c(2,3))  \n\nfor(i in morning){\n  plot(st_kde_time, i,\n       override.par=FALSE,\n       fix.range=TRUE,\n       main=paste(\"KDE at time\",i))\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nmidday &lt;- c(12,13,14,15,16,17)\n\npar(mfrow=c(2,3))  \n\nfor(i in midday){\n  plot(st_kde_time, i,\n       override.par=FALSE,\n       fix.range=TRUE,\n       main=paste(\"KDE at time\",i))\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\neveningtonight &lt;- c(18,19,20,21,22,23)\n\npar(mfrow=c(2,3))  \n\nfor(i in eveningtonight){\n  plot(st_kde_time, i,\n       override.par=FALSE,\n       fix.range=TRUE,\n       main=paste(\"KDE at time\",i))\n  }\n\n\n\n\n\n\n\n\n\nAs seen from the plots above, the occurrence of road accidents is more intense during the hours from 7am to 11pm as compared to midnight to dawn hours from 12am to 6am. The hotspots between 7am to 11pm are at similar locations, concentrated along the edges of Bangkok.\n\n\n\nWe will determine the bandwidth selection for spatio-temporal NKDE in both space and time via likelihood cross validation.\nWe first need to ensure that the incident_datetime field in roadacc data is of numeric field:\n\nroadacc$Time &lt;- as.POSIXct(roadacc$incident_datetime,\n                           format = \"%Y/%m/%d\")\nstart &lt;- as.POSIXct(\"2019/01/01\",format = \"%Y/%m/%d\")\nroadacc$Time &lt;- difftime(roadacc$Time,start,units=\"days\")\nroadacc$Time &lt;- as.numeric(roadacc$Time)\n\nWe trial and error with a few values and also reference values used in similar parameters for 9.1.1 Determining appropriate bandwidth i.e. agg = 15:\n\ncv_scores &lt;- bw_tnkde_cv_likelihood_calc(bws_net=seq(50,2500,50),\n                                         bws_time=seq(5,200,5),\n                                         lines = roadsbkk,\n                                         events = roadacc,\n                                         time_field = \"incident_datetime\",\n                                         w = rep(1, nrow(roadacc)),\n                                         kernel_name = \"quartic\",\n                                         method = \"discontinuous\",\n                                         diggle_correction = FALSE,\n                                         max_depth = 5,\n                                         digits = 1,\n                                         tol = 1,\n                                         agg = 15,\n                                         sparse=TRUE,\n                                         grid_shape=c(5,5),\n                                         sub_sample=1,\n                                         verbose = FALSE,\n                                         check = TRUE)\n\nWe save the cv scores generated as a new rds file to avoid re-running the code above:\n\n\nCode\nwrite_rds(cv_scores,\"data/rds/stkde_cvscores.rds\")\n\n\n\nstkde_cvscores &lt;- read_rds(\"data/rds/stkde_cvscores.rds\")\n\n\nknitr::kable(stkde_cvscores)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5\n10\n15\n20\n25\n30\n35\n40\n45\n50\n55\n60\n65\n70\n75\n80\n85\n90\n95\n100\n105\n110\n115\n120\n125\n130\n135\n140\n145\n150\n155\n160\n165\n170\n175\n180\n185\n190\n195\n200\n\n\n\n\n50\n-708.0747\n-708.0754\n-708.0758\n-708.0760\n-708.0762\n-708.0764\n-708.0765\n-708.0767\n-708.0768\n-708.0769\n-708.0770\n-708.0770\n-708.0771\n-708.0772\n-708.0772\n-708.0773\n-708.0774\n-708.0774\n-708.0775\n-708.0775\n-708.0776\n-708.0776\n-708.0776\n-708.0777\n-708.0777\n-708.0778\n-708.0778\n-708.0778\n-708.0779\n-708.0779\n-708.0779\n-708.0779\n-708.0780\n-708.0780\n-708.0780\n-708.0781\n-707.8681\n-707.8678\n-707.8676\n-707.8675\n\n\n100\n-707.6474\n-707.6489\n-707.6498\n-707.6504\n-707.6509\n-707.6513\n-707.6516\n-707.6519\n-707.6522\n-707.6524\n-707.6526\n-707.6528\n-707.6529\n-707.6531\n-707.6533\n-707.6534\n-707.6535\n-707.6536\n-707.6538\n-707.6539\n-707.6540\n-707.6541\n-707.6542\n-707.6543\n-707.6544\n-707.6544\n-707.6545\n-707.6546\n-707.6547\n-707.6548\n-707.6548\n-707.6549\n-707.6550\n-707.6550\n-707.6551\n-707.6551\n-707.3407\n-707.3402\n-707.3399\n-707.3398\n\n\n150\n-707.2217\n-707.2241\n-707.2255\n-707.2264\n-707.2272\n-707.2278\n-707.2283\n-707.2288\n-707.2292\n-707.2295\n-707.2299\n-707.2302\n-707.1249\n-707.1250\n-707.1252\n-707.1254\n-707.1256\n-707.1257\n-707.1259\n-707.1261\n-707.1263\n-707.1264\n-707.1266\n-707.1267\n-707.1269\n-707.1270\n-707.1271\n-707.1273\n-707.1274\n-707.1275\n-707.1276\n-707.1277\n-707.1278\n-707.1280\n-707.1281\n-707.1282\n-706.8134\n-706.8129\n-706.8127\n-706.8125\n\n\n200\n-706.9557\n-706.9585\n-706.9602\n-706.9614\n-706.9623\n-706.9631\n-706.9637\n-706.9643\n-706.9648\n-706.9652\n-706.9656\n-706.9660\n-706.8608\n-706.8610\n-706.8612\n-706.8614\n-706.8616\n-706.8619\n-706.8621\n-706.8623\n-706.8625\n-706.8627\n-706.8629\n-706.8631\n-706.8632\n-706.8634\n-706.8636\n-706.8637\n-706.8639\n-706.8640\n-706.8642\n-706.8643\n-706.8644\n-706.8646\n-706.8647\n-706.8648\n-706.5502\n-706.5497\n-706.5495\n-706.5494\n\n\n250\n-706.8484\n-706.8515\n-706.8533\n-706.8546\n-706.8556\n-706.8564\n-706.8571\n-706.8577\n-706.8582\n-706.8587\n-706.8591\n-706.8595\n-706.7544\n-706.7545\n-706.7548\n-706.7550\n-706.7553\n-706.7555\n-706.7557\n-706.7560\n-706.7562\n-706.7564\n-706.7566\n-706.7568\n-706.7570\n-706.7572\n-706.7573\n-706.7575\n-706.7577\n-706.7578\n-706.7580\n-706.7581\n-706.7583\n-706.7584\n-706.7585\n-706.7587\n-706.4442\n-706.4438\n-706.4436\n-706.4435\n\n\n300\n-706.7952\n-706.7984\n-706.8003\n-706.8016\n-706.8026\n-706.8035\n-706.8042\n-706.8048\n-706.8054\n-706.8058\n-706.8063\n-706.8067\n-706.7016\n-706.7018\n-706.7021\n-706.7023\n-706.7026\n-706.7028\n-706.7031\n-706.7033\n-706.7035\n-706.7037\n-706.7040\n-706.7042\n-706.7043\n-706.7045\n-706.7047\n-706.7049\n-706.7051\n-706.7052\n-706.7054\n-706.7055\n-706.7057\n-706.7058\n-706.7060\n-706.7061\n-706.3918\n-706.3914\n-706.3912\n-706.3911\n\n\n350\n-706.5831\n-706.5867\n-706.5889\n-706.5904\n-706.5915\n-706.5925\n-706.5933\n-706.5940\n-706.5946\n-706.5952\n-706.5957\n-706.5961\n-706.3862\n-706.3862\n-706.3865\n-706.3867\n-706.3870\n-706.3873\n-706.3875\n-706.3878\n-706.3880\n-706.3883\n-706.3885\n-706.3888\n-706.3890\n-706.3892\n-706.3894\n-706.3896\n-706.3898\n-706.3900\n-706.3902\n-706.3904\n-706.3905\n-706.3907\n-706.3909\n-706.3910\n-706.0769\n-706.0765\n-706.0763\n-706.0762\n\n\n400\n-706.3707\n-706.3747\n-706.3771\n-706.3788\n-706.3801\n-706.3811\n-706.3820\n-706.3828\n-706.3835\n-706.3841\n-706.3847\n-706.3852\n-706.1752\n-706.1753\n-706.1756\n-706.1759\n-706.1762\n-706.1765\n-706.1768\n-706.1771\n-706.1774\n-706.1777\n-706.1779\n-706.1782\n-706.1784\n-706.1787\n-706.1789\n-706.1791\n-706.1793\n-706.1796\n-706.1798\n-706.1800\n-706.1801\n-706.1803\n-706.1805\n-706.1807\n-705.8667\n-705.8663\n-705.8661\n-705.8661\n\n\n450\n-706.3705\n-706.3745\n-706.3769\n-706.3786\n-706.3799\n-706.3810\n-706.3819\n-706.3826\n-706.3833\n-706.3839\n-706.3845\n-706.3850\n-705.9655\n-705.9653\n-705.9654\n-705.9657\n-705.9659\n-705.9662\n-705.9665\n-705.9668\n-705.9671\n-705.9673\n-705.9676\n-705.9679\n-705.9681\n-705.9684\n-705.9686\n-705.9689\n-705.9691\n-705.9693\n-705.9695\n-705.9697\n-705.9699\n-705.9701\n-705.9703\n-705.9705\n-705.6566\n-705.6562\n-705.6561\n-705.6561\n\n\n500\n-706.3706\n-706.3747\n-706.3771\n-706.3788\n-706.3801\n-706.3811\n-706.3820\n-706.3828\n-706.3835\n-706.3841\n-706.3847\n-706.3852\n-705.9653\n-705.9651\n-705.9652\n-705.9655\n-705.9657\n-705.9660\n-705.9663\n-705.9666\n-705.9668\n-705.9671\n-705.9674\n-705.9677\n-705.9679\n-705.9682\n-705.9684\n-705.9686\n-705.9689\n-705.9691\n-705.9693\n-705.9695\n-705.9697\n-705.9699\n-705.9701\n-705.9703\n-705.6565\n-705.6561\n-705.6560\n-705.6560\n\n\n550\n-706.2648\n-706.2691\n-706.2716\n-706.2734\n-706.2748\n-706.2759\n-706.2768\n-706.2777\n-706.2784\n-706.2790\n-706.2796\n-706.2802\n-705.8602\n-705.8600\n-705.8602\n-705.8604\n-705.8607\n-705.8610\n-705.8613\n-705.8616\n-705.8619\n-705.8622\n-705.8625\n-705.8627\n-705.8630\n-705.8633\n-705.8635\n-705.8638\n-705.8640\n-705.8642\n-705.8645\n-705.8647\n-705.8649\n-705.8651\n-705.8653\n-705.8655\n-705.5518\n-705.5514\n-705.5513\n-705.5513\n\n\n600\n-706.2650\n-706.2693\n-706.2718\n-706.2735\n-706.2749\n-706.2760\n-706.2770\n-706.2778\n-706.2785\n-706.2792\n-706.2798\n-706.2803\n-705.8603\n-705.8601\n-705.8603\n-705.8605\n-705.8608\n-705.8611\n-705.8614\n-705.8617\n-705.8620\n-705.8623\n-705.8626\n-705.8628\n-705.8631\n-705.8634\n-705.8636\n-705.8639\n-705.8641\n-705.8644\n-705.8646\n-705.8648\n-705.8650\n-705.8652\n-705.8654\n-705.8656\n-705.5520\n-705.5516\n-705.5515\n-705.5515\n\n\n650\n-706.1600\n-706.1645\n-706.1671\n-706.1690\n-706.1704\n-706.1716\n-706.1726\n-706.1734\n-706.1742\n-706.1749\n-706.1755\n-706.1761\n-705.7561\n-705.7560\n-705.7561\n-705.7564\n-705.7567\n-705.7570\n-705.7573\n-705.7576\n-705.7579\n-705.7582\n-705.7585\n-705.7588\n-705.7591\n-705.7594\n-705.7597\n-705.7599\n-705.7602\n-705.7604\n-705.7607\n-705.7609\n-705.7611\n-705.7613\n-705.7615\n-705.7617\n-705.4482\n-705.4478\n-705.4477\n-705.4477\n\n\n700\n-706.0536\n-706.0583\n-706.0610\n-706.0630\n-706.0645\n-706.0657\n-706.0668\n-706.0677\n-706.0685\n-706.0692\n-706.0698\n-706.0704\n-705.6505\n-705.6504\n-705.6506\n-705.6508\n-705.6512\n-705.6515\n-705.6518\n-705.6522\n-705.6525\n-705.6528\n-705.6531\n-705.6534\n-705.6537\n-705.6540\n-705.6543\n-705.6546\n-705.6548\n-705.6551\n-705.6553\n-705.6556\n-705.6558\n-705.6560\n-705.6563\n-705.6565\n-705.3430\n-705.3426\n-705.3425\n-705.3425\n\n\n750\n-706.0536\n-706.0583\n-706.0610\n-706.0630\n-706.0645\n-706.0657\n-706.0668\n-706.0677\n-706.0685\n-706.0692\n-706.0698\n-706.0704\n-705.6505\n-705.6504\n-705.6506\n-705.6509\n-705.6512\n-705.6515\n-705.6518\n-705.6522\n-705.6525\n-705.6528\n-705.6531\n-705.6534\n-705.6537\n-705.6540\n-705.6543\n-705.6546\n-705.6548\n-705.6551\n-705.6553\n-705.6556\n-705.6558\n-705.6560\n-705.6563\n-705.6565\n-705.3431\n-705.3427\n-705.3426\n-705.3426\n\n\n800\n-706.0537\n-706.0584\n-706.0612\n-706.0631\n-706.0646\n-706.0659\n-706.0669\n-706.0678\n-706.0686\n-706.0693\n-706.0700\n-706.0706\n-705.6507\n-705.6506\n-705.6508\n-705.6510\n-705.6514\n-705.6517\n-705.6520\n-705.6524\n-705.6527\n-705.6530\n-705.6533\n-705.6536\n-705.6539\n-705.6542\n-705.6545\n-705.6548\n-705.6550\n-705.6553\n-705.6555\n-705.6558\n-705.6560\n-705.6562\n-705.6565\n-705.6567\n-705.3433\n-705.3430\n-705.3428\n-705.3428\n\n\n850\n-706.0539\n-706.0586\n-706.0614\n-706.0633\n-706.0648\n-706.0661\n-706.0671\n-706.0680\n-706.0688\n-706.0695\n-706.0702\n-706.0708\n-705.6510\n-705.6508\n-705.6510\n-705.6513\n-705.6516\n-705.6519\n-705.6523\n-705.6526\n-705.6529\n-705.6533\n-705.6536\n-705.6539\n-705.6542\n-705.6545\n-705.6547\n-705.6550\n-705.6553\n-705.6555\n-705.6558\n-705.6560\n-705.6563\n-705.6565\n-705.6567\n-705.6569\n-705.3436\n-705.3433\n-705.3431\n-705.3431\n\n\n900\n-706.0542\n-706.0589\n-706.0616\n-706.0636\n-706.0651\n-706.0663\n-706.0674\n-706.0683\n-706.0691\n-706.0698\n-706.0704\n-706.0710\n-705.6513\n-705.6511\n-705.6513\n-705.6516\n-705.6519\n-705.6522\n-705.6526\n-705.6529\n-705.6532\n-705.6535\n-705.6539\n-705.6542\n-705.6545\n-705.6547\n-705.6550\n-705.6553\n-705.6556\n-705.6558\n-705.6561\n-705.6563\n-705.6565\n-705.6568\n-705.6570\n-705.6572\n-705.3440\n-705.3436\n-705.3435\n-705.3435\n\n\n950\n-706.0544\n-706.0591\n-706.0619\n-706.0638\n-706.0653\n-706.0666\n-706.0676\n-706.0685\n-706.0693\n-706.0700\n-706.0707\n-706.0713\n-705.6515\n-705.6514\n-705.6516\n-705.6519\n-705.6522\n-705.6525\n-705.6529\n-705.6532\n-705.6535\n-705.6538\n-705.6542\n-705.6545\n-705.6548\n-705.6550\n-705.6553\n-705.6556\n-705.6559\n-705.6561\n-705.6564\n-705.6566\n-705.6568\n-705.6571\n-705.6573\n-705.6575\n-705.3443\n-705.3439\n-705.3438\n-705.3438\n\n\n1000\n-706.0547\n-706.0594\n-706.0621\n-706.0641\n-706.0656\n-706.0668\n-706.0679\n-706.0688\n-706.0696\n-706.0703\n-706.0709\n-706.0715\n-705.6518\n-705.6517\n-705.6519\n-705.6522\n-705.6525\n-705.6528\n-705.6532\n-705.6535\n-705.6538\n-705.6541\n-705.6545\n-705.6548\n-705.6551\n-705.6553\n-705.6556\n-705.6559\n-705.6562\n-705.6564\n-705.6567\n-705.6569\n-705.6571\n-705.6574\n-705.6576\n-705.6578\n-705.3447\n-705.3443\n-705.3442\n-705.3442\n\n\n1050\n-706.0549\n-706.0596\n-706.0624\n-706.0643\n-706.0658\n-706.0671\n-706.0681\n-706.0690\n-706.0698\n-706.0705\n-706.0712\n-706.0718\n-705.6521\n-705.6520\n-705.6522\n-705.6525\n-705.6528\n-705.6531\n-705.6535\n-705.6538\n-705.6541\n-705.6544\n-705.6548\n-705.6551\n-705.6554\n-705.6556\n-705.6559\n-705.6562\n-705.6564\n-705.6567\n-705.6570\n-705.6572\n-705.6574\n-705.6577\n-705.6579\n-705.6581\n-705.3450\n-705.3446\n-705.3445\n-705.3445\n\n\n1100\n-705.9498\n-705.9547\n-705.9576\n-705.9596\n-705.9612\n-705.9625\n-705.9636\n-705.9646\n-705.9654\n-705.9661\n-705.9668\n-705.9674\n-705.5479\n-705.5478\n-705.5480\n-705.5483\n-705.5486\n-705.5490\n-705.5493\n-705.5497\n-705.5500\n-705.5503\n-705.5507\n-705.5510\n-705.5513\n-705.5516\n-705.5519\n-705.5522\n-705.5524\n-705.5527\n-705.5530\n-705.5532\n-705.5534\n-705.5537\n-705.5539\n-705.5541\n-705.2411\n-705.2407\n-705.2406\n-705.2406\n\n\n1150\n-705.9497\n-705.9546\n-705.9575\n-705.9595\n-705.9611\n-705.9624\n-705.9635\n-705.9644\n-705.9652\n-705.9660\n-705.9667\n-705.9673\n-705.5478\n-705.5477\n-705.5479\n-705.5482\n-705.5485\n-705.5488\n-705.5492\n-705.5495\n-705.5499\n-705.5502\n-705.5506\n-705.5509\n-705.5512\n-705.5515\n-705.5518\n-705.5520\n-705.5523\n-705.5526\n-705.5528\n-705.5531\n-705.5533\n-705.5536\n-705.5538\n-705.5540\n-705.2410\n-705.2407\n-705.2406\n-705.2406\n\n\n1200\n-705.9498\n-705.9547\n-705.9576\n-705.9596\n-705.9612\n-705.9625\n-705.9636\n-705.9645\n-705.9653\n-705.9661\n-705.9668\n-705.9674\n-705.5479\n-705.5478\n-705.5480\n-705.5483\n-705.5486\n-705.5490\n-705.5493\n-705.5497\n-705.5500\n-705.5504\n-705.5507\n-705.5510\n-705.5513\n-705.5516\n-705.5519\n-705.5522\n-705.5525\n-705.5527\n-705.5530\n-705.5532\n-705.5535\n-705.5537\n-705.5540\n-705.5542\n-705.2412\n-705.2408\n-705.2407\n-705.2407\n\n\n1250\n-705.9499\n-705.9548\n-705.9577\n-705.9597\n-705.9613\n-705.9626\n-705.9637\n-705.9647\n-705.9655\n-705.9662\n-705.9669\n-705.9675\n-705.5481\n-705.5480\n-705.5482\n-705.5485\n-705.5488\n-705.5492\n-705.5495\n-705.5499\n-705.5502\n-705.5506\n-705.5509\n-705.5512\n-705.5515\n-705.5518\n-705.5521\n-705.5524\n-705.5527\n-705.5529\n-705.5532\n-705.5534\n-705.5537\n-705.5539\n-705.5542\n-705.5544\n-705.2415\n-705.2411\n-705.2410\n-705.2410\n\n\n1300\n-705.9501\n-705.9550\n-705.9579\n-705.9599\n-705.9615\n-705.9628\n-705.9639\n-705.9648\n-705.9657\n-705.9664\n-705.9671\n-705.9677\n-705.5483\n-705.5482\n-705.5484\n-705.5487\n-705.5491\n-705.5494\n-705.5498\n-705.5501\n-705.5505\n-705.5508\n-705.5511\n-705.5514\n-705.5517\n-705.5520\n-705.5523\n-705.5526\n-705.5529\n-705.5531\n-705.5534\n-705.5537\n-705.5539\n-705.5541\n-705.5544\n-705.5546\n-705.2417\n-705.2413\n-705.2412\n-705.2412\n\n\n1350\n-705.9503\n-705.9552\n-705.9581\n-705.9601\n-705.9617\n-705.9630\n-705.9641\n-705.9650\n-705.9659\n-705.9666\n-705.9673\n-705.9679\n-705.5486\n-705.5485\n-705.5487\n-705.5490\n-705.5493\n-705.5496\n-705.5500\n-705.5503\n-705.5507\n-705.5510\n-705.5513\n-705.5517\n-705.5520\n-705.5523\n-705.5526\n-705.5528\n-705.5531\n-705.5534\n-705.5536\n-705.5539\n-705.5541\n-705.5544\n-705.5546\n-705.5548\n-705.2420\n-705.2416\n-705.2415\n-705.2415\n\n\n1400\n-705.9505\n-705.9554\n-705.9583\n-705.9603\n-705.9619\n-705.9632\n-705.9643\n-705.9652\n-705.9661\n-705.9668\n-705.9675\n-705.9681\n-705.5488\n-705.5487\n-705.5489\n-705.5492\n-705.5495\n-705.5499\n-705.5502\n-705.5506\n-705.5509\n-705.5513\n-705.5516\n-705.5519\n-705.5522\n-705.5525\n-705.5528\n-705.5531\n-705.5533\n-705.5536\n-705.5539\n-705.5541\n-705.5544\n-705.5546\n-705.5548\n-705.5551\n-705.2422\n-705.2419\n-705.2418\n-705.2418\n\n\n1450\n-705.9507\n-705.9556\n-705.9585\n-705.9605\n-705.9621\n-705.9634\n-705.9645\n-705.9654\n-705.9662\n-705.9670\n-705.9677\n-705.9683\n-705.5490\n-705.5489\n-705.5491\n-705.5494\n-705.5498\n-705.5501\n-705.5505\n-705.5508\n-705.5511\n-705.5515\n-705.5518\n-705.5521\n-705.5524\n-705.5527\n-705.5530\n-705.5533\n-705.5536\n-705.5538\n-705.5541\n-705.5544\n-705.5546\n-705.5548\n-705.5551\n-705.5553\n-705.2425\n-705.2421\n-705.2420\n-705.2420\n\n\n1500\n-705.9509\n-705.9558\n-705.9587\n-705.9607\n-705.9623\n-705.9636\n-705.9647\n-705.9656\n-705.9664\n-705.9672\n-705.9679\n-705.9685\n-705.5493\n-705.5492\n-705.5494\n-705.5497\n-705.5500\n-705.5503\n-705.5507\n-705.5510\n-705.5514\n-705.5517\n-705.5520\n-705.5524\n-705.5527\n-705.5530\n-705.5533\n-705.5535\n-705.5538\n-705.5541\n-705.5543\n-705.5546\n-705.5548\n-705.5551\n-705.5553\n-705.5555\n-705.2428\n-705.2424\n-705.2423\n-705.2423\n\n\n1550\n-705.9511\n-705.9560\n-705.9589\n-705.9609\n-705.9625\n-705.9638\n-705.9649\n-705.9658\n-705.9666\n-705.9674\n-705.9681\n-705.9687\n-705.5495\n-705.5494\n-705.5496\n-705.5499\n-705.5502\n-705.5506\n-705.5509\n-705.5513\n-705.5516\n-705.5519\n-705.5523\n-705.5526\n-705.5529\n-705.5532\n-705.5535\n-705.5538\n-705.5540\n-705.5543\n-705.5546\n-705.5548\n-705.5551\n-705.5553\n-705.5555\n-705.5558\n-705.2430\n-705.2427\n-705.2426\n-705.2425\n\n\n1600\n-705.9513\n-705.9562\n-705.9590\n-705.9611\n-705.9627\n-705.9640\n-705.9650\n-705.9660\n-705.9668\n-705.9676\n-705.9682\n-705.9689\n-705.5497\n-705.5496\n-705.5498\n-705.5501\n-705.5504\n-705.5508\n-705.5511\n-705.5515\n-705.5518\n-705.5522\n-705.5525\n-705.5528\n-705.5531\n-705.5534\n-705.5537\n-705.5540\n-705.5543\n-705.5545\n-705.5548\n-705.5550\n-705.5553\n-705.5555\n-705.5558\n-705.5560\n-705.2433\n-705.2429\n-705.2428\n-705.2428\n\n\n1650\n-705.8464\n-705.8516\n-705.8546\n-705.8567\n-705.8583\n-705.8597\n-705.8608\n-705.8618\n-705.8627\n-705.8635\n-705.8642\n-705.8648\n-705.4457\n-705.4456\n-705.4458\n-705.4462\n-705.4465\n-705.4469\n-705.4473\n-705.4476\n-705.4480\n-705.4483\n-705.4487\n-705.4490\n-705.4493\n-705.4496\n-705.4499\n-705.4502\n-705.4505\n-705.4508\n-705.4511\n-705.4513\n-705.4516\n-705.4518\n-705.4521\n-705.4523\n-705.1396\n-705.1393\n-705.1392\n-705.1392\n\n\n1700\n-705.7410\n-705.7464\n-705.7495\n-705.7517\n-705.7534\n-705.7548\n-705.7560\n-705.7570\n-705.7579\n-705.7587\n-705.7595\n-705.7602\n-705.3411\n-705.3411\n-705.3413\n-705.3416\n-705.3420\n-705.3424\n-705.3428\n-705.3432\n-705.3435\n-705.3439\n-705.3443\n-705.3446\n-705.3449\n-705.3453\n-705.3456\n-705.3459\n-705.3462\n-705.3465\n-705.3467\n-705.3470\n-705.3473\n-705.3475\n-705.3478\n-705.3480\n-705.0354\n-705.0350\n-705.0349\n-705.0350\n\n\n1750\n-705.7409\n-705.7462\n-705.7494\n-705.7516\n-705.7533\n-705.7547\n-705.7559\n-705.7569\n-705.7578\n-705.7586\n-705.7594\n-705.7600\n-705.3410\n-705.3410\n-705.3412\n-705.3415\n-705.3419\n-705.3423\n-705.3427\n-705.3431\n-705.3434\n-705.3438\n-705.3442\n-705.3445\n-705.3448\n-705.3452\n-705.3455\n-705.3458\n-705.3461\n-705.3464\n-705.3466\n-705.3469\n-705.3472\n-705.3474\n-705.3477\n-705.3479\n-705.0353\n-705.0350\n-705.0349\n-705.0349\n\n\n1800\n-705.7409\n-705.7462\n-705.7494\n-705.7516\n-705.7533\n-705.7547\n-705.7559\n-705.7569\n-705.7578\n-705.7586\n-705.7594\n-705.7600\n-705.3411\n-705.3410\n-705.3412\n-705.3416\n-705.3420\n-705.3423\n-705.3427\n-705.3431\n-705.3435\n-705.3438\n-705.3442\n-705.3445\n-705.3449\n-705.3452\n-705.3455\n-705.3458\n-705.3461\n-705.3464\n-705.3467\n-705.3469\n-705.3472\n-705.3475\n-705.3477\n-705.3480\n-705.0354\n-705.0350\n-705.0349\n-705.0350\n\n\n1850\n-705.7410\n-705.7463\n-705.7494\n-705.7516\n-705.7533\n-705.7547\n-705.7559\n-705.7570\n-705.7579\n-705.7587\n-705.7594\n-705.7601\n-705.3412\n-705.3411\n-705.3413\n-705.3417\n-705.3420\n-705.3424\n-705.3428\n-705.3432\n-705.3436\n-705.3439\n-705.3443\n-705.3446\n-705.2415\n-705.2416\n-705.2419\n-705.2421\n-705.2423\n-705.2426\n-705.2429\n-705.2431\n-705.2434\n-705.2436\n-705.2439\n-705.2441\n-704.9315\n-704.9312\n-704.9311\n-704.9311\n\n\n1900\n-705.7410\n-705.7464\n-705.7495\n-705.7517\n-705.7534\n-705.7548\n-705.7560\n-705.7571\n-705.7580\n-705.7588\n-705.7595\n-705.7602\n-705.3413\n-705.3412\n-705.3415\n-705.3418\n-705.3422\n-705.3425\n-705.3429\n-705.3433\n-705.3437\n-705.3440\n-705.3444\n-705.3447\n-705.2413\n-705.2415\n-705.2417\n-705.2419\n-705.2422\n-705.2425\n-705.2427\n-705.2430\n-705.2432\n-705.2435\n-705.2437\n-705.2439\n-704.9314\n-704.9311\n-704.9310\n-704.9310\n\n\n1950\n-705.7411\n-705.7465\n-705.7496\n-705.7518\n-705.7535\n-705.7549\n-705.7561\n-705.7572\n-705.7581\n-705.7589\n-705.7596\n-705.7603\n-705.3414\n-705.3413\n-705.3416\n-705.3419\n-705.3423\n-705.3427\n-705.3431\n-705.3434\n-705.3438\n-705.3442\n-705.3445\n-705.3449\n-705.2414\n-705.2415\n-705.2417\n-705.2420\n-705.2422\n-705.2425\n-705.2427\n-705.2430\n-705.2432\n-705.2435\n-705.2437\n-705.2439\n-704.9314\n-704.9311\n-704.9310\n-704.9310\n\n\n2000\n-705.7413\n-705.7466\n-705.7497\n-705.7519\n-705.7536\n-705.7551\n-705.7562\n-705.7573\n-705.7582\n-705.7590\n-705.7597\n-705.7604\n-705.3415\n-705.3415\n-705.3417\n-705.3421\n-705.3424\n-705.3428\n-705.3432\n-705.3436\n-705.3440\n-705.3443\n-705.3447\n-705.3450\n-705.2414\n-705.2416\n-705.2418\n-705.2420\n-705.2423\n-705.2425\n-705.2428\n-705.2430\n-705.2433\n-705.2435\n-705.2438\n-705.2440\n-704.9315\n-704.9312\n-704.9311\n-704.9311\n\n\n2050\n-705.7414\n-705.7467\n-705.7498\n-705.7520\n-705.7538\n-705.7552\n-705.7564\n-705.7574\n-705.7583\n-705.7591\n-705.7598\n-705.7605\n-705.3417\n-705.3416\n-705.3419\n-705.3422\n-705.3426\n-705.3430\n-705.3434\n-705.3437\n-705.3441\n-705.3445\n-705.3448\n-705.3452\n-705.2415\n-705.2416\n-705.2419\n-705.2421\n-705.2424\n-705.2426\n-705.2429\n-705.2431\n-705.2434\n-705.2436\n-705.2439\n-705.2441\n-704.8284\n-704.8279\n-704.8277\n-704.8276\n\n\n2100\n-705.7415\n-705.7468\n-705.7500\n-705.7522\n-705.7539\n-705.7553\n-705.7565\n-705.7575\n-705.7584\n-705.7592\n-705.7600\n-705.7606\n-705.3418\n-705.3418\n-705.3420\n-705.3424\n-705.3427\n-705.3431\n-705.3435\n-705.3439\n-705.3443\n-705.3446\n-705.3450\n-705.3453\n-705.2416\n-705.2418\n-705.2420\n-705.2422\n-705.2425\n-705.2427\n-705.2430\n-705.2432\n-705.2435\n-705.2437\n-705.2440\n-705.2442\n-704.8283\n-704.8278\n-704.8276\n-704.8275\n\n\n2150\n-705.7416\n-705.7470\n-705.7501\n-705.7523\n-705.7540\n-705.7554\n-705.7566\n-705.7576\n-705.7585\n-705.7594\n-705.7601\n-705.7608\n-705.3420\n-705.3419\n-705.3422\n-705.3425\n-705.3429\n-705.3433\n-705.3437\n-705.3440\n-705.3444\n-705.3448\n-705.3451\n-705.3455\n-705.2417\n-705.2419\n-705.2421\n-705.2423\n-705.2426\n-705.2429\n-705.2431\n-705.2434\n-705.2436\n-705.2439\n-705.2441\n-705.2443\n-704.8283\n-704.8278\n-704.8276\n-704.8275\n\n\n2200\n-705.7418\n-705.7471\n-705.7502\n-705.7524\n-705.7541\n-705.7556\n-705.7567\n-705.7578\n-705.7587\n-705.7595\n-705.7602\n-705.7609\n-705.3422\n-705.3421\n-705.3423\n-705.3427\n-705.3431\n-705.3434\n-705.3438\n-705.3442\n-705.3446\n-705.3449\n-705.3453\n-705.3456\n-705.2419\n-705.2420\n-705.2422\n-705.2425\n-705.2427\n-705.2430\n-705.2432\n-705.2435\n-705.2437\n-705.2440\n-705.2442\n-705.2445\n-704.8284\n-704.8279\n-704.8277\n-704.8276\n\n\n2250\n-705.7419\n-705.7472\n-705.7503\n-705.7526\n-705.7543\n-705.7557\n-705.7569\n-705.7579\n-705.7588\n-705.7596\n-705.7604\n-705.7610\n-705.3423\n-705.3423\n-705.3425\n-705.3428\n-705.3432\n-705.3436\n-705.3440\n-705.3444\n-705.3447\n-705.3451\n-705.3454\n-705.3458\n-705.2420\n-705.2422\n-705.2424\n-705.2426\n-705.2429\n-705.2431\n-705.2434\n-705.2436\n-705.2439\n-705.2441\n-705.2444\n-705.2446\n-704.8285\n-704.8280\n-704.8278\n-704.8277\n\n\n2300\n-705.7420\n-705.7474\n-705.7505\n-705.7527\n-705.7544\n-705.7558\n-705.7570\n-705.7580\n-705.7589\n-705.7598\n-705.7605\n-705.7612\n-705.3425\n-705.3424\n-705.3427\n-705.3430\n-705.3434\n-705.3437\n-705.3441\n-705.3445\n-705.3449\n-705.3453\n-705.3456\n-705.3460\n-705.2422\n-705.2423\n-705.2425\n-705.2428\n-705.2430\n-705.2433\n-705.2435\n-705.2438\n-705.2440\n-705.2443\n-705.2445\n-705.2447\n-704.8286\n-704.8281\n-704.8279\n-704.8278\n\n\n2350\n-705.7421\n-705.7475\n-705.7506\n-705.7528\n-705.7545\n-705.7559\n-705.7571\n-705.7582\n-705.7591\n-705.7599\n-705.7606\n-705.7613\n-705.3426\n-705.3426\n-705.3428\n-705.3431\n-705.3435\n-705.3439\n-705.3443\n-705.3447\n-705.3450\n-705.3454\n-705.3458\n-705.3461\n-705.2423\n-705.2424\n-705.2426\n-705.2429\n-705.2431\n-705.2434\n-705.2437\n-705.2439\n-705.2442\n-705.2444\n-705.2446\n-705.2449\n-704.8288\n-704.8282\n-704.8280\n-704.8280\n\n\n2400\n-705.7423\n-705.7476\n-705.7507\n-705.7530\n-705.7547\n-705.7561\n-705.7573\n-705.7583\n-705.7592\n-705.7600\n-705.7607\n-705.7614\n-705.3428\n-705.3427\n-705.3430\n-705.3433\n-705.3437\n-705.3441\n-705.3444\n-705.3448\n-705.3452\n-705.3456\n-705.3459\n-705.3463\n-705.2424\n-705.2426\n-705.2428\n-705.2430\n-705.2433\n-705.2435\n-705.2438\n-705.2441\n-705.2443\n-705.2445\n-705.2448\n-705.2450\n-704.8289\n-704.8284\n-704.8282\n-704.8281\n\n\n2450\n-705.7424\n-705.7477\n-705.7509\n-705.7531\n-705.7548\n-705.7562\n-705.7574\n-705.7584\n-705.7593\n-705.7601\n-705.7609\n-705.7615\n-705.3429\n-705.3429\n-705.3431\n-705.3435\n-705.3438\n-705.3442\n-705.3446\n-705.3450\n-705.3454\n-705.3457\n-705.3461\n-705.3464\n-705.2426\n-705.2427\n-705.2429\n-705.2432\n-705.2434\n-705.2437\n-705.2439\n-705.2442\n-705.2444\n-705.2447\n-705.2449\n-705.2452\n-704.8290\n-704.8285\n-704.8283\n-704.8282\n\n\n2500\n-705.7425\n-705.7479\n-705.7510\n-705.7532\n-705.7549\n-705.7563\n-705.7575\n-705.7586\n-705.7595\n-705.7603\n-705.7610\n-705.7617\n-705.3431\n-705.3430\n-705.3433\n-705.3436\n-705.3440\n-705.3444\n-705.3448\n-705.3451\n-705.3455\n-705.3459\n-705.3462\n-705.3466\n-705.2427\n-705.2429\n-705.2431\n-705.2433\n-705.2436\n-705.2438\n-705.2441\n-705.2443\n-705.2446\n-705.2448\n-705.2451\n-705.2453\n-704.8292\n-704.8287\n-704.8285\n-704.8284\n\n\n\n\n\nAccording to the “leave one out cross validation” method, the optimal set of bandwidths seem to be 1700 metres and 195 days. As expected, larger bandwidths are required because the density of the events are spread both in space and time.\n\n# choosing sample in times (every 10 days)\nsample_time &lt;- seq(min(roadacc$Time), max(roadacc$Time), 10)\n\n\n# calculating densities\ntnkde_densities &lt;- tnkde(lines = roadsbkk,\n                   events = roadacc,\n                   time_field = \"Time\",\n                   w = rep(1, nrow(roadacc)), \n                   samples_loc = samples,\n                   samples_time = sample_time, \n                   kernel_name = \"quartic\",\n                   bw_net = 1700, \n                   bw_time = 195,\n                   adaptive = TRUE,\n                   trim_bw_net = 1800,\n                   trim_bw_time = 200,\n                   method = \"discontinuous\",\n                   div = \"bw\",\n                   max_depth = 5,\n                   digits = 1,\n                   tol = 0.01,\n                   agg = 15,\n                   grid_shape = c(5,5), \n                   verbose  = FALSE)\n\nWe save the tnkde densities as a new rds file to avoid re-running the code above:\n\n\nCode\nwrite_rds(tnkde_densities,\"data/rds/tnkde_densities.rds\")\n\n\n\ntnkde_densities &lt;- read_rds(\"data/rds/tnkde_densities.rds\")\n\n\n# creating a color palette for all the densities\nall_densities &lt;- c(tnkde_densities$k)\ncolor_breaks &lt;- classIntervals(all_densities, n = 10, style = \"kmeans\")\n\n\n# generating a map at each sample time\nall_maps &lt;- lapply(1:ncol(tnkde_densities$k), function(i){\n  time &lt;- sample_time[[i]]\n  date &lt;- as.Date(start) + time\n  \n  samples$density &lt;- (tnkde_densities$k)[,i]\n  samples$density &lt;- samples$density*1000\n  map1 &lt;- tm_shape(samples) + \n  tm_dots(col = \"density\", size = 0.01,\n          breaks = color_breaks$brks, palette = viridis(10)) + \n    tm_layout(legend.show=FALSE, main.title = as.character(date), main.title.size = 0.5)\n  return(map1)\n})\n\nWe save all_maps as a new rds file to avoid re-running the code above:\n\n\nCode\nwrite_rds(all_maps,\"data/rds/all_maps.rds\")\n\n\n\nall_maps &lt;- read_rds(\"data/rds/all_maps.rds\")\n\n\n# creating a gif with all the maps\ntmap_animation(all_maps, filename = \"images/animated_map2.gif\", \n               width = 1000, height = 1000, dpi = 300, delay = 50)\n\n\nknitr::include_graphics(\"images/animated_map2.gif\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01B.html#references",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01B.html#references",
    "title": "Take-home Exercise 1B",
    "section": "",
    "text": "https://wiki.openstreetmap.org/wiki/WikiProject_Thailand#Highway_classification\nhttps://cran.r-project.org/web/packages/spNetwork/vignettes/NKDE.html\nhttps://jeremygelb.github.io/spNetwork/articles/web_vignettes/AdaptiveBW.html\nhttps://jeremygelb.github.io/spNetwork/articles/NKDE.html\nhttps://jeremygelb.github.io/spNetwork/articles/TNKDE.html"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01B.html#conclusion",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01B.html#conclusion",
    "title": "Take-home Exercise 1B",
    "section": "",
    "text": "Combining the insights from all analyses carried out in this exercise:\n\n\n\n\n\n\n\n\n\n\n\nS/N\nKey Topic\nGeneral insights from EDA\nSpatial\nSpatio-Temporal Insights\nRecommendations on next steps\n\n\n\n\n1\nLocation\n\nObserve highest concentration of road accidents in Bangkok, followed by Samut Prakan, Pathum Thani, Samut Sakhon, Nakhon Pathom and Nonthaburi\n\nIncreasing trend in Bangkok and Samut Prakan over the years\nSpace for improvement for Pathum Thani, Samut Sakhon and Nonthaburi as they experience fluctuating number of road accidents over the years\nNakhon Pathom can be last priority of focus as the road accidents have decreased over the years\n\nRoad accidents mostly occur on straight road conditions and on roads with no slopes. Wide curve and grade-separated intersection/ramps are also top road descriptions for road accidents.\n\n\nRoad accidents across BMR are not randomly distributed and exhibit clustering\nRoad accidents occur more intensely along the road lines in Bangkok and Samut Prakan\n\nDense occurrence of road accidents within central Bangkok along intricate road networks\n\nOverall, observe denser occurrence of road accidents at intersections of road segments\n\n-\n\nPrioritise road accident prevention efforts on Bangkok and Samut Prakan, followed by Pathum Thani, Samut Sakhon, Nakhon Pathom and finally Nonthaburi\nWithin the provinces, to conduct in-depth study on conditions of straight roads and roads with no slopes, especially at points where such roads meet at intersections. This can be followed by studies on roads with wide curve and grade-separated intersection/ramps.\nPreventive measures can be:\n\nPublic education campaigns that highlight the risks of road accidents even on seemingly safe straight roads, to increase driver’s and pedestrians’ awareness of risks and not to be complacent.\nClearer signs can be placed along straight roads to remind drivers and pedestrians of safe road practices.\nPlace more cameras along these roads to capture errant/risky behaviour and to send warning/enforcement letters to prevent the same driver/pedestrian from making similar/more severe mistakes in future\n\n\n\n\n2\nTime\n\nRoad accidents tend to occur more often near the start and end of the year\n\nIncreasing trend of road accidents in the later months i.e. Oct to Dec, over the years\n\nRoad accidents seem to occur more on Fri and Sat\nRoad accidents seem to occur more often between 7am to 11pm, with the top two timings at 9am and 7pm\n\n-\n\nRoad accidents tend to occur more intensely at the end of the year, with lower occurrences in the middle segment of the year.\n\nThere could be a high overall accident count at the start of the year but the spatial distribution during this period might be more dispersed\nRoad accidents near the end of the year seem to be more concentrated\n\nRoad accidents occur in high accident counts at the start of the weekend\n\nThe spatial distribution of road accidents on Sun and Mon are more concentrated as compared to Fri and Sat\n\nOccurrence of road accidents is more intense during the hours from 7am to 11pm\n\n\nTo focus on preventive efforts in the later months of the year i.e. ramp up public education campaigns, to patrol the roads more often or to set up more traffic control points as compared to the early months of the year\nTo step up road control measures from Fri to Mon\n\nFor Fri and Sat, the spatial distribution of road accidents are more dispersed hence might require more manpower to form a larger patrol group or more traffic check points to monitor traffic and prevent accidents\nFor Sun and Mon, the spatial distribution of road accidents is more concentrated. A study can be carried out to shortlist the hotspots and patrol or traffice control efforts can be more focused on these areas on these two days\n\nAs the peak hours are at 9am and 7pm, Thai government can considering introducing policies to encourage the population to head to work or school at earlier or later timings to stagger traffic and reduce the risks of accidents. For instance, offering discount toll rates or public transport fees at earlier or later offpeak timings to entice population to utilise the transport modes at different timings.\n\n\n\n3\nWeather conditions\n\nRoad accidents most frequently occur during clear weather conditions followed by rainy and dark conditions\n\n-\n-\n\nTo focus on needle-moving strategies that can prevent road accidents during clear weather conditions i.e. to install more warning signs and speed cameras along the locations stated in S/N 1 for deterrence.\n\n\n\n4\nHuman factors\n\nRoad accidents mostly involve private/passenger car, followed by 4-wheel pickup truck and motorcycle as top 3 vehicles\nTop presumed cause is speeding\nTop accident types are rear-end collision and rollover/fallen on straight road\n\n-\n-\n\nTo focus public education efforts on drivers with private/passenger car, 4-wheel pickup truck and motorcycle licenses i.e. mailers to these group of drivers. As a pre-emptive measure, to place greater emphasis on safety practices and road guidelines when prospective drivers apply for the licenses for these vehicles.\nTo set up more speed cameras along locations in S/N 1 to identify errant drivers and as a form of deterrence."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "title": "In-class Exercise 5",
    "section": "",
    "text": "Advice from Prof Kam on Take-home Ex01:\n\n\n\n\nthere is a highway at the top of the 6 provinces - should have created a ~50m buffer around the 6 provinces then use the buffered area to clip the road lines in Bangkok Metropolitan Region\nshould sieve out short road lengths from road lines data\nalways plot data out, examine it in relation to the context to know whether data is properly prepared\n\n\n\n\n\nIn this hands-on exercise, we will compute Global Measures of Spatial Autocorrelation (GMSA) using spdep package. The learning points of this hands-on exercise are to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of spdep package,\n\nplot Moran scatterplot,\ncompute and plot spatial correlogram using appropriate function of spdep package.\n\nprovide statistically correct interpretation of GSA statistics.\n\n\n\n\n\n\nIn spatial policy, one of the main development objective of the local government and planners is to ensure equal distribution of development in the province. Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically. If the answer is No. Then, our next question will be “is there sign of spatial clustering?”. And, if the answer for this question is yes, then our next question will be “where are these clusters?”\nIn this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Provice, People Republic of China.\n\n\n\nTwo data sets will be used in this hands-on exercise, they are:\n\nHunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\n\n\nBefore we get started, we need to ensure that spdep, sf, tmap and tidyverse packages of R are installed in R.\n\nsf is use for importing and handling geospatial data in R,\ntidyverse is mainly use for wrangling attribute data in R,\nspdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and\ntmap will be used to prepare cartographic quality chropleth map.\n\nThe code chunk below is used to perform the following tasks:\n\ncreating a package list containing the necessary R packages,\nchecking if the R packages in the package list have been installed in R,\n\nif they have yet to be installed, RStudio will installed the missing packages,\n\nlaunching the packages into R environment.\n\n\npacman::p_load(sf,tidyverse,spdep,tmap,sfdep)\n\n\n\n\n\nIn this section, we will bring a geospatial data and its associated attribute table into R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.\n\n\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be a simple features object of sf.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\",\n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\In-class_Ex\\In-class_Ex05\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\nWe note that the simple features data has a polygon geometry and has 88 features and 7 fields. It is in WGS84 geographic coordinate system.\n\n\n\nNext, we will import Hunan_2012.csv into R using read_csv() of readr package. The output is in R data frame class.\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package:\n\nhunan_GDPPC &lt;- left_join(hunan,hunan2012)%&gt;%\n  select(1:4,7,15)\n\n\n\n\nNow, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\ntmap_mode('plot')\ntm_shape(hunan_GDPPC) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\",\n            main.title.size = 1,\n            legend.text.size = 0.6,\n            legend.height = 1.20,\n            legend.width = 1.20,\n            frame = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nwm_q &lt;- hunan_GDPPC %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb,\n                         style = \"W\"),\n         .before = 1)\n\n\nthe way the code is written avoids having too many layers i.e. calculate nb first then use it to calculate weights\nuse sfdep for this as its more handy than spdep for this use case; sfdep also puts the outputs into the dataframe rather than printing it out in spdep (with reference to link)\nThe argument style = \"W\" indicates that the spatial weights will follow the “row-standardized” method, meaning that the weights for each region’s neighbors sum to 1\nThe .before = 1 argument ensures that the new columns (nb and wt) will be inserted before the first column of the hunan_GDPPC dataset instead of being appended to last column\ncontiguity matrix cannot work in zone without neighbours, will need to assign allow_zone: TRUE\n\n\n\n\n\nmoranI &lt;- global_moran(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt)\n\nglimpse(moranI)\n\nList of 2\n $ I: num 0.301\n $ K: num 7.64\n\n\n\nabove dont provide p-value hence we typical perform Moran’s I test instead of just computing Moran’s I statistics (next code below)\n\n\n\n\n\nglobal_moran_test(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\n\ntest for randomisation assumption\np-value lesser than 0.05, reject null hypothesis at 95% confidence interval\n\n\n\n\nIn practice, Monte carlo simulation should be used to perform the statistical test. For sfdep, it is supported by global_moran_perm() - run nsim =99 aka 100 times:\n\nset.seed(1234)\nglobal_moran_perm(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt,\n                  nsim=99)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.30075, observed rank = 100, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\n\nnote that p-value is even smaller as there are more iterations - when put them together aka big number theory, converge better into normal distribution\np-value lesser than 0.05, reject null hypothesis at 95% confidence interval\ncan also run nsim = 999, no fixed number, and even at nsim = 999, results can be generated very fast. note that the results generated/conclusion attained is the same.\n\n\n\n\nAfter determing presence of spatial autocorrelation using Global Moran’s I, we now want to know where so we compute local Moran’s I at county level:\n\nlisa &lt;- wm_q %&gt;%\n  mutate(local_moran = local_moran(\n    GDPPC, nb, wt, nsim =99),\n    .before = 1) %&gt;%\n  unnest(local_moran)\n\n\nsfdep is a wrapper of spdep, hence besides generating the following fields, it places these columns into the data frame when the unnest() function is run:\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local moran statistic under the randomisation hypothesis\nZ.Ii:the standard deviate of local moran statistic\nPr(): the p-value of local moran statistic\n\nunnest() helps to put the values from a list into a table format\nnote that there are 3 different p values i.e. p_ii, p_ii_sim, p_folded_sim (use pysal) - tend to pick up p_ii_sim\nnote that sfdep also already provides the label for the different cluster/outlier types (“mean”/“median”/“pysal”) but in spdep, this part is manual:\n\n\n\nnote that different methods can give different results. note that when data is skewed, advise to use “median”\n\n\n\n\n\ntmap_mode('plot')\ntm_shape(lisa)+\n  tm_fill(\"ii\")+\n  tm_borders(alpha = 0.5)+\n  tm_view(set.zoom.limits = c(6,8))+\n  tm_layout(main.title = \"local Moran's I of GDPPC\",\n            main.title.size = 1)\n\n\n\n\n\n\n\n\n\n\n\n\ntmap_mode('plot')\ntm_shape(lisa)+\n  tm_fill(\"p_ii_sim\")+\n  tm_borders(alpha = 0.5)+\n  tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 1)\n\n\n\n\n\n\n\n\nFor better comparison, we put them next to each other:\n\ntmap_mode('plot')\nmap1 &lt;- tm_shape(lisa)+\n  tm_fill(\"ii\")+\n  tm_borders(alpha = 0.5)+\n  tm_view(set.zoom.limits = c(6,8))+\n  tm_layout(main.title = \"local Moran's I of GDPPC\",\n            main.title.size = 1)\n\nmap2 &lt;- tm_shape(lisa)+\n  tm_fill(\"p_ii_sim\",\n          breaks = c(0,0.001,0.01,0.05,1),\n          labels = c(\"0.001\",\"0.01\",\"0.05\",\"Not sig\"))+\n  tm_borders(alpha = 0.5)+\n  tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 1)\n\ntmap_arrange(map1,map2,ncol = 2)\n\n\n\n\n\n\n\n\n\n\n\n\n\nlisa_sig &lt;- lisa %&gt;%\n  filter(p_ii &lt; 0.05)\ntmap_mode('plot')\ntm_shape(lisa)+\n  tm_polygons()+\n  tm_borders(alpha = 0.5)+\n  tm_shape(lisa_sig)+\n  tm_fill(\"mean\")+\n  tm_borders(alpha = 0.4)\n\n\n\n\n\n\n\n\n\nnote from the p-values in lisa that some are not significant, hence the code above filters p_ii that are significant i.e. &lt;0.05 for 95% confidence interval hence you ensure that whatever is on the map is a statistically significant cluster\n\nComparing against the local Moran’s I and p-value maps:\n\ntmap_mode('plot')\nmap1 &lt;- tm_shape(lisa)+\n  tm_fill(\"ii\")+\n  tm_borders(alpha = 0.5)+\n  tm_view(set.zoom.limits = c(6,8))+\n  tm_layout(main.title = \"local Moran's I of GDPPC\",\n            main.title.size = 1)\n\nmap2 &lt;- tm_shape(lisa)+\n  tm_fill(\"p_ii_sim\",\n          breaks = c(0,0.001,0.01,0.05,1),\n          labels = c(\"0.001\",\"0.01\",\"0.05\",\"Not sig\"))+\n  tm_borders(alpha = 0.5)+\n  tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 1)\n\nmap3 &lt;- tm_shape(lisa)+\n  tm_polygons()+\n  tm_borders(alpha = 0.5)+\n  tm_shape(lisa_sig)+\n  tm_fill(\"mean\")+\n  tm_borders(alpha = 0.4)+\n  tm_layout(main.title = \"LISA Map\",\n            main.title.size = 1)\n\ntmap_arrange(map1,map2,map3,ncol = 3)\n\n\n\n\n\n\n\n\n\nnote from the above that on the left, actually are all poor regions aka low but then only 1 region is flagged as statistically significant low-low\n\n\n\n\nWe will need to\n\nwm_idw &lt;- hunan_GDPPC %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wts = st_inverse_distance(nb,geometry,\n                                   scale =1,\n                                   alpha =1),\n         .before = 1)\n\nWe will compute local Gi* using the code chunk below:\n\nHCSA &lt;- wm_idw %&gt;%\n  mutate(local_Gi = local_gstar_perm(\n    GDPPC,nb,wt,nsim=99),\n    .before = 1) %&gt;%\n  unnest(local_Gi)\nHCSA\n\nSimple feature collection with 88 features and 18 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n# A tibble: 88 × 19\n   gi_star cluster   e_gi     var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;    &lt;dbl&gt;      &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.0416 Low     0.0114 0.00000641  0.0493 9.61e-1  0.7          0.35    0.875\n 2 -0.333  Low     0.0106 0.00000384 -0.0941 9.25e-1  1            0.5     0.661\n 3  0.281  High    0.0126 0.00000751 -0.151  8.80e-1  0.9          0.45    0.640\n 4  0.411  High    0.0118 0.00000922  0.264  7.92e-1  0.6          0.3     0.853\n 5  0.387  High    0.0115 0.00000956  0.339  7.34e-1  0.62         0.31    1.07 \n 6 -0.368  High    0.0118 0.00000591 -0.583  5.60e-1  0.72         0.36    0.594\n 7  3.56   High    0.0151 0.00000731  2.61   9.01e-3  0.06         0.03    1.09 \n 8  2.52   High    0.0136 0.00000614  1.49   1.35e-1  0.2          0.1     1.12 \n 9  4.56   High    0.0144 0.00000584  3.53   4.17e-4  0.04         0.02    1.23 \n10  1.16   Low     0.0104 0.00000370  1.82   6.86e-2  0.12         0.06    0.416\n# ℹ 78 more rows\n# ℹ 10 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wts &lt;list&gt;, NAME_2 &lt;chr&gt;,\n#   ID_3 &lt;int&gt;, NAME_3 &lt;chr&gt;, ENGTYPE_3 &lt;chr&gt;, County &lt;chr&gt;, GDPPC &lt;dbl&gt;,\n#   geometry &lt;POLYGON [°]&gt;\n\n\n\ntmap_mode('plot')\ntm_shape(HCSA)+\n  tm_fill(\"gi_star\")+\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\n\n\n\nWe plot significant hot spot and cold spot areas using the appropriate tmap functions below:\n\nHCSA_sig &lt;- HCSA %&gt;%\n  filter(p_sim &lt; 0.05)\ntmap_mode('plot')\ntm_shape(HCSA)+\n  tm_polygons()+\n  tm_borders(alpha = 0.5)+\n  tm_shape(HCSA_sig)+\n  tm_fill(\"cluster\")+\n  tm_borders(alpha = 0.4)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNotes from Prof Kam:\n\n\n\n\nhands-on exercise 5 shows the old way to do it using spdep while the in-class exercise shows the new way to do it using sfdep\n\n\n\n\n\n\n\n\n\nNotes from Prof Kam on Take-home Ex02:\n\n\n\n\nThailand has very large tourism sector\nkey indicators of tourism economy - should identify more than one i.e. besides total revenue by province\nemerging hot and cold spot areas will be covered in Lesson 6\nfrom take-home ex01, we already have the province level data (from HDX)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#overview",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#overview",
    "title": "In-class Exercise 5",
    "section": "",
    "text": "In this hands-on exercise, we will compute Global Measures of Spatial Autocorrelation (GMSA) using spdep package. The learning points of this hands-on exercise are to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of spdep package,\n\nplot Moran scatterplot,\ncompute and plot spatial correlogram using appropriate function of spdep package.\n\nprovide statistically correct interpretation of GSA statistics."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#getting-started",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#getting-started",
    "title": "In-class Exercise 5",
    "section": "",
    "text": "In spatial policy, one of the main development objective of the local government and planners is to ensure equal distribution of development in the province. Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically. If the answer is No. Then, our next question will be “is there sign of spatial clustering?”. And, if the answer for this question is yes, then our next question will be “where are these clusters?”\nIn this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Provice, People Republic of China.\n\n\n\nTwo data sets will be used in this hands-on exercise, they are:\n\nHunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\n\n\nBefore we get started, we need to ensure that spdep, sf, tmap and tidyverse packages of R are installed in R.\n\nsf is use for importing and handling geospatial data in R,\ntidyverse is mainly use for wrangling attribute data in R,\nspdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and\ntmap will be used to prepare cartographic quality chropleth map.\n\nThe code chunk below is used to perform the following tasks:\n\ncreating a package list containing the necessary R packages,\nchecking if the R packages in the package list have been installed in R,\n\nif they have yet to be installed, RStudio will installed the missing packages,\n\nlaunching the packages into R environment.\n\n\npacman::p_load(sf,tidyverse,spdep,tmap,sfdep)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#getting-the-data-into-r-environment",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#getting-the-data-into-r-environment",
    "title": "In-class Exercise 5",
    "section": "",
    "text": "In this section, we will bring a geospatial data and its associated attribute table into R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.\n\n\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be a simple features object of sf.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\",\n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\In-class_Ex\\In-class_Ex05\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\nWe note that the simple features data has a polygon geometry and has 88 features and 7 fields. It is in WGS84 geographic coordinate system.\n\n\n\nNext, we will import Hunan_2012.csv into R using read_csv() of readr package. The output is in R data frame class.\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package:\n\nhunan_GDPPC &lt;- left_join(hunan,hunan2012)%&gt;%\n  select(1:4,7,15)\n\n\n\n\nNow, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\ntmap_mode('plot')\ntm_shape(hunan_GDPPC) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\",\n            main.title.size = 1,\n            legend.text.size = 0.6,\n            legend.height = 1.20,\n            legend.width = 1.20,\n            frame = TRUE)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#global-measures-of-spatial-association",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#global-measures-of-spatial-association",
    "title": "In-class Exercise 5",
    "section": "",
    "text": "wm_q &lt;- hunan_GDPPC %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb,\n                         style = \"W\"),\n         .before = 1)\n\n\nthe way the code is written avoids having too many layers i.e. calculate nb first then use it to calculate weights\nuse sfdep for this as its more handy than spdep for this use case; sfdep also puts the outputs into the dataframe rather than printing it out in spdep (with reference to link)\nThe argument style = \"W\" indicates that the spatial weights will follow the “row-standardized” method, meaning that the weights for each region’s neighbors sum to 1\nThe .before = 1 argument ensures that the new columns (nb and wt) will be inserted before the first column of the hunan_GDPPC dataset instead of being appended to last column\ncontiguity matrix cannot work in zone without neighbours, will need to assign allow_zone: TRUE\n\n\n\n\n\nmoranI &lt;- global_moran(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt)\n\nglimpse(moranI)\n\nList of 2\n $ I: num 0.301\n $ K: num 7.64\n\n\n\nabove dont provide p-value hence we typical perform Moran’s I test instead of just computing Moran’s I statistics (next code below)\n\n\n\n\n\nglobal_moran_test(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\n\ntest for randomisation assumption\np-value lesser than 0.05, reject null hypothesis at 95% confidence interval\n\n\n\n\nIn practice, Monte carlo simulation should be used to perform the statistical test. For sfdep, it is supported by global_moran_perm() - run nsim =99 aka 100 times:\n\nset.seed(1234)\nglobal_moran_perm(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt,\n                  nsim=99)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.30075, observed rank = 100, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\n\nnote that p-value is even smaller as there are more iterations - when put them together aka big number theory, converge better into normal distribution\np-value lesser than 0.05, reject null hypothesis at 95% confidence interval\ncan also run nsim = 999, no fixed number, and even at nsim = 999, results can be generated very fast. note that the results generated/conclusion attained is the same.\n\n\n\n\nAfter determing presence of spatial autocorrelation using Global Moran’s I, we now want to know where so we compute local Moran’s I at county level:\n\nlisa &lt;- wm_q %&gt;%\n  mutate(local_moran = local_moran(\n    GDPPC, nb, wt, nsim =99),\n    .before = 1) %&gt;%\n  unnest(local_moran)\n\n\nsfdep is a wrapper of spdep, hence besides generating the following fields, it places these columns into the data frame when the unnest() function is run:\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local moran statistic under the randomisation hypothesis\nZ.Ii:the standard deviate of local moran statistic\nPr(): the p-value of local moran statistic\n\nunnest() helps to put the values from a list into a table format\nnote that there are 3 different p values i.e. p_ii, p_ii_sim, p_folded_sim (use pysal) - tend to pick up p_ii_sim\nnote that sfdep also already provides the label for the different cluster/outlier types (“mean”/“median”/“pysal”) but in spdep, this part is manual:\n\n\n\nnote that different methods can give different results. note that when data is skewed, advise to use “median”\n\n\n\n\n\ntmap_mode('plot')\ntm_shape(lisa)+\n  tm_fill(\"ii\")+\n  tm_borders(alpha = 0.5)+\n  tm_view(set.zoom.limits = c(6,8))+\n  tm_layout(main.title = \"local Moran's I of GDPPC\",\n            main.title.size = 1)\n\n\n\n\n\n\n\n\n\n\n\n\ntmap_mode('plot')\ntm_shape(lisa)+\n  tm_fill(\"p_ii_sim\")+\n  tm_borders(alpha = 0.5)+\n  tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 1)\n\n\n\n\n\n\n\n\nFor better comparison, we put them next to each other:\n\ntmap_mode('plot')\nmap1 &lt;- tm_shape(lisa)+\n  tm_fill(\"ii\")+\n  tm_borders(alpha = 0.5)+\n  tm_view(set.zoom.limits = c(6,8))+\n  tm_layout(main.title = \"local Moran's I of GDPPC\",\n            main.title.size = 1)\n\nmap2 &lt;- tm_shape(lisa)+\n  tm_fill(\"p_ii_sim\",\n          breaks = c(0,0.001,0.01,0.05,1),\n          labels = c(\"0.001\",\"0.01\",\"0.05\",\"Not sig\"))+\n  tm_borders(alpha = 0.5)+\n  tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 1)\n\ntmap_arrange(map1,map2,ncol = 2)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#lisa-map",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#lisa-map",
    "title": "In-class Exercise 5",
    "section": "",
    "text": "lisa_sig &lt;- lisa %&gt;%\n  filter(p_ii &lt; 0.05)\ntmap_mode('plot')\ntm_shape(lisa)+\n  tm_polygons()+\n  tm_borders(alpha = 0.5)+\n  tm_shape(lisa_sig)+\n  tm_fill(\"mean\")+\n  tm_borders(alpha = 0.4)\n\n\n\n\n\n\n\n\n\nnote from the p-values in lisa that some are not significant, hence the code above filters p_ii that are significant i.e. &lt;0.05 for 95% confidence interval hence you ensure that whatever is on the map is a statistically significant cluster\n\nComparing against the local Moran’s I and p-value maps:\n\ntmap_mode('plot')\nmap1 &lt;- tm_shape(lisa)+\n  tm_fill(\"ii\")+\n  tm_borders(alpha = 0.5)+\n  tm_view(set.zoom.limits = c(6,8))+\n  tm_layout(main.title = \"local Moran's I of GDPPC\",\n            main.title.size = 1)\n\nmap2 &lt;- tm_shape(lisa)+\n  tm_fill(\"p_ii_sim\",\n          breaks = c(0,0.001,0.01,0.05,1),\n          labels = c(\"0.001\",\"0.01\",\"0.05\",\"Not sig\"))+\n  tm_borders(alpha = 0.5)+\n  tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 1)\n\nmap3 &lt;- tm_shape(lisa)+\n  tm_polygons()+\n  tm_borders(alpha = 0.5)+\n  tm_shape(lisa_sig)+\n  tm_fill(\"mean\")+\n  tm_borders(alpha = 0.4)+\n  tm_layout(main.title = \"LISA Map\",\n            main.title.size = 1)\n\ntmap_arrange(map1,map2,map3,ncol = 3)\n\n\n\n\n\n\n\n\n\nnote from the above that on the left, actually are all poor regions aka low but then only 1 region is flagged as statistically significant low-low"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#computing-local-gi-statistics",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#computing-local-gi-statistics",
    "title": "In-class Exercise 5",
    "section": "",
    "text": "We will need to\n\nwm_idw &lt;- hunan_GDPPC %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wts = st_inverse_distance(nb,geometry,\n                                   scale =1,\n                                   alpha =1),\n         .before = 1)\n\nWe will compute local Gi* using the code chunk below:\n\nHCSA &lt;- wm_idw %&gt;%\n  mutate(local_Gi = local_gstar_perm(\n    GDPPC,nb,wt,nsim=99),\n    .before = 1) %&gt;%\n  unnest(local_Gi)\nHCSA\n\nSimple feature collection with 88 features and 18 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n# A tibble: 88 × 19\n   gi_star cluster   e_gi     var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;    &lt;dbl&gt;      &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.0416 Low     0.0114 0.00000641  0.0493 9.61e-1  0.7          0.35    0.875\n 2 -0.333  Low     0.0106 0.00000384 -0.0941 9.25e-1  1            0.5     0.661\n 3  0.281  High    0.0126 0.00000751 -0.151  8.80e-1  0.9          0.45    0.640\n 4  0.411  High    0.0118 0.00000922  0.264  7.92e-1  0.6          0.3     0.853\n 5  0.387  High    0.0115 0.00000956  0.339  7.34e-1  0.62         0.31    1.07 \n 6 -0.368  High    0.0118 0.00000591 -0.583  5.60e-1  0.72         0.36    0.594\n 7  3.56   High    0.0151 0.00000731  2.61   9.01e-3  0.06         0.03    1.09 \n 8  2.52   High    0.0136 0.00000614  1.49   1.35e-1  0.2          0.1     1.12 \n 9  4.56   High    0.0144 0.00000584  3.53   4.17e-4  0.04         0.02    1.23 \n10  1.16   Low     0.0104 0.00000370  1.82   6.86e-2  0.12         0.06    0.416\n# ℹ 78 more rows\n# ℹ 10 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wts &lt;list&gt;, NAME_2 &lt;chr&gt;,\n#   ID_3 &lt;int&gt;, NAME_3 &lt;chr&gt;, ENGTYPE_3 &lt;chr&gt;, County &lt;chr&gt;, GDPPC &lt;dbl&gt;,\n#   geometry &lt;POLYGON [°]&gt;\n\n\n\ntmap_mode('plot')\ntm_shape(HCSA)+\n  tm_fill(\"gi_star\")+\n  tm_borders(alpha=0.5)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#visualising-hot-spot-and-cold-spot-areas",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#visualising-hot-spot-and-cold-spot-areas",
    "title": "In-class Exercise 5",
    "section": "",
    "text": "We plot significant hot spot and cold spot areas using the appropriate tmap functions below:\n\nHCSA_sig &lt;- HCSA %&gt;%\n  filter(p_sim &lt; 0.05)\ntmap_mode('plot')\ntm_shape(HCSA)+\n  tm_polygons()+\n  tm_borders(alpha = 0.5)+\n  tm_shape(HCSA_sig)+\n  tm_fill(\"cluster\")+\n  tm_borders(alpha = 0.4)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNotes from Prof Kam:\n\n\n\n\nhands-on exercise 5 shows the old way to do it using spdep while the in-class exercise shows the new way to do it using sfdep\n\n\n\n\n\n\n\n\n\nNotes from Prof Kam on Take-home Ex02:\n\n\n\n\nThailand has very large tourism sector\nkey indicators of tourism economy - should identify more than one i.e. besides total revenue by province\nemerging hot and cold spot areas will be covered in Lesson 6\nfrom take-home ex01, we already have the province level data (from HDX)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "In this hands-on exercise, we will delineate a homogeneous region by using geographically referenced multivariate data. There are two major analysis, namely:\n\nhierarchical cluster analysis; and\nspatially constrained cluster analysis.\n\n\n\nThe learning outcomes of this hands-on exercise are:\n\nto convert GIS polygon data into R’s simple feature data.frame by using appropriate functions of sf package of R;\nto convert simple feature data.frame into R’s SpatialPolygonDataFrame object by using appropriate sf of package of R;\nto perform custer analysis by using hclust() of Base R;\nto perform spatially constrained cluster analysis using skater() of Base R; and\nto visualise the analysis output by using ggplot2 and tmap package.\n\n\n\n\n\n\n\nIn geobusiness and spatial policy, it is a common practice to delineate the market or planning area into homogeneous regions by using multivariate data. In this hands-on exercise, we are interested to delineate Shan State, Myanmar into homogeneous regions by using multiple Information and Communication Technology (ICT) measures, namely: Radio, Television, Land line phone, Mobile phone, Computer, and Internet at home.\n\n\n\n\nTwo data sets will be used in this study. They are:\n\nMyanmar Township Boundary Data (i.e. myanmar_township_boundaries) : This is a GIS data in ESRI shapefile format. It consists of township boundary information of Myanmar. The spatial data are captured in polygon features.\nShan-ICT.csv: This is an extract of The 2014 Myanmar Population and Housing Census Myanmar at the township level.\n\nBoth data sets are download from Myanmar Information Management Unit (MIMU).\n\n\nBefore we start the analysis, we need to install and launch the following packages into the R environment:\n\nSpatial data handling\n\nsf, rgdal and spdep\n\nAttribute data handling\n\ntidyverse, especially readr, ggplot2 and dplyr\n\nChoropleth mapping\n\ntmap\n\nMultivariate data visualisation and analysis\n\ncoorplot, ggpubr, and heatmaply\n\nCluster analysis\n\ncluster\nClustGeo\n\n\n\npacman::p_load(spdep,tmap,sf,ClustGeo,ggpubr,cluster,factoextra,NbClust,heatmaply,corrplot,psych,tidyverse,GGally)\n\n\n\n\n\n\n\nIn this section, I will import Myanmar Township Boundary GIS data and its associated attrbiute table into R environment.\nThe Myanmar Township Boundary GIS data is in ESRI shapefile format. It will be imported into R environment by using the st_read() function of sf.\nThe code chunks used are shown below:\n\nshan_sf &lt;- st_read(dsn = \"data/geospatial\",\n                   layer = \"myanmar_township_boundaries\") %&gt;%\n  filter(ST %in% c(\"Shan (East)\",\"Shan (North)\",\"Shan (South)\")) %&gt;%\n  select(c(2:7))\n\nReading layer `myanmar_township_boundaries' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex06\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.17275 ymin: 9.671252 xmax: 101.1699 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\nThe imported township boundary object is called shan_sf. It is saved in simple feature data.frame format.\nWe view the contents of the newly created shan_sf simple features dataframe using the code chunk below:\n\nshan_sf\n\nSimple feature collection with 55 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 96.15107 ymin: 19.29932 xmax: 101.1699 ymax: 24.15907\nGeodetic CRS:  WGS 84\nFirst 10 features:\n             ST ST_PCODE       DT   DT_PCODE        TS  TS_PCODE\n1  Shan (North)   MMR015  Mongmit MMR015D008   Mongmit MMR015017\n2  Shan (South)   MMR014 Taunggyi MMR014D001   Pindaya MMR014006\n3  Shan (South)   MMR014 Taunggyi MMR014D001   Ywangan MMR014007\n4  Shan (South)   MMR014 Taunggyi MMR014D001  Pinlaung MMR014009\n5  Shan (North)   MMR015  Mongmit MMR015D008    Mabein MMR015018\n6  Shan (South)   MMR014 Taunggyi MMR014D001     Kalaw MMR014005\n7  Shan (South)   MMR014 Taunggyi MMR014D001     Pekon MMR014010\n8  Shan (South)   MMR014 Taunggyi MMR014D001  Lawksawk MMR014008\n9  Shan (North)   MMR015  Kyaukme MMR015D003 Nawnghkio MMR015013\n10 Shan (North)   MMR015  Kyaukme MMR015D003   Kyaukme MMR015012\n                         geometry\n1  MULTIPOLYGON (((96.96001 23...\n2  MULTIPOLYGON (((96.7731 21....\n3  MULTIPOLYGON (((96.78483 21...\n4  MULTIPOLYGON (((96.49518 20...\n5  MULTIPOLYGON (((96.66306 24...\n6  MULTIPOLYGON (((96.49518 20...\n7  MULTIPOLYGON (((97.14738 19...\n8  MULTIPOLYGON (((96.94981 22...\n9  MULTIPOLYGON (((96.75648 22...\n10 MULTIPOLYGON (((96.95498 22...\n\n\nNote that the sf dataframe is conformed to the Hardy Wickham’s tidy framework, as such we can also use the glimpse() function to reveal the data type of its fields:\n\nglimpse(shan_sf)\n\nRows: 55\nColumns: 7\n$ ST       &lt;chr&gt; \"Shan (North)\", \"Shan (South)\", \"Shan (South)\", \"Shan (South)…\n$ ST_PCODE &lt;chr&gt; \"MMR015\", \"MMR014\", \"MMR014\", \"MMR014\", \"MMR015\", \"MMR014\", \"…\n$ DT       &lt;chr&gt; \"Mongmit\", \"Taunggyi\", \"Taunggyi\", \"Taunggyi\", \"Mongmit\", \"Ta…\n$ DT_PCODE &lt;chr&gt; \"MMR015D008\", \"MMR014D001\", \"MMR014D001\", \"MMR014D001\", \"MMR0…\n$ TS       &lt;chr&gt; \"Mongmit\", \"Pindaya\", \"Ywangan\", \"Pinlaung\", \"Mabein\", \"Kalaw…\n$ TS_PCODE &lt;chr&gt; \"MMR015017\", \"MMR014006\", \"MMR014007\", \"MMR014009\", \"MMR01501…\n$ geometry &lt;MULTIPOLYGON [°]&gt; MULTIPOLYGON (((96.96001 23..., MULTIPOLYGON (((…\n\n\n\n\n\n\nict &lt;- read_csv(\"data/aspatial/Shan-ICT.csv\")\n\nThe imported InfoComm variables were extracted from the 2014 Myanmar Population and Housing Census Myanmar and imported into R environment as ict in the R tibble dataframe format.\nWe can view the summary statistics of ict dataframe as follows:\n\nsummary(ict)\n\n District Pcode     District Name      Township Pcode     Township Name     \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n Total households     Radio         Television    Land line phone \n Min.   : 3318    Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711    1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685    Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369    Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471    3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604    Max.   :30176   Max.   :62388   Max.   :6736.0  \n  Mobile phone      Computer      Internet at home\n Min.   :  150   Min.   :  20.0   Min.   :   8.0  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0  \n Median : 3559   Median : 244.0   Median : 316.0  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0  \n\n\nThere are a total of 11 fields and 55 observations in the tibble dataframe.\n\n\n\nThe unit of measurement of the values in ict are the number of households. Using these values directly will be biased by the underlying total number of households. In general, townships with relatively higher total number of households will also have a higher number of households owning radios, TV etc.\nTo overcome this problem, we will derive the penetration rate of each ICT variable using the code chunk below:\n\nict_derived &lt;- ict %&gt;%\n  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %&gt;%\n  mutate(`TV_PR` = `Television`/`Total households`*1000) %&gt;%\n  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %&gt;%\n  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %&gt;%\n  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %&gt;%\n  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %&gt;%\n  rename(`DT_PHONE`=`District Pcode`,\n        `DT` = `District Name`,\n        `TS_PCODE`=`Township Pcode`,\n        `TS`=`Township Name`,\n        `TT_HOUSEHOLDS`=`Total households`,\n        `RADIO`=`Radio`,\n        `TV`=`Television`,\n        `LLPHONE`=`Land line phone`,\n        `MPHONE`=`Mobile phone`,\n        `COMPUTER`=`Computer`,\n        `INTERNET`=`Internet at home`)\n\nWe review the summary statistics of the newly derived penetration codes using the code chunk below:\n\nsummary(ict_derived)\n\n   DT_PHONE              DT              TS_PCODE              TS           \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n TT_HOUSEHOLDS       RADIO             TV           LLPHONE      \n Min.   : 3318   Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711   1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685   Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369   Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471   3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604   Max.   :30176   Max.   :62388   Max.   :6736.0  \n     MPHONE         COMPUTER         INTERNET         RADIO_PR     \n Min.   :  150   Min.   :  20.0   Min.   :   8.0   Min.   : 21.05  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0   1st Qu.:138.95  \n Median : 3559   Median : 244.0   Median : 316.0   Median :210.95  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2   Mean   :215.68  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5   3rd Qu.:268.07  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0   Max.   :484.52  \n     TV_PR         LLPHONE_PR       MPHONE_PR       COMPUTER_PR    \n Min.   :116.0   Min.   :  2.78   Min.   : 36.42   Min.   : 3.278  \n 1st Qu.:450.2   1st Qu.: 22.84   1st Qu.:190.14   1st Qu.:11.832  \n Median :517.2   Median : 37.59   Median :305.27   Median :18.970  \n Mean   :509.5   Mean   : 51.09   Mean   :314.05   Mean   :24.393  \n 3rd Qu.:606.4   3rd Qu.: 69.72   3rd Qu.:428.43   3rd Qu.:29.897  \n Max.   :842.5   Max.   :181.49   Max.   :735.43   Max.   :92.402  \n  INTERNET_PR     \n Min.   :  1.041  \n 1st Qu.:  8.617  \n Median : 22.829  \n Mean   : 30.644  \n 3rd Qu.: 41.281  \n Max.   :117.985  \n\n\nNote that we have added six new fields into the dataframe: RADIO_PR, TV_PR, LLPHONE_PR, MPHONE_PR, COMPUTER_PR and INTERNET_PR.\n\n\n\n\n\n\nWe can plot the distribution of variables using appropriate EDA as shown in the code chunk below. Histogram is useful to identify the overall distribution of the data values i.e. left-/right-skewed or normal distribution.\n\nggplot(ict_derived,\n       aes(x=`RADIO`))+\n  geom_histogram(bins = 20,\n                 color = \"black\",\n                 fill = \"lightblue\")\n\n\n\n\n\n\n\n\nBoxplot is useful to detect any outliers:\n\nggplot(ict_derived,\n       aes(x=`RADIO`))+\n  geom_boxplot(color =\"black\",\n               fill = \"lightblue\")\n\n\n\n\n\n\n\n\nWe will also plot the distributed of the newly derived variable i.e. Radio Penetration Rate by using the code chunk below:\n\nggplot(ict_derived,\n       aes(x=`RADIO_PR`))+\n  geom_histogram(bins = 20,\n                 color = \"black\",\n                 fill = \"lightblue\")\n\n\n\n\n\n\n\n\nWe also plot using boxplot:\n\nggplot(ict_derived,\n       aes(x=`RADIO_PR`))+\n  geom_boxplot(color = \"black\",\n               fill = \"lightblue\")\n\n\n\n\n\n\n\n\nWe plot the distribution of the other variables as well by first creating the individual histograms:\n\n\n\n\n\n\nNote\n\n\n\n\nradio &lt;- ggplot(ict_derived,\n                aes(x=`RADIO_PR`))+\n  geom_histogram(bins = 20,\n                 color = \"black\",\n                 fill = \"lightblue\")\n\ntv &lt;- ggplot(ict_derived,\n                aes(x=`TV_PR`))+\n  geom_histogram(bins = 20,\n                 color = \"black\",\n                 fill = \"lightblue\")\n\nllphone &lt;- ggplot(ict_derived,\n                aes(x=`LLPHONE_PR`))+\n  geom_histogram(bins = 20,\n                 color = \"black\",\n                 fill = \"lightblue\")\n\nmphone &lt;- ggplot(ict_derived,\n                aes(x=`MPHONE_PR`))+\n  geom_histogram(bins = 20,\n                 color = \"black\",\n                 fill = \"lightblue\")\n\ncomputer &lt;- ggplot(ict_derived,\n                aes(x=`COMPUTER_PR`))+\n  geom_histogram(bins = 20,\n                 color = \"black\",\n                 fill = \"lightblue\")\n\ninternet &lt;- ggplot(ict_derived,\n                aes(x=`INTERNET_PR`))+\n  geom_histogram(bins = 20,\n                 color = \"black\",\n                 fill = \"lightblue\")\n\n\n\nWe then use ggarrange() function of ggpubr packageto group the histograms together:\n\nggarrange(radio,tv,llphone,mphone,computer,internet,\n          ncol = 3,\n          nrow = 2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn-class 6 notes from Prof Kam:\n\n\n\n\nas seen from the distribution from the plots above, the differences between the ranges of the variables are not great hence can proceed without using standardised variables\n\n\n\n\n\n\n\n\nBefore we can prepare the chloropleth map, we need to combine both the geospatial data object shan_sf and the aspatial dataframe object ict_derived into one. This will be performed using left_join() function of dplyr package.\nThe shan_sf simple feature dataframe will be used as the base data object and the ict_derived dataframe will be used as the join table.\nThe unique identifier and common field used to join both data objects is TS_PCODE. We saved the file as a new rds file to avoid rerunning the preparation steps.\n\nshan_sf &lt;- left_join(shan_sf,\n                              ict_derived,\n                              by = c(\"TS_PCODE\"=\"TS_PCODE\"))\n\nwrite_rds(shan_sf,\"data/rds/shan_sf.rds\")\n\nIt is important to note that no new output data has been created. Instead, the data fields from ict_derived dataframe are now updated into the shan_sf dataframe.\n\nshan_sf &lt;- read_rds(\"data/rds/shan_sf.rds\")\n\n\n\n\nWe will prepare a choropleth map to take a quick look at the distribution of radio penetration rate of Shan State at the township level.\nWe use the qtm() function of the tmap package below:\n\nqtm(shan_sf,\"RADIO_PR\")\n\n\n\n\n\n\n\n\nIn order to reveal that the distribution shown in the choropleth map above is bias to the underlying total number of households at the township, we will create two choropleth maps - one for the total number of households TT_HOUSEHOLDS.map and one for the total number of households with Radio i.e. RADIO.map using the code chunk below:\n\nTT_HOUSEHOLDS.map &lt;- tm_shape(shan_sf)+\n  tm_fill(col = \"TT_HOUSEHOLDS\",\n          n = 5,\n          style = \"jenks\",\n          title = \"Total households\")+\n  tm_borders(alpha = 0.5)+\n  tm_layout(legend.position =c(0.8,0.5))\n\nRADIO.map &lt;- tm_shape(shan_sf)+\n  tm_fill(col = \"RADIO\",\n          n = 5,\n          style = \"jenks\",\n          title = \"Number of households with Radio\")+\n  tm_borders(alpha = 0.5)+\n  tm_layout(legend.position =c(0.8,0.5))\n\ntmap_arrange(TT_HOUSEHOLDS.map,RADIO.map,\n             asp = NA,\n             ncol = 2)\n\n\n\n\n\n\n\n\nThe choropleth maps above show that townships with relatively larger number of households are also showing relatively higher number of radio ownership.\nNow we plot the choropleth maps showing the distribution of total number of households and radio penetration rate using the code chunk below:\n\ntm_shape(shan_sf)+\n  tm_polygons(c(\"TT_HOUSEHOLDS\",\"RADIO_PR\"),\n              style=\"jenks\")+\n  tm_facets(sync = TRUE,\n            ncol = 2)+\n  tm_legend(legend.position = c(\"right\",\"bottom\"))+\n  tm_layout(outer.margins = 0,\n            asp = 0)\n\n\n\n\n\n\n\n\nAs shown above, choropleth maps above show that townships with relatively larger number of households might not have a higher number of radio penetration rate.\n\n\n\n\n\nBefore we perform cluster analysis, it is important to ensure that the cluster variables are not highly correlated.\nWe will use corrplot.mixed() function of corrplot package to visualise and analyse the correlation of the input variables.\n\ncluster_vars.cor = cor(ict_derived[,12:17])\ncorrplot.mixed(cluster_vars.cor,\n               lower = \"ellipse\",\n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\nThe correlation plot shows that COMPUTER_PR and INTERNET_PR are highly correlated i.e. more than 0.8, in this case 0.87. This suggests that only one of them should be used in the cluster analysis.\n\n\n\nIn this section, we will perform hierarchical cluster analysis. The analysis consist of four major steps:\n\n\nThe code chunk below will be used to extract the clustering variables from shan_sf simple feature object into a dataframe. Note that we have omitted INTERNET_PR as it is highly correlated to COMPUTER_PR.\n\ncluster_vars &lt;- shan_sf %&gt;%\n  st_set_geometry(NULL) %&gt;%\n  select(\"TS.x\",\"RADIO_PR\",\"TV_PR\",\"LLPHONE_PR\",\"MPHONE_PR\",\"COMPUTER_PR\")\nhead(cluster_vars,10)\n\n        TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1    Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\n2    Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\n3    Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\n4   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\n5     Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\n6      Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\n7      Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\n8   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\n9  Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\n10   Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nNext, we need to change the rows by township name instead of row number using the code chunk below:\n\nrow.names(cluster_vars) &lt;- cluster_vars$\"TS.x\"\nhead(cluster_vars,10)\n\n               TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit     Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya     Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan     Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\nMabein       Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw         Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\nPekon         Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme     Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nThis replaced the row number with township name. Next, we will delete the “TS.x” field using the following code chunk:\n\nshan_ict &lt;- select(cluster_vars,c(2:6))\nhead(shan_ict,10)\n\n          RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit   286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya   417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan   484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung  231.6499 541.7189   28.54454  249.4903    13.76255\nMabein    449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw     280.7624 611.6204   42.06478  408.7951    29.63160\nPekon     318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk  387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme   210.9548 601.1773   39.58267  372.4930    30.94709\n\n\n\n\n\nIn general, multiple variables will be used in cluster analysis. It is not unusal that their value ranges are different. To avoid the cluster analysis being biased to clustering variables with large values, it is useful to standardise the input variables before performing cluster analysis.\n\n\nIn the code chunk below, normalize() of heatmaply package is used to standardise the clustering variables using the Min-Max method. The summary() function is then used to display the summary statistics of the standardised clustering variables.\n\nshan_ict.std &lt;- normalize(shan_ict)\nsummary(shan_ict.std)\n\n    RADIO_PR          TV_PR          LLPHONE_PR       MPHONE_PR     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.2544   1st Qu.:0.4600   1st Qu.:0.1123   1st Qu.:0.2199  \n Median :0.4097   Median :0.5523   Median :0.1948   Median :0.3846  \n Mean   :0.4199   Mean   :0.5416   Mean   :0.2703   Mean   :0.3972  \n 3rd Qu.:0.5330   3rd Qu.:0.6750   3rd Qu.:0.3746   3rd Qu.:0.5608  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n  COMPUTER_PR     \n Min.   :0.00000  \n 1st Qu.:0.09598  \n Median :0.17607  \n Mean   :0.23692  \n 3rd Qu.:0.29868  \n Max.   :1.00000  \n\n\nNote that the value ranges of the Min-Max standardised clustering variables are now from 0 to 1.\n\n\n\n\nZ-score standardisation can also be performed easily using scale() of Base R, as seen in the code chunk below:\n\nshan_ict.z &lt;- scale(shan_ict)\ndescribe(shan_ict.z)\n\n            vars  n mean sd median trimmed  mad   min  max range  skew kurtosis\nRADIO_PR       1 55    0  1  -0.04   -0.06 0.94 -1.85 2.55  4.40  0.48    -0.27\nTV_PR          2 55    0  1   0.05    0.04 0.78 -2.47 2.09  4.56 -0.38    -0.23\nLLPHONE_PR     3 55    0  1  -0.33   -0.15 0.68 -1.19 3.20  4.39  1.37     1.49\nMPHONE_PR      4 55    0  1  -0.05   -0.06 1.01 -1.58 2.40  3.98  0.48    -0.34\nCOMPUTER_PR    5 55    0  1  -0.26   -0.18 0.64 -1.03 3.31  4.34  1.80     2.96\n              se\nRADIO_PR    0.13\nTV_PR       0.13\nLLPHONE_PR  0.13\nMPHONE_PR   0.13\nCOMPUTER_PR 0.13\n\n\nNote that the mean and standard deviation of the Z-score standardised clustering variables are 0 and 1 respectively.\n\n\n\n\n\n\nNote\n\n\n\nNote that describe() of pscyh package is used here instead of summary() of Base R because the former provide standard deviation values.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nNote that Z-score standardisation method should only be used if we assume that all variables come from some normal distribution.\n\n\n\n\n\nBefore reviewing the summary statistics of the standardised clustering variables, it is a good practice to visualise their graphical distribution.\nThe code chunk below plots the scaled Radio_PR field.\n\nr &lt;- ggplot(ict_derived,\n            aes(x=`RADIO_PR`))+\n  geom_histogram(bins = 20,\n                 color = \"black\",\n                 fill = \"lightblue\")+\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df &lt;- as.data.frame(shan_ict.std)\ns &lt;- ggplot(shan_ict_s_df,\n            aes(x=`RADIO_PR`))+\n  geom_histogram(bins = 20,\n                 color = \"black\",\n                 fill = \"lightblue\")+\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df &lt;- as.data.frame(shan_ict.z)\nz &lt;- ggplot(shan_ict_z_df,\n            aes(x=`RADIO_PR`))+\n  geom_histogram(bins = 20,\n                 color = \"black\",\n                 fill = \"lightblue\")+\n  ggtitle(\"Z-Score Standardisation\")\n\nggarrange(r,s,z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n\n\nWe also plot the density curves:\n\nr &lt;- ggplot(ict_derived,\n            aes(x=`RADIO_PR`))+\n  geom_density(color = \"black\",\n               fill = \"lightblue\")+\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df &lt;- as.data.frame(shan_ict.std)\ns &lt;- ggplot(shan_ict_s_df,\n            aes(x=`RADIO_PR`))+\n  geom_density(color = \"black\",\n               fill = \"lightblue\")+\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df &lt;- as.data.frame(shan_ict.z)\nz &lt;- ggplot(shan_ict_z_df,\n            aes(x=`RADIO_PR`))+\n  geom_density(color = \"black\",\n               fill = \"lightblue\")+\n  ggtitle(\"Z-Score Standardisation\")\n\nggarrange(r,s,z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n\n\n\n\n\nIn R, many packages provide functions to calculate distance matrix. We will compute the proximity matrix using dist() of R.\ndist() supports six distance proximity calculations, namely euclidean (default option), maximum, manhatten, canberra, binary and minkowski.\nThe code chunk below computes the proximity matrix using euclidean method:\n\nproxmat &lt;- dist(shan_ict,method = \"euclidean\")\n\nThe code chunk below is used to list the content of proxmat for visual inspection:\n\nproxmat\n\n             Mongmit   Pindaya   Ywangan  Pinlaung    Mabein     Kalaw\nPindaya    171.86828                                                  \nYwangan    381.88259 257.31610                                        \nPinlaung    57.46286 208.63519 400.05492                              \nMabein     263.37099 313.45776 529.14689 312.66966                    \nKalaw      160.05997 302.51785 499.53297 181.96406 198.14085          \nPekon       59.61977 117.91580 336.50410  94.61225 282.26877 211.91531\nLawksawk   140.11550 204.32952 432.16535 192.57320 130.36525 140.01101\nNawnghkio   89.07103 180.64047 377.87702 139.27495 204.63154 127.74787\nKyaukme    144.02475 311.01487 505.89191 139.67966 264.88283  79.42225\nMuse       563.01629 704.11252 899.44137 571.58335 453.27410 412.46033\nLaihka     141.87227 298.61288 491.83321 101.10150 345.00222 197.34633\nMongnai    115.86190 258.49346 422.71934  64.52387 358.86053 200.34668\nMawkmai    434.92968 437.99577 397.03752 398.11227 693.24602 562.59200\nKutkai      97.61092 212.81775 360.11861  78.07733 340.55064 204.93018\nMongton    192.67961 283.35574 361.23257 163.42143 425.16902 267.87522\nMongyai    256.72744 287.41816 333.12853 220.56339 516.40426 386.74701\nMongkaing  503.61965 481.71125 364.98429 476.29056 747.17454 625.24500\nLashio     251.29457 398.98167 602.17475 262.51735 231.28227 106.69059\nMongpan    193.32063 335.72896 483.68125 192.78316 301.52942 114.69105\nMatman     401.25041 354.39039 255.22031 382.40610 637.53975 537.63884\nTachileik  529.63213 635.51774 807.44220 555.01039 365.32538 373.64459\nNarphan    406.15714 474.50209 452.95769 371.26895 630.34312 463.53759\nMongkhet   349.45980 391.74783 408.97731 305.86058 610.30557 465.52013\nHsipaw     118.18050 245.98884 388.63147  76.55260 366.42787 212.36711\nMonghsat   214.20854 314.71506 432.98028 160.44703 470.48135 317.96188\nMongmao    242.54541 402.21719 542.85957 217.58854 384.91867 195.18913\nNansang    104.91839 275.44246 472.77637  85.49572 287.92364 124.30500\nLaukkaing  568.27732 726.85355 908.82520 563.81750 520.67373 427.77791\nPangsang   272.67383 428.24958 556.82263 244.47146 418.54016 224.03998\nNamtu      179.62251 225.40822 444.66868 170.04533 366.16094 307.27427\nMonghpyak  177.76325 221.30579 367.44835 222.20020 212.69450 167.08436\nKonkyan    403.39082 500.86933 528.12533 365.44693 613.51206 444.75859\nMongping   265.12574 310.64850 337.94020 229.75261 518.16310 375.64739\nHopong     136.93111 223.06050 352.85844  98.14855 398.00917 264.16294\nNyaungshwe  99.38590 216.52463 407.11649 138.12050 210.21337  95.66782\nHsihseng   131.49728 172.00796 342.91035 111.61846 381.20187 287.11074\nMongla     384.30076 549.42389 728.16301 372.59678 406.09124 260.26411\nHseni      189.37188 337.98982 534.44679 204.47572 213.61240  38.52842\nKunlong    224.12169 355.47066 531.63089 194.76257 396.61508 273.01375\nHopang     281.05362 443.26362 596.19312 265.96924 368.55167 185.14704\nNamhkan    386.02794 543.81859 714.43173 382.78835 379.56035 246.39577\nKengtung   246.45691 385.68322 573.23173 263.48638 219.47071  88.29335\nLangkho    164.26299 323.28133 507.78892 168.44228 253.84371  67.19580\nMonghsu    109.15790 198.35391 340.42789  80.86834 367.19820 237.34578\nTaunggyi   399.84278 503.75471 697.98323 429.54386 226.24011 252.26066\nPangwaun   381.51246 512.13162 580.13146 356.37963 523.44632 338.35194\nKyethi     202.92551 175.54012 287.29358 189.47065 442.07679 360.17247\nLoilen     145.48666 293.61143 469.51621  91.56527 375.06406 217.19877\nManton     430.64070 402.42888 306.16379 405.83081 674.01120 560.16577\nMongyang   309.51302 475.93982 630.71590 286.03834 411.88352 233.56349\nKunhing    173.50424 318.23811 449.67218 141.58836 375.82140 197.63683\nMongyawng  214.21738 332.92193 570.56521 235.55497 193.49994 173.43078\nTangyan    195.92520 208.43740 324.77002 169.50567 448.59948 348.06617\nNamhsan    237.78494 228.41073 286.16305 214.33352 488.33873 385.88676\n               Pekon  Lawksawk Nawnghkio   Kyaukme      Muse    Laihka\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk   157.51129                                                  \nNawnghkio  113.15370  90.82891                                        \nKyaukme    202.12206 186.29066 157.04230                              \nMuse       614.56144 510.13288 533.68806 434.75768                    \nLaihka     182.23667 246.74469 211.88187 128.24979 526.65211          \nMongnai    151.60031 241.71260 182.21245 142.45669 571.97975 100.53457\nMawkmai    416.00669 567.52693 495.15047 512.02846 926.93007 429.96554\nKutkai     114.98048 224.64646 147.44053 170.93318 592.90743 144.67198\nMongton    208.14888 311.07742 225.81118 229.28509 634.71074 212.07320\nMongyai    242.52301 391.26989 319.57938 339.27780 763.91399 264.13364\nMongkaing  480.23965 625.18712 546.69447 586.05094 995.66496 522.96309\nLashio     303.80011 220.75270 230.55346 129.95255 313.15288 238.64533\nMongpan    243.30037 228.54223 172.84425 110.37831 447.49969 210.76951\nMatman     368.25761 515.39711 444.05061 505.52285 929.11283 443.25453\nTachileik  573.39528 441.82621 470.45533 429.15493 221.19950 549.08985\nNarphan    416.84901 523.69580 435.59661 420.30003 770.40234 392.32592\nMongkhet   342.08722 487.41102 414.10280 409.03553 816.44931 324.97428\nHsipaw     145.37542 249.35081 176.09570 163.95741 591.03355 128.42987\nMonghsat   225.64279 352.31496 289.83220 253.25370 663.76026 158.93517\nMongmao    293.70625 314.64777 257.76465 146.09228 451.82530 185.99082\nNansang    160.37607 188.78869 151.13185  60.32773 489.35308  78.78999\nLaukkaing  624.82399 548.83928 552.65554 428.74978 149.26996 507.39700\nPangsang   321.81214 345.91486 287.10769 175.35273 460.24292 214.19291\nNamtu      165.02707 260.95300 257.52713 270.87277 659.16927 185.86794\nMonghpyak  190.93173 142.31691  93.03711 217.64419 539.43485 293.22640\nKonkyan    421.48797 520.31264 439.34272 393.79911 704.86973 351.75354\nMongping   259.68288 396.47081 316.14719 330.28984 744.44948 272.82761\nHopong     138.86577 274.91604 204.88286 218.84211 648.68011 157.48857\nNyaungshwe 139.31874 104.17830  43.26545 126.50414 505.88581 201.71653\nHsihseng   105.30573 257.11202 209.88026 250.27059 677.66886 175.89761\nMongla     441.20998 393.18472 381.40808 241.58966 256.80556 315.93218\nHseni      243.98001 171.50398 164.05304  81.20593 381.30567 204.49010\nKunlong    249.36301 318.30406 285.04608 215.63037 547.24297 122.68682\nHopang     336.38582 321.16462 279.84188 154.91633 377.44407 230.78652\nNamhkan    442.77120 379.41126 367.33575 247.81990 238.67060 342.43665\nKengtung   297.67761 209.38215 208.29647 136.23356 330.08211 258.23950\nLangkho    219.21623 190.30257 156.51662  51.67279 413.64173 160.94435\nMonghsu    113.84636 242.04063 170.09168 200.77712 633.21624 163.28926\nTaunggyi   440.66133 304.96838 344.79200 312.60547 250.81471 425.36916\nPangwaun   423.81347 453.02765 381.67478 308.31407 541.97887 351.78203\nKyethi     162.43575 317.74604 267.21607 328.14177 757.16745 255.83275\nLoilen     181.94596 265.29318 219.26405 146.92675 560.43400  59.69478\nManton     403.82131 551.13000 475.77296 522.86003 941.49778 458.30232\nMongyang   363.58788 363.37684 323.32123 188.59489 389.59919 229.71502\nKunhing    213.46379 278.68953 206.15773 145.00266 533.00162 142.03682\nMongyawng  248.43910 179.07229 220.61209 181.55295 422.37358 211.99976\nTangyan    167.79937 323.14701 269.07880 306.78359 736.93741 224.29176\nNamhsan    207.16559 362.84062 299.74967 347.85944 778.52971 273.79672\n             Mongnai   Mawkmai    Kutkai   Mongton   Mongyai Mongkaing\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai    374.50873                                                  \nKutkai      91.15307 364.95519                                        \nMongton    131.67061 313.35220 107.06341                              \nMongyai    203.23607 178.70499 188.94166 159.79790                    \nMongkaing  456.00842 133.29995 428.96133 365.50032 262.84016          \nLashio     270.86983 638.60773 289.82513 347.11584 466.36472 708.65819\nMongpan    178.09554 509.99632 185.18173 200.31803 346.39710 563.56780\nMatman     376.33870 147.83545 340.86349 303.04574 186.95158 135.51424\nTachileik  563.95232 919.38755 568.99109 608.76740 750.29555 967.14087\nNarphan    329.31700 273.75350 314.27683 215.97925 248.82845 285.65085\nMongkhet   275.76855 115.58388 273.91673 223.22828 104.98924 222.60577\nHsipaw      52.68195 351.34601  51.46282  90.69766 177.33790 423.77868\nMonghsat   125.25968 275.09705 154.32012 150.98053 127.35225 375.60376\nMongmao    188.29603 485.52853 204.69232 206.57001 335.61300 552.31959\nNansang     92.79567 462.41938 130.04549 199.58124 288.55962 542.16609\nLaukkaing  551.56800 882.51110 580.38112 604.66190 732.68347 954.11795\nPangsang   204.25746 484.14757 228.33583 210.77938 343.30638 548.40662\nNamtu      209.35473 427.95451 225.28268 308.71751 278.02761 525.04057\nMonghpyak  253.26470 536.71695 206.61627 258.04282 370.01575 568.21089\nKonkyan    328.82831 339.01411 310.60810 248.25265 287.87384 380.92091\nMongping   202.99615 194.31049 182.75266 119.86993  65.38727 257.18572\nHopong      91.53795 302.84362  73.45899 106.21031 124.62791 379.37916\nNyaungshwe 169.63695 502.99026 152.15482 219.72196 327.13541 557.32112\nHsihseng   142.36728 329.29477 128.21054 194.64317 162.27126 411.59788\nMongla     354.10985 686.88950 388.40984 411.06668 535.28615 761.48327\nHseni      216.81639 582.53670 229.37894 286.75945 408.23212 648.04408\nKunlong    202.92529 446.53763 204.54010 270.02165 299.36066 539.91284\nHopang     243.00945 561.24281 263.31986 273.50305 408.73288 626.17673\nNamhkan    370.05669 706.47792 392.48568 414.53594 550.62819 771.39688\nKengtung   272.28711 632.54638 279.19573 329.38387 460.39706 692.74693\nLangkho    174.67678 531.08019 180.51419 236.70878 358.95672 597.42714\nMonghsu     84.11238 332.07962  62.60859 107.04894 154.86049 400.71816\nTaunggyi   448.55282 810.74692 450.33382 508.40925 635.94105 866.21117\nPangwaun   312.13429 500.68857 321.80465 257.50434 394.07696 536.95736\nKyethi     210.50453 278.85535 184.23422 222.52947 137.79420 352.06533\nLoilen      58.41263 388.73386 131.56529 176.16001 224.79239 482.18190\nManton     391.54062 109.08779 361.82684 310.20581 195.59882  81.75337\nMongyang   260.39387 558.83162 285.33223 295.60023 414.31237 631.91325\nKunhing    110.55197 398.43973 108.84990 114.03609 238.99570 465.03971\nMongyawng  275.77546 620.04321 281.03383 375.22688 445.78964 700.98284\nTangyan    180.37471 262.66006 166.61820 198.88460 109.08506 348.56123\nNamhsan    218.10003 215.19289 191.32762 196.76188  77.35900 288.66231\n              Lashio   Mongpan    Matman Tachileik   Narphan  Mongkhet\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan    172.33279                                                  \nMatman     628.11049 494.81014                                        \nTachileik  311.95286 411.03849 890.12935                              \nNarphan    525.63854 371.13393 312.05193 760.29566                    \nMongkhet   534.44463 412.17123 203.02855 820.50164 217.28718          \nHsipaw     290.86435 179.52054 344.45451 576.18780 295.40170 253.80950\nMonghsat   377.86793 283.30992 313.59911 677.09508 278.21548 167.98445\nMongmao    214.23677 131.59966 501.59903 472.95568 331.42618 375.35820\nNansang    184.47950 144.77393 458.06573 486.77266 398.13308 360.99219\nLaukkaing  334.65738 435.58047 903.72094 325.06329 708.82887 769.06406\nPangsang   236.72516 140.23910 506.29940 481.31907 316.30314 375.58139\nNamtu      365.88437 352.91394 416.65397 659.56458 494.36143 355.99713\nMonghpyak  262.09281 187.85699 470.46845 444.04411 448.40651 462.63265\nKonkyan    485.51312 365.87588 392.40306 730.92980 158.82353 254.24424\nMongping   454.52548 318.47482 201.65224 727.08969 188.64567 113.80917\nHopong     345.31042 239.43845 291.84351 632.45718 294.40441 212.99485\nNyaungshwe 201.58191 137.29734 460.91883 445.81335 427.94086 417.08639\nHsihseng   369.00833 295.87811 304.02806 658.87060 377.52977 256.70338\nMongla     179.95877 253.20001 708.17595 347.33155 531.46949 574.40292\nHseni       79.41836 120.66550 564.64051 354.90063 474.12297 481.88406\nKunlong    295.23103 288.03320 468.27436 595.70536 413.07823 341.68641\nHopang     170.63913 135.62913 573.55355 403.82035 397.85908 451.51070\nNamhkan    173.27153 240.34131 715.42102 295.91660 536.85519 596.19944\nKengtung    59.85893 142.21554 613.01033 295.90429 505.40025 531.35998\nLangkho    115.18145  94.98486 518.86151 402.33622 420.65204 428.08061\nMonghsu    325.71557 216.25326 308.13805 605.02113 311.92379 247.73318\nTaunggyi   195.14541 319.81385 778.45810 150.84117 684.20905 712.80752\nPangwaun   362.45608 232.52209 523.43600 540.60474 264.64997 407.02947\nKyethi     447.10266 358.89620 233.83079 728.87329 374.90376 233.25039\nLoilen     268.92310 207.25000 406.56282 573.75476 354.79137 284.76895\nManton     646.66493 507.96808  59.52318 910.23039 280.26395 181.33894\nMongyang   209.33700 194.93467 585.61776 448.79027 401.39475 445.40621\nKunhing    255.10832 137.85278 403.66587 532.26397 281.62645 292.49814\nMongyawng  172.70139 275.15989 601.80824 432.10118 572.76394 522.91815\nTangyan    429.84475 340.39128 242.78233 719.84066 348.84991 201.49393\nNamhsan    472.04024 364.77086 180.09747 754.03913 316.54695 170.90848\n              Hsipaw  Monghsat   Mongmao   Nansang Laukkaing  Pangsang\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat   121.78922                                                  \nMongmao    185.99483 247.17708                                        \nNansang    120.24428 201.92690 164.99494                              \nLaukkaing  569.06099 626.44910 404.00848 480.60074                    \nPangsang   205.04337 256.37933  57.60801 193.36162 408.04016          \nNamtu      229.44658 231.78673 365.03882 217.61884 664.06286 392.97391\nMonghpyak  237.67919 356.84917 291.88846 227.52638 565.84279 315.11651\nKonkyan    296.74316 268.25060 281.87425 374.70456 635.92043 274.81900\nMongping   168.92101 140.95392 305.57166 287.36626 708.13447 308.33123\nHopong      62.86179 100.45714 244.16253 167.66291 628.48557 261.51075\nNyaungshwe 169.92664 286.37238 230.45003 131.18943 520.24345 257.77823\nHsihseng   136.54610 153.49551 311.98001 193.53779 670.74564 335.52974\nMongla     373.47509 429.00536 216.24705 289.45119 202.55831 217.88123\nHseni      231.48538 331.22632 184.67099 136.45492 391.74585 214.66375\nKunlong    205.10051 202.31862 224.43391 183.01388 521.88657 258.49342\nHopang     248.72536 317.64824  78.29342 196.47091 331.67199  92.57672\nNamhkan    382.79302 455.10875 223.32205 302.89487 196.46063 231.38484\nKengtung   284.08582 383.72138 207.58055 193.67980 351.48520 229.85484\nLangkho    183.05109 279.52329 134.50170  99.39859 410.41270 167.65920\nMonghsu     58.55724 137.24737 242.43599 153.59962 619.01766 260.52971\nTaunggyi   462.31183 562.88102 387.33906 365.04897 345.98041 405.59730\nPangwaun   298.12447 343.53898 187.40057 326.12960 470.63605 157.48757\nKyethi     195.17677 190.50609 377.89657 273.02385 749.99415 396.89963\nLoilen      98.04789 118.65144 190.26490  94.23028 535.57527 207.94433\nManton     359.60008 317.15603 503.79786 476.55544 907.38406 504.75214\nMongyang   267.10497 312.64797  91.06281 218.49285 326.19219 108.37735\nKunhing     90.77517 165.38834 103.91040 128.20940 500.41640 123.18870\nMongyawng  294.70967 364.40429 296.40789 191.11990 454.80044 336.16703\nTangyan    167.69794 144.59626 347.14183 249.70235 722.40954 364.76893\nNamhsan    194.47928 169.56962 371.71448 294.16284 760.45960 385.65526\n               Namtu Monghpyak   Konkyan  Mongping    Hopong Nyaungshwe\nPindaya                                                                \nYwangan                                                                \nPinlaung                                                               \nMabein                                                                 \nKalaw                                                                  \nPekon                                                                  \nLawksawk                                                               \nNawnghkio                                                              \nKyaukme                                                                \nMuse                                                                   \nLaihka                                                                 \nMongnai                                                                \nMawkmai                                                                \nKutkai                                                                 \nMongton                                                                \nMongyai                                                                \nMongkaing                                                              \nLashio                                                                 \nMongpan                                                                \nMatman                                                                 \nTachileik                                                              \nNarphan                                                                \nMongkhet                                                               \nHsipaw                                                                 \nMonghsat                                                               \nMongmao                                                                \nNansang                                                                \nLaukkaing                                                              \nPangsang                                                               \nNamtu                                                                  \nMonghpyak  346.57799                                                   \nKonkyan    478.37690 463.39594                                         \nMongping   321.66441 354.76537 242.02901                               \nHopong     206.82668 267.95563 304.49287 134.00139                     \nNyaungshwe 271.41464 103.97300 432.35040 319.32583 209.32532           \nHsihseng   131.89940 285.37627 383.49700 199.64389  91.65458  225.80242\nMongla     483.49434 408.03397 468.09747 512.61580 432.31105  347.60273\nHseni      327.41448 200.26876 448.84563 395.58453 286.41193  130.86310\nKunlong    233.60474 357.44661 329.11433 309.05385 219.06817  285.13095\nHopang     408.24516 304.26577 348.18522 379.27212 309.77356  247.19891\nNamhkan    506.32466 379.50202 481.59596 523.74815 444.13246  333.32428\nKengtung   385.33554 221.47613 474.82621 442.80821 340.47382  177.75714\nLangkho    305.03473 200.27496 386.95022 343.96455 239.63685  128.26577\nMonghsu    209.64684 232.17823 331.72187 158.90478  43.40665  173.82799\nTaunggyi   518.72748 334.17439 650.56905 621.53039 513.76415  325.09619\nPangwaun   517.03554 381.95144 263.97576 340.37881 346.00673  352.92324\nKyethi     186.90932 328.16234 400.10989 187.43974 136.49038  288.06872\nLoilen     194.24075 296.99681 334.19820 231.99959 124.74445  206.40432\nManton     448.58230 502.20840 366.66876 200.48082 310.58885  488.79874\nMongyang   413.26052 358.17599 329.39338 387.80686 323.35704  294.29500\nKunhing    296.43996 250.74435 253.74202 212.59619 145.15617  189.97131\nMongyawng  262.24331 285.56475 522.38580 455.59190 326.59925  218.12104\nTangyan    178.69483 335.26416 367.46064 161.67411 106.82328  284.14692\nNamhsan    240.95555 352.70492 352.20115 130.23777 132.70541  315.91750\n            Hsihseng    Mongla     Hseni   Kunlong    Hopang   Namhkan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla     478.66210                                                  \nHseni      312.74375 226.82048                                        \nKunlong    231.85967 346.46200 276.19175                              \nHopang     370.01334 147.02444 162.80878 271.34451                    \nNamhkan    492.09476  77.21355 212.11323 375.73885 146.18632          \nKengtung   370.72441 202.45004  66.12817 317.14187 164.29921 175.63015\nLangkho    276.27441 229.01675  66.66133 224.52741 134.24847 224.40029\nMonghsu     97.82470 424.51868 262.28462 239.89665 301.84458 431.32637\nTaunggyi   528.14240 297.09863 238.19389 471.29032 329.95252 257.29147\nPangwaun   433.06326 319.18643 330.70182 392.45403 206.98364 310.44067\nKyethi      84.04049 556.02500 388.33498 298.55859 440.48114 567.86202\nLoilen     158.84853 338.67408 227.10984 166.53599 242.89326 364.90647\nManton     334.87758 712.51416 584.63341 479.76855 577.52046 721.86149\nMongyang   382.59743 146.66661 210.19929 247.22785  69.25859 167.72448\nKunhing    220.15490 306.47566 206.47448 193.77551 172.96164 314.92119\nMongyawng  309.51462 315.57550 173.86004 240.39800 290.51360 321.21112\nTangyan     70.27241 526.80849 373.07575 268.07983 412.22167 542.64078\nNamhsan    125.74240 564.02740 411.96125 310.40560 440.51555 576.42717\n            Kengtung   Langkho   Monghsu  Taunggyi  Pangwaun    Kyethi\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho    107.16213                                                  \nMonghsu    316.91914 221.84918                                        \nTaunggyi   186.28225 288.27478 486.91951                              \nPangwaun   337.48335 295.38434 343.38498 497.61245                    \nKyethi     444.26274 350.91512 146.61572 599.57407 476.62610          \nLoilen     282.22935 184.10672 131.55208 455.91617 331.69981 232.32965\nManton     631.99123 535.95620 330.76503 803.08034 510.79265 272.03299\nMongyang   217.08047 175.35413 323.95988 374.58247 225.25026 453.86726\nKunhing    245.95083 146.38284 146.78891 429.98509 229.09986 278.95182\nMongyawng  203.87199 186.11584 312.85089 287.73864 475.33116 387.71518\nTangyan    429.95076 332.02048 127.42203 592.65262 447.05580  47.79331\nNamhsan    466.20497 368.20978 153.22576 631.49232 448.58030  68.67929\n              Loilen    Manton  Mongyang   Kunhing Mongyawng   Tangyan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho                                                               \nMonghsu                                                               \nTaunggyi                                                              \nPangwaun                                                              \nKyethi                                                                \nLoilen                                                                \nManton     419.06087                                                  \nMongyang   246.76592 585.70558                                        \nKunhing    130.39336 410.49230 188.89405                              \nMongyawng  261.75211 629.43339 304.21734 295.35984                    \nTangyan    196.60826 271.82672 421.06366 249.74161 377.52279          \nNamhsan    242.15271 210.48485 450.97869 270.79121 430.02019  63.67613\n\n\n\n\n\nIn R, there are several packages that provide hierarchical clustering function. In this exercise, hclust() of R stats will be used.\nhclust() employs the agglomeration method to compute the cluster. Eight clustering algorithms are supportedm namely ward.D, ward.D2, single, complete, average(UPGMA), mcquitty(WPGMA), median(WPGMC) and centroid(UPGMC).\nThe code chunk below performs the hierarchical cluster analysis using ward.D method. The hierarchical clustering output is stored in an object of class hclust which describes the tree produced by the clustering process.\n\nhclust_ward &lt;- hclust(proxmat, method=\"ward.D\")\n\nWe plot the tree using plot() of R Graphics using the code chunk below:\n\nplot(hclust_ward,cex = 0.6)\n\n\n\n\n\n\n\n\n\n\n\nOne challenge in performing hierarchical clustering is to identify stronger clustering structures. The issue can be solved by using agnes() function of cluster package.\nIt functions like hclust() but with the agnes() function, we also get the agglomerative coefficient which measures the amount of clustering structure found i.e. values closer to 1 suggest a stronger clustering structure.\nThe code chunk below is used to compute the agglomerative coefficient of all hierarchical clustering algorithms:\n\nm &lt;- c(\"average\",\"single\",\"complete\",\"ward\")\nnames(m) &lt;- c(\"average\",\"single\",\"complete\",\"ward\")\n\nac &lt;- function(x){\n  agnes(shan_ict,method=x)$ac\n}\n\nmap_dbl(m,ac)\n\n  average    single  complete      ward \n0.8131144 0.6628705 0.8950702 0.9427730 \n\n\nWith reference to the output above, we can see that Ward’s method provides the strongest clustering structure among the four methods assessed. Hence, in the subsequent analysis, only Ward’s method will be used.\n\n\n\nAnother technical challenge face by data analyst in performing clustering analysis is to determine the optimal clusters to retain.\nThere are three commonly used methods to determine the optimal clusters, they are:\n\nElbow Method\nAverage Silhouette Method\nGap Statistic Method\n\n\n\nThe gap statistic compares the total within intra-cluster variation for different values of k with their expected values under null reference distribution of the data. The estimate of the optimal clusters will be value that maximize the gap statistic (i.e., that yields the largest gap statistic). This means that the clustering structure is far away from the random uniform distribution of points.\nTo compute the gap statistic, clusGap() of cluster package will be used.\n\nset.seed(12345)\ngap_stat &lt;- clusGap(shan_ict,\n                    FUN = hcut,\n                    nstart = 25,\n                    K.max = 10,\n                    B = 50)\n\nprint(gap_stat,method=\"firstmax\")\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = shan_ict, FUNcluster = hcut, K.max = 10, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --&gt; Number of clusters (method 'firstmax'): 1\n          logW   E.logW       gap     SE.sim\n [1,] 8.407129 8.680794 0.2736651 0.04460994\n [2,] 8.130029 8.350712 0.2206824 0.03880130\n [3,] 7.992265 8.202550 0.2102844 0.03362652\n [4,] 7.862224 8.080655 0.2184311 0.03784781\n [5,] 7.756461 7.978022 0.2215615 0.03897071\n [6,] 7.665594 7.887777 0.2221833 0.03973087\n [7,] 7.590919 7.806333 0.2154145 0.04054939\n [8,] 7.526680 7.731619 0.2049390 0.04198644\n [9,] 7.458024 7.660795 0.2027705 0.04421874\n[10,] 7.377412 7.593858 0.2164465 0.04540947\n\n\nNote that the hcut function used is from the factoextra package.\nNext, we can visualise the plot using fviz_gap_stat() of factoextra package:\n\nfviz_gap_stat(gap_stat)\n\n\n\n\n\n\n\n\nWith reference to the gap statistic graph above, the recommended number of cluster to retain is 1. However, it is not logical to retain only one cluster. By examine the gap statistic graph, the 6-cluster gives the next largest gap statistic and should be the next best cluster to pick.\n\n\n\n\n\n\nNote\n\n\n\nNote: In addition to these commonly used approaches, the NbClust package, published by Charrad et al., 2014, provides 30 indices for determining the relevant number of clusters and proposes to users the best clustering scheme from the different results obtained by varying all combinations of number of clusters, distance measures, and clustering methods.\n\n\n\n\n\n\n\n\nIn-class 6 notes from Prof Kam:\n\n\n\n\ndendogram without a cut-off is not useful\nthere will be several local optimisation points i.e. if extend to view more number of clusters, will likely see local optimal points there too. hence need to consider logic/other factors i.e. if have 80 points, no point having 20 clusters.\n\n\n\n\n\n\n\nIn the dendrogram displayed above, each leaf corresponds to one observation. As we move up the tree, observations that are similar to each other are combined into branches, which are themselves fused at a higher height.\nThe height of the fusion, provided on the vertical axis, indicates the (dis)similarity between two observations. The higher the height of the fusion, the less similar the observations are. Note that, conclusions about the proximity of two observations can be drawn only based on the height where branches containing those two observations first are fused. We cannot use the proximity of two observations along the horizontal axis as a criteria of their similarity.\nIt’s also possible to draw the dendrogram with a border around the selected clusters by using rect.hclust() of R stats. The argument border is used to specify the border colors for the rectangles.\n\nplot(hclust_ward, cex = 0.6)\nrect.hclust(hclust_ward,\n            k = 6,\n            border = 2:5)\n\n\n\n\n\n\n\n\n\n\n\nIn this section, we will learn how to perform visually-driven hiearchical clustering analysis using heatmaply package.\nWith heatmaply, we are able to build both highly interactive or static cluster heatmap.\n\n\nThe data was loaded into a data frame, but it has to be a data matrix to make your heatmap.\nThe code chunk below will be used to transform shan_ict data frame into a data matrix.\n\nshan_ict_mat &lt;- data.matrix(shan_ict)\n\n\n\n\nIn the code chunk below, the heatmaply() of heatmaply package is used to build an interactive cluster heatmap.\n\nheatmaply(normalize(shan_ict_mat),\n          Colv = NA,\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          seriate = \"OLO\",\n          colors = Blues,\n          k_row = 6,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main = \"Geographic Segmentation of Shan State by ICT Indicators\",\n          xlab = \"ICT Indicators\",\n          ylab = \"Townships of Shan State\")\n\n\n\n\n\n\n\n\n\nWith closed examination of the dendragram above, we have decided to retain six clusters.\ncutree() of R Base will be used in the code chunk below to derive a 6-cluster model.\n\ngroups &lt;- as.factor(cutree(hclust_ward, k=6))\n\nThe output is called groups. It is a list object.\nIn order to visualise the clusters, the groups object need to be appended onto shan_sf simple feature object.\nThe code chunk below form the join in three steps:\n\nthe groups list object will be converted into a matrix;\ncbind() is used to append groups matrix onto shan_sf to produce an output simple feature object called shan_sf_cluster; and\nrename() of dplyr package is used to rename as.matrix.groups field as CLUSTER.\n\n\nshan_sf_cluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER`=`as.matrix.groups.`)\n\nNext, qtm() of tmap package is used to plot the choropleth map showing the cluster formed:\n\nqtm(shan_sf_cluster,\"CLUSTER\")\n\n\n\n\n\n\n\n\nThe choropleth map above reveals the clusters are very fragmented. The is one of the major limitations when non-spatial clustering algorithm such as hierarchical cluster analysis method is used.\n\n\n\n\nIn this section, we will derive spatially constrained cluster using skater() method of spdep package.\n\n\nFirst, we need to convert shan_sf into SpatialPolygonsDataFrame. This is because SKATER function only support sp objects such as SpatialPolygonDataFrame.\nThe code chunk below uses as_Spatial() of sf package to convert shan_sf into a SpatialPolygonDataFrame called shan_sp.\n\nshan_sp &lt;- as_Spatial(shan_sf)\n\n\n\n\nNext, poly2nd() of spdep package will be used to compute the neighbours list from polygon list.\n\nshan.nb &lt;- poly2nb(shan_sp)\nsummary(shan.nb)\n\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\n\nWe can plot the neighbours list on shan_sp using the code chunk below. Since we now can plot the community area boundaries as well, we plot this graph on top of the map. The first plot command gives the boundaries. This is followed by the plot of the neighbor list object, with coordinates applied to the original SpatialPolygonDataFrame (Shan state township boundaries) to extract the centroids of the polygons. These are used as the nodes for the graph representation. We also set the color to blue and specify add=TRUE to plot the network on top of the boundaries.\n\ncoords &lt;- st_coordinates(\n  st_centroid(st_geometry(shan_sf)))\n\n\nplot(st_geometry(shan_sf), \n     border=grey(.5))\nplot(shan.nb,\n     coords, \n     col=\"blue\", \n     add=TRUE)\n\n\n\n\n\n\n\n\nNote that if you plot the network first and then the boundaries, some of the areas will be clipped. This is because the plotting area is determined by the characteristics of the first plot. In this example, because the boundary map extends further than the graph, we plot it first.\n\n\n\n\n\nNext, nbcosts() of spdep package is used to compute the cost of each edge. It is the distance between it nodes. This function compute this distance using a data.frame with observations vector in each node.\nThe code chunk below is used to compute the cost of each edge.\n\nlcosts &lt;- nbcosts(shan.nb, shan_ict)\n\nFor each observation, this gives the pairwise dissimilarity between its values on the five variables and the values for the neighbouring observation (from the neighbour list). Basically, this is the notion of a generalised weight for a spatial weights matrix.\nNext, we will incorporate these costs into a weights object in the same way as we did in the calculation of inverse of distance weights. In other words, we convert the neighbour list to a list weights object by specifying the just computed lcosts as the weights.\nIn order to achieve this, nb2listw() of spdep package is used as shown in the code chunk below.\nNote that we specify the style as B to make sure the cost values are not row-standardised.\n\nshan.w &lt;- nb2listw(shan.nb, \n                   lcosts, \n                   style=\"B\")\nsummary(shan.w)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\nWeights style: B \nWeights constants summary:\n   n   nn       S0       S1        S2\nB 55 3025 76267.65 58260785 522016004\n\n\nThe minimum spanning tree is computed by mean of the mstree() of spdep package as shown in the code chunk below.\n\nshan.mst &lt;- mstree(shan.w)\n\nAfter computing the MST, we can check its class and dimension by using the code chunk below.\n\nclass(shan.mst)\n\n[1] \"mst\"    \"matrix\"\n\n\n\ndim(shan.mst)\n\n[1] 54  3\n\n\nNote that the dimension is 54 and not 55. This is because the minimum spanning tree consists on n-1 edges (links) in order to traverse all the nodes.\nWe can display the content of shan.mst by using head() as shown in the code chunk below.\n\nhead(shan.mst)\n\n     [,1] [,2]      [,3]\n[1,]   54   48  47.79331\n[2,]   54   17 109.08506\n[3,]   54   45 127.42203\n[4,]   45   52 146.78891\n[5,]   52   13 110.55197\n[6,]   13   28  92.79567\n\n\nThe plot method for the MST include a way to show the observation numbers of the nodes in addition to the edge. As before, we plot this together with the township boundaries. We can see how the initial neighbour list is simplified to just one edge connecting each of the nodes, while passing through all the nodes.\n\nplot(st_geometry(shan_sf), \n                 border=gray(.5))\nplot.mst(shan.mst, \n         coords, \n         col=\"blue\", \n         cex.lab=0.7, \n         cex.circles=0.005, \n         add=TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below compute the spatially constrained cluster using skater() of spdep package.\n\nclust6 &lt;- spdep::skater(edges = shan.mst[,1:2], \n                 data = shan_ict, \n                 method = \"euclidean\", \n                 ncuts = 5)\n\nThe skater() takes three mandatory arguments: - the first two columns of the MST matrix (i.e. not the cost), - the data matrix (to update the costs as units are being grouped), and - the number of cuts.\nNote: It is set to one less than the number of clusters. So, the value specified is not the number of clusters, but the number of cuts in the graph, one less than the number of clusters.\nThe result of the skater() is an object of class skater. We can examine its contents by using the code chunk below.\n\nstr(clust6)\n\nList of 8\n $ groups      : num [1:55] 3 3 6 3 3 3 3 3 3 3 ...\n $ edges.groups:List of 6\n  ..$ :List of 3\n  .. ..$ node: num [1:22] 13 48 54 55 45 37 34 16 25 52 ...\n  .. ..$ edge: num [1:21, 1:3] 48 55 54 37 34 16 45 25 13 13 ...\n  .. ..$ ssw : num 3423\n  ..$ :List of 3\n  .. ..$ node: num [1:18] 47 27 53 38 42 15 41 51 43 32 ...\n  .. ..$ edge: num [1:17, 1:3] 53 15 42 38 41 51 15 27 15 43 ...\n  .. ..$ ssw : num 3759\n  ..$ :List of 3\n  .. ..$ node: num [1:11] 2 6 8 1 36 4 10 9 46 5 ...\n  .. ..$ edge: num [1:10, 1:3] 6 1 8 36 4 6 8 10 10 9 ...\n  .. ..$ ssw : num 1458\n  ..$ :List of 3\n  .. ..$ node: num [1:2] 44 20\n  .. ..$ edge: num [1, 1:3] 44 20 95\n  .. ..$ ssw : num 95\n  ..$ :List of 3\n  .. ..$ node: num 23\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n  ..$ :List of 3\n  .. ..$ node: num 3\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n $ not.prune   : NULL\n $ candidates  : int [1:6] 1 2 3 4 5 6\n $ ssto        : num 12613\n $ ssw         : num [1:6] 12613 10977 9962 9540 9123 ...\n $ crit        : num [1:2] 1 Inf\n $ vec.crit    : num [1:55] 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"class\")= chr \"skater\"\n\n\nThe most interesting component of this list structure is the groups vector containing the labels of the cluster to which each observation belongs (as before, the label itself is arbitary). This is followed by a detailed summary for each of the clusters in the edges.groups list. Sum of squares measures are given as ssto for the total and ssw to show the effect of each of the cuts on the overall criterion.\nWe can check the cluster assignment by using the conde chunk below.\n\nccs6 &lt;- clust6$groups\nccs6\n\n [1] 3 3 6 3 3 3 3 3 3 3 2 1 1 1 2 1 1 1 2 4 1 2 5 1 1 1 2 1 2 2 1 2 2 1 1 3 1 2\n[39] 2 2 2 2 2 4 1 3 2 1 1 1 2 1 2 1 1\n\n\nWe can find out how many observations are in each cluster by means of the table command. Parenthetially, we can also find this as the dimension of each vector in the lists contained in edges.groups. For example, the first list has node with dimension 22, which is also the number of observations in the first cluster.\n\ntable(ccs6)\n\nccs6\n 1  2  3  4  5  6 \n22 18 11  2  1  1 \n\n\nLastly, we can also plot the pruned tree that shows the five clusters on top of the townshop area.\n\nplot(st_geometry(shan_sf), \n     border=gray(.5))\nplot(clust6, \n     coords, \n     cex.lab=.7,\n     groups.colors=c(\"red\",\"green\",\"blue\", \"brown\", \"pink\"),\n     cex.circles=0.005, \n     add=TRUE)\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below is used to plot the newly derived clusters by using SKATER method.\n\ngroups_mat &lt;- as.matrix(clust6$groups)\nshan_sf_spatialcluster &lt;- cbind(shan_sf_cluster, as.factor(groups_mat)) %&gt;%\n  rename(`SP_CLUSTER`=`as.factor.groups_mat.`)\nqtm(shan_sf_spatialcluster, \"SP_CLUSTER\")\n\n\n\n\n\n\n\n\nFor easy comparison, it will be better to place both the hierarchical clustering and spatially constrained hierarchical clustering maps next to each other.\n\n\n\n\n\n\nNote\n\n\n\n\nhclust.map &lt;- qtm(shan_sf_cluster,\n                  \"CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\nshclust.map &lt;- qtm(shan_sf_spatialcluster,\n                   \"SP_CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(hclust.map, shclust.map,\n             asp=NA, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn-class 6 notes from Prof Kam:\n\n\n\n\nresults from spatially constrained cluster is more homogenous, determined based on shortest path distance\nmajor limitation of this method is that might be spatially homogenous but might not be that homogenous in terms of attribute aka “hard classification” hence alternative to this is to use ClustGeo() aka “soft classification” method\n\n\n\n\n\n\n\nIn this section, we will use functions provided by ClustGeo package to perform non-spatially constrained hierarchical cluster analysis and spatially constrained cluster analysis.\n\n\nClustGeo package is an R package specially designed to support the need of performing spatially constrained cluster analysis. More specifically, it provides a Ward-like hierarchical clustering algorithm called hclustgeo() including spatial/geographical constraints.\nIn the nutshell, the algorithm uses two dissimilarity matrices D0 and D1 along with a mixing parameter alpha, whereby the value of alpha must be a real number between [0, 1]. D0 can be non-Euclidean and the weights of the observations can be non-uniform. It gives the dissimilarities in the attribute/clustering variable space. D1, on the other hand, gives the dissimilarities in the constraint space. The criterion minimised at each stage is a convex combination of the homogeneity criterion calculated with D0 and the homogeneity criterion calculated with D1.\nThe idea is then to determine a value of alpha which increases the spatial contiguity without deteriorating too much the quality of the solution based on the variables of interest. This need is supported by a function called choicealpha().\n\n\n\nClustGeo package provides function called hclustgeo() to perform a typical Ward-like hierarchical clustering just like hclust() learned in previous section.\nTo perform non-spatially constrained hierarchical clustering, we only need to provide the function a dissimilarity matrix as shown in the code chunk below.\n\nnongeo_cluster &lt;- hclustgeo(proxmat)\nplot(nongeo_cluster, cex = 0.5)\nrect.hclust(nongeo_cluster, \n            k = 6, \n            border = 2:5)\n\n\n\n\n\n\n\n\nNote that the dissimilarity matrix must be an object of class dist, i.e. an object obtained with the function dist(). For sample code chunk, please refer to 5.7.6 Computing proximity matrix\n\n\nSimilarly, we can plot the clusters on a categorical area shaded map by using the steps we learned in 5.7.12 Mapping the clusters formed.\n\ngroups &lt;- as.factor(cutree(nongeo_cluster, k=6))\n\n\nshan_sf_ngeo_cluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nqtm(shan_sf_ngeo_cluster, \"CLUSTER\")\n\n\n\n\n\n\n\n\n\n\n\n\nBefore we can performed spatially constrained hierarchical clustering, a spatial distance matrix will be derived by using st_distance() of sf package.\n\ndist &lt;- st_distance(shan_sf, shan_sf)\ndistmat &lt;- as.dist(dist)\n\nNotice that as.dist() is used to convert the data frame into matrix.\nNext, choicealpha() will be used to determine a suitable value for the mixing parameter alpha as shown in the code chunk below.\n\ncr &lt;- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K=6, graph = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWith reference to the graphs above, alpha = 0.3 will be used as shown in the code chunk below.\n\n\n\n\n\n\nIn-class 6 notes from Prof Kam\n\n\n\nInterpreting the plots above:\n\nuse the raw version of the plot above to decide on the cut-off for alpha. the bottom plot is the normalised version.\nfor the raw version, towards the right, the red plot has stronger spatial compactness but lose attribute homogeneity. If want to focus on attribute compactness, look more towards the left. hence to objectively decide, look for the point where both plots cut each other i.e. compromise between spatial and attribute compactness\nk=6 will be obtained from the step above as there is no spatially constrained optimal number of clusters\n\n\n\n\nclustG &lt;- hclustgeo(proxmat, distmat, alpha = 0.3)\n\nNext, cutree() is used to derive the cluster object.\n\ngroups &lt;- as.factor(cutree(clustG, k=6))\n\nWe will then join back the group list with shan_sf polygon feature data frame by using the code chunk below.\n\nshan_sf_Gcluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\nWe can now plot the map of the newly delineated spatially constrained clusters.\n\nqtm(shan_sf_Gcluster, \"CLUSTER\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode chunk below is used to reveal the distribution of a clustering variable (i.e RADIO_PR) by cluster.\n\nggplot(data = shan_sf_ngeo_cluster,\n       aes(x = CLUSTER, y = RADIO_PR)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\nThe boxplot reveals Cluster 3 displays the highest mean Radio Ownership Per Thousand Household. This is followed by Cluster 2, 1, 4, 6 and 5.\n\n\n\nPast studies shown that parallel coordinate plot can be used to reveal clustering variables by cluster very effectively. In the code chunk below, ggparcoord() of GGally package\n\nggparcoord(data = shan_sf_ngeo_cluster, \n           columns = c(17:21), \n           scale = \"globalminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of ICT Variables by Cluster\") +\n  facet_grid(~ CLUSTER) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\n\n\n\n\nThe parallel coordinate plot above reveals that households in Cluster 4 townships tend to own the highest number of TV and mobile-phone. On the other hand, households in Cluster 5 tends to own the lowest of all the five ICT.\nNote that the scale argument of ggparcoor() provide several methods to scale the clustering variables. They are:\n\nstd: univariately, subtract mean and divide by standard deviation.\nrobust: univariately, subtract median and divide by median absolute deviation.\nuniminmax: univariately, scale so the minimum of the variable is zero, and the maximum is one.\nglobalminmax: no scaling is done; the range of the graphs is defined by the global minimum and the global maximum.\ncenter: use uniminmax to standardize vertical height, then center each variable at a value specified by the scaleSummary param.\ncenterObs: use uniminmax to standardize vertical height, then center each variable at the value of the observation specified by the centerObsID param\n\nThere is no one best scaling method to use - we will need to explore them and select the one that best meets the analysis need.\nLast but not least, we can also compute the summary statistics such as mean, median, sd, etc to complement the visual interpretation.\nIn the code chunk below, group_by() and summarise() of dplyr are used to derive mean values of the clustering variables.\n\nshan_sf_ngeo_cluster %&gt;% \n  st_set_geometry(NULL) %&gt;%\n  group_by(CLUSTER) %&gt;%\n  summarise(mean_RADIO_PR = mean(RADIO_PR),\n            mean_TV_PR = mean(TV_PR),\n            mean_LLPHONE_PR = mean(LLPHONE_PR),\n            mean_MPHONE_PR = mean(MPHONE_PR),\n            mean_COMPUTER_PR = mean(COMPUTER_PR))\n\n# A tibble: 6 × 6\n  CLUSTER mean_RADIO_PR mean_TV_PR mean_LLPHONE_PR mean_MPHONE_PR\n  &lt;chr&gt;           &lt;dbl&gt;      &lt;dbl&gt;           &lt;dbl&gt;          &lt;dbl&gt;\n1 1               221.        521.            44.2           246.\n2 2               237.        402.            23.9           134.\n3 3               300.        611.            52.2           392.\n4 4               196.        744.            99.0           651.\n5 5               124.        224.            38.0           132.\n6 6                98.6       499.            74.5           468.\n# ℹ 1 more variable: mean_COMPUTER_PR &lt;dbl&gt;\n\n\n\n\n\n\n\n\nIn-class 6 notes from Prof Kam:\n\n\n\n\nstandardisation is important for hierarchical clustering because its distance-based and when units of measurement are different, you want to avoid the data analysis being skewed by data with larger units\nhowever in this case, while we had carried out standardisation in this exercise, we note that the distribution of the variables are not wide-ranging and hence can just use the unstandardised data for analysis\nvariable standaridsation techniques: Z-score has no max while min-max is constrained between 0 and 1. another standardisation method decimal scaling helps to spread the data i.e. data from satellites, remote sensing technologies"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#overview",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "In this hands-on exercise, we will delineate a homogeneous region by using geographically referenced multivariate data. There are two major analysis, namely:\n\nhierarchical cluster analysis; and\nspatially constrained cluster analysis.\n\n\n\nThe learning outcomes of this hands-on exercise are:\n\nto convert GIS polygon data into R’s simple feature data.frame by using appropriate functions of sf package of R;\nto convert simple feature data.frame into R’s SpatialPolygonDataFrame object by using appropriate sf of package of R;\nto perform custer analysis by using hclust() of Base R;\nto perform spatially constrained cluster analysis using skater() of Base R; and\nto visualise the analysis output by using ggplot2 and tmap package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#getting-started",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "In geobusiness and spatial policy, it is a common practice to delineate the market or planning area into homogeneous regions by using multivariate data. In this hands-on exercise, we are interested to delineate Shan State, Myanmar into homogeneous regions by using multiple Information and Communication Technology (ICT) measures, namely: Radio, Television, Land line phone, Mobile phone, Computer, and Internet at home."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#the-data",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "Two data sets will be used in this study. They are:\n\nMyanmar Township Boundary Data (i.e. myanmar_township_boundaries) : This is a GIS data in ESRI shapefile format. It consists of township boundary information of Myanmar. The spatial data are captured in polygon features.\nShan-ICT.csv: This is an extract of The 2014 Myanmar Population and Housing Census Myanmar at the township level.\n\nBoth data sets are download from Myanmar Information Management Unit (MIMU).\n\n\nBefore we start the analysis, we need to install and launch the following packages into the R environment:\n\nSpatial data handling\n\nsf, rgdal and spdep\n\nAttribute data handling\n\ntidyverse, especially readr, ggplot2 and dplyr\n\nChoropleth mapping\n\ntmap\n\nMultivariate data visualisation and analysis\n\ncoorplot, ggpubr, and heatmaply\n\nCluster analysis\n\ncluster\nClustGeo\n\n\n\npacman::p_load(spdep,tmap,sf,ClustGeo,ggpubr,cluster,factoextra,NbClust,heatmaply,corrplot,psych,tidyverse,GGally)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-import-and-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-import-and-preparation",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "In this section, I will import Myanmar Township Boundary GIS data and its associated attrbiute table into R environment.\nThe Myanmar Township Boundary GIS data is in ESRI shapefile format. It will be imported into R environment by using the st_read() function of sf.\nThe code chunks used are shown below:\n\nshan_sf &lt;- st_read(dsn = \"data/geospatial\",\n                   layer = \"myanmar_township_boundaries\") %&gt;%\n  filter(ST %in% c(\"Shan (East)\",\"Shan (North)\",\"Shan (South)\")) %&gt;%\n  select(c(2:7))\n\nReading layer `myanmar_township_boundaries' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex06\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.17275 ymin: 9.671252 xmax: 101.1699 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\nThe imported township boundary object is called shan_sf. It is saved in simple feature data.frame format.\nWe view the contents of the newly created shan_sf simple features dataframe using the code chunk below:\n\nshan_sf\n\nSimple feature collection with 55 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 96.15107 ymin: 19.29932 xmax: 101.1699 ymax: 24.15907\nGeodetic CRS:  WGS 84\nFirst 10 features:\n             ST ST_PCODE       DT   DT_PCODE        TS  TS_PCODE\n1  Shan (North)   MMR015  Mongmit MMR015D008   Mongmit MMR015017\n2  Shan (South)   MMR014 Taunggyi MMR014D001   Pindaya MMR014006\n3  Shan (South)   MMR014 Taunggyi MMR014D001   Ywangan MMR014007\n4  Shan (South)   MMR014 Taunggyi MMR014D001  Pinlaung MMR014009\n5  Shan (North)   MMR015  Mongmit MMR015D008    Mabein MMR015018\n6  Shan (South)   MMR014 Taunggyi MMR014D001     Kalaw MMR014005\n7  Shan (South)   MMR014 Taunggyi MMR014D001     Pekon MMR014010\n8  Shan (South)   MMR014 Taunggyi MMR014D001  Lawksawk MMR014008\n9  Shan (North)   MMR015  Kyaukme MMR015D003 Nawnghkio MMR015013\n10 Shan (North)   MMR015  Kyaukme MMR015D003   Kyaukme MMR015012\n                         geometry\n1  MULTIPOLYGON (((96.96001 23...\n2  MULTIPOLYGON (((96.7731 21....\n3  MULTIPOLYGON (((96.78483 21...\n4  MULTIPOLYGON (((96.49518 20...\n5  MULTIPOLYGON (((96.66306 24...\n6  MULTIPOLYGON (((96.49518 20...\n7  MULTIPOLYGON (((97.14738 19...\n8  MULTIPOLYGON (((96.94981 22...\n9  MULTIPOLYGON (((96.75648 22...\n10 MULTIPOLYGON (((96.95498 22...\n\n\nNote that the sf dataframe is conformed to the Hardy Wickham’s tidy framework, as such we can also use the glimpse() function to reveal the data type of its fields:\n\nglimpse(shan_sf)\n\nRows: 55\nColumns: 7\n$ ST       &lt;chr&gt; \"Shan (North)\", \"Shan (South)\", \"Shan (South)\", \"Shan (South)…\n$ ST_PCODE &lt;chr&gt; \"MMR015\", \"MMR014\", \"MMR014\", \"MMR014\", \"MMR015\", \"MMR014\", \"…\n$ DT       &lt;chr&gt; \"Mongmit\", \"Taunggyi\", \"Taunggyi\", \"Taunggyi\", \"Mongmit\", \"Ta…\n$ DT_PCODE &lt;chr&gt; \"MMR015D008\", \"MMR014D001\", \"MMR014D001\", \"MMR014D001\", \"MMR0…\n$ TS       &lt;chr&gt; \"Mongmit\", \"Pindaya\", \"Ywangan\", \"Pinlaung\", \"Mabein\", \"Kalaw…\n$ TS_PCODE &lt;chr&gt; \"MMR015017\", \"MMR014006\", \"MMR014007\", \"MMR014009\", \"MMR01501…\n$ geometry &lt;MULTIPOLYGON [°]&gt; MULTIPOLYGON (((96.96001 23..., MULTIPOLYGON (((…\n\n\n\n\n\n\nict &lt;- read_csv(\"data/aspatial/Shan-ICT.csv\")\n\nThe imported InfoComm variables were extracted from the 2014 Myanmar Population and Housing Census Myanmar and imported into R environment as ict in the R tibble dataframe format.\nWe can view the summary statistics of ict dataframe as follows:\n\nsummary(ict)\n\n District Pcode     District Name      Township Pcode     Township Name     \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n Total households     Radio         Television    Land line phone \n Min.   : 3318    Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711    1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685    Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369    Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471    3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604    Max.   :30176   Max.   :62388   Max.   :6736.0  \n  Mobile phone      Computer      Internet at home\n Min.   :  150   Min.   :  20.0   Min.   :   8.0  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0  \n Median : 3559   Median : 244.0   Median : 316.0  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0  \n\n\nThere are a total of 11 fields and 55 observations in the tibble dataframe.\n\n\n\nThe unit of measurement of the values in ict are the number of households. Using these values directly will be biased by the underlying total number of households. In general, townships with relatively higher total number of households will also have a higher number of households owning radios, TV etc.\nTo overcome this problem, we will derive the penetration rate of each ICT variable using the code chunk below:\n\nict_derived &lt;- ict %&gt;%\n  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %&gt;%\n  mutate(`TV_PR` = `Television`/`Total households`*1000) %&gt;%\n  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %&gt;%\n  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %&gt;%\n  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %&gt;%\n  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %&gt;%\n  rename(`DT_PHONE`=`District Pcode`,\n        `DT` = `District Name`,\n        `TS_PCODE`=`Township Pcode`,\n        `TS`=`Township Name`,\n        `TT_HOUSEHOLDS`=`Total households`,\n        `RADIO`=`Radio`,\n        `TV`=`Television`,\n        `LLPHONE`=`Land line phone`,\n        `MPHONE`=`Mobile phone`,\n        `COMPUTER`=`Computer`,\n        `INTERNET`=`Internet at home`)\n\nWe review the summary statistics of the newly derived penetration codes using the code chunk below:\n\nsummary(ict_derived)\n\n   DT_PHONE              DT              TS_PCODE              TS           \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n TT_HOUSEHOLDS       RADIO             TV           LLPHONE      \n Min.   : 3318   Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711   1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685   Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369   Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471   3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604   Max.   :30176   Max.   :62388   Max.   :6736.0  \n     MPHONE         COMPUTER         INTERNET         RADIO_PR     \n Min.   :  150   Min.   :  20.0   Min.   :   8.0   Min.   : 21.05  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0   1st Qu.:138.95  \n Median : 3559   Median : 244.0   Median : 316.0   Median :210.95  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2   Mean   :215.68  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5   3rd Qu.:268.07  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0   Max.   :484.52  \n     TV_PR         LLPHONE_PR       MPHONE_PR       COMPUTER_PR    \n Min.   :116.0   Min.   :  2.78   Min.   : 36.42   Min.   : 3.278  \n 1st Qu.:450.2   1st Qu.: 22.84   1st Qu.:190.14   1st Qu.:11.832  \n Median :517.2   Median : 37.59   Median :305.27   Median :18.970  \n Mean   :509.5   Mean   : 51.09   Mean   :314.05   Mean   :24.393  \n 3rd Qu.:606.4   3rd Qu.: 69.72   3rd Qu.:428.43   3rd Qu.:29.897  \n Max.   :842.5   Max.   :181.49   Max.   :735.43   Max.   :92.402  \n  INTERNET_PR     \n Min.   :  1.041  \n 1st Qu.:  8.617  \n Median : 22.829  \n Mean   : 30.644  \n 3rd Qu.: 41.281  \n Max.   :117.985  \n\n\nNote that we have added six new fields into the dataframe: RADIO_PR, TV_PR, LLPHONE_PR, MPHONE_PR, COMPUTER_PR and INTERNET_PR."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#exploratory-data-analysis-eda",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#exploratory-data-analysis-eda",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "We can plot the distribution of variables using appropriate EDA as shown in the code chunk below. Histogram is useful to identify the overall distribution of the data values i.e. left-/right-skewed or normal distribution.\n\nggplot(ict_derived,\n       aes(x=`RADIO`))+\n  geom_histogram(bins = 20,\n                 color = \"black\",\n                 fill = \"lightblue\")\n\n\n\n\n\n\n\n\nBoxplot is useful to detect any outliers:\n\nggplot(ict_derived,\n       aes(x=`RADIO`))+\n  geom_boxplot(color =\"black\",\n               fill = \"lightblue\")\n\n\n\n\n\n\n\n\nWe will also plot the distributed of the newly derived variable i.e. Radio Penetration Rate by using the code chunk below:\n\nggplot(ict_derived,\n       aes(x=`RADIO_PR`))+\n  geom_histogram(bins = 20,\n                 color = \"black\",\n                 fill = \"lightblue\")\n\n\n\n\n\n\n\n\nWe also plot using boxplot:\n\nggplot(ict_derived,\n       aes(x=`RADIO_PR`))+\n  geom_boxplot(color = \"black\",\n               fill = \"lightblue\")\n\n\n\n\n\n\n\n\nWe plot the distribution of the other variables as well by first creating the individual histograms:\n\n\n\n\n\n\nNote\n\n\n\n\nradio &lt;- ggplot(ict_derived,\n                aes(x=`RADIO_PR`))+\n  geom_histogram(bins = 20,\n                 color = \"black\",\n                 fill = \"lightblue\")\n\ntv &lt;- ggplot(ict_derived,\n                aes(x=`TV_PR`))+\n  geom_histogram(bins = 20,\n                 color = \"black\",\n                 fill = \"lightblue\")\n\nllphone &lt;- ggplot(ict_derived,\n                aes(x=`LLPHONE_PR`))+\n  geom_histogram(bins = 20,\n                 color = \"black\",\n                 fill = \"lightblue\")\n\nmphone &lt;- ggplot(ict_derived,\n                aes(x=`MPHONE_PR`))+\n  geom_histogram(bins = 20,\n                 color = \"black\",\n                 fill = \"lightblue\")\n\ncomputer &lt;- ggplot(ict_derived,\n                aes(x=`COMPUTER_PR`))+\n  geom_histogram(bins = 20,\n                 color = \"black\",\n                 fill = \"lightblue\")\n\ninternet &lt;- ggplot(ict_derived,\n                aes(x=`INTERNET_PR`))+\n  geom_histogram(bins = 20,\n                 color = \"black\",\n                 fill = \"lightblue\")\n\n\n\nWe then use ggarrange() function of ggpubr packageto group the histograms together:\n\nggarrange(radio,tv,llphone,mphone,computer,internet,\n          ncol = 3,\n          nrow = 2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn-class 6 notes from Prof Kam:\n\n\n\n\nas seen from the distribution from the plots above, the differences between the ranges of the variables are not great hence can proceed without using standardised variables\n\n\n\n\n\n\n\n\nBefore we can prepare the chloropleth map, we need to combine both the geospatial data object shan_sf and the aspatial dataframe object ict_derived into one. This will be performed using left_join() function of dplyr package.\nThe shan_sf simple feature dataframe will be used as the base data object and the ict_derived dataframe will be used as the join table.\nThe unique identifier and common field used to join both data objects is TS_PCODE. We saved the file as a new rds file to avoid rerunning the preparation steps.\n\nshan_sf &lt;- left_join(shan_sf,\n                              ict_derived,\n                              by = c(\"TS_PCODE\"=\"TS_PCODE\"))\n\nwrite_rds(shan_sf,\"data/rds/shan_sf.rds\")\n\nIt is important to note that no new output data has been created. Instead, the data fields from ict_derived dataframe are now updated into the shan_sf dataframe.\n\nshan_sf &lt;- read_rds(\"data/rds/shan_sf.rds\")\n\n\n\n\nWe will prepare a choropleth map to take a quick look at the distribution of radio penetration rate of Shan State at the township level.\nWe use the qtm() function of the tmap package below:\n\nqtm(shan_sf,\"RADIO_PR\")\n\n\n\n\n\n\n\n\nIn order to reveal that the distribution shown in the choropleth map above is bias to the underlying total number of households at the township, we will create two choropleth maps - one for the total number of households TT_HOUSEHOLDS.map and one for the total number of households with Radio i.e. RADIO.map using the code chunk below:\n\nTT_HOUSEHOLDS.map &lt;- tm_shape(shan_sf)+\n  tm_fill(col = \"TT_HOUSEHOLDS\",\n          n = 5,\n          style = \"jenks\",\n          title = \"Total households\")+\n  tm_borders(alpha = 0.5)+\n  tm_layout(legend.position =c(0.8,0.5))\n\nRADIO.map &lt;- tm_shape(shan_sf)+\n  tm_fill(col = \"RADIO\",\n          n = 5,\n          style = \"jenks\",\n          title = \"Number of households with Radio\")+\n  tm_borders(alpha = 0.5)+\n  tm_layout(legend.position =c(0.8,0.5))\n\ntmap_arrange(TT_HOUSEHOLDS.map,RADIO.map,\n             asp = NA,\n             ncol = 2)\n\n\n\n\n\n\n\n\nThe choropleth maps above show that townships with relatively larger number of households are also showing relatively higher number of radio ownership.\nNow we plot the choropleth maps showing the distribution of total number of households and radio penetration rate using the code chunk below:\n\ntm_shape(shan_sf)+\n  tm_polygons(c(\"TT_HOUSEHOLDS\",\"RADIO_PR\"),\n              style=\"jenks\")+\n  tm_facets(sync = TRUE,\n            ncol = 2)+\n  tm_legend(legend.position = c(\"right\",\"bottom\"))+\n  tm_layout(outer.margins = 0,\n            asp = 0)\n\n\n\n\n\n\n\n\nAs shown above, choropleth maps above show that townships with relatively larger number of households might not have a higher number of radio penetration rate."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#correlation-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#correlation-analysis",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "Before we perform cluster analysis, it is important to ensure that the cluster variables are not highly correlated.\nWe will use corrplot.mixed() function of corrplot package to visualise and analyse the correlation of the input variables.\n\ncluster_vars.cor = cor(ict_derived[,12:17])\ncorrplot.mixed(cluster_vars.cor,\n               lower = \"ellipse\",\n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\nThe correlation plot shows that COMPUTER_PR and INTERNET_PR are highly correlated i.e. more than 0.8, in this case 0.87. This suggests that only one of them should be used in the cluster analysis."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#hierarchy-cluster-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#hierarchy-cluster-analysis",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "In this section, we will perform hierarchical cluster analysis. The analysis consist of four major steps:\n\n\nThe code chunk below will be used to extract the clustering variables from shan_sf simple feature object into a dataframe. Note that we have omitted INTERNET_PR as it is highly correlated to COMPUTER_PR.\n\ncluster_vars &lt;- shan_sf %&gt;%\n  st_set_geometry(NULL) %&gt;%\n  select(\"TS.x\",\"RADIO_PR\",\"TV_PR\",\"LLPHONE_PR\",\"MPHONE_PR\",\"COMPUTER_PR\")\nhead(cluster_vars,10)\n\n        TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1    Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\n2    Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\n3    Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\n4   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\n5     Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\n6      Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\n7      Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\n8   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\n9  Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\n10   Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nNext, we need to change the rows by township name instead of row number using the code chunk below:\n\nrow.names(cluster_vars) &lt;- cluster_vars$\"TS.x\"\nhead(cluster_vars,10)\n\n               TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit     Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya     Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan     Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\nMabein       Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw         Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\nPekon         Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme     Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nThis replaced the row number with township name. Next, we will delete the “TS.x” field using the following code chunk:\n\nshan_ict &lt;- select(cluster_vars,c(2:6))\nhead(shan_ict,10)\n\n          RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit   286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya   417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan   484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung  231.6499 541.7189   28.54454  249.4903    13.76255\nMabein    449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw     280.7624 611.6204   42.06478  408.7951    29.63160\nPekon     318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk  387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme   210.9548 601.1773   39.58267  372.4930    30.94709\n\n\n\n\n\nIn general, multiple variables will be used in cluster analysis. It is not unusal that their value ranges are different. To avoid the cluster analysis being biased to clustering variables with large values, it is useful to standardise the input variables before performing cluster analysis.\n\n\nIn the code chunk below, normalize() of heatmaply package is used to standardise the clustering variables using the Min-Max method. The summary() function is then used to display the summary statistics of the standardised clustering variables.\n\nshan_ict.std &lt;- normalize(shan_ict)\nsummary(shan_ict.std)\n\n    RADIO_PR          TV_PR          LLPHONE_PR       MPHONE_PR     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.2544   1st Qu.:0.4600   1st Qu.:0.1123   1st Qu.:0.2199  \n Median :0.4097   Median :0.5523   Median :0.1948   Median :0.3846  \n Mean   :0.4199   Mean   :0.5416   Mean   :0.2703   Mean   :0.3972  \n 3rd Qu.:0.5330   3rd Qu.:0.6750   3rd Qu.:0.3746   3rd Qu.:0.5608  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n  COMPUTER_PR     \n Min.   :0.00000  \n 1st Qu.:0.09598  \n Median :0.17607  \n Mean   :0.23692  \n 3rd Qu.:0.29868  \n Max.   :1.00000  \n\n\nNote that the value ranges of the Min-Max standardised clustering variables are now from 0 to 1.\n\n\n\n\nZ-score standardisation can also be performed easily using scale() of Base R, as seen in the code chunk below:\n\nshan_ict.z &lt;- scale(shan_ict)\ndescribe(shan_ict.z)\n\n            vars  n mean sd median trimmed  mad   min  max range  skew kurtosis\nRADIO_PR       1 55    0  1  -0.04   -0.06 0.94 -1.85 2.55  4.40  0.48    -0.27\nTV_PR          2 55    0  1   0.05    0.04 0.78 -2.47 2.09  4.56 -0.38    -0.23\nLLPHONE_PR     3 55    0  1  -0.33   -0.15 0.68 -1.19 3.20  4.39  1.37     1.49\nMPHONE_PR      4 55    0  1  -0.05   -0.06 1.01 -1.58 2.40  3.98  0.48    -0.34\nCOMPUTER_PR    5 55    0  1  -0.26   -0.18 0.64 -1.03 3.31  4.34  1.80     2.96\n              se\nRADIO_PR    0.13\nTV_PR       0.13\nLLPHONE_PR  0.13\nMPHONE_PR   0.13\nCOMPUTER_PR 0.13\n\n\nNote that the mean and standard deviation of the Z-score standardised clustering variables are 0 and 1 respectively.\n\n\n\n\n\n\nNote\n\n\n\nNote that describe() of pscyh package is used here instead of summary() of Base R because the former provide standard deviation values.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nNote that Z-score standardisation method should only be used if we assume that all variables come from some normal distribution.\n\n\n\n\n\nBefore reviewing the summary statistics of the standardised clustering variables, it is a good practice to visualise their graphical distribution.\nThe code chunk below plots the scaled Radio_PR field.\n\nr &lt;- ggplot(ict_derived,\n            aes(x=`RADIO_PR`))+\n  geom_histogram(bins = 20,\n                 color = \"black\",\n                 fill = \"lightblue\")+\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df &lt;- as.data.frame(shan_ict.std)\ns &lt;- ggplot(shan_ict_s_df,\n            aes(x=`RADIO_PR`))+\n  geom_histogram(bins = 20,\n                 color = \"black\",\n                 fill = \"lightblue\")+\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df &lt;- as.data.frame(shan_ict.z)\nz &lt;- ggplot(shan_ict_z_df,\n            aes(x=`RADIO_PR`))+\n  geom_histogram(bins = 20,\n                 color = \"black\",\n                 fill = \"lightblue\")+\n  ggtitle(\"Z-Score Standardisation\")\n\nggarrange(r,s,z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n\n\nWe also plot the density curves:\n\nr &lt;- ggplot(ict_derived,\n            aes(x=`RADIO_PR`))+\n  geom_density(color = \"black\",\n               fill = \"lightblue\")+\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df &lt;- as.data.frame(shan_ict.std)\ns &lt;- ggplot(shan_ict_s_df,\n            aes(x=`RADIO_PR`))+\n  geom_density(color = \"black\",\n               fill = \"lightblue\")+\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df &lt;- as.data.frame(shan_ict.z)\nz &lt;- ggplot(shan_ict_z_df,\n            aes(x=`RADIO_PR`))+\n  geom_density(color = \"black\",\n               fill = \"lightblue\")+\n  ggtitle(\"Z-Score Standardisation\")\n\nggarrange(r,s,z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n\n\n\n\n\nIn R, many packages provide functions to calculate distance matrix. We will compute the proximity matrix using dist() of R.\ndist() supports six distance proximity calculations, namely euclidean (default option), maximum, manhatten, canberra, binary and minkowski.\nThe code chunk below computes the proximity matrix using euclidean method:\n\nproxmat &lt;- dist(shan_ict,method = \"euclidean\")\n\nThe code chunk below is used to list the content of proxmat for visual inspection:\n\nproxmat\n\n             Mongmit   Pindaya   Ywangan  Pinlaung    Mabein     Kalaw\nPindaya    171.86828                                                  \nYwangan    381.88259 257.31610                                        \nPinlaung    57.46286 208.63519 400.05492                              \nMabein     263.37099 313.45776 529.14689 312.66966                    \nKalaw      160.05997 302.51785 499.53297 181.96406 198.14085          \nPekon       59.61977 117.91580 336.50410  94.61225 282.26877 211.91531\nLawksawk   140.11550 204.32952 432.16535 192.57320 130.36525 140.01101\nNawnghkio   89.07103 180.64047 377.87702 139.27495 204.63154 127.74787\nKyaukme    144.02475 311.01487 505.89191 139.67966 264.88283  79.42225\nMuse       563.01629 704.11252 899.44137 571.58335 453.27410 412.46033\nLaihka     141.87227 298.61288 491.83321 101.10150 345.00222 197.34633\nMongnai    115.86190 258.49346 422.71934  64.52387 358.86053 200.34668\nMawkmai    434.92968 437.99577 397.03752 398.11227 693.24602 562.59200\nKutkai      97.61092 212.81775 360.11861  78.07733 340.55064 204.93018\nMongton    192.67961 283.35574 361.23257 163.42143 425.16902 267.87522\nMongyai    256.72744 287.41816 333.12853 220.56339 516.40426 386.74701\nMongkaing  503.61965 481.71125 364.98429 476.29056 747.17454 625.24500\nLashio     251.29457 398.98167 602.17475 262.51735 231.28227 106.69059\nMongpan    193.32063 335.72896 483.68125 192.78316 301.52942 114.69105\nMatman     401.25041 354.39039 255.22031 382.40610 637.53975 537.63884\nTachileik  529.63213 635.51774 807.44220 555.01039 365.32538 373.64459\nNarphan    406.15714 474.50209 452.95769 371.26895 630.34312 463.53759\nMongkhet   349.45980 391.74783 408.97731 305.86058 610.30557 465.52013\nHsipaw     118.18050 245.98884 388.63147  76.55260 366.42787 212.36711\nMonghsat   214.20854 314.71506 432.98028 160.44703 470.48135 317.96188\nMongmao    242.54541 402.21719 542.85957 217.58854 384.91867 195.18913\nNansang    104.91839 275.44246 472.77637  85.49572 287.92364 124.30500\nLaukkaing  568.27732 726.85355 908.82520 563.81750 520.67373 427.77791\nPangsang   272.67383 428.24958 556.82263 244.47146 418.54016 224.03998\nNamtu      179.62251 225.40822 444.66868 170.04533 366.16094 307.27427\nMonghpyak  177.76325 221.30579 367.44835 222.20020 212.69450 167.08436\nKonkyan    403.39082 500.86933 528.12533 365.44693 613.51206 444.75859\nMongping   265.12574 310.64850 337.94020 229.75261 518.16310 375.64739\nHopong     136.93111 223.06050 352.85844  98.14855 398.00917 264.16294\nNyaungshwe  99.38590 216.52463 407.11649 138.12050 210.21337  95.66782\nHsihseng   131.49728 172.00796 342.91035 111.61846 381.20187 287.11074\nMongla     384.30076 549.42389 728.16301 372.59678 406.09124 260.26411\nHseni      189.37188 337.98982 534.44679 204.47572 213.61240  38.52842\nKunlong    224.12169 355.47066 531.63089 194.76257 396.61508 273.01375\nHopang     281.05362 443.26362 596.19312 265.96924 368.55167 185.14704\nNamhkan    386.02794 543.81859 714.43173 382.78835 379.56035 246.39577\nKengtung   246.45691 385.68322 573.23173 263.48638 219.47071  88.29335\nLangkho    164.26299 323.28133 507.78892 168.44228 253.84371  67.19580\nMonghsu    109.15790 198.35391 340.42789  80.86834 367.19820 237.34578\nTaunggyi   399.84278 503.75471 697.98323 429.54386 226.24011 252.26066\nPangwaun   381.51246 512.13162 580.13146 356.37963 523.44632 338.35194\nKyethi     202.92551 175.54012 287.29358 189.47065 442.07679 360.17247\nLoilen     145.48666 293.61143 469.51621  91.56527 375.06406 217.19877\nManton     430.64070 402.42888 306.16379 405.83081 674.01120 560.16577\nMongyang   309.51302 475.93982 630.71590 286.03834 411.88352 233.56349\nKunhing    173.50424 318.23811 449.67218 141.58836 375.82140 197.63683\nMongyawng  214.21738 332.92193 570.56521 235.55497 193.49994 173.43078\nTangyan    195.92520 208.43740 324.77002 169.50567 448.59948 348.06617\nNamhsan    237.78494 228.41073 286.16305 214.33352 488.33873 385.88676\n               Pekon  Lawksawk Nawnghkio   Kyaukme      Muse    Laihka\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk   157.51129                                                  \nNawnghkio  113.15370  90.82891                                        \nKyaukme    202.12206 186.29066 157.04230                              \nMuse       614.56144 510.13288 533.68806 434.75768                    \nLaihka     182.23667 246.74469 211.88187 128.24979 526.65211          \nMongnai    151.60031 241.71260 182.21245 142.45669 571.97975 100.53457\nMawkmai    416.00669 567.52693 495.15047 512.02846 926.93007 429.96554\nKutkai     114.98048 224.64646 147.44053 170.93318 592.90743 144.67198\nMongton    208.14888 311.07742 225.81118 229.28509 634.71074 212.07320\nMongyai    242.52301 391.26989 319.57938 339.27780 763.91399 264.13364\nMongkaing  480.23965 625.18712 546.69447 586.05094 995.66496 522.96309\nLashio     303.80011 220.75270 230.55346 129.95255 313.15288 238.64533\nMongpan    243.30037 228.54223 172.84425 110.37831 447.49969 210.76951\nMatman     368.25761 515.39711 444.05061 505.52285 929.11283 443.25453\nTachileik  573.39528 441.82621 470.45533 429.15493 221.19950 549.08985\nNarphan    416.84901 523.69580 435.59661 420.30003 770.40234 392.32592\nMongkhet   342.08722 487.41102 414.10280 409.03553 816.44931 324.97428\nHsipaw     145.37542 249.35081 176.09570 163.95741 591.03355 128.42987\nMonghsat   225.64279 352.31496 289.83220 253.25370 663.76026 158.93517\nMongmao    293.70625 314.64777 257.76465 146.09228 451.82530 185.99082\nNansang    160.37607 188.78869 151.13185  60.32773 489.35308  78.78999\nLaukkaing  624.82399 548.83928 552.65554 428.74978 149.26996 507.39700\nPangsang   321.81214 345.91486 287.10769 175.35273 460.24292 214.19291\nNamtu      165.02707 260.95300 257.52713 270.87277 659.16927 185.86794\nMonghpyak  190.93173 142.31691  93.03711 217.64419 539.43485 293.22640\nKonkyan    421.48797 520.31264 439.34272 393.79911 704.86973 351.75354\nMongping   259.68288 396.47081 316.14719 330.28984 744.44948 272.82761\nHopong     138.86577 274.91604 204.88286 218.84211 648.68011 157.48857\nNyaungshwe 139.31874 104.17830  43.26545 126.50414 505.88581 201.71653\nHsihseng   105.30573 257.11202 209.88026 250.27059 677.66886 175.89761\nMongla     441.20998 393.18472 381.40808 241.58966 256.80556 315.93218\nHseni      243.98001 171.50398 164.05304  81.20593 381.30567 204.49010\nKunlong    249.36301 318.30406 285.04608 215.63037 547.24297 122.68682\nHopang     336.38582 321.16462 279.84188 154.91633 377.44407 230.78652\nNamhkan    442.77120 379.41126 367.33575 247.81990 238.67060 342.43665\nKengtung   297.67761 209.38215 208.29647 136.23356 330.08211 258.23950\nLangkho    219.21623 190.30257 156.51662  51.67279 413.64173 160.94435\nMonghsu    113.84636 242.04063 170.09168 200.77712 633.21624 163.28926\nTaunggyi   440.66133 304.96838 344.79200 312.60547 250.81471 425.36916\nPangwaun   423.81347 453.02765 381.67478 308.31407 541.97887 351.78203\nKyethi     162.43575 317.74604 267.21607 328.14177 757.16745 255.83275\nLoilen     181.94596 265.29318 219.26405 146.92675 560.43400  59.69478\nManton     403.82131 551.13000 475.77296 522.86003 941.49778 458.30232\nMongyang   363.58788 363.37684 323.32123 188.59489 389.59919 229.71502\nKunhing    213.46379 278.68953 206.15773 145.00266 533.00162 142.03682\nMongyawng  248.43910 179.07229 220.61209 181.55295 422.37358 211.99976\nTangyan    167.79937 323.14701 269.07880 306.78359 736.93741 224.29176\nNamhsan    207.16559 362.84062 299.74967 347.85944 778.52971 273.79672\n             Mongnai   Mawkmai    Kutkai   Mongton   Mongyai Mongkaing\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai    374.50873                                                  \nKutkai      91.15307 364.95519                                        \nMongton    131.67061 313.35220 107.06341                              \nMongyai    203.23607 178.70499 188.94166 159.79790                    \nMongkaing  456.00842 133.29995 428.96133 365.50032 262.84016          \nLashio     270.86983 638.60773 289.82513 347.11584 466.36472 708.65819\nMongpan    178.09554 509.99632 185.18173 200.31803 346.39710 563.56780\nMatman     376.33870 147.83545 340.86349 303.04574 186.95158 135.51424\nTachileik  563.95232 919.38755 568.99109 608.76740 750.29555 967.14087\nNarphan    329.31700 273.75350 314.27683 215.97925 248.82845 285.65085\nMongkhet   275.76855 115.58388 273.91673 223.22828 104.98924 222.60577\nHsipaw      52.68195 351.34601  51.46282  90.69766 177.33790 423.77868\nMonghsat   125.25968 275.09705 154.32012 150.98053 127.35225 375.60376\nMongmao    188.29603 485.52853 204.69232 206.57001 335.61300 552.31959\nNansang     92.79567 462.41938 130.04549 199.58124 288.55962 542.16609\nLaukkaing  551.56800 882.51110 580.38112 604.66190 732.68347 954.11795\nPangsang   204.25746 484.14757 228.33583 210.77938 343.30638 548.40662\nNamtu      209.35473 427.95451 225.28268 308.71751 278.02761 525.04057\nMonghpyak  253.26470 536.71695 206.61627 258.04282 370.01575 568.21089\nKonkyan    328.82831 339.01411 310.60810 248.25265 287.87384 380.92091\nMongping   202.99615 194.31049 182.75266 119.86993  65.38727 257.18572\nHopong      91.53795 302.84362  73.45899 106.21031 124.62791 379.37916\nNyaungshwe 169.63695 502.99026 152.15482 219.72196 327.13541 557.32112\nHsihseng   142.36728 329.29477 128.21054 194.64317 162.27126 411.59788\nMongla     354.10985 686.88950 388.40984 411.06668 535.28615 761.48327\nHseni      216.81639 582.53670 229.37894 286.75945 408.23212 648.04408\nKunlong    202.92529 446.53763 204.54010 270.02165 299.36066 539.91284\nHopang     243.00945 561.24281 263.31986 273.50305 408.73288 626.17673\nNamhkan    370.05669 706.47792 392.48568 414.53594 550.62819 771.39688\nKengtung   272.28711 632.54638 279.19573 329.38387 460.39706 692.74693\nLangkho    174.67678 531.08019 180.51419 236.70878 358.95672 597.42714\nMonghsu     84.11238 332.07962  62.60859 107.04894 154.86049 400.71816\nTaunggyi   448.55282 810.74692 450.33382 508.40925 635.94105 866.21117\nPangwaun   312.13429 500.68857 321.80465 257.50434 394.07696 536.95736\nKyethi     210.50453 278.85535 184.23422 222.52947 137.79420 352.06533\nLoilen      58.41263 388.73386 131.56529 176.16001 224.79239 482.18190\nManton     391.54062 109.08779 361.82684 310.20581 195.59882  81.75337\nMongyang   260.39387 558.83162 285.33223 295.60023 414.31237 631.91325\nKunhing    110.55197 398.43973 108.84990 114.03609 238.99570 465.03971\nMongyawng  275.77546 620.04321 281.03383 375.22688 445.78964 700.98284\nTangyan    180.37471 262.66006 166.61820 198.88460 109.08506 348.56123\nNamhsan    218.10003 215.19289 191.32762 196.76188  77.35900 288.66231\n              Lashio   Mongpan    Matman Tachileik   Narphan  Mongkhet\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan    172.33279                                                  \nMatman     628.11049 494.81014                                        \nTachileik  311.95286 411.03849 890.12935                              \nNarphan    525.63854 371.13393 312.05193 760.29566                    \nMongkhet   534.44463 412.17123 203.02855 820.50164 217.28718          \nHsipaw     290.86435 179.52054 344.45451 576.18780 295.40170 253.80950\nMonghsat   377.86793 283.30992 313.59911 677.09508 278.21548 167.98445\nMongmao    214.23677 131.59966 501.59903 472.95568 331.42618 375.35820\nNansang    184.47950 144.77393 458.06573 486.77266 398.13308 360.99219\nLaukkaing  334.65738 435.58047 903.72094 325.06329 708.82887 769.06406\nPangsang   236.72516 140.23910 506.29940 481.31907 316.30314 375.58139\nNamtu      365.88437 352.91394 416.65397 659.56458 494.36143 355.99713\nMonghpyak  262.09281 187.85699 470.46845 444.04411 448.40651 462.63265\nKonkyan    485.51312 365.87588 392.40306 730.92980 158.82353 254.24424\nMongping   454.52548 318.47482 201.65224 727.08969 188.64567 113.80917\nHopong     345.31042 239.43845 291.84351 632.45718 294.40441 212.99485\nNyaungshwe 201.58191 137.29734 460.91883 445.81335 427.94086 417.08639\nHsihseng   369.00833 295.87811 304.02806 658.87060 377.52977 256.70338\nMongla     179.95877 253.20001 708.17595 347.33155 531.46949 574.40292\nHseni       79.41836 120.66550 564.64051 354.90063 474.12297 481.88406\nKunlong    295.23103 288.03320 468.27436 595.70536 413.07823 341.68641\nHopang     170.63913 135.62913 573.55355 403.82035 397.85908 451.51070\nNamhkan    173.27153 240.34131 715.42102 295.91660 536.85519 596.19944\nKengtung    59.85893 142.21554 613.01033 295.90429 505.40025 531.35998\nLangkho    115.18145  94.98486 518.86151 402.33622 420.65204 428.08061\nMonghsu    325.71557 216.25326 308.13805 605.02113 311.92379 247.73318\nTaunggyi   195.14541 319.81385 778.45810 150.84117 684.20905 712.80752\nPangwaun   362.45608 232.52209 523.43600 540.60474 264.64997 407.02947\nKyethi     447.10266 358.89620 233.83079 728.87329 374.90376 233.25039\nLoilen     268.92310 207.25000 406.56282 573.75476 354.79137 284.76895\nManton     646.66493 507.96808  59.52318 910.23039 280.26395 181.33894\nMongyang   209.33700 194.93467 585.61776 448.79027 401.39475 445.40621\nKunhing    255.10832 137.85278 403.66587 532.26397 281.62645 292.49814\nMongyawng  172.70139 275.15989 601.80824 432.10118 572.76394 522.91815\nTangyan    429.84475 340.39128 242.78233 719.84066 348.84991 201.49393\nNamhsan    472.04024 364.77086 180.09747 754.03913 316.54695 170.90848\n              Hsipaw  Monghsat   Mongmao   Nansang Laukkaing  Pangsang\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat   121.78922                                                  \nMongmao    185.99483 247.17708                                        \nNansang    120.24428 201.92690 164.99494                              \nLaukkaing  569.06099 626.44910 404.00848 480.60074                    \nPangsang   205.04337 256.37933  57.60801 193.36162 408.04016          \nNamtu      229.44658 231.78673 365.03882 217.61884 664.06286 392.97391\nMonghpyak  237.67919 356.84917 291.88846 227.52638 565.84279 315.11651\nKonkyan    296.74316 268.25060 281.87425 374.70456 635.92043 274.81900\nMongping   168.92101 140.95392 305.57166 287.36626 708.13447 308.33123\nHopong      62.86179 100.45714 244.16253 167.66291 628.48557 261.51075\nNyaungshwe 169.92664 286.37238 230.45003 131.18943 520.24345 257.77823\nHsihseng   136.54610 153.49551 311.98001 193.53779 670.74564 335.52974\nMongla     373.47509 429.00536 216.24705 289.45119 202.55831 217.88123\nHseni      231.48538 331.22632 184.67099 136.45492 391.74585 214.66375\nKunlong    205.10051 202.31862 224.43391 183.01388 521.88657 258.49342\nHopang     248.72536 317.64824  78.29342 196.47091 331.67199  92.57672\nNamhkan    382.79302 455.10875 223.32205 302.89487 196.46063 231.38484\nKengtung   284.08582 383.72138 207.58055 193.67980 351.48520 229.85484\nLangkho    183.05109 279.52329 134.50170  99.39859 410.41270 167.65920\nMonghsu     58.55724 137.24737 242.43599 153.59962 619.01766 260.52971\nTaunggyi   462.31183 562.88102 387.33906 365.04897 345.98041 405.59730\nPangwaun   298.12447 343.53898 187.40057 326.12960 470.63605 157.48757\nKyethi     195.17677 190.50609 377.89657 273.02385 749.99415 396.89963\nLoilen      98.04789 118.65144 190.26490  94.23028 535.57527 207.94433\nManton     359.60008 317.15603 503.79786 476.55544 907.38406 504.75214\nMongyang   267.10497 312.64797  91.06281 218.49285 326.19219 108.37735\nKunhing     90.77517 165.38834 103.91040 128.20940 500.41640 123.18870\nMongyawng  294.70967 364.40429 296.40789 191.11990 454.80044 336.16703\nTangyan    167.69794 144.59626 347.14183 249.70235 722.40954 364.76893\nNamhsan    194.47928 169.56962 371.71448 294.16284 760.45960 385.65526\n               Namtu Monghpyak   Konkyan  Mongping    Hopong Nyaungshwe\nPindaya                                                                \nYwangan                                                                \nPinlaung                                                               \nMabein                                                                 \nKalaw                                                                  \nPekon                                                                  \nLawksawk                                                               \nNawnghkio                                                              \nKyaukme                                                                \nMuse                                                                   \nLaihka                                                                 \nMongnai                                                                \nMawkmai                                                                \nKutkai                                                                 \nMongton                                                                \nMongyai                                                                \nMongkaing                                                              \nLashio                                                                 \nMongpan                                                                \nMatman                                                                 \nTachileik                                                              \nNarphan                                                                \nMongkhet                                                               \nHsipaw                                                                 \nMonghsat                                                               \nMongmao                                                                \nNansang                                                                \nLaukkaing                                                              \nPangsang                                                               \nNamtu                                                                  \nMonghpyak  346.57799                                                   \nKonkyan    478.37690 463.39594                                         \nMongping   321.66441 354.76537 242.02901                               \nHopong     206.82668 267.95563 304.49287 134.00139                     \nNyaungshwe 271.41464 103.97300 432.35040 319.32583 209.32532           \nHsihseng   131.89940 285.37627 383.49700 199.64389  91.65458  225.80242\nMongla     483.49434 408.03397 468.09747 512.61580 432.31105  347.60273\nHseni      327.41448 200.26876 448.84563 395.58453 286.41193  130.86310\nKunlong    233.60474 357.44661 329.11433 309.05385 219.06817  285.13095\nHopang     408.24516 304.26577 348.18522 379.27212 309.77356  247.19891\nNamhkan    506.32466 379.50202 481.59596 523.74815 444.13246  333.32428\nKengtung   385.33554 221.47613 474.82621 442.80821 340.47382  177.75714\nLangkho    305.03473 200.27496 386.95022 343.96455 239.63685  128.26577\nMonghsu    209.64684 232.17823 331.72187 158.90478  43.40665  173.82799\nTaunggyi   518.72748 334.17439 650.56905 621.53039 513.76415  325.09619\nPangwaun   517.03554 381.95144 263.97576 340.37881 346.00673  352.92324\nKyethi     186.90932 328.16234 400.10989 187.43974 136.49038  288.06872\nLoilen     194.24075 296.99681 334.19820 231.99959 124.74445  206.40432\nManton     448.58230 502.20840 366.66876 200.48082 310.58885  488.79874\nMongyang   413.26052 358.17599 329.39338 387.80686 323.35704  294.29500\nKunhing    296.43996 250.74435 253.74202 212.59619 145.15617  189.97131\nMongyawng  262.24331 285.56475 522.38580 455.59190 326.59925  218.12104\nTangyan    178.69483 335.26416 367.46064 161.67411 106.82328  284.14692\nNamhsan    240.95555 352.70492 352.20115 130.23777 132.70541  315.91750\n            Hsihseng    Mongla     Hseni   Kunlong    Hopang   Namhkan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla     478.66210                                                  \nHseni      312.74375 226.82048                                        \nKunlong    231.85967 346.46200 276.19175                              \nHopang     370.01334 147.02444 162.80878 271.34451                    \nNamhkan    492.09476  77.21355 212.11323 375.73885 146.18632          \nKengtung   370.72441 202.45004  66.12817 317.14187 164.29921 175.63015\nLangkho    276.27441 229.01675  66.66133 224.52741 134.24847 224.40029\nMonghsu     97.82470 424.51868 262.28462 239.89665 301.84458 431.32637\nTaunggyi   528.14240 297.09863 238.19389 471.29032 329.95252 257.29147\nPangwaun   433.06326 319.18643 330.70182 392.45403 206.98364 310.44067\nKyethi      84.04049 556.02500 388.33498 298.55859 440.48114 567.86202\nLoilen     158.84853 338.67408 227.10984 166.53599 242.89326 364.90647\nManton     334.87758 712.51416 584.63341 479.76855 577.52046 721.86149\nMongyang   382.59743 146.66661 210.19929 247.22785  69.25859 167.72448\nKunhing    220.15490 306.47566 206.47448 193.77551 172.96164 314.92119\nMongyawng  309.51462 315.57550 173.86004 240.39800 290.51360 321.21112\nTangyan     70.27241 526.80849 373.07575 268.07983 412.22167 542.64078\nNamhsan    125.74240 564.02740 411.96125 310.40560 440.51555 576.42717\n            Kengtung   Langkho   Monghsu  Taunggyi  Pangwaun    Kyethi\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho    107.16213                                                  \nMonghsu    316.91914 221.84918                                        \nTaunggyi   186.28225 288.27478 486.91951                              \nPangwaun   337.48335 295.38434 343.38498 497.61245                    \nKyethi     444.26274 350.91512 146.61572 599.57407 476.62610          \nLoilen     282.22935 184.10672 131.55208 455.91617 331.69981 232.32965\nManton     631.99123 535.95620 330.76503 803.08034 510.79265 272.03299\nMongyang   217.08047 175.35413 323.95988 374.58247 225.25026 453.86726\nKunhing    245.95083 146.38284 146.78891 429.98509 229.09986 278.95182\nMongyawng  203.87199 186.11584 312.85089 287.73864 475.33116 387.71518\nTangyan    429.95076 332.02048 127.42203 592.65262 447.05580  47.79331\nNamhsan    466.20497 368.20978 153.22576 631.49232 448.58030  68.67929\n              Loilen    Manton  Mongyang   Kunhing Mongyawng   Tangyan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho                                                               \nMonghsu                                                               \nTaunggyi                                                              \nPangwaun                                                              \nKyethi                                                                \nLoilen                                                                \nManton     419.06087                                                  \nMongyang   246.76592 585.70558                                        \nKunhing    130.39336 410.49230 188.89405                              \nMongyawng  261.75211 629.43339 304.21734 295.35984                    \nTangyan    196.60826 271.82672 421.06366 249.74161 377.52279          \nNamhsan    242.15271 210.48485 450.97869 270.79121 430.02019  63.67613\n\n\n\n\n\nIn R, there are several packages that provide hierarchical clustering function. In this exercise, hclust() of R stats will be used.\nhclust() employs the agglomeration method to compute the cluster. Eight clustering algorithms are supportedm namely ward.D, ward.D2, single, complete, average(UPGMA), mcquitty(WPGMA), median(WPGMC) and centroid(UPGMC).\nThe code chunk below performs the hierarchical cluster analysis using ward.D method. The hierarchical clustering output is stored in an object of class hclust which describes the tree produced by the clustering process.\n\nhclust_ward &lt;- hclust(proxmat, method=\"ward.D\")\n\nWe plot the tree using plot() of R Graphics using the code chunk below:\n\nplot(hclust_ward,cex = 0.6)\n\n\n\n\n\n\n\n\n\n\n\nOne challenge in performing hierarchical clustering is to identify stronger clustering structures. The issue can be solved by using agnes() function of cluster package.\nIt functions like hclust() but with the agnes() function, we also get the agglomerative coefficient which measures the amount of clustering structure found i.e. values closer to 1 suggest a stronger clustering structure.\nThe code chunk below is used to compute the agglomerative coefficient of all hierarchical clustering algorithms:\n\nm &lt;- c(\"average\",\"single\",\"complete\",\"ward\")\nnames(m) &lt;- c(\"average\",\"single\",\"complete\",\"ward\")\n\nac &lt;- function(x){\n  agnes(shan_ict,method=x)$ac\n}\n\nmap_dbl(m,ac)\n\n  average    single  complete      ward \n0.8131144 0.6628705 0.8950702 0.9427730 \n\n\nWith reference to the output above, we can see that Ward’s method provides the strongest clustering structure among the four methods assessed. Hence, in the subsequent analysis, only Ward’s method will be used.\n\n\n\nAnother technical challenge face by data analyst in performing clustering analysis is to determine the optimal clusters to retain.\nThere are three commonly used methods to determine the optimal clusters, they are:\n\nElbow Method\nAverage Silhouette Method\nGap Statistic Method\n\n\n\nThe gap statistic compares the total within intra-cluster variation for different values of k with their expected values under null reference distribution of the data. The estimate of the optimal clusters will be value that maximize the gap statistic (i.e., that yields the largest gap statistic). This means that the clustering structure is far away from the random uniform distribution of points.\nTo compute the gap statistic, clusGap() of cluster package will be used.\n\nset.seed(12345)\ngap_stat &lt;- clusGap(shan_ict,\n                    FUN = hcut,\n                    nstart = 25,\n                    K.max = 10,\n                    B = 50)\n\nprint(gap_stat,method=\"firstmax\")\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = shan_ict, FUNcluster = hcut, K.max = 10, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --&gt; Number of clusters (method 'firstmax'): 1\n          logW   E.logW       gap     SE.sim\n [1,] 8.407129 8.680794 0.2736651 0.04460994\n [2,] 8.130029 8.350712 0.2206824 0.03880130\n [3,] 7.992265 8.202550 0.2102844 0.03362652\n [4,] 7.862224 8.080655 0.2184311 0.03784781\n [5,] 7.756461 7.978022 0.2215615 0.03897071\n [6,] 7.665594 7.887777 0.2221833 0.03973087\n [7,] 7.590919 7.806333 0.2154145 0.04054939\n [8,] 7.526680 7.731619 0.2049390 0.04198644\n [9,] 7.458024 7.660795 0.2027705 0.04421874\n[10,] 7.377412 7.593858 0.2164465 0.04540947\n\n\nNote that the hcut function used is from the factoextra package.\nNext, we can visualise the plot using fviz_gap_stat() of factoextra package:\n\nfviz_gap_stat(gap_stat)\n\n\n\n\n\n\n\n\nWith reference to the gap statistic graph above, the recommended number of cluster to retain is 1. However, it is not logical to retain only one cluster. By examine the gap statistic graph, the 6-cluster gives the next largest gap statistic and should be the next best cluster to pick.\n\n\n\n\n\n\nNote\n\n\n\nNote: In addition to these commonly used approaches, the NbClust package, published by Charrad et al., 2014, provides 30 indices for determining the relevant number of clusters and proposes to users the best clustering scheme from the different results obtained by varying all combinations of number of clusters, distance measures, and clustering methods.\n\n\n\n\n\n\n\n\nIn-class 6 notes from Prof Kam:\n\n\n\n\ndendogram without a cut-off is not useful\nthere will be several local optimisation points i.e. if extend to view more number of clusters, will likely see local optimal points there too. hence need to consider logic/other factors i.e. if have 80 points, no point having 20 clusters.\n\n\n\n\n\n\n\nIn the dendrogram displayed above, each leaf corresponds to one observation. As we move up the tree, observations that are similar to each other are combined into branches, which are themselves fused at a higher height.\nThe height of the fusion, provided on the vertical axis, indicates the (dis)similarity between two observations. The higher the height of the fusion, the less similar the observations are. Note that, conclusions about the proximity of two observations can be drawn only based on the height where branches containing those two observations first are fused. We cannot use the proximity of two observations along the horizontal axis as a criteria of their similarity.\nIt’s also possible to draw the dendrogram with a border around the selected clusters by using rect.hclust() of R stats. The argument border is used to specify the border colors for the rectangles.\n\nplot(hclust_ward, cex = 0.6)\nrect.hclust(hclust_ward,\n            k = 6,\n            border = 2:5)\n\n\n\n\n\n\n\n\n\n\n\nIn this section, we will learn how to perform visually-driven hiearchical clustering analysis using heatmaply package.\nWith heatmaply, we are able to build both highly interactive or static cluster heatmap.\n\n\nThe data was loaded into a data frame, but it has to be a data matrix to make your heatmap.\nThe code chunk below will be used to transform shan_ict data frame into a data matrix.\n\nshan_ict_mat &lt;- data.matrix(shan_ict)\n\n\n\n\nIn the code chunk below, the heatmaply() of heatmaply package is used to build an interactive cluster heatmap.\n\nheatmaply(normalize(shan_ict_mat),\n          Colv = NA,\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          seriate = \"OLO\",\n          colors = Blues,\n          k_row = 6,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main = \"Geographic Segmentation of Shan State by ICT Indicators\",\n          xlab = \"ICT Indicators\",\n          ylab = \"Townships of Shan State\")\n\n\n\n\n\n\n\n\n\nWith closed examination of the dendragram above, we have decided to retain six clusters.\ncutree() of R Base will be used in the code chunk below to derive a 6-cluster model.\n\ngroups &lt;- as.factor(cutree(hclust_ward, k=6))\n\nThe output is called groups. It is a list object.\nIn order to visualise the clusters, the groups object need to be appended onto shan_sf simple feature object.\nThe code chunk below form the join in three steps:\n\nthe groups list object will be converted into a matrix;\ncbind() is used to append groups matrix onto shan_sf to produce an output simple feature object called shan_sf_cluster; and\nrename() of dplyr package is used to rename as.matrix.groups field as CLUSTER.\n\n\nshan_sf_cluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER`=`as.matrix.groups.`)\n\nNext, qtm() of tmap package is used to plot the choropleth map showing the cluster formed:\n\nqtm(shan_sf_cluster,\"CLUSTER\")\n\n\n\n\n\n\n\n\nThe choropleth map above reveals the clusters are very fragmented. The is one of the major limitations when non-spatial clustering algorithm such as hierarchical cluster analysis method is used."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#spatially-constrained-clustering-skater-approach",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#spatially-constrained-clustering-skater-approach",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "In this section, we will derive spatially constrained cluster using skater() method of spdep package.\n\n\nFirst, we need to convert shan_sf into SpatialPolygonsDataFrame. This is because SKATER function only support sp objects such as SpatialPolygonDataFrame.\nThe code chunk below uses as_Spatial() of sf package to convert shan_sf into a SpatialPolygonDataFrame called shan_sp.\n\nshan_sp &lt;- as_Spatial(shan_sf)\n\n\n\n\nNext, poly2nd() of spdep package will be used to compute the neighbours list from polygon list.\n\nshan.nb &lt;- poly2nb(shan_sp)\nsummary(shan.nb)\n\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\n\nWe can plot the neighbours list on shan_sp using the code chunk below. Since we now can plot the community area boundaries as well, we plot this graph on top of the map. The first plot command gives the boundaries. This is followed by the plot of the neighbor list object, with coordinates applied to the original SpatialPolygonDataFrame (Shan state township boundaries) to extract the centroids of the polygons. These are used as the nodes for the graph representation. We also set the color to blue and specify add=TRUE to plot the network on top of the boundaries.\n\ncoords &lt;- st_coordinates(\n  st_centroid(st_geometry(shan_sf)))\n\n\nplot(st_geometry(shan_sf), \n     border=grey(.5))\nplot(shan.nb,\n     coords, \n     col=\"blue\", \n     add=TRUE)\n\n\n\n\n\n\n\n\nNote that if you plot the network first and then the boundaries, some of the areas will be clipped. This is because the plotting area is determined by the characteristics of the first plot. In this example, because the boundary map extends further than the graph, we plot it first.\n\n\n\n\n\nNext, nbcosts() of spdep package is used to compute the cost of each edge. It is the distance between it nodes. This function compute this distance using a data.frame with observations vector in each node.\nThe code chunk below is used to compute the cost of each edge.\n\nlcosts &lt;- nbcosts(shan.nb, shan_ict)\n\nFor each observation, this gives the pairwise dissimilarity between its values on the five variables and the values for the neighbouring observation (from the neighbour list). Basically, this is the notion of a generalised weight for a spatial weights matrix.\nNext, we will incorporate these costs into a weights object in the same way as we did in the calculation of inverse of distance weights. In other words, we convert the neighbour list to a list weights object by specifying the just computed lcosts as the weights.\nIn order to achieve this, nb2listw() of spdep package is used as shown in the code chunk below.\nNote that we specify the style as B to make sure the cost values are not row-standardised.\n\nshan.w &lt;- nb2listw(shan.nb, \n                   lcosts, \n                   style=\"B\")\nsummary(shan.w)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\nWeights style: B \nWeights constants summary:\n   n   nn       S0       S1        S2\nB 55 3025 76267.65 58260785 522016004\n\n\nThe minimum spanning tree is computed by mean of the mstree() of spdep package as shown in the code chunk below.\n\nshan.mst &lt;- mstree(shan.w)\n\nAfter computing the MST, we can check its class and dimension by using the code chunk below.\n\nclass(shan.mst)\n\n[1] \"mst\"    \"matrix\"\n\n\n\ndim(shan.mst)\n\n[1] 54  3\n\n\nNote that the dimension is 54 and not 55. This is because the minimum spanning tree consists on n-1 edges (links) in order to traverse all the nodes.\nWe can display the content of shan.mst by using head() as shown in the code chunk below.\n\nhead(shan.mst)\n\n     [,1] [,2]      [,3]\n[1,]   54   48  47.79331\n[2,]   54   17 109.08506\n[3,]   54   45 127.42203\n[4,]   45   52 146.78891\n[5,]   52   13 110.55197\n[6,]   13   28  92.79567\n\n\nThe plot method for the MST include a way to show the observation numbers of the nodes in addition to the edge. As before, we plot this together with the township boundaries. We can see how the initial neighbour list is simplified to just one edge connecting each of the nodes, while passing through all the nodes.\n\nplot(st_geometry(shan_sf), \n                 border=gray(.5))\nplot.mst(shan.mst, \n         coords, \n         col=\"blue\", \n         cex.lab=0.7, \n         cex.circles=0.005, \n         add=TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below compute the spatially constrained cluster using skater() of spdep package.\n\nclust6 &lt;- spdep::skater(edges = shan.mst[,1:2], \n                 data = shan_ict, \n                 method = \"euclidean\", \n                 ncuts = 5)\n\nThe skater() takes three mandatory arguments: - the first two columns of the MST matrix (i.e. not the cost), - the data matrix (to update the costs as units are being grouped), and - the number of cuts.\nNote: It is set to one less than the number of clusters. So, the value specified is not the number of clusters, but the number of cuts in the graph, one less than the number of clusters.\nThe result of the skater() is an object of class skater. We can examine its contents by using the code chunk below.\n\nstr(clust6)\n\nList of 8\n $ groups      : num [1:55] 3 3 6 3 3 3 3 3 3 3 ...\n $ edges.groups:List of 6\n  ..$ :List of 3\n  .. ..$ node: num [1:22] 13 48 54 55 45 37 34 16 25 52 ...\n  .. ..$ edge: num [1:21, 1:3] 48 55 54 37 34 16 45 25 13 13 ...\n  .. ..$ ssw : num 3423\n  ..$ :List of 3\n  .. ..$ node: num [1:18] 47 27 53 38 42 15 41 51 43 32 ...\n  .. ..$ edge: num [1:17, 1:3] 53 15 42 38 41 51 15 27 15 43 ...\n  .. ..$ ssw : num 3759\n  ..$ :List of 3\n  .. ..$ node: num [1:11] 2 6 8 1 36 4 10 9 46 5 ...\n  .. ..$ edge: num [1:10, 1:3] 6 1 8 36 4 6 8 10 10 9 ...\n  .. ..$ ssw : num 1458\n  ..$ :List of 3\n  .. ..$ node: num [1:2] 44 20\n  .. ..$ edge: num [1, 1:3] 44 20 95\n  .. ..$ ssw : num 95\n  ..$ :List of 3\n  .. ..$ node: num 23\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n  ..$ :List of 3\n  .. ..$ node: num 3\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n $ not.prune   : NULL\n $ candidates  : int [1:6] 1 2 3 4 5 6\n $ ssto        : num 12613\n $ ssw         : num [1:6] 12613 10977 9962 9540 9123 ...\n $ crit        : num [1:2] 1 Inf\n $ vec.crit    : num [1:55] 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"class\")= chr \"skater\"\n\n\nThe most interesting component of this list structure is the groups vector containing the labels of the cluster to which each observation belongs (as before, the label itself is arbitary). This is followed by a detailed summary for each of the clusters in the edges.groups list. Sum of squares measures are given as ssto for the total and ssw to show the effect of each of the cuts on the overall criterion.\nWe can check the cluster assignment by using the conde chunk below.\n\nccs6 &lt;- clust6$groups\nccs6\n\n [1] 3 3 6 3 3 3 3 3 3 3 2 1 1 1 2 1 1 1 2 4 1 2 5 1 1 1 2 1 2 2 1 2 2 1 1 3 1 2\n[39] 2 2 2 2 2 4 1 3 2 1 1 1 2 1 2 1 1\n\n\nWe can find out how many observations are in each cluster by means of the table command. Parenthetially, we can also find this as the dimension of each vector in the lists contained in edges.groups. For example, the first list has node with dimension 22, which is also the number of observations in the first cluster.\n\ntable(ccs6)\n\nccs6\n 1  2  3  4  5  6 \n22 18 11  2  1  1 \n\n\nLastly, we can also plot the pruned tree that shows the five clusters on top of the townshop area.\n\nplot(st_geometry(shan_sf), \n     border=gray(.5))\nplot(clust6, \n     coords, \n     cex.lab=.7,\n     groups.colors=c(\"red\",\"green\",\"blue\", \"brown\", \"pink\"),\n     cex.circles=0.005, \n     add=TRUE)\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below is used to plot the newly derived clusters by using SKATER method.\n\ngroups_mat &lt;- as.matrix(clust6$groups)\nshan_sf_spatialcluster &lt;- cbind(shan_sf_cluster, as.factor(groups_mat)) %&gt;%\n  rename(`SP_CLUSTER`=`as.factor.groups_mat.`)\nqtm(shan_sf_spatialcluster, \"SP_CLUSTER\")\n\n\n\n\n\n\n\n\nFor easy comparison, it will be better to place both the hierarchical clustering and spatially constrained hierarchical clustering maps next to each other.\n\n\n\n\n\n\nNote\n\n\n\n\nhclust.map &lt;- qtm(shan_sf_cluster,\n                  \"CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\nshclust.map &lt;- qtm(shan_sf_spatialcluster,\n                   \"SP_CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(hclust.map, shclust.map,\n             asp=NA, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn-class 6 notes from Prof Kam:\n\n\n\n\nresults from spatially constrained cluster is more homogenous, determined based on shortest path distance\nmajor limitation of this method is that might be spatially homogenous but might not be that homogenous in terms of attribute aka “hard classification” hence alternative to this is to use ClustGeo() aka “soft classification” method"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#spatially-constrained-clustering-clustgeo-method",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#spatially-constrained-clustering-clustgeo-method",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "In this section, we will use functions provided by ClustGeo package to perform non-spatially constrained hierarchical cluster analysis and spatially constrained cluster analysis.\n\n\nClustGeo package is an R package specially designed to support the need of performing spatially constrained cluster analysis. More specifically, it provides a Ward-like hierarchical clustering algorithm called hclustgeo() including spatial/geographical constraints.\nIn the nutshell, the algorithm uses two dissimilarity matrices D0 and D1 along with a mixing parameter alpha, whereby the value of alpha must be a real number between [0, 1]. D0 can be non-Euclidean and the weights of the observations can be non-uniform. It gives the dissimilarities in the attribute/clustering variable space. D1, on the other hand, gives the dissimilarities in the constraint space. The criterion minimised at each stage is a convex combination of the homogeneity criterion calculated with D0 and the homogeneity criterion calculated with D1.\nThe idea is then to determine a value of alpha which increases the spatial contiguity without deteriorating too much the quality of the solution based on the variables of interest. This need is supported by a function called choicealpha().\n\n\n\nClustGeo package provides function called hclustgeo() to perform a typical Ward-like hierarchical clustering just like hclust() learned in previous section.\nTo perform non-spatially constrained hierarchical clustering, we only need to provide the function a dissimilarity matrix as shown in the code chunk below.\n\nnongeo_cluster &lt;- hclustgeo(proxmat)\nplot(nongeo_cluster, cex = 0.5)\nrect.hclust(nongeo_cluster, \n            k = 6, \n            border = 2:5)\n\n\n\n\n\n\n\n\nNote that the dissimilarity matrix must be an object of class dist, i.e. an object obtained with the function dist(). For sample code chunk, please refer to 5.7.6 Computing proximity matrix\n\n\nSimilarly, we can plot the clusters on a categorical area shaded map by using the steps we learned in 5.7.12 Mapping the clusters formed.\n\ngroups &lt;- as.factor(cutree(nongeo_cluster, k=6))\n\n\nshan_sf_ngeo_cluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nqtm(shan_sf_ngeo_cluster, \"CLUSTER\")\n\n\n\n\n\n\n\n\n\n\n\n\nBefore we can performed spatially constrained hierarchical clustering, a spatial distance matrix will be derived by using st_distance() of sf package.\n\ndist &lt;- st_distance(shan_sf, shan_sf)\ndistmat &lt;- as.dist(dist)\n\nNotice that as.dist() is used to convert the data frame into matrix.\nNext, choicealpha() will be used to determine a suitable value for the mixing parameter alpha as shown in the code chunk below.\n\ncr &lt;- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K=6, graph = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWith reference to the graphs above, alpha = 0.3 will be used as shown in the code chunk below.\n\n\n\n\n\n\nIn-class 6 notes from Prof Kam\n\n\n\nInterpreting the plots above:\n\nuse the raw version of the plot above to decide on the cut-off for alpha. the bottom plot is the normalised version.\nfor the raw version, towards the right, the red plot has stronger spatial compactness but lose attribute homogeneity. If want to focus on attribute compactness, look more towards the left. hence to objectively decide, look for the point where both plots cut each other i.e. compromise between spatial and attribute compactness\nk=6 will be obtained from the step above as there is no spatially constrained optimal number of clusters\n\n\n\n\nclustG &lt;- hclustgeo(proxmat, distmat, alpha = 0.3)\n\nNext, cutree() is used to derive the cluster object.\n\ngroups &lt;- as.factor(cutree(clustG, k=6))\n\nWe will then join back the group list with shan_sf polygon feature data frame by using the code chunk below.\n\nshan_sf_Gcluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\nWe can now plot the map of the newly delineated spatially constrained clusters.\n\nqtm(shan_sf_Gcluster, \"CLUSTER\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#visual-interpretation-of-clusters",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#visual-interpretation-of-clusters",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "Code chunk below is used to reveal the distribution of a clustering variable (i.e RADIO_PR) by cluster.\n\nggplot(data = shan_sf_ngeo_cluster,\n       aes(x = CLUSTER, y = RADIO_PR)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\nThe boxplot reveals Cluster 3 displays the highest mean Radio Ownership Per Thousand Household. This is followed by Cluster 2, 1, 4, 6 and 5.\n\n\n\nPast studies shown that parallel coordinate plot can be used to reveal clustering variables by cluster very effectively. In the code chunk below, ggparcoord() of GGally package\n\nggparcoord(data = shan_sf_ngeo_cluster, \n           columns = c(17:21), \n           scale = \"globalminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of ICT Variables by Cluster\") +\n  facet_grid(~ CLUSTER) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\n\n\n\n\nThe parallel coordinate plot above reveals that households in Cluster 4 townships tend to own the highest number of TV and mobile-phone. On the other hand, households in Cluster 5 tends to own the lowest of all the five ICT.\nNote that the scale argument of ggparcoor() provide several methods to scale the clustering variables. They are:\n\nstd: univariately, subtract mean and divide by standard deviation.\nrobust: univariately, subtract median and divide by median absolute deviation.\nuniminmax: univariately, scale so the minimum of the variable is zero, and the maximum is one.\nglobalminmax: no scaling is done; the range of the graphs is defined by the global minimum and the global maximum.\ncenter: use uniminmax to standardize vertical height, then center each variable at a value specified by the scaleSummary param.\ncenterObs: use uniminmax to standardize vertical height, then center each variable at the value of the observation specified by the centerObsID param\n\nThere is no one best scaling method to use - we will need to explore them and select the one that best meets the analysis need.\nLast but not least, we can also compute the summary statistics such as mean, median, sd, etc to complement the visual interpretation.\nIn the code chunk below, group_by() and summarise() of dplyr are used to derive mean values of the clustering variables.\n\nshan_sf_ngeo_cluster %&gt;% \n  st_set_geometry(NULL) %&gt;%\n  group_by(CLUSTER) %&gt;%\n  summarise(mean_RADIO_PR = mean(RADIO_PR),\n            mean_TV_PR = mean(TV_PR),\n            mean_LLPHONE_PR = mean(LLPHONE_PR),\n            mean_MPHONE_PR = mean(MPHONE_PR),\n            mean_COMPUTER_PR = mean(COMPUTER_PR))\n\n# A tibble: 6 × 6\n  CLUSTER mean_RADIO_PR mean_TV_PR mean_LLPHONE_PR mean_MPHONE_PR\n  &lt;chr&gt;           &lt;dbl&gt;      &lt;dbl&gt;           &lt;dbl&gt;          &lt;dbl&gt;\n1 1               221.        521.            44.2           246.\n2 2               237.        402.            23.9           134.\n3 3               300.        611.            52.2           392.\n4 4               196.        744.            99.0           651.\n5 5               124.        224.            38.0           132.\n6 6                98.6       499.            74.5           468.\n# ℹ 1 more variable: mean_COMPUTER_PR &lt;dbl&gt;\n\n\n\n\n\n\n\n\nIn-class 6 notes from Prof Kam:\n\n\n\n\nstandardisation is important for hierarchical clustering because its distance-based and when units of measurement are different, you want to avoid the data analysis being skewed by data with larger units\nhowever in this case, while we had carried out standardisation in this exercise, we note that the distribution of the variables are not wide-ranging and hence can just use the unstandardised data for analysis\nvariable standaridsation techniques: Z-score has no max while min-max is constrained between 0 and 1. another standardisation method decimal scaling helps to spread the data i.e. data from satellites, remote sensing technologies"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex06/In-class_Ex06.html",
    "href": "In-class_Ex/In-class_Ex06/In-class_Ex06.html",
    "title": "In-class Exercise 6",
    "section": "",
    "text": "pacman::p_load(sf,tidyverse,sfdep,tmap,plotly,Kendall)\n\n\n\n\n\nHunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.\n\n\n\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\nIn this section, we will bring a geospatial data and its associated attribute table into R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.\n\n\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be a simple features object of sf.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\",\n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\In-class_Ex\\In-class_Ex06\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\nWe note that the simple features data has a polygon geometry and has 88 features and 7 fields. It is in WGS84 geographic coordinate system.\n\n\n\nNext, we will import Hunan_GDPPC.csv into R using read_csv() of readr package. The output is in R data frame class.\n\nGDPPC &lt;- read_csv(\"data/aspatial/Hunan_GDPPC.csv\")\n\n\n\n\nWe use spacetime() of sfdep to create a spatio-temporal cube:\n\nGDPPC_st &lt;- spacetime(GDPPC,hunan,\n                      .loc_col = \"County\",\n                      .time_col = \"Year\")\n\n\nthe above code explicitly indicates which attribute is spatial (“.loc_col”) and which attribute is the time (“.time_col”)\nnote that cannot use original time or date field as its in continuous form and might not be integer i.e. cannot use real number/number that have decimal places, hence prior to this step, might need to explicitly convert date into integer (via lubridate) or rmb to drop away the date to have continuous day, month, year indicator.\ncannot use this method if boundary change i.e. those phenomena with dynamic space such as flooding that cover a large area then recede to cover smaller area, what can be changed are attributes i.e. occurrences of accidents - as long as hexagon remain the same.\n\n\n\n\n\n\n\nNote\n\n\n\nNote this step for Take-home Exercise 2\n\n\nWe use the following code chunk to verify if GDPPC_st is indeed a space-time cube object:\n\nis_spacetime_cube(GDPPC_st)\n\n[1] TRUE\n\n\n\nIt is always good practice to check via the above step\nVia the “Environment” tab, we note that GDPPC_st has several layers according to different time periods vs the original GDPPC file. However, this difference is not obvious when you click to open up the GDPPC_st file.\n\n\n\n\n\n\nGDPPC_nb &lt;- GDPPC_st %&gt;%\n  activate(\"geometry\") %&gt;%\n  mutate(nb = include_self(\n    st_contiguity(geometry)),\n    wt = st_inverse_distance(nb,\n                             geometry,\n                             scale = 1,\n                             alpha =1),\n    .before = 1) %&gt;%\n  set_nbs(\"nb\") %&gt;%\n  set_wts(\"wt\")\n\n\nwe use mutate to create new columns\nG* statistics need to use distance weights (either inverse or fixed)\nnote that G* includes itself hence note the function “include_self()” as first-level container\ngeometry in st_inverse_distance is the centroid\nto have more distance decay, increase the alpha value\nnote not to sort the data after applying set_nbs and set_wts cause it will change the sequence\n\nWe use the new columsn to manually calculate the local Gi* for each location. We can do this by grouping by Year and using local_gstar_perm() of sfdep package. Thereafter, we use unnest to “flatten” - unnest gi_star column of newly created gi_stars data.frame:\n\ngi_stars &lt;- GDPPC_nb %&gt;%\n  group_by(Year) %&gt;%\n  mutate(gi_star = local_gstar_perm(\n    GDPPC, nb, wt)) %&gt;%\n  tidyr::unnest(gi_star)\n\n\n\n\nPerform confirmatory analysis to test if observed pattern exhibit monotonic or non-monotonic trend\n\ncbg &lt;- gi_stars %&gt;% \n  ungroup() %&gt;% \n  filter(County == \"Changsha\") %&gt;%\n  dplyr::select(County, Year, gi_star)\n\n\nggplot(cbg,\n       aes(x=Year,\n           y=gi_star))+\n  geom_line()+\n  theme_light()\n\n\n\n\n\n\n\n\n\nneed 12 years of data?\ncan also utilise ggplotly to plot an interactive version below:\n\n\np &lt;- ggplot(cbg,\n            aes(x=Year,\n                y=gi_star))+\n  geom_line()+\n  theme_light()\n\nggplotly(p)\n\n\n\n\n\n\n\n\ncbg %&gt;%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %&gt;%\n  tidyr::unnest_wider(mk)\n\n# A tibble: 1 × 5\n    tau      sl     S     D  varS\n  &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 0.485 0.00742    66  136.  589.\n\n\n\nsl is the p-value. with reference to the above results (sl = ~0.00742) which is less than 0.05, we will reject the hypothesis at 95% confidence level and infer that there’s a slight upward trend (tau = ~0.485).\n\n\n\n\nWe can replicate this for each location using group_by() of dplyr package:\n\nehsa &lt;- gi_stars %&gt;%\n  group_by(County) %&gt;%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %&gt;%\n  tidyr::unnest_wider(mk)\n\nhead(ehsa)\n\n# A tibble: 6 × 6\n  County        tau        sl     S     D  varS\n  &lt;chr&gt;       &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Anhua      0.191  0.303        26  136.  589.\n2 Anren     -0.294  0.108       -40  136.  589.\n3 Anxiang    0      1             0  136.  589.\n4 Baojing   -0.691  0.000128    -94  136.  589.\n5 Chaling   -0.0882 0.650       -12  136.  589.\n6 Changning -0.750  0.0000318  -102  136.  589.\n\n\n\nnote that not all County are statistically significant\nnote that not all County are on the positive increasing trend, some are negative increasing trend\n\n\n\n\n\nemerging &lt;- ehsa %&gt;% \n  arrange(sl, abs(tau)) %&gt;% \n  slice(1:5)\n\nemerging\n\n# A tibble: 5 × 6\n  County        tau         sl     S     D  varS\n  &lt;chr&gt;       &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Shuangfeng  0.868 0.00000143   118  136.  589.\n2 Xiangtan    0.868 0.00000143   118  136.  589.\n3 Xiangxiang  0.868 0.00000143   118  136.  589.\n4 Chengbu    -0.824 0.00000482  -112  136.  589.\n5 Dongan     -0.824 0.00000482  -112  136.  589.\n\n\n\n\n\n\nset.seed(1234)\nehsa &lt;- emerging_hotspot_analysis(\n  x = GDPPC_st,\n  .var = \"GDPPC\",\n  k = 1,\n  nsim =99\n)\n\nehsa\n\n# A tibble: 88 × 4\n   location     tau    p_value classification     \n   &lt;chr&gt;      &lt;dbl&gt;      &lt;dbl&gt; &lt;chr&gt;              \n 1 Anxiang    0.221 0.232      sporadic coldspot  \n 2 Hanshou    0.147 0.434      sporadic hotspot   \n 3 Jinshi     0.441 0.0151     oscilating hotspot \n 4 Li        -0.824 0.00000482 sporadic coldspot  \n 5 Linli      0.118 0.537      oscilating hotspot \n 6 Shimen    -0.471 0.00946    oscilating coldspot\n 7 Liuyang    0.868 0.00000143 sporadic hotspot   \n 8 Ningxiang -0.559 0.00201    sporadic coldspot  \n 9 Wangcheng -0.162 0.387      sporadic coldspot  \n10 Anren      0.456 0.0120     sporadic coldspot  \n# ℹ 78 more rows\n\n\n\nk=1 is yearly time interval\n\n\n\n\n\nQuick overview:\n\nggplot(ehsa,\n       aes(x=classification))+\n  geom_bar()\n\n\n\n\n\n\n\n\n\nusually visualise as a frequency plot, bar chart format\ndid not sieve out statistically significant ones (can add a filter to get only statistically significant ones)\n\n\n\n\n\nhunan_ehsa &lt;- hunan %&gt;%\n  left_join(ehsa,\n            by = join_by(County == location))\n\n\nehsa_sig &lt;- hunan_ehsa %&gt;%\n  filter(p_value &lt; 0.05)\n\ntmap_mode('plot')\ntm_shape(hunan_ehsa)+\n  tm_polygons()+\n  tm_borders(alpha = 0.5)+\n  tm_shape(ehsa_sig)+\n  tm_fill(\"classification\")+\n  tm_borders(alpha=0.4)\n\n\n\n\n\n\n\n\n\nread the interpretation of EHSA classes for definition/explanation\neven though Mann-Kendall and EHSA tests both provide tau and p-values, they are different. have to run both tests separately. Mann-Kendall test provide quick overview while the final classification is based on the EHSA test. EHSA run permutations i.e. nsim = 99 to confirm the observations, provides more confidence."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#installing-and-loading-the-r-packages",
    "href": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#installing-and-loading-the-r-packages",
    "title": "In-class Exercise 6",
    "section": "",
    "text": "pacman::p_load(sf,tidyverse,sfdep,tmap,plotly,Kendall)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#the-data",
    "href": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#the-data",
    "title": "In-class Exercise 6",
    "section": "",
    "text": "Hunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.\n\n\n\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\nIn this section, we will bring a geospatial data and its associated attribute table into R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.\n\n\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be a simple features object of sf.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\",\n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\In-class_Ex\\In-class_Ex06\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\nWe note that the simple features data has a polygon geometry and has 88 features and 7 fields. It is in WGS84 geographic coordinate system.\n\n\n\nNext, we will import Hunan_GDPPC.csv into R using read_csv() of readr package. The output is in R data frame class.\n\nGDPPC &lt;- read_csv(\"data/aspatial/Hunan_GDPPC.csv\")\n\n\n\n\nWe use spacetime() of sfdep to create a spatio-temporal cube:\n\nGDPPC_st &lt;- spacetime(GDPPC,hunan,\n                      .loc_col = \"County\",\n                      .time_col = \"Year\")\n\n\nthe above code explicitly indicates which attribute is spatial (“.loc_col”) and which attribute is the time (“.time_col”)\nnote that cannot use original time or date field as its in continuous form and might not be integer i.e. cannot use real number/number that have decimal places, hence prior to this step, might need to explicitly convert date into integer (via lubridate) or rmb to drop away the date to have continuous day, month, year indicator.\ncannot use this method if boundary change i.e. those phenomena with dynamic space such as flooding that cover a large area then recede to cover smaller area, what can be changed are attributes i.e. occurrences of accidents - as long as hexagon remain the same.\n\n\n\n\n\n\n\nNote\n\n\n\nNote this step for Take-home Exercise 2\n\n\nWe use the following code chunk to verify if GDPPC_st is indeed a space-time cube object:\n\nis_spacetime_cube(GDPPC_st)\n\n[1] TRUE\n\n\n\nIt is always good practice to check via the above step\nVia the “Environment” tab, we note that GDPPC_st has several layers according to different time periods vs the original GDPPC file. However, this difference is not obvious when you click to open up the GDPPC_st file."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#computing-gi",
    "href": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#computing-gi",
    "title": "In-class Exercise 6",
    "section": "",
    "text": "GDPPC_nb &lt;- GDPPC_st %&gt;%\n  activate(\"geometry\") %&gt;%\n  mutate(nb = include_self(\n    st_contiguity(geometry)),\n    wt = st_inverse_distance(nb,\n                             geometry,\n                             scale = 1,\n                             alpha =1),\n    .before = 1) %&gt;%\n  set_nbs(\"nb\") %&gt;%\n  set_wts(\"wt\")\n\n\nwe use mutate to create new columns\nG* statistics need to use distance weights (either inverse or fixed)\nnote that G* includes itself hence note the function “include_self()” as first-level container\ngeometry in st_inverse_distance is the centroid\nto have more distance decay, increase the alpha value\nnote not to sort the data after applying set_nbs and set_wts cause it will change the sequence\n\nWe use the new columsn to manually calculate the local Gi* for each location. We can do this by grouping by Year and using local_gstar_perm() of sfdep package. Thereafter, we use unnest to “flatten” - unnest gi_star column of newly created gi_stars data.frame:\n\ngi_stars &lt;- GDPPC_nb %&gt;%\n  group_by(Year) %&gt;%\n  mutate(gi_star = local_gstar_perm(\n    GDPPC, nb, wt)) %&gt;%\n  tidyr::unnest(gi_star)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#mann-kendall-test",
    "href": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#mann-kendall-test",
    "title": "In-class Exercise 6",
    "section": "",
    "text": "Perform confirmatory analysis to test if observed pattern exhibit monotonic or non-monotonic trend\n\ncbg &lt;- gi_stars %&gt;% \n  ungroup() %&gt;% \n  filter(County == \"Changsha\") %&gt;%\n  dplyr::select(County, Year, gi_star)\n\n\nggplot(cbg,\n       aes(x=Year,\n           y=gi_star))+\n  geom_line()+\n  theme_light()\n\n\n\n\n\n\n\n\n\nneed 12 years of data?\ncan also utilise ggplotly to plot an interactive version below:\n\n\np &lt;- ggplot(cbg,\n            aes(x=Year,\n                y=gi_star))+\n  geom_line()+\n  theme_light()\n\nggplotly(p)\n\n\n\n\n\n\n\n\ncbg %&gt;%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %&gt;%\n  tidyr::unnest_wider(mk)\n\n# A tibble: 1 × 5\n    tau      sl     S     D  varS\n  &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 0.485 0.00742    66  136.  589.\n\n\n\nsl is the p-value. with reference to the above results (sl = ~0.00742) which is less than 0.05, we will reject the hypothesis at 95% confidence level and infer that there’s a slight upward trend (tau = ~0.485).\n\n\n\n\nWe can replicate this for each location using group_by() of dplyr package:\n\nehsa &lt;- gi_stars %&gt;%\n  group_by(County) %&gt;%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %&gt;%\n  tidyr::unnest_wider(mk)\n\nhead(ehsa)\n\n# A tibble: 6 × 6\n  County        tau        sl     S     D  varS\n  &lt;chr&gt;       &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Anhua      0.191  0.303        26  136.  589.\n2 Anren     -0.294  0.108       -40  136.  589.\n3 Anxiang    0      1             0  136.  589.\n4 Baojing   -0.691  0.000128    -94  136.  589.\n5 Chaling   -0.0882 0.650       -12  136.  589.\n6 Changning -0.750  0.0000318  -102  136.  589.\n\n\n\nnote that not all County are statistically significant\nnote that not all County are on the positive increasing trend, some are negative increasing trend\n\n\n\n\n\nemerging &lt;- ehsa %&gt;% \n  arrange(sl, abs(tau)) %&gt;% \n  slice(1:5)\n\nemerging\n\n# A tibble: 5 × 6\n  County        tau         sl     S     D  varS\n  &lt;chr&gt;       &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Shuangfeng  0.868 0.00000143   118  136.  589.\n2 Xiangtan    0.868 0.00000143   118  136.  589.\n3 Xiangxiang  0.868 0.00000143   118  136.  589.\n4 Chengbu    -0.824 0.00000482  -112  136.  589.\n5 Dongan     -0.824 0.00000482  -112  136.  589.\n\n\n\n\n\n\nset.seed(1234)\nehsa &lt;- emerging_hotspot_analysis(\n  x = GDPPC_st,\n  .var = \"GDPPC\",\n  k = 1,\n  nsim =99\n)\n\nehsa\n\n# A tibble: 88 × 4\n   location     tau    p_value classification     \n   &lt;chr&gt;      &lt;dbl&gt;      &lt;dbl&gt; &lt;chr&gt;              \n 1 Anxiang    0.221 0.232      sporadic coldspot  \n 2 Hanshou    0.147 0.434      sporadic hotspot   \n 3 Jinshi     0.441 0.0151     oscilating hotspot \n 4 Li        -0.824 0.00000482 sporadic coldspot  \n 5 Linli      0.118 0.537      oscilating hotspot \n 6 Shimen    -0.471 0.00946    oscilating coldspot\n 7 Liuyang    0.868 0.00000143 sporadic hotspot   \n 8 Ningxiang -0.559 0.00201    sporadic coldspot  \n 9 Wangcheng -0.162 0.387      sporadic coldspot  \n10 Anren      0.456 0.0120     sporadic coldspot  \n# ℹ 78 more rows\n\n\n\nk=1 is yearly time interval"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#visualising-the-distribution-of-ehsa-classes",
    "href": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#visualising-the-distribution-of-ehsa-classes",
    "title": "In-class Exercise 6",
    "section": "",
    "text": "Quick overview:\n\nggplot(ehsa,\n       aes(x=classification))+\n  geom_bar()\n\n\n\n\n\n\n\n\n\nusually visualise as a frequency plot, bar chart format\ndid not sieve out statistically significant ones (can add a filter to get only statistically significant ones)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#visualising-ehsa",
    "href": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#visualising-ehsa",
    "title": "In-class Exercise 6",
    "section": "",
    "text": "hunan_ehsa &lt;- hunan %&gt;%\n  left_join(ehsa,\n            by = join_by(County == location))\n\n\nehsa_sig &lt;- hunan_ehsa %&gt;%\n  filter(p_value &lt; 0.05)\n\ntmap_mode('plot')\ntm_shape(hunan_ehsa)+\n  tm_polygons()+\n  tm_borders(alpha = 0.5)+\n  tm_shape(ehsa_sig)+\n  tm_fill(\"classification\")+\n  tm_borders(alpha=0.4)\n\n\n\n\n\n\n\n\n\nread the interpretation of EHSA classes for definition/explanation\neven though Mann-Kendall and EHSA tests both provide tau and p-values, they are different. have to run both tests separately. Mann-Kendall test provide quick overview while the final classification is based on the EHSA test. EHSA run permutations i.e. nsim = 99 to confirm the observations, provides more confidence."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "Tourism is one of Thailand’s largest industries, accounting for ~20% of the gross domestic product (GDP). In 2019, Thailand earned US$90 billion from domestic and international tourism, but the COVID-19 pandemic caused revenues to crash to US$24 billion in 2020.\nThe figure below shows the total revenue receipt from tourism sector between Jan 2019 to Feb 2023, and indicates that the revenue from tourism industry has been gradually recovering since Sep 2021.\n\nHowever, it is important to note that the tourism economy of Thailand is not evenly distributed. The figure below reveals that the tourism economy of Thailand in 2019 was mainly focused on five provinces, namely Bangkok, Phuket, Chon Buri, Krabi and Chiang Mai.\n\n\n\nThe objectives of this take-home exercise will be to discover:\n\nif the key indicators of tourism economy of Thailand are independent from space and space and time.\nIf the tourism economy is indeed spatial and spatio-temporal dependent, and if so, where the clusters, outliers and emerging hot spot/cold spot areas are.\n\n\n\n\nThe specific tasks of this take-home exercise are as follows:\n\nUsing appropriate function of sf and tidyverse, prepare the following geospatial data layer:\n\na study area layer in sf polygon features. It must be at province level (including Bangkok) of Thailand.\na tourism economy indicators layer within the study area in sf polygon features.\na derived tourism economy indicator layer in spacetime s3 class of sfdep. Keep the time series at month and year levels.\n\nUsing the extracted data, perform global spatial autocorrelation analysis using sfdep methods.\nUsing the extracted data, perform local spatial autocorrelation analysis using sfdep methods.\nUsing the extracted data, perform emerging hotspot analysis using sfdep methods.\nDescribe the spatial patterns revealed by the analysis above.\n\n\n\n\nWe use the following code chunk to install and load the necessary R packages for our analysis:\n\npacman::p_load(sf, sfdep, tmap, tidyverse, knitr, plotly, Kendall, VIM, naniar, DT)\n\n\n\n\nTwo data sets shall be used:\n\nThailand Domestic Tourism Statistics at Kaggle - version 2 of the data set will be used.\nThailand - Subnational Administrative Boundaries at HDX - the province boundary data set will be used.\n\n\n\n\n\n\nThe code chunk below uses read_csv() of readr package to load the Thailand Domestic Tourism Statistics:\n\ntourism &lt;- read_csv(\"data/rawdata/thailand_domestic_tourism_2019_2023_ver2.csv\")\n\nThe thai_tourism data has 30,800 rows and 7 variables, namely date, province_thai, province_eng, region_thai, region_eng, variable and value.\n\n\n\n\n\n\nWe will drop the columns province_thai and region_thai as these variables are in the Thai language which we do not understand and hence will not be helpful for our analysis:\n\ntourism &lt;- tourism[,!names(tourism) %in% c(\"province_thai\",\"region_thai\")]\n\n\n\n\nWe determine the presence of missing values using the vis_miss() function of the naniar package:\n\nvis_miss(tourism)\n\n\n\n\n\n\n\n\nFrom the output above, we note that there are no missing data.\n\n\n\nFrom the code chunk below, we note that the date variable in tourism data frame is in the Date vector format:\n\nclass(tourism$date)\n\n[1] \"Date\"\n\n\nWe form new variables year and month using the lubridate package:\n\ntourism &lt;- tourism %&gt;%\n  mutate(year_month = ymd(date),\n         year = year(date),\n         month = month(date,\n                       label = TRUE,\n                       abbr = TRUE),\n.before = 2)\n\n\n\n\nWe first study the distribution of regions in the data:\n\nggplot(tourism, \n       aes(x = fct_reorder(region_eng, region_eng, .fun = length))) + \n  geom_bar() +\n  labs(title = \"Distribution of domestic tourism statistics across regions\", x = \"Regions\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\nFrom the output above, we note that there 5 different types of regions represented, notably the western region is not represented in the data.\nWe take a more detailed look by determining the unique provinces represented in the data and their corresponding regions. This step aims to check for two things:\n\nwhether there are any duplicate data entries i.e. entries that are meant to represent the same province but have spelling errors.\nwhether the regions for the provinces are accurately indicated\n\n\ntourism_unique &lt;- tourism %&gt;%\n  select(province_eng,region_eng) %&gt;%\n  distinct() %&gt;%\n  arrange(region_eng,province_eng)\n\ntourism_unique\n\n# A tibble: 77 × 2\n   province_eng             region_eng\n   &lt;chr&gt;                    &lt;chr&gt;     \n 1 Ang Thong                central   \n 2 Bangkok                  central   \n 3 Chainat                  central   \n 4 Kanchanaburi             central   \n 5 Lopburi                  central   \n 6 Nakhon Pathom            central   \n 7 Nonthaburi               central   \n 8 Pathum Thani             central   \n 9 Phetchaburi              central   \n10 Phra Nakhon Si Ayutthaya central   \n# ℹ 67 more rows\n\n\nFrom the output above, we note that all 77 Thailand provinces are represented in the data, and that there are no spelling errors/misrepresented provinces.\nHowever, with reference to the source on provinces in Thailand, we note a few mistakes in the regions indicated for the provinces.\n\nKanchanaburi, Phetchaburi, Prachuap Khiri Khan and Ratchaburi are stated as being in the central region but actually reside in the west region\nNakhon Nayok is stated as being in the east region but actually resides in the central region\nThe east_northeast region can actually be renamed as northeast region for clarity and consistency with how detailed the other provinces are labelled\nKamphaeng Phet, Nakhon Sawan, Phetchabun, Phichit, Phitsanulok, Sukhothai and Uthai Thani are stated as being in the north region but actually reside in central region\nTak is stated as being in the north region but actually resides in the west region\nSisaket is stated as being in the south region but actually resides in the northeast region\n\n\n\n\nWe use the code chunk below to rename the “east_northeast” region to just “northeast” and correct the erroneous regions of the provinces mentioned above:\n\ntourism &lt;- tourism %&gt;%\n  mutate(region_eng = case_when(\n    region_eng == \"east_northeast\" ~ \"northeast\",\n    province_eng %in% c(\"Kanchanaburi\", \"Phetchaburi\", \"Prachuap Khiri Khan\", \"Ratchaburi\", \"Tak\") ~ \"west\",\n    province_eng %in% c(\"Nakhon Nayok\",\"Kamphaeng Phet\",\"Nakhon Sawan\",\"Phetchabun\",\"Phichit\",\"Phitsanulok\",\"Sukhothai\",\"Uthai Thani\") ~ \"central\",\n    province_eng == \"Sisaket\" ~ \"northeast\",\n    TRUE ~ region_eng\n  ))\n\nWe check by generating the data table of provinces and their corresponding regions:\n\ntourism_unique &lt;- tourism %&gt;%\n  select(province_eng,region_eng) %&gt;%\n  distinct() %&gt;%\n  arrange(region_eng,province_eng)\n\ndatatable(tourism_unique)\n\n\n\n\n\nRe-plotting the distribution of domestic tourism statistics across the regions:\n\nggplot(tourism, \n       aes(x = fct_reorder(region_eng, region_eng, .fun = length))) + \n  geom_bar(fill = \"skyblue\") +\n  labs(title = \"Distribution of domestic tourism statistics across regions\", x = \"Regions\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\nWe note that most of the domestic tourism statistics come from the central region, followed by northeast, south, north, east and finally the west region.\n\n\n\n\nggplot(tourism, \n       aes(x = fct_reorder(variable, variable, .fun = length))) + \n  geom_bar(fill = \"skyblue\") +\n  labs(title = \"Distribution of Variable\", x = \"Variable\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\nWe note that there are 8 different types of variables:\n\n\n\n\n\n\n\n\nS/N\nVariable\nDefinition\n\n\n\n\n1\nno_tourist_all\nThe total number of domestic tourists who visited the province\n\n\n2\nno_tourist_thai\nThe number of Thai tourists who visited the province\n\n\n3\nno_tourist_foreign\nThe number of foreign tourists who visited the province\n\n\n4\nno_tourist_stay\nThe total number of occupied hotel rooms in the province\n\n\n5\nratio_tourist_stay\nThe percentage of occupied travel accommodation in the province\n\n\n6\nrevenue_all\nThe revenue generated by the tourism industry in the province, in Thai Baht\n\n\n7\nrevenue_foreign\nThe revenue generated by foreign tourists in the province, in Thai Baht\n\n\n8\nrevenue_thai\nThe revenue generated by Thai tourists in the province, in Thai Baht\n\n\n\n\n\n\nWe utilise the pivot_wider() function to separate the different variable types as individual columns:\n\ntourism_wider &lt;- tourism %&gt;%\n  pivot_wider(names_from = variable, values_from = value)\n\n\n\n\nBased on the definition of the different variable types, we note that “revenue_all” should equal to the sum of “revenue_foreign” and “revenue_thai”. We check through the data using the code chunk below:\n\nrevenue_numbers &lt;- tourism_wider %&gt;%\n  group_by(province_eng,year_month) %&gt;%\n  summarise(\n    sum_revenue = sum(revenue_foreign, revenue_thai, na.rm = TRUE),\n  revenue_all = sum(revenue_all,na.rm = TRUE),\n            .groups = \"drop\") %&gt;%\n  mutate(is_rev_equal = sum_revenue == revenue_all)\n\nrevenue_numbers\n\n# A tibble: 3,850 × 5\n   province_eng  year_month sum_revenue revenue_all is_rev_equal\n   &lt;chr&gt;         &lt;date&gt;           &lt;dbl&gt;       &lt;dbl&gt; &lt;lgl&gt;       \n 1 Amnat Charoen 2019-01-01    34510000    34510000 TRUE        \n 2 Amnat Charoen 2019-02-01    32290000    32290000 TRUE        \n 3 Amnat Charoen 2019-03-01    39070000    39070000 TRUE        \n 4 Amnat Charoen 2019-04-01    32040000    32040000 TRUE        \n 5 Amnat Charoen 2019-05-01    30110000    30110000 TRUE        \n 6 Amnat Charoen 2019-06-01    26630000    26630000 TRUE        \n 7 Amnat Charoen 2019-07-01    21680000    21680000 TRUE        \n 8 Amnat Charoen 2019-08-01    17700000    17700000 TRUE        \n 9 Amnat Charoen 2019-09-01    19500000    19500000 TRUE        \n10 Amnat Charoen 2019-10-01    61440000    61440000 TRUE        \n# ℹ 3,840 more rows\n\n\nWe note from the output below that the data entries for revenue match up:\n\nrevenue_numbers %&gt;%\n  filter(!is_rev_equal)\n\n# A tibble: 0 × 5\n# ℹ 5 variables: province_eng &lt;chr&gt;, year_month &lt;date&gt;, sum_revenue &lt;dbl&gt;,\n#   revenue_all &lt;dbl&gt;, is_rev_equal &lt;lgl&gt;\n\n\n\n\n\nSimilarly, based on the definition of the different variable types, we note that “no_tourist_all” should equal to the sum of “no_tourist_foreign” and “no_tourist_thai”. We check through the data using the code chunk below:\n\ntourism_numbers &lt;- tourism_wider %&gt;%\n  group_by(province_eng,year_month) %&gt;%\n  summarise(\n    sum_tourists = sum(no_tourist_foreign, no_tourist_thai, na.rm = TRUE),\n  tourists_all = sum(no_tourist_all,na.rm = TRUE),\n            .groups = \"drop\") %&gt;%\n  mutate(is_touristno_equal = sum_tourists == tourists_all)\n\ntourism_numbers\n\n# A tibble: 3,850 × 5\n   province_eng  year_month sum_tourists tourists_all is_touristno_equal\n   &lt;chr&gt;         &lt;date&gt;            &lt;dbl&gt;        &lt;dbl&gt; &lt;lgl&gt;             \n 1 Amnat Charoen 2019-01-01        21790        21790 TRUE              \n 2 Amnat Charoen 2019-02-01        20377        20377 TRUE              \n 3 Amnat Charoen 2019-03-01        24786        24786 TRUE              \n 4 Amnat Charoen 2019-04-01        23792        23792 TRUE              \n 5 Amnat Charoen 2019-05-01        22436        22436 TRUE              \n 6 Amnat Charoen 2019-06-01        19714        19714 TRUE              \n 7 Amnat Charoen 2019-07-01        20517        20517 TRUE              \n 8 Amnat Charoen 2019-08-01        16708        16708 TRUE              \n 9 Amnat Charoen 2019-09-01        18453        18453 TRUE              \n10 Amnat Charoen 2019-10-01        39242        39242 TRUE              \n# ℹ 3,840 more rows\n\n\nWe note from the output below that the data entries for tourist numbers match up:\n\ntourism_numbers %&gt;%\n  filter(!is_touristno_equal)\n\n# A tibble: 0 × 5\n# ℹ 5 variables: province_eng &lt;chr&gt;, year_month &lt;date&gt;, sum_tourists &lt;dbl&gt;,\n#   tourists_all &lt;dbl&gt;, is_touristno_equal &lt;lgl&gt;\n\n\n\n\n\n\nRevenue\n\n\nselected_revenue &lt;- tourism %&gt;%\n  filter(variable %in% c(\"revenue_all\", \"revenue_thai\", \"revenue_foreign\"))\n\n# Calculate summary statistics\nsummary_stats &lt;- selected_revenue %&gt;%\n  group_by(variable) %&gt;%\n  summarise(\n    Min = min(value),\n    Q1 = quantile(value, 0.25),\n    Median = median(value),\n    Q3 = quantile(value, 0.75),\n    Max = max(value)\n  )\n\nggplot(selected_revenue, aes(x = variable, y = value, fill = variable)) +\n  geom_boxplot() +\n  geom_text(data=summary_stats, aes(x = variable, \n                               y = Max + 1000, \n                               label = paste(\"Min:\", Min,\n                                             \"\\nQ1:\", Q1, \n                                             \"\\nMedian:\", Median, \n                                             \"\\nQ3:\", Q3, \n                                             \"\\nMax:\", Max)),\n            position = position_dodge(width = 0.75), \n            vjust = 0, hjust = 1, size = 2, color = \"black\") +\n  labs(title = \"Boxplots of Different Revenue Types\", x = \"Revenue Type\", y = \"Revenue\")+\n  scale_y_continuous(limits = c(0,12e+10))\n\n\n\n\n\n\n\n\nFrom the boxplots above, we note that the minimum value for “revenue_foreign” is -$4250, this indicate that there could have been errors in data entry.\n\nTourist numbers\n\n\nselected_tourists &lt;- tourism %&gt;%\n  filter(variable %in% c(\"no_tourist_all\",\"no_tourist_thai\", \"no_tourist_foreign\"))\n\n# Calculate summary statistics\nsummary_stats &lt;- selected_tourists %&gt;%\n  group_by(variable) %&gt;%\n  summarise(\n    Min = min(value),\n    Q1 = quantile(value, 0.25),\n    Median = median(value),\n    Q3 = quantile(value, 0.75),\n    Max = max(value)\n  )\n\nggplot(selected_tourists, aes(x = variable, y = value, fill = variable)) +\n  geom_boxplot() +\n  geom_text(data=summary_stats, aes(x = variable, \n                               y = Max + 100000, \n                               label = paste(\"Min:\", Min,\n                                             \"\\nQ1:\", Q1, \n                                             \"\\nMedian:\", Median, \n                                             \"\\nQ3:\", Q3, \n                                             \"\\nMax:\", Max)),\n            position = position_dodge(width = 0.75), \n            vjust = 0, hjust = 1, size = 2, color = \"black\") +\n  labs(title = \"Boxplots of Different Tourist Numbers\", x = \"Tourist Type\", y = \"Number of Tourists\")+\n  scale_y_continuous(limits = c(0,8e+6))\n\n\n\n\n\n\n\n\n\nOccupancy\n\n\n# Calculate summary statistics\nsummary_stats &lt;- tourism_wider %&gt;%\n  summarise(\n    Min = min(no_tourist_stay),\n    Q1 = quantile(no_tourist_stay, 0.25),\n    Median = median(no_tourist_stay),\n    Q3 = quantile(no_tourist_stay, 0.75),\n    Max = max(no_tourist_stay)\n  )\n\nggplot(tourism_wider, aes(x = \"\", y = no_tourist_stay)) +\n  geom_boxplot(fill = \"lightblue\") +\n  geom_text(data = summary_stats, aes(x = \"\", y = Max + 100000,\n                                      label = paste(\"Min:\", Min,\n                                                     \"\\nQ1:\", Q1,\n                                                     \"\\nMedian:\", Median,\n                                                     \"\\nQ3:\", Q3,\n                                                     \"\\nMax:\", Max)),\n            vjust = 0, size = 2, color = \"black\") +\n  labs(title = \"Distribution of Number of Hotel Rooms Occupied\",\n       y = \"Number of Occupied Hotel Rooms\") +\n  scale_y_continuous(limits = c(0,4e+6))+\n  theme(axis.title.x = element_blank())\n\n\n\n\n\n\n\n\n\n\n\nBased on the results above, we clean the tourism data by removing rows with negative “revenue_foreign” values. We also remove the “date” variable to keep the data more tidy for further analysis.\n\n#tourism &lt;- tourism_wider %&gt;%\n  #filter(revenue_foreign &gt;= 0) %&gt;%\n  #select(-date)\n\ntourism &lt;- tourism_wider %&gt;%\n  select(-date)\n\nAfter removing the data, we note that we have 3850 rows remaining.\n\n\n\nWe save the cleaned data as a new rds file:\n\ntourism_cleaned &lt;- write_rds(tourism,\"data/rds/tourism_cleaned.rds\")\n\n\ntourism_cleaned &lt;- read_rds(\"data/rds/tourism_cleaned.rds\")\n\n\n\n\n\ntourism_cleaned_spat &lt;- tourism_cleaned %&gt;%\n  group_by(province_eng, region_eng) %&gt;%\n  summarize(median_tot_revenue = median(revenue_all, na.rm = TRUE),\n            median_foreign_revenue = median(revenue_foreign, na.rm = TRUE),\n            median_thai_revenue = median(revenue_thai, na.rm = TRUE),\n            median_tot_tourist = median(no_tourist_all, na.rm = TRUE),\n            median_tot_foreign = median(no_tourist_foreign, na.rm = TRUE),\n            median_tot_thai = median(no_tourist_thai, na.rm = TRUE),\n            median_occup_rate = median(ratio_tourist_stay, na.rm = TRUE),\n            median_occup_no = median(no_tourist_stay, na.rm = TRUE),\n            .groups = 'drop')\n\n\n\n\nWe save the file as a new rds file:\n\ntourism_cleaned_spat &lt;- write_rds(tourism_cleaned_spat,\"data/rds/tourism_cleaned_spat.rds\")\n\n\ntourism_cleaned_spat &lt;- read_rds(\"data/rds/tourism_cleaned_spat.rds\")\n\n\n\n\nWe plot the total revenue by year_month:\n\ntourism_cleaned_summary &lt;- tourism_cleaned %&gt;%\n  mutate(year_month = as.character(year_month)) %&gt;%\n  group_by(year_month) %&gt;%\n  summarize(total_revenue = sum(revenue_all, na.rm = TRUE))\n\nggplot(tourism_cleaned_summary, aes(x = year_month, y = total_revenue)) +\n  geom_bar(stat = \"identity\", fill = \"skyblue\") +\n  labs(title = \"Total Revenue by Year-Month\", x = \"Year-Month\", y = \"Total Revenue\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\nBased on the distribution of total revenue across the year_month variable, it can be seen that temporally, we can split the data into 3 time periods, namely:\n\npre-COVID: Between Jan 2019 to Mar 2020\nduring COVID: Between Apr 2020 to Aug 2021\npost-COVID: Between Sep 2021 to Feb 2023\n\n\ntourism_cleaned_temp &lt;- tourism_cleaned %&gt;%\n  mutate(time_period = case_when(\n    year_month &gt;= \"2019-01-01\" & year_month &lt;= \"2020-03-01\" ~ \"Pre-COVID\",\n    year_month &gt;= \"2020-04-01\" & year_month &lt;= \"2021-08-01\" ~ \"During-COVID\",\n    year_month &gt;= \"2021-09-01\" & year_month &lt;= \"2023-02-01\" ~ \"Post-COVID\",\n    TRUE ~ NA_character_))\n\n\ntourism_cleaned_temp &lt;- tourism_cleaned_temp %&gt;%\n  group_by(province_eng,time_period) %&gt;%\n  summarize(median_tot_revenue = median(revenue_all, na.rm = TRUE),\n            median_foreign_revenue = median(revenue_foreign, na.rm = TRUE),\n            median_thai_revenue = median(revenue_thai, na.rm = TRUE),\n            median_tot_tourist = median(no_tourist_all, na.rm = TRUE),\n            median_tot_foreign = median(no_tourist_foreign, na.rm = TRUE),\n            median_tot_thai = median(no_tourist_thai, na.rm = TRUE),\n            median_occup_rate = median(ratio_tourist_stay, na.rm = TRUE),\n            median_occup_no = median(no_tourist_stay, na.rm = TRUE),\n            .groups = 'drop')\n\n\n\n\nWe save the file as a new rds file:\n\ntourism_cleaned_temp &lt;- write_rds(tourism_cleaned_temp,\"data/rds/tourism_cleaned_temp.rds\")\n\n\ntourism_cleaned_temp &lt;- read_rds(\"data/rds/tourism_cleaned_temp.rds\")\n\n\n\n\n\n\n\nThe code chunk below uses st_read() of sf package to import the Thailand Subnational Administrative Boundaries shapefile into R. There are a few different files representing different levels of administrative boundaries - level 0 (country), level 1 (province), level 2 (district) and level 3 (sub-district, tambon). As we are only interested in province level administrative boundaries, we will just load the file corresponding to level 1.\nThe imported shapefile will be a simple features object of sf.\n\nprovince &lt;- st_read(dsn = \"data/rawdata\",\n                    layer = \"tha_admbnda_adm1_rtsd_20220121\")\n\nWe note that the simple features data has a multipolygon geometry and has 77 features and 16 fields. It is in WGS84 geographic coordinate system.\n\n\n\nOf the fields available, only “ADM1_EN” and “geometry” are essential hence the following code chunk keeps only these two variables in the simple features object:\n\nprovince &lt;- province %&gt;%\n  select(ADM1_EN)\n\n\n\n\nAs we will be joining the province simple features object and the attribute data from tourism_cleaned using the province names (ADM1_EN in province simple features object and province_eng in tourism_cleaned dataframe), it is important to check through the naming of the provinces to ensure that they all match up.\nWe extract the unique province names from both tourism_cleaned and province:\n\nunique_tour_prov &lt;- tourism_cleaned %&gt;%\n  distinct(province_eng)\n\n\nunique_shp_prov &lt;- province %&gt;%\n  distinct(ADM1_EN)\n\nWe then combine via a full join and read through the list of province names for discrepancies:\n\ncombined_prov &lt;- full_join(unique_shp_prov,unique_tour_prov,\n                           by = c(\"ADM1_EN\"=\"province_eng\"))\n\n\ncombined_prov &lt;- combined_prov %&gt;%\n  arrange(ADM1_EN)\n\ncombined_prov\n\n                    ADM1_EN\n1             Amnat Charoen\n2                 Ang Thong\n3                   Bangkok\n4                 Bueng Kan\n5                  Buri Ram\n6                   Buriram\n7              Chachoengsao\n8                  Chai Nat\n9                   Chainat\n10               Chaiyaphum\n11              Chanthaburi\n12               Chiang Mai\n13               Chiang Rai\n14                Chon Buri\n15                 Chonburi\n16                 Chumphon\n17                  Kalasin\n18           Kamphaeng Phet\n19             Kanchanaburi\n20                Khon Kaen\n21                    Krabi\n22                  Lampang\n23                  Lamphun\n24                     Loei\n25                 Lop Buri\n26                  Lopburi\n27             Mae Hong Son\n28            Maha Sarakham\n29                 Mukdahan\n30             Nakhon Nayok\n31            Nakhon Pathom\n32            Nakhon Phanom\n33        Nakhon Ratchasima\n34             Nakhon Sawan\n35      Nakhon Si Thammarat\n36                      Nan\n37               Narathiwat\n38         Nong Bua Lam Phu\n39          Nong Bua Lamphu\n40                Nong Khai\n41               Nonthaburi\n42             Pathum Thani\n43                  Pattani\n44                Phang Nga\n45                 Phangnga\n46              Phatthalung\n47                   Phayao\n48               Phetchabun\n49              Phetchaburi\n50                  Phichit\n51              Phitsanulok\n52 Phra Nakhon Si Ayutthaya\n53                    Phrae\n54                   Phuket\n55             Prachin Buri\n56              Prachinburi\n57      Prachuap Khiri Khan\n58                   Ranong\n59               Ratchaburi\n60                   Rayong\n61                   Roi Et\n62                  Sa Kaeo\n63             Sakon Nakhon\n64             Samut Prakan\n65             Samut Sakhon\n66          Samut Songkhram\n67                 Saraburi\n68                    Satun\n69                Si Sa Ket\n70                Sing Buri\n71                  Sisaket\n72                 Songkhla\n73                Sukhothai\n74              Suphan Buri\n75              Surat Thani\n76                    Surin\n77                      Tak\n78                    Trang\n79                     Trat\n80         Ubon Ratchathani\n81               Udon Thani\n82              Uthai Thani\n83                Uttaradit\n84                     Yala\n85                 Yasothon\n\n\nWe note repeated entries for eight provinces which are spelt differently in the original province sf object vs tourism_cleaned dataframe:\n\nBuri Ram vs Buriram\nChai Nat vs Chainat\nChon Buri vs Chonburi\nLop Buri vs Lopburi\nNong Bua Lam Phu vs Nong Bua Lamphu\nPhangnga vs Phang Nga\nPrachin Buri vs Prachinburi\nSi Sa Ket vs Sisaket\n\n\n\n\nWe utilise the following code chunk to adjust the naming of the eight provinces to be aligned with the naming in the tourism_cleaned dataframe to faciliate relational join in subsequent analysis. We also rename “ADM1_EN” to “province_eng” to faciliate the creation of timeseries cube in subsequent analysis.\n\nprovince &lt;- province %&gt;%\n  mutate(ADM1_EN = case_when(\n    ADM1_EN == \"Buri Ram\" ~ \"Buriram\",\n    ADM1_EN == \"Chai Nat\" ~ \"Chainat\",\n    ADM1_EN == \"Chon Buri\" ~ \"Chonburi\",\n    ADM1_EN == \"Lop Buri\" ~ \"Lopburi\",\n    ADM1_EN == \"Nong Bua Lam Phu\" ~ \"Nong Bua Lamphu\",\n    ADM1_EN == \"Phangnga\" ~ \"Phang Nga\",\n    ADM1_EN == \"Prachin Buri\" ~ \"Prachinburi\",\n    ADM1_EN == \"Si Sa Ket\" ~ \"Sisaket\",\n    TRUE ~ ADM1_EN)) %&gt;%\n  rename(province_eng = ADM1_EN)\n\nWe save this as new rds file to avoid reloading the original datafile above:\n\nprovince &lt;- write_rds(province,\"data/rds/province.rds\")\n\n\nprovince &lt;- read_rds(\"data/rds/province.rds\")\n\n\n\n\n\n\n\nWe then perform a left relational join to update the province sf object with the attribute fields of the tourism_cleaned data frame:\n\ncombined_prov_tourism &lt;- left_join(province,tourism_cleaned)\n\n\nglimpse(combined_prov_tourism)\n\nRows: 3,850\nColumns: 14\n$ province_eng       &lt;chr&gt; \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Bangko…\n$ year_month         &lt;date&gt; 2019-01-01, 2020-01-01, 2021-01-01, 2022-01-01, 20…\n$ year               &lt;dbl&gt; 2019, 2020, 2021, 2022, 2023, 2019, 2020, 2021, 202…\n$ month              &lt;ord&gt; Jan, Jan, Jan, Jan, Jan, Feb, Feb, Feb, Feb, Feb, M…\n$ region_eng         &lt;chr&gt; \"central\", \"central\", \"central\", \"central\", \"centra…\n$ ratio_tourist_stay &lt;dbl&gt; 93.37, 89.36, 7.54, 26.34, 75.02, 89.19, 68.37, 9.9…\n$ no_tourist_stay    &lt;dbl&gt; 3334971, 3213765, 354676, 1009583, 2440463, 3025538…\n$ no_tourist_all     &lt;dbl&gt; 5959075, 6046765, 1681847, 2437497, 4872078, 521140…\n$ no_tourist_thai    &lt;dbl&gt; 3534061, 3573040, 1632693, 2299906, 2749877, 291992…\n$ no_tourist_foreign &lt;dbl&gt; 2425014, 2473725, 49154, 137591, 2122201, 2291482, …\n$ revenue_all        &lt;dbl&gt; 81926490000, 88202890000, 9539730000, 11823610000, …\n$ revenue_thai       &lt;dbl&gt; 29742580000, 31137650000, 8447450000, 9642600000, 1…\n$ revenue_foreign    &lt;dbl&gt; 52183910000, 57065240000, 1092280000, 2181010000, 4…\n$ geometry           &lt;MULTIPOLYGON [°]&gt; MULTIPOLYGON (((100.6139 13..., MULTIP…\n\n\nWe note that the combined_prov_tourism data has the same number of rows, 3848 rows, as the original tourism_cleaned data frame indicating that the cleaning up of the different province spellings was done accurately.\n\n\n\nWe save the combined file as a new rds file and load it into the R environment for further analysis:\n\ncombined_data &lt;- write_rds(combined_prov_tourism,\"data/rds/combined_prov_tourism.rds\")\n\n\ncombined_data &lt;- read_rds(\"data/rds/combined_prov_tourism.rds\")\n\n\n\n\nWe also perform a left relational join to update the province sf object with the attribute fields of the tourism_cleaned_spat data frame:\n\ncombined_tourism_spat &lt;- left_join(province,tourism_cleaned_spat)\n\n\nglimpse(combined_tourism_spat)\n\nRows: 77\nColumns: 11\n$ province_eng           &lt;chr&gt; \"Bangkok\", \"Samut Prakan\", \"Nonthaburi\", \"Pathu…\n$ region_eng             &lt;chr&gt; \"central\", \"central\", \"central\", \"central\", \"ce…\n$ median_tot_revenue     &lt;dbl&gt; 16554390000, 228515000, 216067500, 135655000, 8…\n$ median_foreign_revenue &lt;dbl&gt; 8025340000, 26780000, 4880000, 1740000, 1550500…\n$ median_thai_revenue    &lt;dbl&gt; 11973495000, 194440000, 214815000, 129105000, 7…\n$ median_tot_tourist     &lt;dbl&gt; 2681686.0, 149277.0, 161057.5, 100804.0, 557916…\n$ median_tot_foreign     &lt;dbl&gt; 308839.5, 19441.5, 2029.0, 1166.5, 8347.5, 7.0,…\n$ median_tot_thai        &lt;dbl&gt; 2309799.5, 127042.5, 157859.5, 98375.5, 495576.…\n$ median_occup_rate      &lt;dbl&gt; 35.355, 28.300, 37.590, 25.980, 48.660, 28.995,…\n$ median_occup_no        &lt;dbl&gt; 1151894.5, 47140.5, 54486.0, 23215.0, 68597.0, …\n$ geometry               &lt;MULTIPOLYGON [°]&gt; MULTIPOLYGON (((100.6139 13..., MU…\n\n\n\n\n\nWe save the combined file as a new rds file and load it into the R environment for further analysis:\n\ncombined_data_spat &lt;- write_rds(combined_tourism_spat,\"data/rds/combined_data_spat.rds\")\n\n\ncombined_data_spat &lt;- read_rds(\"data/rds/combined_data_spat.rds\")\n\n\n\n\nWe also perform a left relational join to update the province sf object with the attribute fields of the tourism_cleaned_temp data frame:\n\ncombined_tourism_temp &lt;- left_join(province,tourism_cleaned_temp)\n\n\nglimpse(combined_tourism_temp)\n\nRows: 231\nColumns: 11\n$ province_eng           &lt;chr&gt; \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Samut Prakan\"…\n$ time_period            &lt;chr&gt; \"During-COVID\", \"Post-COVID\", \"Pre-COVID\", \"Dur…\n$ median_tot_revenue     &lt;dbl&gt; 9539730000, 22927845000, 87753820000, 64680000,…\n$ median_foreign_revenue &lt;dbl&gt; 1152230000, 11714170000, 54153040000, 50000, 46…\n$ median_thai_revenue    &lt;dbl&gt; 8348660000, 11762345000, 29052570000, 64680000,…\n$ median_tot_tourist     &lt;dbl&gt; 1115611.0, 2879758.0, 5620260.0, 51035.0, 16007…\n$ median_tot_foreign     &lt;dbl&gt; 53676.0, 613626.0, 2087831.0, 61.0, 36441.0, 83…\n$ median_tot_thai        &lt;dbl&gt; 1063854.0, 2363948.0, 3534061.0, 51035.0, 12833…\n$ median_occup_rate      &lt;dbl&gt; 11.270, 41.065, 79.440, 7.740, 29.115, 57.790, …\n$ median_occup_no        &lt;dbl&gt; 476161.0, 1246119.5, 3008999.0, 9972.0, 47503.5…\n$ geometry               &lt;MULTIPOLYGON [°]&gt; MULTIPOLYGON (((100.6139 13..., MU…\n\n\n\n\n\nWe save the combined file as a new rds file and load it into the R environment for further analysis:\n\ncombined_data_temp &lt;- write_rds(combined_tourism_temp,\"data/rds/combined_data_temp.rds\")\n\n\ncombined_data_temp &lt;- read_rds(\"data/rds/combined_data_temp.rds\")\n\n\n\n\nWe use spacetime() of sfdep to create a spatio-temporal cube:\n\nspt &lt;- spacetime(\n  tourism_cleaned,\n  province,\n  .loc_col = \"province_eng\",\n  .time_col = \"year_month\"\n)\n\n\n\n\nWe utilise the following code chunk to verify if spt is indeed a space-time cube object:\n\nis_spacetime_cube(spt)\n\n[1] TRUE\n\n\n\n\n\nWe save spt as a new rds file and load it into the R environment for further analysis:\n\nspt &lt;- write_rds(spt,\"data/rds/spt.rds\")\n\n\nspt &lt;- read_rds(\"data/rds/spt.rds\")\n\n\n\n\n\nFrom the above data, we note that there are several key indicators of the tourism economy of Thailand, namely:\n\nTotal revenue\nRevenue generated from foreign tourists\nRevenue generated from local/Thai tourists\nTotal number of tourists\nNumber of foreign tourists\nNumber of local/Thai tourists\nOccupancy rate of hotels\n\n\n\n\nA connectivity graph takes a point and displays a line to each neighbouring point. As we are working with multipolygons, we will need to get points to make connectivity graphs. As such, we will need to create centroids for each province.\n\ncentroids &lt;- combined_data_spat %&gt;%\n  st_centroid() %&gt;%  \n  select(province_eng, geometry)\n\n\n\nWe save centroids as a new rds file and load it into the R environment for further analysis:\n\ncentroids &lt;- write_rds(centroids,\"data/rds/centroids.rds\")\n\n\ncentroids &lt;- read_rds(\"data/rds/centroids.rds\")\n\n\n\n\nWe visualise where these centroids are:\n\ntmap_mode('plot')\ntm_shape(province) +\n  tm_fill()+\n  tm_borders()+\n  tm_shape(centroids)+\n  tm_dots(col = \"darkblue\", size = 0.2, alpha = 0.5, title = \"Centroids\") +\n  tm_text(\"province_eng\", size = 0.5, col = \"black\") +\n  tm_layout(main.title = \"Centroids of Provinces\", main.title.size = 0.5) \n\n\n\n\n\n\n\n\nWe note that none of the centroids generated are in the water and are all located within the regions of provinces."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#setting-the-scene",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#setting-the-scene",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "Tourism is one of Thailand’s largest industries, accounting for ~20% of the gross domestic product (GDP). In 2019, Thailand earned US$90 billion from domestic and international tourism, but the COVID-19 pandemic caused revenues to crash to US$24 billion in 2020.\nThe figure below shows the total revenue receipt from tourism sector between Jan 2019 to Feb 2023, and indicates that the revenue from tourism industry has been gradually recovering since Sep 2021.\n\nHowever, it is important to note that the tourism economy of Thailand is not evenly distributed. The figure below reveals that the tourism economy of Thailand in 2019 was mainly focused on five provinces, namely Bangkok, Phuket, Chon Buri, Krabi and Chiang Mai."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#objectives",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#objectives",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "The objectives of this take-home exercise will be to discover:\n\nif the key indicators of tourism economy of Thailand are independent from space and space and time.\nIf the tourism economy is indeed spatial and spatio-temporal dependent, and if so, where the clusters, outliers and emerging hot spot/cold spot areas are."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#the-task",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#the-task",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "The specific tasks of this take-home exercise are as follows:\n\nUsing appropriate function of sf and tidyverse, prepare the following geospatial data layer:\n\na study area layer in sf polygon features. It must be at province level (including Bangkok) of Thailand.\na tourism economy indicators layer within the study area in sf polygon features.\na derived tourism economy indicator layer in spacetime s3 class of sfdep. Keep the time series at month and year levels.\n\nUsing the extracted data, perform global spatial autocorrelation analysis using sfdep methods.\nUsing the extracted data, perform local spatial autocorrelation analysis using sfdep methods.\nUsing the extracted data, perform emerging hotspot analysis using sfdep methods.\nDescribe the spatial patterns revealed by the analysis above."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#the-data",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#the-data",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "Two data sets shall be used:\n\nThailand Domestic Tourism Statistics at Kaggle - version 2 of the data set will be used.\nThailand - Subnational Administrative Boundaries at HDX - the province boundary data set will be used.\n\n\n\n\n\n\nThe code chunk below uses read_csv() of readr package to load the Thailand Domestic Tourism Statistics:\n\ntourism &lt;- read_csv(\"data/rawdata/thailand_domestic_tourism_2019_2023_ver2.csv\")\n\nThe thai_tourism data has 30,800 rows and 7 variables, namely date, province_thai, province_eng, region_thai, region_eng, variable and value.\n\n\n\n\n\n\nWe will drop the columns province_thai and region_thai as these variables are in the Thai language which we do not understand and hence will not be helpful for our analysis:\n\ntourism &lt;- tourism[,!names(tourism) %in% c(\"province_thai\",\"region_thai\")]\n\n\n\n\nWe determine the presence of missing values using the vis_miss() function of the naniar package:\n\nvis_miss(tourism)\n\n\n\n\n\n\n\n\nFrom the output above, we note that there are no missing data.\n\n\n\nFrom the code chunk below, we note that the date variable in tourism data frame is in the Date vector format:\n\nclass(tourism$date)\n\n[1] \"Date\"\n\n\nWe form new variables year and month using the lubridate package:\n\ntourism &lt;- tourism %&gt;%\n  mutate(year_month = ymd(date),\n         year = year(date),\n         month = month(date,\n                       label = TRUE,\n                       abbr = TRUE),\n.before = 2)\n\n\n\n\nWe first study the distribution of regions in the data:\n\nggplot(tourism, \n       aes(x = fct_reorder(region_eng, region_eng, .fun = length))) + \n  geom_bar() +\n  labs(title = \"Distribution of domestic tourism statistics across regions\", x = \"Regions\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\nFrom the output above, we note that there 5 different types of regions represented, notably the western region is not represented in the data.\nWe take a more detailed look by determining the unique provinces represented in the data and their corresponding regions. This step aims to check for two things:\n\nwhether there are any duplicate data entries i.e. entries that are meant to represent the same province but have spelling errors.\nwhether the regions for the provinces are accurately indicated\n\n\ntourism_unique &lt;- tourism %&gt;%\n  select(province_eng,region_eng) %&gt;%\n  distinct() %&gt;%\n  arrange(region_eng,province_eng)\n\ntourism_unique\n\n# A tibble: 77 × 2\n   province_eng             region_eng\n   &lt;chr&gt;                    &lt;chr&gt;     \n 1 Ang Thong                central   \n 2 Bangkok                  central   \n 3 Chainat                  central   \n 4 Kanchanaburi             central   \n 5 Lopburi                  central   \n 6 Nakhon Pathom            central   \n 7 Nonthaburi               central   \n 8 Pathum Thani             central   \n 9 Phetchaburi              central   \n10 Phra Nakhon Si Ayutthaya central   \n# ℹ 67 more rows\n\n\nFrom the output above, we note that all 77 Thailand provinces are represented in the data, and that there are no spelling errors/misrepresented provinces.\nHowever, with reference to the source on provinces in Thailand, we note a few mistakes in the regions indicated for the provinces.\n\nKanchanaburi, Phetchaburi, Prachuap Khiri Khan and Ratchaburi are stated as being in the central region but actually reside in the west region\nNakhon Nayok is stated as being in the east region but actually resides in the central region\nThe east_northeast region can actually be renamed as northeast region for clarity and consistency with how detailed the other provinces are labelled\nKamphaeng Phet, Nakhon Sawan, Phetchabun, Phichit, Phitsanulok, Sukhothai and Uthai Thani are stated as being in the north region but actually reside in central region\nTak is stated as being in the north region but actually resides in the west region\nSisaket is stated as being in the south region but actually resides in the northeast region\n\n\n\n\nWe use the code chunk below to rename the “east_northeast” region to just “northeast” and correct the erroneous regions of the provinces mentioned above:\n\ntourism &lt;- tourism %&gt;%\n  mutate(region_eng = case_when(\n    region_eng == \"east_northeast\" ~ \"northeast\",\n    province_eng %in% c(\"Kanchanaburi\", \"Phetchaburi\", \"Prachuap Khiri Khan\", \"Ratchaburi\", \"Tak\") ~ \"west\",\n    province_eng %in% c(\"Nakhon Nayok\",\"Kamphaeng Phet\",\"Nakhon Sawan\",\"Phetchabun\",\"Phichit\",\"Phitsanulok\",\"Sukhothai\",\"Uthai Thani\") ~ \"central\",\n    province_eng == \"Sisaket\" ~ \"northeast\",\n    TRUE ~ region_eng\n  ))\n\nWe check by generating the data table of provinces and their corresponding regions:\n\ntourism_unique &lt;- tourism %&gt;%\n  select(province_eng,region_eng) %&gt;%\n  distinct() %&gt;%\n  arrange(region_eng,province_eng)\n\ndatatable(tourism_unique)\n\n\n\n\n\nRe-plotting the distribution of domestic tourism statistics across the regions:\n\nggplot(tourism, \n       aes(x = fct_reorder(region_eng, region_eng, .fun = length))) + \n  geom_bar(fill = \"skyblue\") +\n  labs(title = \"Distribution of domestic tourism statistics across regions\", x = \"Regions\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\nWe note that most of the domestic tourism statistics come from the central region, followed by northeast, south, north, east and finally the west region.\n\n\n\n\nggplot(tourism, \n       aes(x = fct_reorder(variable, variable, .fun = length))) + \n  geom_bar(fill = \"skyblue\") +\n  labs(title = \"Distribution of Variable\", x = \"Variable\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\nWe note that there are 8 different types of variables:\n\n\n\n\n\n\n\n\nS/N\nVariable\nDefinition\n\n\n\n\n1\nno_tourist_all\nThe total number of domestic tourists who visited the province\n\n\n2\nno_tourist_thai\nThe number of Thai tourists who visited the province\n\n\n3\nno_tourist_foreign\nThe number of foreign tourists who visited the province\n\n\n4\nno_tourist_stay\nThe total number of occupied hotel rooms in the province\n\n\n5\nratio_tourist_stay\nThe percentage of occupied travel accommodation in the province\n\n\n6\nrevenue_all\nThe revenue generated by the tourism industry in the province, in Thai Baht\n\n\n7\nrevenue_foreign\nThe revenue generated by foreign tourists in the province, in Thai Baht\n\n\n8\nrevenue_thai\nThe revenue generated by Thai tourists in the province, in Thai Baht\n\n\n\n\n\n\nWe utilise the pivot_wider() function to separate the different variable types as individual columns:\n\ntourism_wider &lt;- tourism %&gt;%\n  pivot_wider(names_from = variable, values_from = value)\n\n\n\n\nBased on the definition of the different variable types, we note that “revenue_all” should equal to the sum of “revenue_foreign” and “revenue_thai”. We check through the data using the code chunk below:\n\nrevenue_numbers &lt;- tourism_wider %&gt;%\n  group_by(province_eng,year_month) %&gt;%\n  summarise(\n    sum_revenue = sum(revenue_foreign, revenue_thai, na.rm = TRUE),\n  revenue_all = sum(revenue_all,na.rm = TRUE),\n            .groups = \"drop\") %&gt;%\n  mutate(is_rev_equal = sum_revenue == revenue_all)\n\nrevenue_numbers\n\n# A tibble: 3,850 × 5\n   province_eng  year_month sum_revenue revenue_all is_rev_equal\n   &lt;chr&gt;         &lt;date&gt;           &lt;dbl&gt;       &lt;dbl&gt; &lt;lgl&gt;       \n 1 Amnat Charoen 2019-01-01    34510000    34510000 TRUE        \n 2 Amnat Charoen 2019-02-01    32290000    32290000 TRUE        \n 3 Amnat Charoen 2019-03-01    39070000    39070000 TRUE        \n 4 Amnat Charoen 2019-04-01    32040000    32040000 TRUE        \n 5 Amnat Charoen 2019-05-01    30110000    30110000 TRUE        \n 6 Amnat Charoen 2019-06-01    26630000    26630000 TRUE        \n 7 Amnat Charoen 2019-07-01    21680000    21680000 TRUE        \n 8 Amnat Charoen 2019-08-01    17700000    17700000 TRUE        \n 9 Amnat Charoen 2019-09-01    19500000    19500000 TRUE        \n10 Amnat Charoen 2019-10-01    61440000    61440000 TRUE        \n# ℹ 3,840 more rows\n\n\nWe note from the output below that the data entries for revenue match up:\n\nrevenue_numbers %&gt;%\n  filter(!is_rev_equal)\n\n# A tibble: 0 × 5\n# ℹ 5 variables: province_eng &lt;chr&gt;, year_month &lt;date&gt;, sum_revenue &lt;dbl&gt;,\n#   revenue_all &lt;dbl&gt;, is_rev_equal &lt;lgl&gt;\n\n\n\n\n\nSimilarly, based on the definition of the different variable types, we note that “no_tourist_all” should equal to the sum of “no_tourist_foreign” and “no_tourist_thai”. We check through the data using the code chunk below:\n\ntourism_numbers &lt;- tourism_wider %&gt;%\n  group_by(province_eng,year_month) %&gt;%\n  summarise(\n    sum_tourists = sum(no_tourist_foreign, no_tourist_thai, na.rm = TRUE),\n  tourists_all = sum(no_tourist_all,na.rm = TRUE),\n            .groups = \"drop\") %&gt;%\n  mutate(is_touristno_equal = sum_tourists == tourists_all)\n\ntourism_numbers\n\n# A tibble: 3,850 × 5\n   province_eng  year_month sum_tourists tourists_all is_touristno_equal\n   &lt;chr&gt;         &lt;date&gt;            &lt;dbl&gt;        &lt;dbl&gt; &lt;lgl&gt;             \n 1 Amnat Charoen 2019-01-01        21790        21790 TRUE              \n 2 Amnat Charoen 2019-02-01        20377        20377 TRUE              \n 3 Amnat Charoen 2019-03-01        24786        24786 TRUE              \n 4 Amnat Charoen 2019-04-01        23792        23792 TRUE              \n 5 Amnat Charoen 2019-05-01        22436        22436 TRUE              \n 6 Amnat Charoen 2019-06-01        19714        19714 TRUE              \n 7 Amnat Charoen 2019-07-01        20517        20517 TRUE              \n 8 Amnat Charoen 2019-08-01        16708        16708 TRUE              \n 9 Amnat Charoen 2019-09-01        18453        18453 TRUE              \n10 Amnat Charoen 2019-10-01        39242        39242 TRUE              \n# ℹ 3,840 more rows\n\n\nWe note from the output below that the data entries for tourist numbers match up:\n\ntourism_numbers %&gt;%\n  filter(!is_touristno_equal)\n\n# A tibble: 0 × 5\n# ℹ 5 variables: province_eng &lt;chr&gt;, year_month &lt;date&gt;, sum_tourists &lt;dbl&gt;,\n#   tourists_all &lt;dbl&gt;, is_touristno_equal &lt;lgl&gt;\n\n\n\n\n\n\nRevenue\n\n\nselected_revenue &lt;- tourism %&gt;%\n  filter(variable %in% c(\"revenue_all\", \"revenue_thai\", \"revenue_foreign\"))\n\n# Calculate summary statistics\nsummary_stats &lt;- selected_revenue %&gt;%\n  group_by(variable) %&gt;%\n  summarise(\n    Min = min(value),\n    Q1 = quantile(value, 0.25),\n    Median = median(value),\n    Q3 = quantile(value, 0.75),\n    Max = max(value)\n  )\n\nggplot(selected_revenue, aes(x = variable, y = value, fill = variable)) +\n  geom_boxplot() +\n  geom_text(data=summary_stats, aes(x = variable, \n                               y = Max + 1000, \n                               label = paste(\"Min:\", Min,\n                                             \"\\nQ1:\", Q1, \n                                             \"\\nMedian:\", Median, \n                                             \"\\nQ3:\", Q3, \n                                             \"\\nMax:\", Max)),\n            position = position_dodge(width = 0.75), \n            vjust = 0, hjust = 1, size = 2, color = \"black\") +\n  labs(title = \"Boxplots of Different Revenue Types\", x = \"Revenue Type\", y = \"Revenue\")+\n  scale_y_continuous(limits = c(0,12e+10))\n\n\n\n\n\n\n\n\nFrom the boxplots above, we note that the minimum value for “revenue_foreign” is -$4250, this indicate that there could have been errors in data entry.\n\nTourist numbers\n\n\nselected_tourists &lt;- tourism %&gt;%\n  filter(variable %in% c(\"no_tourist_all\",\"no_tourist_thai\", \"no_tourist_foreign\"))\n\n# Calculate summary statistics\nsummary_stats &lt;- selected_tourists %&gt;%\n  group_by(variable) %&gt;%\n  summarise(\n    Min = min(value),\n    Q1 = quantile(value, 0.25),\n    Median = median(value),\n    Q3 = quantile(value, 0.75),\n    Max = max(value)\n  )\n\nggplot(selected_tourists, aes(x = variable, y = value, fill = variable)) +\n  geom_boxplot() +\n  geom_text(data=summary_stats, aes(x = variable, \n                               y = Max + 100000, \n                               label = paste(\"Min:\", Min,\n                                             \"\\nQ1:\", Q1, \n                                             \"\\nMedian:\", Median, \n                                             \"\\nQ3:\", Q3, \n                                             \"\\nMax:\", Max)),\n            position = position_dodge(width = 0.75), \n            vjust = 0, hjust = 1, size = 2, color = \"black\") +\n  labs(title = \"Boxplots of Different Tourist Numbers\", x = \"Tourist Type\", y = \"Number of Tourists\")+\n  scale_y_continuous(limits = c(0,8e+6))\n\n\n\n\n\n\n\n\n\nOccupancy\n\n\n# Calculate summary statistics\nsummary_stats &lt;- tourism_wider %&gt;%\n  summarise(\n    Min = min(no_tourist_stay),\n    Q1 = quantile(no_tourist_stay, 0.25),\n    Median = median(no_tourist_stay),\n    Q3 = quantile(no_tourist_stay, 0.75),\n    Max = max(no_tourist_stay)\n  )\n\nggplot(tourism_wider, aes(x = \"\", y = no_tourist_stay)) +\n  geom_boxplot(fill = \"lightblue\") +\n  geom_text(data = summary_stats, aes(x = \"\", y = Max + 100000,\n                                      label = paste(\"Min:\", Min,\n                                                     \"\\nQ1:\", Q1,\n                                                     \"\\nMedian:\", Median,\n                                                     \"\\nQ3:\", Q3,\n                                                     \"\\nMax:\", Max)),\n            vjust = 0, size = 2, color = \"black\") +\n  labs(title = \"Distribution of Number of Hotel Rooms Occupied\",\n       y = \"Number of Occupied Hotel Rooms\") +\n  scale_y_continuous(limits = c(0,4e+6))+\n  theme(axis.title.x = element_blank())\n\n\n\n\n\n\n\n\n\n\n\nBased on the results above, we clean the tourism data by removing rows with negative “revenue_foreign” values. We also remove the “date” variable to keep the data more tidy for further analysis.\n\n#tourism &lt;- tourism_wider %&gt;%\n  #filter(revenue_foreign &gt;= 0) %&gt;%\n  #select(-date)\n\ntourism &lt;- tourism_wider %&gt;%\n  select(-date)\n\nAfter removing the data, we note that we have 3850 rows remaining.\n\n\n\nWe save the cleaned data as a new rds file:\n\ntourism_cleaned &lt;- write_rds(tourism,\"data/rds/tourism_cleaned.rds\")\n\n\ntourism_cleaned &lt;- read_rds(\"data/rds/tourism_cleaned.rds\")\n\n\n\n\n\ntourism_cleaned_spat &lt;- tourism_cleaned %&gt;%\n  group_by(province_eng, region_eng) %&gt;%\n  summarize(median_tot_revenue = median(revenue_all, na.rm = TRUE),\n            median_foreign_revenue = median(revenue_foreign, na.rm = TRUE),\n            median_thai_revenue = median(revenue_thai, na.rm = TRUE),\n            median_tot_tourist = median(no_tourist_all, na.rm = TRUE),\n            median_tot_foreign = median(no_tourist_foreign, na.rm = TRUE),\n            median_tot_thai = median(no_tourist_thai, na.rm = TRUE),\n            median_occup_rate = median(ratio_tourist_stay, na.rm = TRUE),\n            median_occup_no = median(no_tourist_stay, na.rm = TRUE),\n            .groups = 'drop')\n\n\n\n\nWe save the file as a new rds file:\n\ntourism_cleaned_spat &lt;- write_rds(tourism_cleaned_spat,\"data/rds/tourism_cleaned_spat.rds\")\n\n\ntourism_cleaned_spat &lt;- read_rds(\"data/rds/tourism_cleaned_spat.rds\")\n\n\n\n\nWe plot the total revenue by year_month:\n\ntourism_cleaned_summary &lt;- tourism_cleaned %&gt;%\n  mutate(year_month = as.character(year_month)) %&gt;%\n  group_by(year_month) %&gt;%\n  summarize(total_revenue = sum(revenue_all, na.rm = TRUE))\n\nggplot(tourism_cleaned_summary, aes(x = year_month, y = total_revenue)) +\n  geom_bar(stat = \"identity\", fill = \"skyblue\") +\n  labs(title = \"Total Revenue by Year-Month\", x = \"Year-Month\", y = \"Total Revenue\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\nBased on the distribution of total revenue across the year_month variable, it can be seen that temporally, we can split the data into 3 time periods, namely:\n\npre-COVID: Between Jan 2019 to Mar 2020\nduring COVID: Between Apr 2020 to Aug 2021\npost-COVID: Between Sep 2021 to Feb 2023\n\n\ntourism_cleaned_temp &lt;- tourism_cleaned %&gt;%\n  mutate(time_period = case_when(\n    year_month &gt;= \"2019-01-01\" & year_month &lt;= \"2020-03-01\" ~ \"Pre-COVID\",\n    year_month &gt;= \"2020-04-01\" & year_month &lt;= \"2021-08-01\" ~ \"During-COVID\",\n    year_month &gt;= \"2021-09-01\" & year_month &lt;= \"2023-02-01\" ~ \"Post-COVID\",\n    TRUE ~ NA_character_))\n\n\ntourism_cleaned_temp &lt;- tourism_cleaned_temp %&gt;%\n  group_by(province_eng,time_period) %&gt;%\n  summarize(median_tot_revenue = median(revenue_all, na.rm = TRUE),\n            median_foreign_revenue = median(revenue_foreign, na.rm = TRUE),\n            median_thai_revenue = median(revenue_thai, na.rm = TRUE),\n            median_tot_tourist = median(no_tourist_all, na.rm = TRUE),\n            median_tot_foreign = median(no_tourist_foreign, na.rm = TRUE),\n            median_tot_thai = median(no_tourist_thai, na.rm = TRUE),\n            median_occup_rate = median(ratio_tourist_stay, na.rm = TRUE),\n            median_occup_no = median(no_tourist_stay, na.rm = TRUE),\n            .groups = 'drop')\n\n\n\n\nWe save the file as a new rds file:\n\ntourism_cleaned_temp &lt;- write_rds(tourism_cleaned_temp,\"data/rds/tourism_cleaned_temp.rds\")\n\n\ntourism_cleaned_temp &lt;- read_rds(\"data/rds/tourism_cleaned_temp.rds\")\n\n\n\n\n\n\n\nThe code chunk below uses st_read() of sf package to import the Thailand Subnational Administrative Boundaries shapefile into R. There are a few different files representing different levels of administrative boundaries - level 0 (country), level 1 (province), level 2 (district) and level 3 (sub-district, tambon). As we are only interested in province level administrative boundaries, we will just load the file corresponding to level 1.\nThe imported shapefile will be a simple features object of sf.\n\nprovince &lt;- st_read(dsn = \"data/rawdata\",\n                    layer = \"tha_admbnda_adm1_rtsd_20220121\")\n\nWe note that the simple features data has a multipolygon geometry and has 77 features and 16 fields. It is in WGS84 geographic coordinate system.\n\n\n\nOf the fields available, only “ADM1_EN” and “geometry” are essential hence the following code chunk keeps only these two variables in the simple features object:\n\nprovince &lt;- province %&gt;%\n  select(ADM1_EN)\n\n\n\n\nAs we will be joining the province simple features object and the attribute data from tourism_cleaned using the province names (ADM1_EN in province simple features object and province_eng in tourism_cleaned dataframe), it is important to check through the naming of the provinces to ensure that they all match up.\nWe extract the unique province names from both tourism_cleaned and province:\n\nunique_tour_prov &lt;- tourism_cleaned %&gt;%\n  distinct(province_eng)\n\n\nunique_shp_prov &lt;- province %&gt;%\n  distinct(ADM1_EN)\n\nWe then combine via a full join and read through the list of province names for discrepancies:\n\ncombined_prov &lt;- full_join(unique_shp_prov,unique_tour_prov,\n                           by = c(\"ADM1_EN\"=\"province_eng\"))\n\n\ncombined_prov &lt;- combined_prov %&gt;%\n  arrange(ADM1_EN)\n\ncombined_prov\n\n                    ADM1_EN\n1             Amnat Charoen\n2                 Ang Thong\n3                   Bangkok\n4                 Bueng Kan\n5                  Buri Ram\n6                   Buriram\n7              Chachoengsao\n8                  Chai Nat\n9                   Chainat\n10               Chaiyaphum\n11              Chanthaburi\n12               Chiang Mai\n13               Chiang Rai\n14                Chon Buri\n15                 Chonburi\n16                 Chumphon\n17                  Kalasin\n18           Kamphaeng Phet\n19             Kanchanaburi\n20                Khon Kaen\n21                    Krabi\n22                  Lampang\n23                  Lamphun\n24                     Loei\n25                 Lop Buri\n26                  Lopburi\n27             Mae Hong Son\n28            Maha Sarakham\n29                 Mukdahan\n30             Nakhon Nayok\n31            Nakhon Pathom\n32            Nakhon Phanom\n33        Nakhon Ratchasima\n34             Nakhon Sawan\n35      Nakhon Si Thammarat\n36                      Nan\n37               Narathiwat\n38         Nong Bua Lam Phu\n39          Nong Bua Lamphu\n40                Nong Khai\n41               Nonthaburi\n42             Pathum Thani\n43                  Pattani\n44                Phang Nga\n45                 Phangnga\n46              Phatthalung\n47                   Phayao\n48               Phetchabun\n49              Phetchaburi\n50                  Phichit\n51              Phitsanulok\n52 Phra Nakhon Si Ayutthaya\n53                    Phrae\n54                   Phuket\n55             Prachin Buri\n56              Prachinburi\n57      Prachuap Khiri Khan\n58                   Ranong\n59               Ratchaburi\n60                   Rayong\n61                   Roi Et\n62                  Sa Kaeo\n63             Sakon Nakhon\n64             Samut Prakan\n65             Samut Sakhon\n66          Samut Songkhram\n67                 Saraburi\n68                    Satun\n69                Si Sa Ket\n70                Sing Buri\n71                  Sisaket\n72                 Songkhla\n73                Sukhothai\n74              Suphan Buri\n75              Surat Thani\n76                    Surin\n77                      Tak\n78                    Trang\n79                     Trat\n80         Ubon Ratchathani\n81               Udon Thani\n82              Uthai Thani\n83                Uttaradit\n84                     Yala\n85                 Yasothon\n\n\nWe note repeated entries for eight provinces which are spelt differently in the original province sf object vs tourism_cleaned dataframe:\n\nBuri Ram vs Buriram\nChai Nat vs Chainat\nChon Buri vs Chonburi\nLop Buri vs Lopburi\nNong Bua Lam Phu vs Nong Bua Lamphu\nPhangnga vs Phang Nga\nPrachin Buri vs Prachinburi\nSi Sa Ket vs Sisaket\n\n\n\n\nWe utilise the following code chunk to adjust the naming of the eight provinces to be aligned with the naming in the tourism_cleaned dataframe to faciliate relational join in subsequent analysis. We also rename “ADM1_EN” to “province_eng” to faciliate the creation of timeseries cube in subsequent analysis.\n\nprovince &lt;- province %&gt;%\n  mutate(ADM1_EN = case_when(\n    ADM1_EN == \"Buri Ram\" ~ \"Buriram\",\n    ADM1_EN == \"Chai Nat\" ~ \"Chainat\",\n    ADM1_EN == \"Chon Buri\" ~ \"Chonburi\",\n    ADM1_EN == \"Lop Buri\" ~ \"Lopburi\",\n    ADM1_EN == \"Nong Bua Lam Phu\" ~ \"Nong Bua Lamphu\",\n    ADM1_EN == \"Phangnga\" ~ \"Phang Nga\",\n    ADM1_EN == \"Prachin Buri\" ~ \"Prachinburi\",\n    ADM1_EN == \"Si Sa Ket\" ~ \"Sisaket\",\n    TRUE ~ ADM1_EN)) %&gt;%\n  rename(province_eng = ADM1_EN)\n\nWe save this as new rds file to avoid reloading the original datafile above:\n\nprovince &lt;- write_rds(province,\"data/rds/province.rds\")\n\n\nprovince &lt;- read_rds(\"data/rds/province.rds\")\n\n\n\n\n\n\n\nWe then perform a left relational join to update the province sf object with the attribute fields of the tourism_cleaned data frame:\n\ncombined_prov_tourism &lt;- left_join(province,tourism_cleaned)\n\n\nglimpse(combined_prov_tourism)\n\nRows: 3,850\nColumns: 14\n$ province_eng       &lt;chr&gt; \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Bangko…\n$ year_month         &lt;date&gt; 2019-01-01, 2020-01-01, 2021-01-01, 2022-01-01, 20…\n$ year               &lt;dbl&gt; 2019, 2020, 2021, 2022, 2023, 2019, 2020, 2021, 202…\n$ month              &lt;ord&gt; Jan, Jan, Jan, Jan, Jan, Feb, Feb, Feb, Feb, Feb, M…\n$ region_eng         &lt;chr&gt; \"central\", \"central\", \"central\", \"central\", \"centra…\n$ ratio_tourist_stay &lt;dbl&gt; 93.37, 89.36, 7.54, 26.34, 75.02, 89.19, 68.37, 9.9…\n$ no_tourist_stay    &lt;dbl&gt; 3334971, 3213765, 354676, 1009583, 2440463, 3025538…\n$ no_tourist_all     &lt;dbl&gt; 5959075, 6046765, 1681847, 2437497, 4872078, 521140…\n$ no_tourist_thai    &lt;dbl&gt; 3534061, 3573040, 1632693, 2299906, 2749877, 291992…\n$ no_tourist_foreign &lt;dbl&gt; 2425014, 2473725, 49154, 137591, 2122201, 2291482, …\n$ revenue_all        &lt;dbl&gt; 81926490000, 88202890000, 9539730000, 11823610000, …\n$ revenue_thai       &lt;dbl&gt; 29742580000, 31137650000, 8447450000, 9642600000, 1…\n$ revenue_foreign    &lt;dbl&gt; 52183910000, 57065240000, 1092280000, 2181010000, 4…\n$ geometry           &lt;MULTIPOLYGON [°]&gt; MULTIPOLYGON (((100.6139 13..., MULTIP…\n\n\nWe note that the combined_prov_tourism data has the same number of rows, 3848 rows, as the original tourism_cleaned data frame indicating that the cleaning up of the different province spellings was done accurately.\n\n\n\nWe save the combined file as a new rds file and load it into the R environment for further analysis:\n\ncombined_data &lt;- write_rds(combined_prov_tourism,\"data/rds/combined_prov_tourism.rds\")\n\n\ncombined_data &lt;- read_rds(\"data/rds/combined_prov_tourism.rds\")\n\n\n\n\nWe also perform a left relational join to update the province sf object with the attribute fields of the tourism_cleaned_spat data frame:\n\ncombined_tourism_spat &lt;- left_join(province,tourism_cleaned_spat)\n\n\nglimpse(combined_tourism_spat)\n\nRows: 77\nColumns: 11\n$ province_eng           &lt;chr&gt; \"Bangkok\", \"Samut Prakan\", \"Nonthaburi\", \"Pathu…\n$ region_eng             &lt;chr&gt; \"central\", \"central\", \"central\", \"central\", \"ce…\n$ median_tot_revenue     &lt;dbl&gt; 16554390000, 228515000, 216067500, 135655000, 8…\n$ median_foreign_revenue &lt;dbl&gt; 8025340000, 26780000, 4880000, 1740000, 1550500…\n$ median_thai_revenue    &lt;dbl&gt; 11973495000, 194440000, 214815000, 129105000, 7…\n$ median_tot_tourist     &lt;dbl&gt; 2681686.0, 149277.0, 161057.5, 100804.0, 557916…\n$ median_tot_foreign     &lt;dbl&gt; 308839.5, 19441.5, 2029.0, 1166.5, 8347.5, 7.0,…\n$ median_tot_thai        &lt;dbl&gt; 2309799.5, 127042.5, 157859.5, 98375.5, 495576.…\n$ median_occup_rate      &lt;dbl&gt; 35.355, 28.300, 37.590, 25.980, 48.660, 28.995,…\n$ median_occup_no        &lt;dbl&gt; 1151894.5, 47140.5, 54486.0, 23215.0, 68597.0, …\n$ geometry               &lt;MULTIPOLYGON [°]&gt; MULTIPOLYGON (((100.6139 13..., MU…\n\n\n\n\n\nWe save the combined file as a new rds file and load it into the R environment for further analysis:\n\ncombined_data_spat &lt;- write_rds(combined_tourism_spat,\"data/rds/combined_data_spat.rds\")\n\n\ncombined_data_spat &lt;- read_rds(\"data/rds/combined_data_spat.rds\")\n\n\n\n\nWe also perform a left relational join to update the province sf object with the attribute fields of the tourism_cleaned_temp data frame:\n\ncombined_tourism_temp &lt;- left_join(province,tourism_cleaned_temp)\n\n\nglimpse(combined_tourism_temp)\n\nRows: 231\nColumns: 11\n$ province_eng           &lt;chr&gt; \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Samut Prakan\"…\n$ time_period            &lt;chr&gt; \"During-COVID\", \"Post-COVID\", \"Pre-COVID\", \"Dur…\n$ median_tot_revenue     &lt;dbl&gt; 9539730000, 22927845000, 87753820000, 64680000,…\n$ median_foreign_revenue &lt;dbl&gt; 1152230000, 11714170000, 54153040000, 50000, 46…\n$ median_thai_revenue    &lt;dbl&gt; 8348660000, 11762345000, 29052570000, 64680000,…\n$ median_tot_tourist     &lt;dbl&gt; 1115611.0, 2879758.0, 5620260.0, 51035.0, 16007…\n$ median_tot_foreign     &lt;dbl&gt; 53676.0, 613626.0, 2087831.0, 61.0, 36441.0, 83…\n$ median_tot_thai        &lt;dbl&gt; 1063854.0, 2363948.0, 3534061.0, 51035.0, 12833…\n$ median_occup_rate      &lt;dbl&gt; 11.270, 41.065, 79.440, 7.740, 29.115, 57.790, …\n$ median_occup_no        &lt;dbl&gt; 476161.0, 1246119.5, 3008999.0, 9972.0, 47503.5…\n$ geometry               &lt;MULTIPOLYGON [°]&gt; MULTIPOLYGON (((100.6139 13..., MU…\n\n\n\n\n\nWe save the combined file as a new rds file and load it into the R environment for further analysis:\n\ncombined_data_temp &lt;- write_rds(combined_tourism_temp,\"data/rds/combined_data_temp.rds\")\n\n\ncombined_data_temp &lt;- read_rds(\"data/rds/combined_data_temp.rds\")\n\n\n\n\nWe use spacetime() of sfdep to create a spatio-temporal cube:\n\nspt &lt;- spacetime(\n  tourism_cleaned,\n  province,\n  .loc_col = \"province_eng\",\n  .time_col = \"year_month\"\n)\n\n\n\n\nWe utilise the following code chunk to verify if spt is indeed a space-time cube object:\n\nis_spacetime_cube(spt)\n\n[1] TRUE\n\n\n\n\n\nWe save spt as a new rds file and load it into the R environment for further analysis:\n\nspt &lt;- write_rds(spt,\"data/rds/spt.rds\")\n\n\nspt &lt;- read_rds(\"data/rds/spt.rds\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#installing-and-loading-the-necessary-r-packages",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#installing-and-loading-the-necessary-r-packages",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "We use the following code chunk to install and load the necessary R packages for our analysis:\n\npacman::p_load(sf, sfdep, tmap, tidyverse, knitr, plotly, Kendall, VIM, naniar, DT)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#key-indicators-of-the-tourism-economy-of-thailand",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#key-indicators-of-the-tourism-economy-of-thailand",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "From the above data, we note that there are several key indicators of the tourism economy of Thailand, namely:\n\nTotal revenue\nRevenue generated from foreign tourists\nRevenue generated from local/Thai tourists\nTotal number of tourists\nNumber of foreign tourists\nNumber of local/Thai tourists\nOccupancy rate of hotels"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#computing-contiguity-spatial-weights",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#computing-contiguity-spatial-weights",
    "title": "Take-home Exercise 2",
    "section": "7. Computing Contiguity Spatial Weights",
    "text": "7. Computing Contiguity Spatial Weights\nIn this section, we will use poly2nb() of sfdep package to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries.\n\n7.1 Deriving Queen’s contiguity weights\n\ninvalid_geometries &lt;- combined_data_spat %&gt;%\n  filter(!st_is_valid(geometry))\n\n# Check for empty geometries\nempty_geometries &lt;- combined_data_spat %&gt;%\n  filter(st_is_empty(geometry))\n\n# Print the counts\ncat(\"Number of invalid geometries:\", nrow(invalid_geometries), \"\\n\")\n\nNumber of invalid geometries: 0 \n\ncat(\"Number of empty geometries:\", nrow(empty_geometries), \"\\n\")\n\nNumber of empty geometries: 0 \n\n\n\nwm_q &lt;- combined_data_spat %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb,\n                         style = \"W\"),\n         .before = 1)\n\n\n\n7.2 Computing Global Moran’s I\n\n\n7.3 Visualising contiguity weights\nA connectivity graph takes a point and displays a line to each neighbouring point. As we are working with multipolygons, we will need to get points to make connectivity graphs. As such, we will get the latitude and longitude of polygon centroids. To do this, we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid. We will be using map_dbl variation of map from the purrr package.\nTo get our longitude values we map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude &lt;- map_dbl(province$geometry,~st_centroid(.x)[[1]])\n\nWe do the same for latitude but by accessing the second value per each centroid with [[2]].\n\nlatitude &lt;- map_dbl(province$geometry,~st_centroid(.x)[[2]])\n\nWe then use cbind to put longitude and latitude into the same object:\n\ncoords &lt;- cbind(longitude,latitude)\n\nWe check the first few observations to ensure that things are formatted correctly:\n\nhead(coords)\n\n     longitude latitude\n[1,]  100.6235 13.77183\n[2,]  100.7102 13.59651\n[3,]  100.3928 13.92416\n[4,]  100.6824 14.06513\n[5,]  100.5266 14.34535\n[6,]  100.3485 14.62354\n\n\n\n\n6.1 Determining whether key indicators are independent of space\n\n\n6.2 Determining whether key indicators are independent of space and time\n\n\n6.1.1 Total Revenue\n\n\n6.1.2 Revenue generated by foreign tourists\n\n\n6.1.3 Revenue generated by Thai tourists\n\n\n6.2 Tourist Numbers\n\n\n6.1.1 Total number of tourists\n\n\n6.1.2 Number of foreign tourists\n\n\n6.1.3 Number of Thai tourists\n\n\n6.3 Occupancy Rate"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#generating-centroids",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#generating-centroids",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "A connectivity graph takes a point and displays a line to each neighbouring point. As we are working with multipolygons, we will need to get points to make connectivity graphs. As such, we will need to create centroids for each province.\n\ncentroids &lt;- combined_data_spat %&gt;%\n  st_centroid() %&gt;%  \n  select(province_eng, geometry)\n\n\n\nWe save centroids as a new rds file and load it into the R environment for further analysis:\n\ncentroids &lt;- write_rds(centroids,\"data/rds/centroids.rds\")\n\n\ncentroids &lt;- read_rds(\"data/rds/centroids.rds\")\n\n\n\n\nWe visualise where these centroids are:\n\ntmap_mode('plot')\ntm_shape(province) +\n  tm_fill()+\n  tm_borders()+\n  tm_shape(centroids)+\n  tm_dots(col = \"darkblue\", size = 0.2, alpha = 0.5, title = \"Centroids\") +\n  tm_text(\"province_eng\", size = 0.5, col = \"black\") +\n  tm_layout(main.title = \"Centroids of Provinces\", main.title.size = 0.5) \n\n\n\n\n\n\n\n\nWe note that none of the centroids generated are in the water and are all located within the regions of provinces."
  }
]