[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS626-GAA",
    "section": "",
    "text": "Welcome to Si Min’s ISSS626 Geospatial Analytics and Applications website!\nPlease find below the latest updates:\n\n\n\n\n\n\n\n\n\n\n\n\nIn-class Exercise 1: Geospatial\n\n\n1 min\n\n\n\nAug 26, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 1B\n\n\n16 min\n\n\n\nAug 24, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 1A\n\n\n10 min\n\n\n\nAug 24, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Welcome to Si Min’s ISSS626 Geospatial Analytics and Applications website!"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Geospatial Data Science is a process of importing, wrangling, integrating and processing geographically referenced datasets. In this hands-on exercise, I will perform geospatial data science tasks in R using the sf package and acquire the following competencies:\n\ninstall and load sf and tidyverse packages into the R environment\nimport geospatial data using appropriate functions of sf package\nimport aspatial data by using appropriate function of readr package\nexplore the content of simple feature data frame by using appropriate Base R and sf functions\nassign or transform coordinate systems by using appropriate sf functions\nconvert aspatial data into a sf dataframe by using appropriate functions of the sf package\nperform geoprocessing tasks using appropriate functions of sf package\nperform data wrangling tasks by using appropriate functions of dplyr package\nperform exploratory data analysis (EDA) using appropriate functions from ggplot2 package\n\n\n\n\nThe following datasets were downloaded:\n\nMaster Plan 2014 Subzone Boundary (Web) from data.gov.sg\nPre-Schools Location from data.gov.sg\nCycling Path from LTADataMall\nLatest version of Singapore Airbnb listing data from Inside Airbnb\n\n\n\n\n\n\n\nsf for importing, managing, and processing geospatial data, and\ntidyverse for performing data science tasks such as importing, wrangling and visualising data. tidyverse consists of a family of R packages and the following within the family will be used in this exercise\n\nreadr for importing csv data,\nreadxl for importing Excel worksheet,\ntidyr for manipulating data,\ndplyr for transforming data, and\nggplot2 for visualising data\n\n\nThe packages are loaded with the following code chunk:\n\npacman::p_load(sf,tidyverse)\n\n\n\n\n\nWe will import the following geospatial data using st_read() of sf package:\n\nMP14_SUBZONE_WEB_PL, a polygon feature layer in ESRI shapefile format,\nCyclingPath, a line feature layer in ESRI shapefile format, and\nPreSchool, a point feature layer in kml file format.\n\n\n\nThe following code chunk uses the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile as a polygon feature data frame.\nWhen the input geospatial data is in shapefile format, two arguments are used:\n\ndsn to define the data path\nlayer to provide the shapefile name\n\nNo extension such as .shp,.dbf,.prj and .shx are needed.\n\nmpsz = st_read(dsn=\"data/geospatial\",\n               layer=\"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThe following will be shown after running the code chunk above:\n\n\nIt reveals that the geospatial objects are multipolygon features.\nThere are a total of 323 features and 15 fields in the mpsz simple feature data frame.\nmpsz is in svy21 projected coordinates systems.\nThe bounding box provides the x extent and y extent of the data.\n\n\n\n\nThe following code chunk uses the st_read() function of sf package to import import CyclingPath shapefile as a line feature data frame.\n\ncyclingpath = st_read(dsn=\"data/geospatial\",layer=\"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3138 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42644.17 ymax: 48948.15\nProjected CRS: SVY21\n\n\nThe following will be shown after running the code chunk above:\n\n\nIt reveals that the geospatial objects are multiline string features.\nThere are a total of 3138 features and 2 fields in the cyclingpath linestring feature data frame.\ncyclingpath is in svy21 projected coordinates systems.\n\n\n\n\nThe code chunk below is used to import the PreSchoolsLocation data which is in kml format.\n\npreschool = st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#learning-outcomes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#learning-outcomes",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Geospatial Data Science is a process of importing, wrangling, integrating and processing geographically referenced datasets. In this hands-on exercise, I will perform geospatial data science tasks in R using the sf package and acquire the following competencies:\n\ninstall and load sf and tidyverse packages into the R environment\nimport geospatial data using appropriate functions of sf package\nimport aspatial data by using appropriate function of readr package\nexplore the content of simple feature data frame by using appropriate Base R and sf functions\nassign or transform coordinate systems by using appropriate sf functions\nconvert aspatial data into a sf dataframe by using appropriate functions of the sf package\nperform geoprocessing tasks using appropriate functions of sf package\nperform data wrangling tasks by using appropriate functions of dplyr package\nperform exploratory data analysis (EDA) using appropriate functions from ggplot2 package"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#data-acquisition",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#data-acquisition",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The following datasets were downloaded:\n\nMaster Plan 2014 Subzone Boundary (Web) from data.gov.sg\nPre-Schools Location from data.gov.sg\nCycling Path from LTADataMall\nLatest version of Singapore Airbnb listing data from Inside Airbnb"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "sf for importing, managing, and processing geospatial data, and\ntidyverse for performing data science tasks such as importing, wrangling and visualising data. tidyverse consists of a family of R packages and the following within the family will be used in this exercise\n\nreadr for importing csv data,\nreadxl for importing Excel worksheet,\ntidyr for manipulating data,\ndplyr for transforming data, and\nggplot2 for visualising data\n\n\nThe packages are loaded with the following code chunk:\n\npacman::p_load(sf,tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-geospatial-data",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "We will import the following geospatial data using st_read() of sf package:\n\nMP14_SUBZONE_WEB_PL, a polygon feature layer in ESRI shapefile format,\nCyclingPath, a line feature layer in ESRI shapefile format, and\nPreSchool, a point feature layer in kml file format.\n\n\n\nThe following code chunk uses the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile as a polygon feature data frame.\nWhen the input geospatial data is in shapefile format, two arguments are used:\n\ndsn to define the data path\nlayer to provide the shapefile name\n\nNo extension such as .shp,.dbf,.prj and .shx are needed.\n\nmpsz = st_read(dsn=\"data/geospatial\",\n               layer=\"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThe following will be shown after running the code chunk above:\n\n\nIt reveals that the geospatial objects are multipolygon features.\nThere are a total of 323 features and 15 fields in the mpsz simple feature data frame.\nmpsz is in svy21 projected coordinates systems.\nThe bounding box provides the x extent and y extent of the data.\n\n\n\n\nThe following code chunk uses the st_read() function of sf package to import import CyclingPath shapefile as a line feature data frame.\n\ncyclingpath = st_read(dsn=\"data/geospatial\",layer=\"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3138 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42644.17 ymax: 48948.15\nProjected CRS: SVY21\n\n\nThe following will be shown after running the code chunk above:\n\n\nIt reveals that the geospatial objects are multiline string features.\nThere are a total of 3138 features and 2 fields in the cyclingpath linestring feature data frame.\ncyclingpath is in svy21 projected coordinates systems.\n\n\n\n\nThe code chunk below is used to import the PreSchoolsLocation data which is in kml format.\n\npreschool = st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html",
    "title": "Hands-on Exercise 1A",
    "section": "",
    "text": "Geospatial Data Science is a process of importing, wrangling, integrating and processing geographically referenced datasets. In this hands-on exercise, I will perform geospatial data science tasks in R using the sf package and acquire the following competencies:\n\ninstall and load sf and tidyverse packages into the R environment\nimport geospatial data using appropriate functions of sf package\nimport aspatial data by using appropriate function of readr package\nexplore the content of simple feature data frame by using appropriate Base R and sf functions\nassign or transform coordinate systems by using appropriate sf functions\nconvert aspatial data into a sf dataframe by using appropriate functions of the sf package\nperform geoprocessing tasks using appropriate functions of sf package\nperform data wrangling tasks by using appropriate functions of dplyr package\nperform exploratory data analysis (EDA) using appropriate functions from ggplot2 package\n\n\n\n\nThe following datasets were downloaded:\n\nMaster Plan 2014 Subzone Boundary (Web) from data.gov.sg\nPre-Schools Location from data.gov.sg\nCycling Path from LTADataMall\nLatest version of Singapore Airbnb listing data from Inside Airbnb\n\n\n\n\n\n\n\nsf for importing, managing, and processing geospatial data, and\ntidyverse for performing data science tasks such as importing, wrangling and visualising data. tidyverse consists of a family of R packages and the following within the family will be used in this exercise\n\nreadr for importing csv data,\nreadxl for importing Excel worksheet,\ntidyr for manipulating data,\ndplyr for transforming data, and\nggplot2 for visualising data\n\n\nThe packages are loaded with the following code chunk:\n\npacman::p_load(sf,tidyverse)\n\n\n\n\n\nWe will import the following geospatial data using st_read() of sf package:\n\nMP14_SUBZONE_WEB_PL, a polygon feature layer in ESRI shapefile format,\nCyclingPath, a line feature layer in ESRI shapefile format, and\nPreSchool, a point feature layer in kml file format.\n\n\n\nThe following code chunk uses the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile as a polygon feature data frame.\nWhen the input geospatial data is in shapefile format, two arguments are used:\n\ndsn to define the data path\nlayer to provide the shapefile name\n\nNo extension such as .shp,.dbf,.prj and .shx are needed.\n\nmpsz = st_read(dsn=\"data/geospatial\",\n               layer=\"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nIt reveals that the geospatial objects are multipolygon features.\nThere are a total of 323 features and 15 fields in the mpsz simple feature data frame.\nmpsz is in svy21 projected coordinates systems.\nThe bounding box provides the x extent and y extent of the data.\n\n\n\n\nThe following code chunk uses the st_read() function of sf package to import import CyclingPath shapefile as a line feature data frame.\n\ncyclingpath = st_read(dsn=\"data/geospatial\",layer=\"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3138 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42644.17 ymax: 48948.15\nProjected CRS: SVY21\n\n\n\nIt reveals that the geospatial objects are multiline string features.\nThere are a total of 3138 features and 2 fields in the cyclingpath linestring feature data frame.\ncyclingpath is in svy21 projected coordinates systems.\n\n\n\n\nThe code chunk below is used to import the PreSchoolsLocation data which is in kml format.\n\npreschool = st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nIt reveals that preschool is a point feature data frame.\nThere are a total of 2290 features and 2 fields.\nUnlike the previous two simple feature data frames, preschool is in a wgs84 coordinates system.\n\n\n\n\n\nIn this subsection, I will utilise different ways to retrieve information related to the content of a simple feature data frame.\n\n\nThe column in the sf data frame that contains the geometries is a list, of class sfc - the geometry list-column can be retrieved using:\n\nmpsz$geom or\nmpsz[[1]]\n\nbut more general way uses st_geometry():\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nThe print only displays basic information of the feature class such as type of geometry, geographic extent of the features and the coordinate system of the data.\n\n\n\nTo learn more about the associated attribute information in the data frame, we can use glimpse() of dplyr:\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\nThe report reveals the data type of each field. For example FMEL-UPD_D field is in date data type and X_ADDR, Y_ADDR, SHAPE_L and SHAPE_AREA fields are all in double-precision values.\n\n\n\nTo reveal the complete information of a feature object, we use head()of Base R:\n\nhead(mpsz,n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\nWe can change the number in the n argument to reflect different number of records.\n\n\n\n\nIn geospatial data science, we need to visualise the geospatial features, beyond just looking at the feature information.\n\nplot(mpsz)\n\n\n\n\n\n\n\n\nThe default plot of an sf object is a multiplot of all attributes, up to a reasonable maximum number, as shown above. However, we can choose to plot only the geometry:\n\nplot(st_geometry(mpsz))\n\n\n\n\n\n\n\n\nAlternatively, we can also choose to plot the sf object by using a specific attribute:\n\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nNote: plot() is meant to plot the geospatial object for a quick look. For high quality cartographic plot, other R packages such as tmap should be used.\n\n\n\n\n\nMap projection is an important property of a geospatial data. To perform geoprocessing using two geospatial data, there is a need to ensure that both geospatial data are projected using a similar coordinate system.\nThe process of projecting a simple feature data frame from one coordinate system to another coordinate system is called projection transformation.\n\n\nOne common issue that can happen when importing geospatial data is either the coordinate system of the source data is missing or wrongly assigned during the importing process.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nWhile the mpsz data frame is projected in svy21, the end of the printout above states that the EPSG is 9001 - this is a wrong EPSG code as the correct EPSG code for svy21 should be 3414.\nTo correctly assign the right EPSG code to the mpsz data frame, st_set_crs() of sf package is used:\n\nmpsz3414 &lt;- st_set_crs(mpsz,3414)\n\nWe then check whether the EPSG code has been corrected:\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\n\nIn geospatial analytics, it is common to transform the original data from one geographic coordinate system to a projected coordinated system. This is because a geographic coordinate system is not appropriate if the analysis needs to use distance and/or area measurements.\n\nst_geometry(preschool)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nThe print indicates that preschool is in wgs84 coordinate system.\nThis is a scenario for which st_set_crs() is not appropriate and st_transform() of sf package should be used. This is because we need to reproject preschool from one coordinate system to another coordinate system mathematically but st_crs() : replacing crs does not reproject data.\nThe projection transformation is performed as follows:\n\npreschool3414 &lt;- st_transform(preschool,crs=3414)\n\n\n\n\n\n\n\nNote\n\n\n\nNote: In practice, we need find out the appropriate project coordinate system to use before performing the projection transformation.\n\n\nDisplaying the content of preschool3414 data frame\n\nst_geometry(preschool3414)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\npreschool3414 is in svy21 projected coordinate system now. Further, as seen from the bounding box, the values are greater than 0 to 360 range of decimal degree commonly used by most of the geographic coordinate systems.\n\n\n\n\nAspatial data are non-geospatial data that have data fields that are able to capture the x- and y-coordinate of data points.\nAspatial data can be imported into a R environment, saved as a tibble data frame and further converted into a simple feature data frame.\n\n\nThe listings dataset is in csv format hence the read_csv() function of readr package is used:\n\nlistings &lt;- read_csv(\"data/aspatial/listings.csv\")\n\nThe output is called a tibble data frame.\nTo examine if the data file has been imported properly, list() of Base R is used instead of glimpse:\n\nlist(listings)\n\n[[1]]\n# A tibble: 3,540 × 18\n       id name      host_id host_name neighbourhood_group neighbourhood latitude\n    &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;               &lt;chr&gt;            &lt;dbl&gt;\n 1  71609 Ensuite …  367042 Belinda   East Region         Tampines          1.35\n 2  71896 B&B  Roo…  367042 Belinda   East Region         Tampines          1.35\n 3  71903 Room 2-n…  367042 Belinda   East Region         Tampines          1.35\n 4 275343 10min wa… 1439258 Kay       Central Region      Bukit Merah       1.29\n 5 275344 15 mins … 1439258 Kay       Central Region      Bukit Merah       1.29\n 6 289234 Booking …  367042 Belinda   East Region         Tampines          1.34\n 7 294281 5 mins w… 1521514 Elizabeth Central Region      Newton            1.31\n 8 324945 Comforta… 1439258 Kay       Central Region      Bukit Merah       1.29\n 9 330095 Relaxing… 1439258 Kay       Central Region      Bukit Merah       1.29\n10 344803 Budget s…  367042 Belinda   East Region         Tampines          1.35\n# ℹ 3,530 more rows\n# ℹ 11 more variables: longitude &lt;dbl&gt;, room_type &lt;chr&gt;, price &lt;dbl&gt;,\n#   minimum_nights &lt;dbl&gt;, number_of_reviews &lt;dbl&gt;, last_review &lt;date&gt;,\n#   reviews_per_month &lt;dbl&gt;, calculated_host_listings_count &lt;dbl&gt;,\n#   availability_365 &lt;dbl&gt;, number_of_reviews_ltm &lt;dbl&gt;, license &lt;chr&gt;\n\n\nThe output indicates that the tibble dataframe consists of 3.540 rows and 18 columns. Two useful fields used in next phase are latitude and longitude, which are in decimal degree format. As a guess, it is assumed that the data is in wgs84 geographic coordinate system.\n\n\n\nThe code chunk below converts the listing data frame into a simple feature data frame using st_as_sf() of sf package:\n\nlistings_sf &lt;- st_as_sf(listings,coords=c(\"longitude\",\"latitude\"),crs=4326) %&gt;%\n  st_transform(crs=3414)\n\nLearning points from above:\n\ncoords argument requires the column name of the x-coordinates first followed by the column name of y-coordinates\ncrs argument requires the coordinate system in EPSG format - EPSG 4326 is wgs84 geographic coordinate system while EPSG 3414 is the Singapore svy21 projected coordinate system. Other countries’ EPSG code can be found via EPSG website.\n%&gt;% is used to nest the st_transform() to transform the newly created simple feature data frame into a svy21 projected coordinates system.\n\n\nglimpse(listings_sf)\n\nRows: 3,540\nColumns: 17\n$ id                             &lt;dbl&gt; 71609, 71896, 71903, 275343, 275344, 28…\n$ name                           &lt;chr&gt; \"Ensuite Room (Room 1 & 2) near EXPO\", …\n$ host_id                        &lt;dbl&gt; 367042, 367042, 367042, 1439258, 143925…\n$ host_name                      &lt;chr&gt; \"Belinda\", \"Belinda\", \"Belinda\", \"Kay\",…\n$ neighbourhood_group            &lt;chr&gt; \"East Region\", \"East Region\", \"East Reg…\n$ neighbourhood                  &lt;chr&gt; \"Tampines\", \"Tampines\", \"Tampines\", \"Bu…\n$ room_type                      &lt;chr&gt; \"Private room\", \"Private room\", \"Privat…\n$ price                          &lt;dbl&gt; NA, 80, 80, 50, 50, NA, 85, 65, 45, 54,…\n$ minimum_nights                 &lt;dbl&gt; 92, 92, 92, 180, 180, 92, 92, 180, 180,…\n$ number_of_reviews              &lt;dbl&gt; 19, 24, 46, 20, 16, 12, 131, 17, 5, 60,…\n$ last_review                    &lt;date&gt; 2020-01-17, 2019-10-13, 2020-01-09, 20…\n$ reviews_per_month              &lt;dbl&gt; 0.12, 0.15, 0.29, 0.15, 0.11, 0.08, 0.8…\n$ calculated_host_listings_count &lt;dbl&gt; 6, 6, 6, 49, 49, 6, 7, 49, 49, 6, 7, 7,…\n$ availability_365               &lt;dbl&gt; 89, 148, 90, 62, 0, 88, 365, 0, 0, 365,…\n$ number_of_reviews_ltm          &lt;dbl&gt; 0, 0, 0, 0, 2, 0, 0, 1, 1, 1, 0, 0, 0, …\n$ license                        &lt;chr&gt; NA, NA, NA, \"S0399\", \"S0399\", NA, NA, \"…\n$ geometry                       &lt;POINT [m]&gt; POINT (41972.5 36390.05), POINT (…\n\n\nNote that a new column called geometry has been added into the data frame while the longitude and latitude columns have been dropped from the data frame.\n\n\n\n\nBesides providing functions to handle (i.e. importing, exporting, assigning projection, transforming projection) geospatial data, sf package also offers geoprocessing functions.\nTwo commonly used geoprocessing functions are bufferingand point in polygon count.\n\n\nThe scenario:\nThe authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on both sides of the current cycling path. The task is to determine the extent of land that needs to be acquired and the total area.\nThe solution:\nFirst, the st_buffer() of sf package is used to compute the 5-meters buffer around the cycling path:\n\nbuffer_cycling &lt;- st_buffer(cyclingpath,dist=5,nQuadSegs = 30)\n\nThe area of the buffers is calculated:\n\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\n\nLastly, the sum() of Base R will be used to derive the total land involved:\n\nsum(buffer_cycling$AREA)\n\n2218855 [m^2]\n\n\nMission accomplished!\n\n\n\nThe scenario:\nA preschool service group wants to find out the number of preschools in each planning subzone.\nThe solution:\nThe code chunk below performs 2 operations at 1 go:\n(1) Identify preschools located inside each planning subzone using st_intersects()\n(2) length() of Base R is used to calculate the number of preschools that fall inside each planning subzone\n\nmpsz3414$`PreSch Count` &lt;- lengths(st_intersects(mpsz3414,preschool3414))\n\n\n\n\n\n\n\nWarning\n\n\n\nWarning: st_intersects()should not be confused with st_intersection().\nTo also note that the symbol is ` rather than ’.\n\n\nThe summary statistics of the newly derived PreSch Count field can be shown with the code below:\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\nTo list the planning zone with the most number of preschools, the top_n() of dplyr package is used as shown in the code chunk below:\n\ntop_n(mpsz3414, 1,`PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n\n\nTo calculate the density of preschools by planning zone:\n\nmpsz3414$Area &lt;- mpsz3414 %&gt;%\n  st_area()\n\nNext, mutate() of dplyr package is used to compute the density by using the code chunk below:\n\nmpsz3414 &lt;- mpsz3414 %&gt;%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n\n\n\n\n\nIn practice, many geospatial analytics start with Exploratory Data Analysis. In this section, appropriate ggplot2 functions will be used to create functional and yet truthful statistical graphs for EDA purposes.\nA histogram is plotted to reveal the distribution of PreSch Density.\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\n\n\n\n\nHowever, the output does not meet publication quality and there is limited room for further customisation using this function. As such, we use ggplot2 functions instead:\n\nggplot(data = mpsz3414,\n       aes(x=as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20,\n                 color='black',\n                 fill='pink')+\n  labs(title=\"Are preschools evenly distributed in Singapore?\",\n       subtitle=\"There are many planning subzones with a single preschool. However, there are two planning subzones with at least 20 preschools.\",\n       x=\"Preschool density (per km sq)\",\n       y=\"Frequency\")\n\n\n\n\n\n\n\n\nA scatterplot is plotted to show the relationship between PreSch Density and PreSch Count:\n\nggplot(data= mpsz3414,\n       aes(y=`PreSch Count`,\n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\")+\n  xlim(0,40)+\n  ylim(0,40)+\n  labs(title=\"Preschool count vs Preschool density\",\n       x=\"Preschool density(per km sq)\",\n       y=\"Preschool count\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html#learning-outcomes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html#learning-outcomes",
    "title": "Hands-on Exercise 1A",
    "section": "",
    "text": "Geospatial Data Science is a process of importing, wrangling, integrating and processing geographically referenced datasets. In this hands-on exercise, I will perform geospatial data science tasks in R using the sf package and acquire the following competencies:\n\ninstall and load sf and tidyverse packages into the R environment\nimport geospatial data using appropriate functions of sf package\nimport aspatial data by using appropriate function of readr package\nexplore the content of simple feature data frame by using appropriate Base R and sf functions\nassign or transform coordinate systems by using appropriate sf functions\nconvert aspatial data into a sf dataframe by using appropriate functions of the sf package\nperform geoprocessing tasks using appropriate functions of sf package\nperform data wrangling tasks by using appropriate functions of dplyr package\nperform exploratory data analysis (EDA) using appropriate functions from ggplot2 package"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html#data-acquisition",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html#data-acquisition",
    "title": "Hands-on Exercise 1A",
    "section": "",
    "text": "The following datasets were downloaded:\n\nMaster Plan 2014 Subzone Boundary (Web) from data.gov.sg\nPre-Schools Location from data.gov.sg\nCycling Path from LTADataMall\nLatest version of Singapore Airbnb listing data from Inside Airbnb"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html#getting-started",
    "title": "Hands-on Exercise 1A",
    "section": "",
    "text": "sf for importing, managing, and processing geospatial data, and\ntidyverse for performing data science tasks such as importing, wrangling and visualising data. tidyverse consists of a family of R packages and the following within the family will be used in this exercise\n\nreadr for importing csv data,\nreadxl for importing Excel worksheet,\ntidyr for manipulating data,\ndplyr for transforming data, and\nggplot2 for visualising data\n\n\nThe packages are loaded with the following code chunk:\n\npacman::p_load(sf,tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html#importing-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html#importing-geospatial-data",
    "title": "Hands-on Exercise 1A",
    "section": "",
    "text": "We will import the following geospatial data using st_read() of sf package:\n\nMP14_SUBZONE_WEB_PL, a polygon feature layer in ESRI shapefile format,\nCyclingPath, a line feature layer in ESRI shapefile format, and\nPreSchool, a point feature layer in kml file format.\n\n\n\nThe following code chunk uses the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile as a polygon feature data frame.\nWhen the input geospatial data is in shapefile format, two arguments are used:\n\ndsn to define the data path\nlayer to provide the shapefile name\n\nNo extension such as .shp,.dbf,.prj and .shx are needed.\n\nmpsz = st_read(dsn=\"data/geospatial\",\n               layer=\"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nIt reveals that the geospatial objects are multipolygon features.\nThere are a total of 323 features and 15 fields in the mpsz simple feature data frame.\nmpsz is in svy21 projected coordinates systems.\nThe bounding box provides the x extent and y extent of the data.\n\n\n\n\nThe following code chunk uses the st_read() function of sf package to import import CyclingPath shapefile as a line feature data frame.\n\ncyclingpath = st_read(dsn=\"data/geospatial\",layer=\"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3138 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42644.17 ymax: 48948.15\nProjected CRS: SVY21\n\n\n\nIt reveals that the geospatial objects are multiline string features.\nThere are a total of 3138 features and 2 fields in the cyclingpath linestring feature data frame.\ncyclingpath is in svy21 projected coordinates systems.\n\n\n\n\nThe code chunk below is used to import the PreSchoolsLocation data which is in kml format.\n\npreschool = st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nIt reveals that preschool is a point feature data frame.\nThere are a total of 2290 features and 2 fields.\nUnlike the previous two simple feature data frames, preschool is in a wgs84 coordinates system."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html#checking-the-content-of-a-simple-feature-data-frame",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html#checking-the-content-of-a-simple-feature-data-frame",
    "title": "Hands-on Exercise 1A",
    "section": "",
    "text": "In this subsection, I will utilise different ways to retrieve information related to the content of a simple feature data frame.\n\n\nThe column in the sf data frame that contains the geometries is a list, of class sfc - the geometry list-column can be retrieved using:\n\nmpsz$geom or\nmpsz[[1]]\n\nbut more general way uses st_geometry():\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nThe print only displays basic information of the feature class such as type of geometry, geographic extent of the features and the coordinate system of the data.\n\n\n\nTo learn more about the associated attribute information in the data frame, we can use glimpse() of dplyr:\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\nThe report reveals the data type of each field. For example FMEL-UPD_D field is in date data type and X_ADDR, Y_ADDR, SHAPE_L and SHAPE_AREA fields are all in double-precision values.\n\n\n\nTo reveal the complete information of a feature object, we use head()of Base R:\n\nhead(mpsz,n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\nWe can change the number in the n argument to reflect different number of records."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html#plotting-the-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html#plotting-the-geospatial-data",
    "title": "Hands-on Exercise 1A",
    "section": "",
    "text": "In geospatial data science, we need to visualise the geospatial features, beyond just looking at the feature information.\n\nplot(mpsz)\n\n\n\n\n\n\n\n\nThe default plot of an sf object is a multiplot of all attributes, up to a reasonable maximum number, as shown above. However, we can choose to plot only the geometry:\n\nplot(st_geometry(mpsz))\n\n\n\n\n\n\n\n\nAlternatively, we can also choose to plot the sf object by using a specific attribute:\n\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nNote: plot() is meant to plot the geospatial object for a quick look. For high quality cartographic plot, other R packages such as tmap should be used."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html#working-with-projection",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html#working-with-projection",
    "title": "Hands-on Exercise 1A",
    "section": "",
    "text": "Map projection is an important property of a geospatial data. To perform geoprocessing using two geospatial data, there is a need to ensure that both geospatial data are projected using a similar coordinate system.\nThe process of projecting a simple feature data frame from one coordinate system to another coordinate system is called projection transformation.\n\n\nOne common issue that can happen when importing geospatial data is either the coordinate system of the source data is missing or wrongly assigned during the importing process.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nWhile the mpsz data frame is projected in svy21, the end of the printout above states that the EPSG is 9001 - this is a wrong EPSG code as the correct EPSG code for svy21 should be 3414.\nTo correctly assign the right EPSG code to the mpsz data frame, st_set_crs() of sf package is used:\n\nmpsz3414 &lt;- st_set_crs(mpsz,3414)\n\nWe then check whether the EPSG code has been corrected:\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\n\nIn geospatial analytics, it is common to transform the original data from one geographic coordinate system to a projected coordinated system. This is because a geographic coordinate system is not appropriate if the analysis needs to use distance and/or area measurements.\n\nst_geometry(preschool)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nThe print indicates that preschool is in wgs84 coordinate system.\nThis is a scenario for which st_set_crs() is not appropriate and st_transform() of sf package should be used. This is because we need to reproject preschool from one coordinate system to another coordinate system mathematically but st_crs() : replacing crs does not reproject data.\nThe projection transformation is performed as follows:\n\npreschool3414 &lt;- st_transform(preschool,crs=3414)\n\n\n\n\n\n\n\nNote\n\n\n\nNote: In practice, we need find out the appropriate project coordinate system to use before performing the projection transformation.\n\n\nDisplaying the content of preschool3414 data frame\n\nst_geometry(preschool3414)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\npreschool3414 is in svy21 projected coordinate system now. Further, as seen from the bounding box, the values are greater than 0 to 360 range of decimal degree commonly used by most of the geographic coordinate systems."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html#importing-and-converting-aspatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html#importing-and-converting-aspatial-data",
    "title": "Hands-on Exercise 1A",
    "section": "",
    "text": "Aspatial data are non-geospatial data that have data fields that are able to capture the x- and y-coordinate of data points.\nAspatial data can be imported into a R environment, saved as a tibble data frame and further converted into a simple feature data frame.\n\n\nThe listings dataset is in csv format hence the read_csv() function of readr package is used:\n\nlistings &lt;- read_csv(\"data/aspatial/listings.csv\")\n\nThe output is called a tibble data frame.\nTo examine if the data file has been imported properly, list() of Base R is used instead of glimpse:\n\nlist(listings)\n\n[[1]]\n# A tibble: 3,540 × 18\n       id name      host_id host_name neighbourhood_group neighbourhood latitude\n    &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;               &lt;chr&gt;            &lt;dbl&gt;\n 1  71609 Ensuite …  367042 Belinda   East Region         Tampines          1.35\n 2  71896 B&B  Roo…  367042 Belinda   East Region         Tampines          1.35\n 3  71903 Room 2-n…  367042 Belinda   East Region         Tampines          1.35\n 4 275343 10min wa… 1439258 Kay       Central Region      Bukit Merah       1.29\n 5 275344 15 mins … 1439258 Kay       Central Region      Bukit Merah       1.29\n 6 289234 Booking …  367042 Belinda   East Region         Tampines          1.34\n 7 294281 5 mins w… 1521514 Elizabeth Central Region      Newton            1.31\n 8 324945 Comforta… 1439258 Kay       Central Region      Bukit Merah       1.29\n 9 330095 Relaxing… 1439258 Kay       Central Region      Bukit Merah       1.29\n10 344803 Budget s…  367042 Belinda   East Region         Tampines          1.35\n# ℹ 3,530 more rows\n# ℹ 11 more variables: longitude &lt;dbl&gt;, room_type &lt;chr&gt;, price &lt;dbl&gt;,\n#   minimum_nights &lt;dbl&gt;, number_of_reviews &lt;dbl&gt;, last_review &lt;date&gt;,\n#   reviews_per_month &lt;dbl&gt;, calculated_host_listings_count &lt;dbl&gt;,\n#   availability_365 &lt;dbl&gt;, number_of_reviews_ltm &lt;dbl&gt;, license &lt;chr&gt;\n\n\nThe output indicates that the tibble dataframe consists of 3.540 rows and 18 columns. Two useful fields used in next phase are latitude and longitude, which are in decimal degree format. As a guess, it is assumed that the data is in wgs84 geographic coordinate system.\n\n\n\nThe code chunk below converts the listing data frame into a simple feature data frame using st_as_sf() of sf package:\n\nlistings_sf &lt;- st_as_sf(listings,coords=c(\"longitude\",\"latitude\"),crs=4326) %&gt;%\n  st_transform(crs=3414)\n\nLearning points from above:\n\ncoords argument requires the column name of the x-coordinates first followed by the column name of y-coordinates\ncrs argument requires the coordinate system in EPSG format - EPSG 4326 is wgs84 geographic coordinate system while EPSG 3414 is the Singapore svy21 projected coordinate system. Other countries’ EPSG code can be found via EPSG website.\n%&gt;% is used to nest the st_transform() to transform the newly created simple feature data frame into a svy21 projected coordinates system.\n\n\nglimpse(listings_sf)\n\nRows: 3,540\nColumns: 17\n$ id                             &lt;dbl&gt; 71609, 71896, 71903, 275343, 275344, 28…\n$ name                           &lt;chr&gt; \"Ensuite Room (Room 1 & 2) near EXPO\", …\n$ host_id                        &lt;dbl&gt; 367042, 367042, 367042, 1439258, 143925…\n$ host_name                      &lt;chr&gt; \"Belinda\", \"Belinda\", \"Belinda\", \"Kay\",…\n$ neighbourhood_group            &lt;chr&gt; \"East Region\", \"East Region\", \"East Reg…\n$ neighbourhood                  &lt;chr&gt; \"Tampines\", \"Tampines\", \"Tampines\", \"Bu…\n$ room_type                      &lt;chr&gt; \"Private room\", \"Private room\", \"Privat…\n$ price                          &lt;dbl&gt; NA, 80, 80, 50, 50, NA, 85, 65, 45, 54,…\n$ minimum_nights                 &lt;dbl&gt; 92, 92, 92, 180, 180, 92, 92, 180, 180,…\n$ number_of_reviews              &lt;dbl&gt; 19, 24, 46, 20, 16, 12, 131, 17, 5, 60,…\n$ last_review                    &lt;date&gt; 2020-01-17, 2019-10-13, 2020-01-09, 20…\n$ reviews_per_month              &lt;dbl&gt; 0.12, 0.15, 0.29, 0.15, 0.11, 0.08, 0.8…\n$ calculated_host_listings_count &lt;dbl&gt; 6, 6, 6, 49, 49, 6, 7, 49, 49, 6, 7, 7,…\n$ availability_365               &lt;dbl&gt; 89, 148, 90, 62, 0, 88, 365, 0, 0, 365,…\n$ number_of_reviews_ltm          &lt;dbl&gt; 0, 0, 0, 0, 2, 0, 0, 1, 1, 1, 0, 0, 0, …\n$ license                        &lt;chr&gt; NA, NA, NA, \"S0399\", \"S0399\", NA, NA, \"…\n$ geometry                       &lt;POINT [m]&gt; POINT (41972.5 36390.05), POINT (…\n\n\nNote that a new column called geometry has been added into the data frame while the longitude and latitude columns have been dropped from the data frame."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html#geoprocessing-with-sf-package",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html#geoprocessing-with-sf-package",
    "title": "Hands-on Exercise 1A",
    "section": "",
    "text": "Besides providing functions to handle (i.e. importing, exporting, assigning projection, transforming projection) geospatial data, sf package also offers geoprocessing functions.\nTwo commonly used geoprocessing functions are bufferingand point in polygon count.\n\n\nThe scenario:\nThe authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on both sides of the current cycling path. The task is to determine the extent of land that needs to be acquired and the total area.\nThe solution:\nFirst, the st_buffer() of sf package is used to compute the 5-meters buffer around the cycling path:\n\nbuffer_cycling &lt;- st_buffer(cyclingpath,dist=5,nQuadSegs = 30)\n\nThe area of the buffers is calculated:\n\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\n\nLastly, the sum() of Base R will be used to derive the total land involved:\n\nsum(buffer_cycling$AREA)\n\n2218855 [m^2]\n\n\nMission accomplished!\n\n\n\nThe scenario:\nA preschool service group wants to find out the number of preschools in each planning subzone.\nThe solution:\nThe code chunk below performs 2 operations at 1 go:\n(1) Identify preschools located inside each planning subzone using st_intersects()\n(2) length() of Base R is used to calculate the number of preschools that fall inside each planning subzone\n\nmpsz3414$`PreSch Count` &lt;- lengths(st_intersects(mpsz3414,preschool3414))\n\n\n\n\n\n\n\nWarning\n\n\n\nWarning: st_intersects()should not be confused with st_intersection().\nTo also note that the symbol is ` rather than ’.\n\n\nThe summary statistics of the newly derived PreSch Count field can be shown with the code below:\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\nTo list the planning zone with the most number of preschools, the top_n() of dplyr package is used as shown in the code chunk below:\n\ntop_n(mpsz3414, 1,`PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n\n\nTo calculate the density of preschools by planning zone:\n\nmpsz3414$Area &lt;- mpsz3414 %&gt;%\n  st_area()\n\nNext, mutate() of dplyr package is used to compute the density by using the code chunk below:\n\nmpsz3414 &lt;- mpsz3414 %&gt;%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html#exploratory-data-analysis-eda",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01A.html#exploratory-data-analysis-eda",
    "title": "Hands-on Exercise 1A",
    "section": "",
    "text": "In practice, many geospatial analytics start with Exploratory Data Analysis. In this section, appropriate ggplot2 functions will be used to create functional and yet truthful statistical graphs for EDA purposes.\nA histogram is plotted to reveal the distribution of PreSch Density.\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\n\n\n\n\nHowever, the output does not meet publication quality and there is limited room for further customisation using this function. As such, we use ggplot2 functions instead:\n\nggplot(data = mpsz3414,\n       aes(x=as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20,\n                 color='black',\n                 fill='pink')+\n  labs(title=\"Are preschools evenly distributed in Singapore?\",\n       subtitle=\"There are many planning subzones with a single preschool. However, there are two planning subzones with at least 20 preschools.\",\n       x=\"Preschool density (per km sq)\",\n       y=\"Frequency\")\n\n\n\n\n\n\n\n\nA scatterplot is plotted to show the relationship between PreSch Density and PreSch Count:\n\nggplot(data= mpsz3414,\n       aes(y=`PreSch Count`,\n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\")+\n  xlim(0,40)+\n  ylim(0,40)+\n  labs(title=\"Preschool count vs Preschool density\",\n       x=\"Preschool density(per km sq)\",\n       y=\"Preschool count\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "Thematic mapping involves the use of map symbols to visualise selected properties of geographic features that are not naturally visible i.e. population, temperate, crime rate and property prices.\nGeovisualisation works by providing a geographical ideation to render a place, phenomenon or process visible. In this exercise, functional and truthful chloropleth maps will be plot using the tmappackage.\n\n\n\nIn this hands-on exercise, the key R package is the tmappackage and the following packages:\n\nreadrto import delimited text file\ntidyrfor tidying data\ndplyrfor wrangling data\nsfto handle geospatial data\n\nThe first 3 packages above are part of the tidyverse package.\nThe packages are loaded with the following code chunk:\n\npacman::p_load(tmap,tidyverse,sf)\n\n\n\n\n\n\nThe following datasets were used to create the chloropleth map:\n\nMaster Plan 2014 Subzone Boundary (Web) (“MP14_SUBZONE_WEB_PL”) from data.gov.sg in ESRI shapefile format. This is geospatial data comprising the geographical boundary of Singapore at the planning subzone level, based on URA Master Plan 2014.\nSingapore Residents by Planning Area/Subzone, Age Group, Sex and Type of Dwelling, June 2011 to 2020 (“respopagesextod2011to2020.csv”), from Department of Statistics, Singapore, in csv file format. This is an aspatial datafile, it does not contain any coordinates to the “MP14_SUBZONE_WEB_PL” shapefile.\n\n\n\n\nThe following code chunk uses the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile as a simple feature data frame.\n\nmpsz &lt;- st_read(dsn=\"data/geospatial\",\n                layer=\"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThe content of mpsz can be examined using the code below:\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n\n\nThe read_csv() function of readr package is used to import respopagesextod2011to2020.csv file and saved as a data frame called popdata:\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\n\n\n\nA data table with year 2020 values, comprising variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY is first prepared.\n\nYOUNG: age group 0 to 4 until age group 20 to 24\nECONOMY ACTIVE: age group 25-29 until age group 60-64\nAGED: age group 65 and above\nTOTAL: all age groups\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\n\nThe following data wrangling and transformation functions will be used:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by() and select() of dplyr package\n\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA,SZ,AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from=AG,\n              values_from=POP) %&gt;%\n  mutate(`YOUNG` = rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;%\n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\n           rowSums(.[13:15])) %&gt;%\n  mutate(`AGED`=rowSums(.[16:21])) %&gt;%\n  mutate(`TOTAL`=rowSums(.[3:21])) %&gt;%\n  mutate(`DEPENDENCY`=(`YOUNG`+`AGED`)/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`,`SZ`,`YOUNG`,`ECONOMY ACTIVE`,`AGED`,`TOTAL`,`DEPENDENCY`)\n\n\n\n\nBefore georelational join can be performed, an added step is needed to convert the values in PA and SZ to uppercase, as they are currently in both upper- and lowercase. On the other hand, the SUBZONE_N and PLN_AREA_N are in uppercase.\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate_at(.vars = vars(PA,SZ),\n            .funs = list(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE`&gt;0)\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name i.e. SUBZONE_N and SZ as the common identifier:\n\nmpsz_pop2020 &lt;- left_join(mpsz,popdata2020,by=c(\"SUBZONE_N\"=\"SZ\"))\n\nleft_join() of dplyr is used with the mpsz simple feature data frame as the left data table is used to ensure that the output will be a simple feature data frame.\nThe joined file is then saved:\n\nwrite_rds(mpsz_pop2020,\"data/rds/mpszpop2020.rds\")\n\n\n\n\n\n\nChoropleth mapping involves the symbolisation of enumeration units such as countries, provinces, states, counties or census units, using area patterns or graduated colours. For instance, a social scientist may require a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\nTwo approaches are used to prepare the thematic map using tmap:\n\nPlotting a thematic map quickly using qtm()\nPlotting a highly customisable thematic map using tmap elements\n\n\n\nqtm() is a concise way to provide a good default visualisation:\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020,\n    fill=\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nLearning points:\n\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used\nfill argument is used to map the attribute i.e. DEPENDENCY\n\n\n\n\nThe disadvantage of qtm() is that the aesthetics of individual layers are harder to control. tmap drawing elements are required to draw a high quality cartographic choropleth map:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          title = \"Dependency ratio\")+\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45,\n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha=0.5)+\n  tm_compass(type=\"8star\",size=2) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2) +\n  tm_credits(\"Source: Planning subzone boundary from Urban Redevelopment Authority (URA) and population data from Department of Statistics (DOS)\",\n          position = c(\"left\",\"bottom\")   )\n\n\n\n\n\n\n\n\nThe following section explains the tmap functions that were used to plot the above elements:\n\n\n\nThe basic building block of tmap is tm_shape() followed by one or more layer elements such as tm_fill() or tm_polygons()\nIn the code chunk below, tm_shape() is used to define the input data and tm_polygons() is used to draw the planning subzone polygons:\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n\n\n\n\n\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as Dependency to tm_polygons():\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nLearning points from tm_polygons():\n\ndefault interval binning used to draw the choropleth map is called “pretty”\ndefault color scheme used is YlOrRd of ColorBrewer\ndefault color for missing value is a grey shade\n\n\n\n\ntm_polygons() is a wrapper of tm_fill() and tm_border():\n\ntm_fill() shades the polygons by using the default color scheme\ntm_borders() add the borders of the shapefile onto the choropleth map\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nWith tm_borders(), light gray border lines are added onto the choropleth map:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")+\n  tm_borders(lwd = 0.1, alpha = 1)\n\n\n\n\n\n\n\n\n\nalpha argument defines the transparency number between 0 (totally transparent) to 1 (not transparent). by default, the alpha value is 1\ncol defines the border color\nlwd defines the border line width, default is 1\nlty defines the border line type, default is solid\n\n\n\n\n\nMost choropleth maps employ methods of data classification, which aims to take a large number of observations and group them into data ranges or classes.\ntmap provides 10 data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher and jenks.\nThe style argument of tm_fill() or tm_polygons() will need to be used to define the data classification method.\n\n\nQuantile data classification with 5 classes:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=5,\n          style=\"quantile\")+\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\nEqual data classification method:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=5,\n          style=\"equal\")+\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nComparing the two methods above, the distribution of the quantile method is more even than the equal distribution method. Maps can lie, below are some other methods of classification and different number of classes being tested out.\n\n\nkmeans data classification with 5 classes:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=5,\n          style=\"kmeans\")+\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\nkmeans data classification with 2 classes:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=2,\n          style=\"kmeans\")+\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\nfisher data classification with 5 classes:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=5,\n          style=\"fisher\")+\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\nfisher data classification with 20 classes:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=20,\n          style=\"fisher\")+\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\n\n\n\nFor all built-in styles, category breaks are computed internally. To override the defaults, the breakpoints can be set explicitly by means of breaks argument to tm_fill().\n\n\n\n\n\n\nImportant\n\n\n\nIn tmap, breaks include a minimum and maximum. To end up with n categories, n+1 elements must be specified in the breaks option (values must be in increasing order)\n\n\nBefore setting the break points, it is important and good practice to obtain the descriptive statistics:\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n\n\nWith reference to the results above, we set the break points at 0.60, 0.70, 0.80 and 0.90. We also need to include a minimum and maximum, set at 0 and 1.00 respectively.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks=c(0,0.60,0.70,0.80,0.90,1.00)) +\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\n\n\n\n\ntmap support color ramps defined by the user or a set of predefined color ramps from the RColorBrewer package.\n\n\nThis is done by assigning the preferred color to palette argument of tm_fill():\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=6,\n          style=\"quantile\",\n          palette = \"Blues\")+\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\nTo reverse the color shading, we add a “-” prefix:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=6,\n          style = \"quantile\",\n          palette = \"-Blues\")+\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nThis also applies to other palette colors like Greens:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=6,\n          style = \"quantile\",\n          palette = \"Greens\")+\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=6,\n          style = \"quantile\",\n          palette = \"-Greens\")+\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\nMap layout refers to the combination of all map elements into a cohesive map. Map elements include title, scale bar, compass, margins and aspect ratios. 1.4.3 Data classification methods of tmap and 1.4.4 Color scheme covered above affect how the map looks.\n\n\nLegend options include changing the placement, format and appearance of the legend:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style=\"jenks\",\n          palette = \"Blues\",\n          legend.hist = TRUE,\n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1)+\n  tm_layout(main.title=\"Distribution of Dependency Ratio by planning subzone \\n(Jenks Classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45,\n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\",\"bottom\"),\n            frame = FALSE)+\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\nA variety of layout settings that can be changed are called by using tmap_style():\nClassic style:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\")+\n  tm_borders(alpha = 0.5)+\n  tmap_style(\"classic\")\n\n\n\n\n\n\n\n\n\n\n\ntmap also provides arguments to draw other map furniture like compass, scale bar and grid lines i.e. through the use of tm_compass(), tm_scale_bar() and tm_grid():\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          title = \"No. of persons\")+\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45,\n            legend.width = 0.35,\n            frame = TRUE)+\n  tm_borders(alpha = 0.5)+\n  tm_compass(type = \"8star\",size=2)+\n  tm_scale_bar(width = 0.15)+\n  tm_grid(lwd = 0.1,alpha = 0.2)+\n  tm_credits(\"Source: Planning subzone boundary data from Urban Redevelopment Authority (URA) and Population Data from Department of Statistics (DOS)\",\n             position = c(\"left\",\"bottom\"))\n\n\n\n\n\n\n\n\nTo reset to default style:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          title = \"No. of persons\")+\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45,\n            legend.width = 0.35,\n            frame = TRUE)+\n  tm_borders(alpha = 0.5)+\n  tm_compass(type = \"8star\",size=2)+\n  tm_scale_bar(width = 0.15)+\n  tm_grid(lwd = 0.1,alpha = 0.2)+\n  tm_credits(\"Source: Planning subzone boundary data from Urban Redevelopment Authority (URA) and Population Data from Department of Statistics (DOS)\",\n             position = c(\"left\",\"bottom\"))+\n  tmap_style(\"white\")\n\n\n\n\n\n\n\n\n\n\n\n\nSmall multiple maps are also referred to as facet maps and comprise many maps arranged side-by-side and sometimes, stacked vertically. Facet maps enable the visualisation of how spatial relationships change with respect to another variable such as time.\nFacet maps can be plotted in 3 ways in tmap:\n\nby assigning multiple values to at least one of the aesthetic arguments\nby defining a group-by variable in tm_facets()\nby creating a multiple standalone maps with tmap_arrange()\n\n\n\nHere, we create facet maps by defining ncols in tm_fill():\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\",\"AGED\"),\n          style = \"equal\",\n          palette = \"Blues\")+\n  tm_layout(legend.position = c(\"right\",\"bottom\"))+\n  tm_borders(alpha = 0.5)+\n  tmap_style(\"white\")\n\n\n\n\n\n\n\n\nAnother example, we assign different styles and palette:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\",\"quantile\"),\n          palette = list(\"Blues\",\"Greens\"))+\n  tm_layout(legend.position = c(\"right\",\"bottom\"))\n\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0)+\n  tm_facets(by=\"REGION_N\",\n            free.coords = TRUE,\n            drop.shapes = TRUE)+\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\",\"center\"),\n            title.size = 20)+\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+\n  tm_polygons(\"YOUNG\",\n              style = \"quantile\",\n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+\n  tm_polygons(\"AGED\",\n              style = \"quantile\",\n              palette = \"Blues\")\n\ntmap_arrange(youngmap,agedmap,asp=1,ncol=2)\n\n\n\n\n\n\n\n\n\n\n\n\nInstead of creating small multiple choropleth map, a selection function can also be used to map spatial objects meeting a selection criterion:\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\",])+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          legend.hist = TRUE,\n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1)+\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45,\n            legend.width = 5.0,\n            legend.position = c(\"right\",\"bottom\"),\n            frame = FALSE)+\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntmap: Thematic Maps in R\ntmap\ntmap: get started!\ntmap: changes in version 2.0\ntmap: creating thematic maps in a flexible way (useR!2015)\nExploring and presenting maps with tmap (useR!2017)\n\n\n\n\n\nsf: Simple Features for R\nSimple Features for R: StandardizedSupport for Spatial Vector Data\nReading, Writing and Converting Simple Features\n\n\n\n\n\ndplyr\nTidy data\ntidyr: Easily Tidy Data with ‘spread()’ and ‘gather()’ Functions"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#learning-outcomes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#learning-outcomes",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "Geospatial Data Science is a process of importing, wrangling, integrating and processing geographically referenced datasets. In this hands-on exercise, I will perform geospatial data science tasks in R using the sf package and acquire the following competencies:\n\ninstall and load sf and tidyverse packages into the R environment\nimport geospatial data using appropriate functions of sf package\nimport aspatial data by using appropriate function of readr package\nexplore the content of simple feature data frame by using appropriate Base R and sf functions\nassign or transform coordinate systems by using appropriate sf functions\nconvert aspatial data into a sf dataframe by using appropriate functions of the sf package\nperform geoprocessing tasks using appropriate functions of sf package\nperform data wrangling tasks by using appropriate functions of dplyr package\nperform exploratory data analysis (EDA) using appropriate functions from ggplot2 package"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#data-acquisition",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#data-acquisition",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "The following datasets were downloaded:\n\nMaster Plan 2014 Subzone Boundary (Web) from data.gov.sg\nPre-Schools Location from data.gov.sg\nCycling Path from LTADataMall\nLatest version of Singapore Airbnb listing data from Inside Airbnb"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#getting-started",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "In this hands-on exercise, the key R package is the tmappackage and the following packages:\n\nreadrto import delimited text file\ntidyrfor tidying data\ndplyrfor wrangling data\nsfto handle geospatial data\n\nThe first 3 packages above are part of the tidyverse package.\nThe packages are loaded with the following code chunk:\n\npacman::p_load(tmap,tidyverse,sf)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#importing-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#importing-geospatial-data",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "We will import the following geospatial data using st_read() of sf package:\n\nMP14_SUBZONE_WEB_PL, a polygon feature layer in ESRI shapefile format,\nCyclingPath, a line feature layer in ESRI shapefile format, and\nPreSchool, a point feature layer in kml file format.\n\n\n\nThe following code chunk uses the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile as a polygon feature data frame.\nWhen the input geospatial data is in shapefile format, two arguments are used:\n\ndsn to define the data path\nlayer to provide the shapefile name\n\nNo extension such as .shp,.dbf,.prj and .shx are needed.\n\nmpsz = st_read(dsn=\"data/geospatial\",\n               layer=\"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nIt reveals that the geospatial objects are multipolygon features.\nThere are a total of 323 features and 15 fields in the mpsz simple feature data frame.\nmpsz is in svy21 projected coordinates systems.\nThe bounding box provides the x extent and y extent of the data.\n\n\n\n\nThe following code chunk uses the st_read() function of sf package to import import CyclingPath shapefile as a line feature data frame.\n\ncyclingpath = st_read(dsn=\"data/geospatial\",layer=\"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3138 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42644.17 ymax: 48948.15\nProjected CRS: SVY21\n\n\n\nIt reveals that the geospatial objects are multiline string features.\nThere are a total of 3138 features and 2 fields in the cyclingpath linestring feature data frame.\ncyclingpath is in svy21 projected coordinates systems.\n\n\n\n\nThe code chunk below is used to import the PreSchoolsLocation data which is in kml format.\n\npreschool = st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nIt reveals that preschool is a point feature data frame.\nThere are a total of 2290 features and 2 fields.\nUnlike the previous two simple feature data frames, preschool is in a wgs84 coordinates system."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#checking-the-content-of-a-simple-feature-data-frame",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#checking-the-content-of-a-simple-feature-data-frame",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "In this subsection, I will utilise different ways to retrieve information related to the content of a simple feature data frame.\n\n\nThe column in the sf data frame that contains the geometries is a list, of class sfc - the geometry list-column can be retrieved using:\n\nmpsz$geom or\nmpsz[[1]]\n\nbut more general way uses st_geometry():\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nThe print only displays basic information of the feature class such as type of geometry, geographic extent of the features and the coordinate system of the data.\n\n\n\nTo learn more about the associated attribute information in the data frame, we can use glimpse() of dplyr:\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\nThe report reveals the data type of each field. For example FMEL-UPD_D field is in date data type and X_ADDR, Y_ADDR, SHAPE_L and SHAPE_AREA fields are all in double-precision values.\n\n\n\nTo reveal the complete information of a feature object, we use head()of Base R:\n\nhead(mpsz,n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\nWe can change the number in the n argument to reflect different number of records."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#plotting-the-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#plotting-the-geospatial-data",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "In geospatial data science, we need to visualise the geospatial features, beyond just looking at the feature information.\n\nplot(mpsz)\n\n\n\n\n\n\n\n\nThe default plot of an sf object is a multiplot of all attributes, up to a reasonable maximum number, as shown above. However, we can choose to plot only the geometry:\n\nplot(st_geometry(mpsz))\n\n\n\n\n\n\n\n\nAlternatively, we can also choose to plot the sf object by using a specific attribute:\n\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nNote: plot() is meant to plot the geospatial object for a quick look. For high quality cartographic plot, other R packages such as tmap should be used."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#working-with-projection",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#working-with-projection",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "Map projection is an important property of a geospatial data. To perform geoprocessing using two geospatial data, there is a need to ensure that both geospatial data are projected using a similar coordinate system.\nThe process of projecting a simple feature data frame from one coordinate system to another coordinate system is called projection transformation.\n\n\nOne common issue that can happen when importing geospatial data is either the coordinate system of the source data is missing or wrongly assigned during the importing process.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nWhile the mpsz data frame is projected in svy21, the end of the printout above states that the EPSG is 9001 - this is a wrong EPSG code as the correct EPSG code for svy21 should be 3414.\nTo correctly assign the right EPSG code to the mpsz data frame, st_set_crs() of sf package is used:\n\nmpsz3414 &lt;- st_set_crs(mpsz,3414)\n\nWe then check whether the EPSG code has been corrected:\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\n\nIn geospatial analytics, it is common to transform the original data from one geographic coordinate system to a projected coordinated system. This is because a geographic coordinate system is not appropriate if the analysis needs to use distance and/or area measurements.\n\nst_geometry(preschool)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nThe print indicates that preschool is in wgs84 coordinate system.\nThis is a scenario for which st_set_crs() is not appropriate and st_transform() of sf package should be used. This is because we need to reproject preschool from one coordinate system to another coordinate system mathematically but st_crs() : replacing crs does not reproject data.\nThe projection transformation is performed as follows:\n\npreschool3414 &lt;- st_transform(preschool,crs=3414)\n\n\n\n\n\n\n\nNote\n\n\n\nNote: In practice, we need find out the appropriate project coordinate system to use before performing the projection transformation.\n\n\nDisplaying the content of preschool3414 data frame\n\nst_geometry(preschool3414)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\npreschool3414 is in svy21 projected coordinate system now. Further, as seen from the bounding box, the values are greater than 0 to 360 range of decimal degree commonly used by most of the geographic coordinate systems."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#importing-and-converting-aspatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#importing-and-converting-aspatial-data",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "Aspatial data are non-geospatial data that have data fields that are able to capture the x- and y-coordinate of data points.\nAspatial data can be imported into a R environment, saved as a tibble data frame and further converted into a simple feature data frame.\n\n\nThe listings dataset is in csv format hence the read_csv() function of readr package is used:\n\nlistings &lt;- read_csv(\"data/aspatial/listings.csv\")\n\nThe output is called a tibble data frame.\nTo examine if the data file has been imported properly, list() of Base R is used instead of glimpse:\n\nlist(listings)\n\n[[1]]\n# A tibble: 3,540 × 18\n       id name      host_id host_name neighbourhood_group neighbourhood latitude\n    &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;               &lt;chr&gt;            &lt;dbl&gt;\n 1  71609 Ensuite …  367042 Belinda   East Region         Tampines          1.35\n 2  71896 B&B  Roo…  367042 Belinda   East Region         Tampines          1.35\n 3  71903 Room 2-n…  367042 Belinda   East Region         Tampines          1.35\n 4 275343 10min wa… 1439258 Kay       Central Region      Bukit Merah       1.29\n 5 275344 15 mins … 1439258 Kay       Central Region      Bukit Merah       1.29\n 6 289234 Booking …  367042 Belinda   East Region         Tampines          1.34\n 7 294281 5 mins w… 1521514 Elizabeth Central Region      Newton            1.31\n 8 324945 Comforta… 1439258 Kay       Central Region      Bukit Merah       1.29\n 9 330095 Relaxing… 1439258 Kay       Central Region      Bukit Merah       1.29\n10 344803 Budget s…  367042 Belinda   East Region         Tampines          1.35\n# ℹ 3,530 more rows\n# ℹ 11 more variables: longitude &lt;dbl&gt;, room_type &lt;chr&gt;, price &lt;dbl&gt;,\n#   minimum_nights &lt;dbl&gt;, number_of_reviews &lt;dbl&gt;, last_review &lt;date&gt;,\n#   reviews_per_month &lt;dbl&gt;, calculated_host_listings_count &lt;dbl&gt;,\n#   availability_365 &lt;dbl&gt;, number_of_reviews_ltm &lt;dbl&gt;, license &lt;chr&gt;\n\n\nThe output indicates that the tibble dataframe consists of 3.540 rows and 18 columns. Two useful fields used in next phase are latitude and longitude, which are in decimal degree format. As a guess, it is assumed that the data is in wgs84 geographic coordinate system.\n\n\n\nThe code chunk below converts the listing data frame into a simple feature data frame using st_as_sf() of sf package:\n\nlistings_sf &lt;- st_as_sf(listings,coords=c(\"longitude\",\"latitude\"),crs=4326) %&gt;%\n  st_transform(crs=3414)\n\nLearning points from above:\n\ncoords argument requires the column name of the x-coordinates first followed by the column name of y-coordinates\ncrs argument requires the coordinate system in EPSG format - EPSG 4326 is wgs84 geographic coordinate system while EPSG 3414 is the Singapore svy21 projected coordinate system. Other countries’ EPSG code can be found via EPSG website.\n%&gt;% is used to nest the st_transform() to transform the newly created simple feature data frame into a svy21 projected coordinates system.\n\n\nglimpse(listings_sf)\n\nRows: 3,540\nColumns: 17\n$ id                             &lt;dbl&gt; 71609, 71896, 71903, 275343, 275344, 28…\n$ name                           &lt;chr&gt; \"Ensuite Room (Room 1 & 2) near EXPO\", …\n$ host_id                        &lt;dbl&gt; 367042, 367042, 367042, 1439258, 143925…\n$ host_name                      &lt;chr&gt; \"Belinda\", \"Belinda\", \"Belinda\", \"Kay\",…\n$ neighbourhood_group            &lt;chr&gt; \"East Region\", \"East Region\", \"East Reg…\n$ neighbourhood                  &lt;chr&gt; \"Tampines\", \"Tampines\", \"Tampines\", \"Bu…\n$ room_type                      &lt;chr&gt; \"Private room\", \"Private room\", \"Privat…\n$ price                          &lt;dbl&gt; NA, 80, 80, 50, 50, NA, 85, 65, 45, 54,…\n$ minimum_nights                 &lt;dbl&gt; 92, 92, 92, 180, 180, 92, 92, 180, 180,…\n$ number_of_reviews              &lt;dbl&gt; 19, 24, 46, 20, 16, 12, 131, 17, 5, 60,…\n$ last_review                    &lt;date&gt; 2020-01-17, 2019-10-13, 2020-01-09, 20…\n$ reviews_per_month              &lt;dbl&gt; 0.12, 0.15, 0.29, 0.15, 0.11, 0.08, 0.8…\n$ calculated_host_listings_count &lt;dbl&gt; 6, 6, 6, 49, 49, 6, 7, 49, 49, 6, 7, 7,…\n$ availability_365               &lt;dbl&gt; 89, 148, 90, 62, 0, 88, 365, 0, 0, 365,…\n$ number_of_reviews_ltm          &lt;dbl&gt; 0, 0, 0, 0, 2, 0, 0, 1, 1, 1, 0, 0, 0, …\n$ license                        &lt;chr&gt; NA, NA, NA, \"S0399\", \"S0399\", NA, NA, \"…\n$ geometry                       &lt;POINT [m]&gt; POINT (41972.5 36390.05), POINT (…\n\n\nNote that a new column called geometry has been added into the data frame while the longitude and latitude columns have been dropped from the data frame."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#geoprocessing-with-sf-package",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#geoprocessing-with-sf-package",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "Besides providing functions to handle (i.e. importing, exporting, assigning projection, transforming projection) geospatial data, sf package also offers geoprocessing functions.\nTwo commonly used geoprocessing functions are bufferingand point in polygon count.\n\n\nThe scenario:\nThe authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on both sides of the current cycling path. The task is to determine the extent of land that needs to be acquired and the total area.\nThe solution:\nFirst, the st_buffer() of sf package is used to compute the 5-meters buffer around the cycling path:\n\nbuffer_cycling &lt;- st_buffer(cyclingpath,dist=5,nQuadSegs = 30)\n\nThe area of the buffers is calculated:\n\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\n\nLastly, the sum() of Base R will be used to derive the total land involved:\n\nsum(buffer_cycling$AREA)\n\n2218855 [m^2]\n\n\nMission accomplished!\n\n\n\nThe scenario:\nA preschool service group wants to find out the number of preschools in each planning subzone.\nThe solution:\nThe code chunk below performs 2 operations at 1 go:\n(1) Identify preschools located inside each planning subzone using st_intersects()\n(2) length() of Base R is used to calculate the number of preschools that fall inside each planning subzone\n\nmpsz3414$`PreSch Count` &lt;- lengths(st_intersects(mpsz3414,preschool3414))\n\n\n\n\n\n\n\nWarning\n\n\n\nWarning: st_intersects()should not be confused with st_intersection().\nTo also note that the symbol is ` rather than ’.\n\n\nThe summary statistics of the newly derived PreSch Count field can be shown with the code below:\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\nTo list the planning zone with the most number of preschools, the top_n() of dplyr package is used as shown in the code chunk below:\n\ntop_n(mpsz3414, 1,`PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n\n\nTo calculate the density of preschools by planning zone:\n\nmpsz3414$Area &lt;- mpsz3414 %&gt;%\n  st_area()\n\nNext, mutate() of dplyr package is used to compute the density by using the code chunk below:\n\nmpsz3414 &lt;- mpsz3414 %&gt;%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#exploratory-data-analysis-eda",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#exploratory-data-analysis-eda",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "In practice, many geospatial analytics start with Exploratory Data Analysis. In this section, appropriate ggplot2 functions will be used to create functional and yet truthful statistical graphs for EDA purposes.\nA histogram is plotted to reveal the distribution of PreSch Density.\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\n\n\n\n\nHowever, the output does not meet publication quality and there is limited room for further customisation using this function. As such, we use ggplot2 functions instead:\n\nggplot(data = mpsz3414,\n       aes(x=as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20,\n                 color='black',\n                 fill='pink')+\n  labs(title=\"Are preschools evenly distributed in Singapore?\",\n       subtitle=\"There are many planning subzones with a single preschool. However, there are two planning subzones with at least 20 preschools.\",\n       x=\"Preschool density (per km sq)\",\n       y=\"Frequency\")\n\n\n\n\n\n\n\n\nA scatterplot is plotted to show the relationship between PreSch Density and PreSch Count:\n\nggplot(data= mpsz3414,\n       aes(y=`PreSch Count`,\n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\")+\n  xlim(0,40)+\n  ylim(0,40)+\n  labs(title=\"Preschool count vs Preschool density\",\n       x=\"Preschool density(per km sq)\",\n       y=\"Preschool count\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#overview",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "Thematic mapping involves the use of map symbols to visualise selected properties of geographic features that are not naturally visible i.e. population, temperate, crime rate and property prices.\nGeovisualisation works by providing a geographical ideation to render a place, phenomenon or process visible. In this exercise, functional and truthful chloropleth maps will be plot using the tmappackage."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#importing-data-into-r",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#importing-data-into-r",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "The following datasets were used to create the chloropleth map:\n\nMaster Plan 2014 Subzone Boundary (Web) (“MP14_SUBZONE_WEB_PL”) from data.gov.sg in ESRI shapefile format. This is geospatial data comprising the geographical boundary of Singapore at the planning subzone level, based on URA Master Plan 2014.\nSingapore Residents by Planning Area/Subzone, Age Group, Sex and Type of Dwelling, June 2011 to 2020 (“respopagesextod2011to2020.csv”), from Department of Statistics, Singapore, in csv file format. This is an aspatial datafile, it does not contain any coordinates to the “MP14_SUBZONE_WEB_PL” shapefile.\n\n\n\n\nThe following code chunk uses the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile as a simple feature data frame.\n\nmpsz &lt;- st_read(dsn=\"data/geospatial\",\n                layer=\"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThe content of mpsz can be examined using the code below:\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n\n\nThe read_csv() function of readr package is used to import respopagesextod2011to2020.csv file and saved as a data frame called popdata:\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\n\n\n\nA data table with year 2020 values, comprising variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY is first prepared.\n\nYOUNG: age group 0 to 4 until age group 20 to 24\nECONOMY ACTIVE: age group 25-29 until age group 60-64\nAGED: age group 65 and above\nTOTAL: all age groups\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\n\nThe following data wrangling and transformation functions will be used:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by() and select() of dplyr package\n\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA,SZ,AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from=AG,\n              values_from=POP) %&gt;%\n  mutate(`YOUNG` = rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;%\n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\n           rowSums(.[13:15])) %&gt;%\n  mutate(`AGED`=rowSums(.[16:21])) %&gt;%\n  mutate(`TOTAL`=rowSums(.[3:21])) %&gt;%\n  mutate(`DEPENDENCY`=(`YOUNG`+`AGED`)/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`,`SZ`,`YOUNG`,`ECONOMY ACTIVE`,`AGED`,`TOTAL`,`DEPENDENCY`)\n\n\n\n\nBefore georelational join can be performed, an added step is needed to convert the values in PA and SZ to uppercase, as they are currently in both upper- and lowercase. On the other hand, the SUBZONE_N and PLN_AREA_N are in uppercase.\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate_at(.vars = vars(PA,SZ),\n            .funs = list(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE`&gt;0)\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name i.e. SUBZONE_N and SZ as the common identifier:\n\nmpsz_pop2020 &lt;- left_join(mpsz,popdata2020,by=c(\"SUBZONE_N\"=\"SZ\"))\n\nleft_join() of dplyr is used with the mpsz simple feature data frame as the left data table is used to ensure that the output will be a simple feature data frame.\nThe joined file is then saved:\n\nwrite_rds(mpsz_pop2020,\"data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#choropleth-mapping-geospatial-data-using-tmap",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#choropleth-mapping-geospatial-data-using-tmap",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "Choropleth mapping involves the symbolisation of enumeration units such as countries, provinces, states, counties or census units, using area patterns or graduated colours. For instance, a social scientist may require a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\nTwo approaches are used to prepare the thematic map using tmap:\n\nPlotting a thematic map quickly using qtm()\nPlotting a highly customisable thematic map using tmap elements\n\n\n\nqtm() is a concise way to provide a good default visualisation:\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020,\n    fill=\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nLearning points:\n\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used\nfill argument is used to map the attribute i.e. DEPENDENCY\n\n\n\n\nThe disadvantage of qtm() is that the aesthetics of individual layers are harder to control. tmap drawing elements are required to draw a high quality cartographic choropleth map:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          title = \"Dependency ratio\")+\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45,\n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha=0.5)+\n  tm_compass(type=\"8star\",size=2) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2) +\n  tm_credits(\"Source: Planning subzone boundary from Urban Redevelopment Authority (URA) and population data from Department of Statistics (DOS)\",\n          position = c(\"left\",\"bottom\")   )\n\n\n\n\n\n\n\n\nThe following section explains the tmap functions that were used to plot the above elements:\n\n\n\nThe basic building block of tmap is tm_shape() followed by one or more layer elements such as tm_fill() or tm_polygons()\nIn the code chunk below, tm_shape() is used to define the input data and tm_polygons() is used to draw the planning subzone polygons:\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n\n\n\n\n\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as Dependency to tm_polygons():\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nLearning points from tm_polygons():\n\ndefault interval binning used to draw the choropleth map is called “pretty”\ndefault color scheme used is YlOrRd of ColorBrewer\ndefault color for missing value is a grey shade\n\n\n\n\ntm_polygons() is a wrapper of tm_fill() and tm_border():\n\ntm_fill() shades the polygons by using the default color scheme\ntm_borders() add the borders of the shapefile onto the choropleth map\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nWith tm_borders(), light gray border lines are added onto the choropleth map:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")+\n  tm_borders(lwd = 0.1, alpha = 1)\n\n\n\n\n\n\n\n\n\nalpha argument defines the transparency number between 0 (totally transparent) to 1 (not transparent). by default, the alpha value is 1\ncol defines the border color\nlwd defines the border line width, default is 1\nlty defines the border line type, default is solid"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#data-classification-methods-of-tmap",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#data-classification-methods-of-tmap",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "Most choropleth maps employ methods of data classification, which aims to take a large number of observations and group them into data ranges or classes.\ntmap provides 10 data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher and jenks.\nThe style argument of tm_fill() or tm_polygons() will need to be used to define the data classification method.\n\n\nQuantile data classification with 5 classes:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=5,\n          style=\"quantile\")+\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\nEqual data classification method:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=5,\n          style=\"equal\")+\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nComparing the two methods above, the distribution of the quantile method is more even than the equal distribution method. Maps can lie, below are some other methods of classification and different number of classes being tested out.\n\n\nkmeans data classification with 5 classes:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=5,\n          style=\"kmeans\")+\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\nkmeans data classification with 2 classes:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=2,\n          style=\"kmeans\")+\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\nfisher data classification with 5 classes:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=5,\n          style=\"fisher\")+\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\nfisher data classification with 20 classes:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=20,\n          style=\"fisher\")+\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\n\n\n\nFor all built-in styles, category breaks are computed internally. To override the defaults, the breakpoints can be set explicitly by means of breaks argument to tm_fill().\n\n\n\n\n\n\nImportant\n\n\n\nIn tmap, breaks include a minimum and maximum. To end up with n categories, n+1 elements must be specified in the breaks option (values must be in increasing order)\n\n\nBefore setting the break points, it is important and good practice to obtain the descriptive statistics:\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n\n\nWith reference to the results above, we set the break points at 0.60, 0.70, 0.80 and 0.90. We also need to include a minimum and maximum, set at 0 and 1.00 respectively.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks=c(0,0.60,0.70,0.80,0.90,1.00)) +\n  tm_borders(alpha=0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#color-scheme",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#color-scheme",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "tmap support color ramps defined by the user or a set of predefined color ramps from the RColorBrewer package.\n\n\nThis is done by assigning the preferred color to palette argument of tm_fill():\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=6,\n          style=\"quantile\",\n          palette = \"Blues\")+\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\nTo reverse the color shading, we add a “-” prefix:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=6,\n          style = \"quantile\",\n          palette = \"-Blues\")+\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nThis also applies to other palette colors like Greens:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=6,\n          style = \"quantile\",\n          palette = \"Greens\")+\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=6,\n          style = \"quantile\",\n          palette = \"-Greens\")+\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#map-layouts",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#map-layouts",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "Map layout refers to the combination of all map elements into a cohesive map. Map elements include title, scale bar, compass, margins and aspect ratios. 1.4.3 Data classification methods of tmap and 1.4.4 Color scheme covered above affect how the map looks.\n\n\nLegend options include changing the placement, format and appearance of the legend:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style=\"jenks\",\n          palette = \"Blues\",\n          legend.hist = TRUE,\n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1)+\n  tm_layout(main.title=\"Distribution of Dependency Ratio by planning subzone \\n(Jenks Classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45,\n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\",\"bottom\"),\n            frame = FALSE)+\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\nA variety of layout settings that can be changed are called by using tmap_style():\nClassic style:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\")+\n  tm_borders(alpha = 0.5)+\n  tmap_style(\"classic\")\n\n\n\n\n\n\n\n\n\n\n\ntmap also provides arguments to draw other map furniture like compass, scale bar and grid lines i.e. through the use of tm_compass(), tm_scale_bar() and tm_grid():\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          title = \"No. of persons\")+\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45,\n            legend.width = 0.35,\n            frame = TRUE)+\n  tm_borders(alpha = 0.5)+\n  tm_compass(type = \"8star\",size=2)+\n  tm_scale_bar(width = 0.15)+\n  tm_grid(lwd = 0.1,alpha = 0.2)+\n  tm_credits(\"Source: Planning subzone boundary data from Urban Redevelopment Authority (URA) and Population Data from Department of Statistics (DOS)\",\n             position = c(\"left\",\"bottom\"))\n\n\n\n\n\n\n\n\nTo reset to default style:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          title = \"No. of persons\")+\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45,\n            legend.width = 0.35,\n            frame = TRUE)+\n  tm_borders(alpha = 0.5)+\n  tm_compass(type = \"8star\",size=2)+\n  tm_scale_bar(width = 0.15)+\n  tm_grid(lwd = 0.1,alpha = 0.2)+\n  tm_credits(\"Source: Planning subzone boundary data from Urban Redevelopment Authority (URA) and Population Data from Department of Statistics (DOS)\",\n             position = c(\"left\",\"bottom\"))+\n  tmap_style(\"white\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#drawing-small-multiple-choropleth-maps",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#drawing-small-multiple-choropleth-maps",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "Small multiple maps are also referred to as facet maps and comprise many maps arranged side-by-side and sometimes, stacked vertically. Facet maps enable the visualisation of how spatial relationships change with respect to another variable such as time.\nFacet maps can be plotted in 3 ways in tmap:\n\nby assigning multiple values to at least one of the aesthetic arguments\nby defining a group-by variable in tm_facets()\nby creating a multiple standalone maps with tmap_arrange()\n\n\n\nHere, we create facet maps by defining ncols in tm_fill():\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\",\"AGED\"),\n          style = \"equal\",\n          palette = \"Blues\")+\n  tm_layout(legend.position = c(\"right\",\"bottom\"))+\n  tm_borders(alpha = 0.5)+\n  tmap_style(\"white\")\n\n\n\n\n\n\n\n\nAnother example, we assign different styles and palette:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\",\"quantile\"),\n          palette = list(\"Blues\",\"Greens\"))+\n  tm_layout(legend.position = c(\"right\",\"bottom\"))\n\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0)+\n  tm_facets(by=\"REGION_N\",\n            free.coords = TRUE,\n            drop.shapes = TRUE)+\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\",\"center\"),\n            title.size = 20)+\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+\n  tm_polygons(\"YOUNG\",\n              style = \"quantile\",\n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+\n  tm_polygons(\"AGED\",\n              style = \"quantile\",\n              palette = \"Blues\")\n\ntmap_arrange(youngmap,agedmap,asp=1,ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#mapping-spatial-object-meeting-a-selection-criterion",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#mapping-spatial-object-meeting-a-selection-criterion",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "Instead of creating small multiple choropleth map, a selection function can also be used to map spatial objects meeting a selection criterion:\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\",])+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          legend.hist = TRUE,\n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1)+\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45,\n            legend.width = 5.0,\n            legend.position = c(\"right\",\"bottom\"),\n            frame = FALSE)+\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01B.html#references",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "tmap: Thematic Maps in R\ntmap\ntmap: get started!\ntmap: changes in version 2.0\ntmap: creating thematic maps in a flexible way (useR!2015)\nExploring and presenting maps with tmap (useR!2017)\n\n\n\n\n\nsf: Simple Features for R\nSimple Features for R: StandardizedSupport for Spatial Vector Data\nReading, Writing and Converting Simple Features\n\n\n\n\n\ndplyr\nTidy data\ntidyr: Easily Tidy Data with ‘spread()’ and ‘gather()’ Functions"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/data/geospatial/MPSZ-2019.html",
    "href": "In-class_Ex/In-class_Ex01/data/geospatial/MPSZ-2019.html",
    "title": "ISSS626-GAA",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "title": "In-class Exercise 1: Geospatial",
    "section": "",
    "text": "In-class Exercise 1\n\n\n\n\n\n\nTips for quarto page settings\n\n\n\nIf true,\n\neval: R will run code\necho: R will display code chunk\nfreeze: whatever document that has already been committed and pushed to github (and if there’s no changes), will no longer be rendereds\n\nIf false,\n\nmessage: avoid printing out warning messages (for added info, warning in markdown is the same as warning in message)"
  }
]