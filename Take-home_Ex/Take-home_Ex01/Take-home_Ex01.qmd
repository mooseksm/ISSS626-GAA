---
title: "Take-home Exercise 1"
author: "Kock Si Min"
date: September 2, 2024
date-modified: "last-modified"
toc: true
execute:
  eval: true
  echo: true
  freeze: true
  warning: false
  message: false
---

## 1.2 Data Acquisition

## 1.3 Installing and Launching R packages

-   [**sf**](https://r-spatial.github.io/sf/) for importing, managing, and processing vector-based geospatial data, and

-   [**spatstat**](https://spatstat.org/), which has a wide range of useful functions for point pattern analysis. In this hands-on exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer

-   [**raster**](https://cran.r-project.org/web/packages/raster/) which reads, writes, manipulates, analyses and model of gridded spatial data (i.e.Â raster). In this hands-on exercise, it will be used to convert image output generate by spatstat into raster format.

-   [**maptools**](https://cran.r-project.org/web/packages/maptools/index.html) which provides a set of tools for manipulating geographic data. In this hands-on exercise, we mainly use it to convert *Spatial* objects into *ppp* format of **spatstat**.

-   [**tmap**](https://cran.r-project.org/web/packages/tmap/index.html) which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using [leaflet](https://leafletjs.com/) API.

-   [**tidyverse**](https://www.tidyverse.org/) for performing data science tasks such as importing, wrangling and visualising data.

-   [**spNetwork**](https://cran.r-project.org/web/packages/spNetwork/index.html) which provides functions to perform Spatial Point Patterns Analysis such as kernel density estimation (KDE) and K-function on network. It can also be used to build spatial matrices (\`listw' objects like in 'spdep' package) to conduct any kind of traditional spatial analysis with spatial weights based on reticular distances.

The packages are loaded with the following code chunk:

```{r}
pacman::p_load(sf,spatstat,raster,tmap,tidyverse,spNetwork)
```

## Importing Data

```{r}
rdacc_sf <- read_csv("data/rawdata/thai_road_accident_2019_2022.csv") %>%
  filter(!is.na(longitude) & longitude != "",
         !is.na(latitude) & latitude != "") %>%
  st_as_sf(coords = c(
    "longitude", "latitude"),
    crs=4326) %>%
  st_transform(crs = 32647)
```

-   Note that **incident_datetime** and **report_datetime** are kept in **datetime field**, so that easier for manipulation later on i.e. extracting day of week, time of day using [lubridate](https://lubridate.tidyverse.org/reference/index.html). Can be useful in determining the occurrence of incidents at a particular timing i.e. peak hour.

-   when file is read in sf, can easily convert to ppp

-   dissecting the code - it comes in 4 chunks:

    -   the first to load the file

    -   the second to filter missing values

    -   the third is to get the coordinates and transform the crs

    -   transform it

-   without the filter function in between, running the code will give you error, this is because there are missing values for longitude and latitude

## In-class notes from Prof Kam:

-   An example is shown below to extract month and day of the *incident_datetime*:

```{r}
#| eval: false
rdacc_sf <- read_csv("data/rawdata/thai_road_accident_2019_2022.csv") %>%
  filter(!is.na(longitude) & longitude != "",
         !is.na(latitude) & latitude != "") %>%
  st_as_sf(coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 32467) %>%
  mutate(Month_num = month(incident_datetime)) %>%
  mutate(Month_fac = month(incident_datetime,
                       label = TRUE,
                       abbr = TRUE)) %>%
  mutate(dayofweek = day(incident_datetime))
```

-   The 2nd [month](https://lubridate.tidyverse.org/reference/month.html) line is more specific and has order since its a factor.
-   WGS 84 got [32467](https://epsg.io/32647) and [324648](https://epsg.io/32648) - take a good look at it before deciding which is the right one (above is just an example)
-   note that there's hidden problem inside the data i.e. missing values (can mutate and omit missing values in the code above)

```{r}
write_rds(rdacc_sf,"data/rds/rdacc_sf.rds")
```

-   write_rds will take care of all the objects within the dataset; once you got this file "#\| eval: false" to avoid running the data wrangling code

```{r}
acc <- read_rds("data/rds/rdacc_sf.rds")
```
