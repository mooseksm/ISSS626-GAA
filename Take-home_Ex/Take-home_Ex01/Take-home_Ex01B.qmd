---
title: "Take-home Exercise 1B"
author: "Kock Si Min"
date: September 2, 2024
date-modified: "last-modified"
toc: true
execute:
  eval: true
  echo: true
  freeze: true
  warning: false
  message: false
---

# Take-Home Exercise 1: Geospatial Analytics for Public Good (Part 1B)

#### Loading the necessary R packages and data created in [Part 1A](https://isss626-ksm.netlify.app/take-home_ex/take-home_ex01/take-home_ex01a)

```{r}
#| echo: false
# increased timeout to mitigate error issues during rendering
options(timeout = 3000)
```

```{r}
#| code-fold: true
pacman::p_load(sf,spatstat,raster,maptools,tmap,tidyverse,spNetwork,DT,forcats,ggthemes,plotly)
```

```{r}
#| code-fold: true
# loading datasets for analysis
#refer to Part 1A for earlier steps on data wrangling
roadacc <- read_rds("data/rds/roadacc.rds")
roadsbkk <- read_rds("data/rds/roadsbkk.rds")
provincedata32647 <- read_rds("data/rds/provincedata32647.rds")
roadacc_month_bkk <- read_rds("data/rds/roadacc_month_bkk.rds")
roadacc_month_sp <- read_rds("data/rds/roadacc_month_sp.rds")
roadacc_month_n <- read_rds("data/rds/roadacc_month_n.rds")
roadacc_month_pt <- read_rds("data/rds/roadacc_month_pt.rds")
roadacc_month_np <- read_rds("data/rds/roadacc_month_np.rds")
roadacc_month_ss <- read_rds("data/rds/roadacc_month_ss.rds")
```

## 7. Spatial Point Pattern Analysis (SPPA)

We will conduct a Spatial Point Pattern Analysis (SPPA) to evaluate the distribution of road accidents within the Bangkok Metropolitan Region (BMR).

The specific questions we would like to answer are as follows:

-   are the road accidents in BMR randomly distributed throughout the region?

-   if no, then where are the locations with higher concentration of road accidents?

Specifically, we will be carrying out the following SPPA methods:

-   First-order SPPA

-   Spatial analysis of road traffic accidents using Network SPPA methods.

-   Spatio-temporal analysis of road accidents using Temporal Network SPPA methods.

## 7.1 Data Wrangling for SPPA

### 7.1.1 Converting data to ppp format for Spatial Point Pattern Analysis

Before we carry out spatial point pattern analysis, we need to convert the data from sf format to ppp format:

```{r}
roadacc_ppp <- as.ppp(roadacc)
roadacc_ppp
```

The code chunk below plots *roadacc_ppp* for visualisation:

```{r}
plot(roadacc_ppp)
```

We take a quick look at the summary statistics of the *roadacc_ppp* object using the code chunk below:

```{r}
summary(roadacc_ppp)
```

### 7.1.2 Checking for duplicate points

In SPPA, a significant issue is the presence of duplicates as the statistical methodology used for spatial point patterns processes is based largely on the assumption that process are simple i.e. that the points cannot be coincident. We check for duplication in a *ppp* object via the code chunk below:

```{r}
any(duplicated(roadacc_ppp))
```

The data does not have any duplicated points.

### 7.1.3 Creating an *owin* object

When analysing spatial point patterns, it is a good practice to confine the analysis within a geographical area like Singapore boundary. In **spatstat**, an object called *owin* is specially designed to represent this polygonal region. The code chunk below is used to covert *provincedata32647* SpatialPolygon object into owin object of **spatstat**:

```{r}
provinceowin <- as.owin(provincedata32647)
```

The ouput object can be displayed by using *plot()* function

```{r}
plot(provinceowin)
```

```{r}
summary(provinceowin)
```

### 7.1.4 Combining point events object and owin object

We extract road accident events that are located within the BMR by using the code chunk below:

```{r}
roadacc_owin_ppp = roadacc_ppp[provinceowin]
```

```{r}
plot(roadacc_owin_ppp)
```

```{r}
summary(roadacc_owin_ppp)
```

## 7.2 First-order SPPA

The first-order SPPA will study how the intensity of road accidents vary across the BMR i.e. identify whether road accidents are more concentrated in areas due to underlying properties of the spatial environment.

For first-order SPPA, we will:

-   derive the **kernel density estimation (KDE)** layer for visualising and exploring the intensity of point processes,

-   perform **Confirmatory SPPA** using **Nearest Neighbour** statistics to determine if the road accidents are randomly distributed or influenced by underlying properties of the spatial environment.

### 7.2.1 Kernel Density Estimation (KDE)

We will proceed to compute the KDE of road accidents in the BMR. However, before we do so, we convert the unit of measurement to kilometer as the default unit of measurement of EPSG: 32647 is in metres, which would make the values hard to comprehend:

```{r}
roadacc_owin_ppp.km <- rescale.ppp(roadacc_owin_ppp,1000,"km")
```

### 7.2.1.1 Computing KDE using automatic bandwidth selection

We will derive KDE using *bw.diggle()* of spatstat as it is an automatic bandwidth selection method and does not require a fixed bandwidth to be defined.

```{r}
kde_roadacc_bw <- density(roadacc_owin_ppp.km,
                          sigma = bw.diggle,
                          edge = TRUE,
                          kernel = "gaussian")
```

```{r}
plot(kde_roadacc_bw)
```

We can retrieve the bandwidth used to compute the KDE layer with the code chunk below:

```{r}
bw <- bw.diggle(roadacc_owin_ppp)
bw
```

### 8.1.1 Converting KDE output into grid object

We convert the KDE output for mapping purposes:

```{r}
gridded_kde_roadacc_bw <- as.SpatialGridDataFrame.im(kde_roadacc_bw)
spplot(gridded_kde_roadacc_bw)
```

### 8.1.2 Converting gridded output into raster

Next, we will convert the gridded KDE object into a RasterLayer object using *raster()* of **raster package**:

```{r}
kde_roadacc_bw_raster <- raster(kde_roadacc_bw)
```

We view the properties of *kde_roadacc_bw_raster* RasterLayer:

```{r}
kde_roadacc_bw_raster
```

Note that the CRS property is NA.

### 8.1.3 Assigning projection system

We hence assign CRS information to the *kde_roadacc_bw_raster* RasterLayer:

```{r}
projection(kde_roadacc_bw_raster) <- CRS("+init=EPSG:32647")

kde_roadacc_bw_raster
```

The CRS property is now completed.

### 8.1.4 Visualising the output in tmap

We will display the raster in cartographic quality map using **tmap package**:

```{r}
tmap_mode('plot')
tm_shape(kde_roadacc_bw_raster)+   
  tm_raster("layer",palette = "viridis")+   
  tm_layout(legend.outside = TRUE,             
            legend.outside.position = "right",             
            legend.position = c("right","bottom"),             
            main.title = "Distribution of road accidents (bw.diggle)", 
            main.title.size = 0.8,             
            frame = FALSE)
```

From the plot above, we note that road accidents occur more intensely along the road lines in Bangkok and Samut Prakan. To better understand how the intensity of road accidents occur across the BMR, we will extract the six provinces as different study areas for analysis and comparison in the next section.

### 8.2 Comparing Spatial Point Patterns using KDE

### 8.2.1 Extracting study areas

The code chunk will be used to extract the different provinces as different study areas:

```{r}
#| eval: false
bkk <- provincedata32647 %>%
  filter(ADM1_EN == "Bangkok")
np <- provincedata32647 %>% 
  filter(ADM1_EN == "Nakhon Pathom") 
n <- provincedata32647 %>%   
  filter(ADM1_EN == "Nonthaburi") 
pt <- provincedata32647 %>%   
  filter(ADM1_EN == "Pathum Thani") 
sp <- provincedata32647 %>%   
  filter(ADM1_EN == "Samut Prakan") 
ss <- provincedata32647 %>%   
  filter(ADM1_EN == "Samut Sakhon")
```

### 8.2.2 Creating owin object for each study area

```{r}
#| eval: false
bkk_owin = as.owin(bkk)
np_owin = as.owin(np) 
n_owin = as.owin(n) 
pt_owin = as.owin(pt) 
sp_owin = as.owin(sp) 
ss_owin = as.owin(ss)
```

### 8.2.3 Combining road accident points and study area

By using the code chunk below, we are able to extract road accidents that is within the specific province to carry out our analysis later on.

```{r}
#| eval: false
roadacc_bkk_ppp = roadacc_ppp[bkk_owin]
roadacc_np_ppp = roadacc_ppp[np_owin]
roadacc_n_ppp = roadacc_ppp[n_owin]
roadacc_pt_ppp = roadacc_ppp[pt_owin]
roadacc_sp_ppp = roadacc_ppp[sp_owin]
roadacc_ss_ppp = roadacc_ppp[ss_owin]
```

Next, *rescale.ppp()* function is used to transform the unit of measurement from metres to kilometres as EPSG: 32647 is in metres which would produce density values that are too small to comprehend.

```{r}
#| eval: false
roadacc_bkk_ppp.km = rescale.ppp(roadacc_bkk_ppp,1000,"km")
roadacc_np_ppp.km = rescale.ppp(roadacc_np_ppp,1000,"km")
roadacc_n_ppp.km = rescale.ppp(roadacc_n_ppp,1000,"km")
roadacc_pt_ppp.km = rescale.ppp(roadacc_pt_ppp,1000,"km")
roadacc_sp_ppp.km = rescale.ppp(roadacc_sp_ppp,1000,"km")
roadacc_ss_ppp.km = rescale.ppp(roadacc_ss_ppp,1000,"km")
```

We save and load these files to minimise re-running the codes above:

```{r}
#| eval: false
#| code-fold: true
write_rds(roadacc_bkk_ppp.km,"data/rds/roadacc_bkk_ppp.km.rds")
write_rds(roadacc_np_ppp.km,"data/rds/roadacc_np_ppp.km.rds")
write_rds(roadacc_n_ppp.km,"data/rds/roadacc_n_ppp.km.rds")
write_rds(roadacc_pt_ppp.km,"data/rds/roadacc_pt_ppp.km.rds")
write_rds(roadacc_sp_ppp.km,"data/rds/roadacc_sp_ppp.km.rds")
write_rds(roadacc_ss_ppp.km,"data/rds/roadacc_ss_ppp.km.rds")
```

```{r}
roadacc_bkk_ppp.km <- read_rds("data/rds/roadacc_bkk_ppp.km.rds")
roadacc_np_ppp.km <- read_rds("data/rds/roadacc_np_ppp.km.rds")
roadacc_n_ppp.km <- read_rds("data/rds/roadacc_n_ppp.km.rds")
roadacc_pt_ppp.km <- read_rds("data/rds/roadacc_pt_ppp.km.rds")
roadacc_sp_ppp.km <- read_rds("data/rds/roadacc_sp_ppp.km.rds")
roadacc_ss_ppp.km <- read_rds("data/rds/roadacc_ss_ppp.km.rds")
```

We then plot the 6 provinces and the locations of the road accidents:

```{r}
par(mfrow=c(2,3))
plot(roadacc_bkk_ppp.km,main="Bangkok")
plot(roadacc_np_ppp.km,main="Nakhon Pathom")
plot(roadacc_n_ppp.km,main="Nonthaburi") 
plot(roadacc_pt_ppp.km,main="Pathum Thani")
plot(roadacc_sp_ppp.km,main="Samut Prakan")
plot(roadacc_ss_ppp.km,main="Samut Sakhon")
```

### 8.2.4 Computing KDE for each study area

We will also derive KDE using *bw.diggle()* of spatstat for all six provinces:

```{r}
#| eval: false
kde_bkk_bw <- density(roadacc_bkk_ppp.km,
                      sigma = bw.diggle,
                      edge = TRUE,
                      kernel = "gaussian")
kde_np_bw <- density(roadacc_np_ppp.km,
                     sigma = bw.diggle,
                     edge = TRUE,
                     kernel = "gaussian")
kde_n_bw <- density(roadacc_n_ppp.km,
                    sigma = bw.diggle,
                    edge = TRUE,
                    kernel = "gaussian")
kde_pt_bw <- density(roadacc_pt_ppp.km,
                     sigma = bw.diggle,
                     edge = TRUE,
                     kernel = "gaussian")
kde_sp_bw <- density(roadacc_sp_ppp.km,
                     sigma = bw.diggle,
                     edge = TRUE,
                     kernel = "gaussian")
kde_ss_bw <- density(roadacc_ss_ppp.km,
                     sigma = bw.diggle,
                     edge = TRUE,
                     kernel = "gaussian")
```

We also save and load these as new rds files to minimise re-running the code above:

```{r}
#| eval: false
#| code-fold: true
write_rds(kde_bkk_bw,"data/rds/kde_bkk_bw.rds")
write_rds(kde_np_bw,"data/rds/kde_np_bw.rds")
write_rds(kde_n_bw,"data/rds/kde_n_bw.rds")
write_rds(kde_pt_bw,"data/rds/kde_pt_bw.rds")
write_rds(kde_sp_bw,"data/rds/kde_sp_bw.rds")
write_rds(kde_ss_bw,"data/rds/kde_ss_bw.rds")
```

```{r}
kde_bkk_bw <- read_rds("data/rds/kde_bkk_bw.rds")
kde_np_bw <- read_rds("data/rds/kde_np_bw.rds")
kde_n_bw <- read_rds("data/rds/kde_n_bw.rds")
kde_pt_bw <- read_rds("data/rds/kde_pt_bw.rds")
kde_sp_bw <- read_rds("data/rds/kde_sp_bw.rds")
kde_ss_bw <- read_rds("data/rds/kde_ss_bw.rds")
```

Next, we will convert the KDE object into a RasterLayer object using *raster()* of **raster package** and assign the CRS of EPSG 32647:

::: panel-tabset
## Bangkok

```{r}
kde_bkk_bw_raster <- raster(kde_bkk_bw)
projection(kde_bkk_bw_raster) <- CRS("+init=EPSG:32647")  
kde_bkk_bw_raster
```

## Nakhon Pathom

```{r}
kde_np_bw_raster <- raster(kde_np_bw)
projection(kde_np_bw_raster) <- CRS("+init=EPSG:32647")  
kde_np_bw_raster
```

## Nonthaburi

```{r}
kde_n_bw_raster <- raster(kde_n_bw)
projection(kde_n_bw_raster) <- CRS("+init=EPSG:32647")  
kde_n_bw_raster
```

## Pathum Thani

```{r}
kde_pt_bw_raster <- raster(kde_pt_bw)
projection(kde_pt_bw_raster) <- CRS("+init=EPSG:32647")  
kde_pt_bw_raster
```

## Samut Prakan

```{r}
kde_sp_bw_raster <- raster(kde_sp_bw)
projection(kde_sp_bw_raster) <- CRS("+init=EPSG:32647")  
kde_sp_bw_raster
```

## Samut Sakhon

```{r}
kde_ss_bw_raster <- raster(kde_ss_bw)
projection(kde_ss_bw_raster) <- CRS("+init=EPSG:32647")
kde_ss_bw_raster
```
:::

### 8.1.4 Visualising the output in tmap

We will display the raster in cartographic quality map using **tmap package**:

::: panel-tabset
## Bangkok

```{r}
tm_shape(kde_bkk_bw_raster)+
  tm_raster("layer",palette = "viridis")+
  tm_layout(legend.outside = TRUE,
            legend.outside.position = "right",
            legend.position = c("right","bottom"),
            main.title = "Distribution of road accidents in Bangkok",
            main.title.size = 0.8,
            frame = FALSE)
```

## Nakhon Pathom

```{r}
tm_shape(kde_np_bw_raster)+
  tm_raster("layer",palette = "viridis")+
  tm_layout(legend.outside = TRUE,
            legend.outside.position = "right",
            legend.position = c("right","bottom"),
            main.title = "Distribution of road accidents in Nakhon Pathom",
            main.title.size = 0.8,
            frame = FALSE)
```

## Nonthaburi

```{r}
tm_shape(kde_n_bw_raster)+
  tm_raster("layer",palette = "viridis")+
  tm_layout(legend.outside = TRUE,
            legend.outside.position = "right",
            legend.position = c("right","bottom"),
            main.title = "Distribution of road accidents in Nonthaburi",
            main.title.size = 0.8,
            frame = FALSE)
```

## Pathum Thani

```{r}
tm_shape(kde_pt_bw_raster)+
  tm_raster("layer",palette = "viridis")+
  tm_layout(legend.outside = TRUE,
            legend.outside.position = "right",
            legend.position = c("right","bottom"),
            main.title = "Distribution of road accidents in Pathum Thani",
            main.title.size = 0.8,
            frame = FALSE)
```

## Samut Prakan

```{r}
tm_shape(kde_sp_bw_raster)+
  tm_raster("layer",palette = "viridis")+
  tm_layout(legend.outside = TRUE,
            legend.outside.position = "right",
            legend.position = c("right","bottom"),
            main.title = "Distribution of road accidents in Samut Prakan",
            main.title.size = 0.8,
            frame = FALSE)
```

## Samut Sakhon

```{r}
tm_shape(kde_ss_bw_raster)+
  tm_raster("layer",palette = "viridis")+
  tm_layout(legend.outside = TRUE,
            legend.outside.position = "right",
            legend.position = c("right","bottom"),
            main.title = "Distribution of road accidents in Samut Sakhon",
            main.title.size = 0.8,
            frame = FALSE)
```
:::

From the plots above, we note the maximum KDE for each province (in descending order) and details for each province as follows:

-   [Samut Prakan]{.underline} - up to 600 to 800. Most of the road accidents optically seem to occur at 3 segments.

-   [Bangkok]{.underline} - up to 500 to 600. Most of the road accidents optically seem to occur at major road lines.

-   [Samut Sakhon]{.underline}: Max density up to 300 to 350. Most of the road accidents seem to occur along the same major road.

-   [Pathum Thani]{.underline} - up to 200 to 250. Most of the road accidents seem to occur along the same major road.

-   [Nonthaburi]{.underline} - up to 150 to 200. Most of the road accidents optically seem to be scattered.

-   [Nakhon Pathom]{.underline} - up to 50 to 60. Most of the road accidents optically seem to be scattered.

Further comments are as follows:

-   Notably, while Bangkok is a known tourist destination/major urban hub, it ranks second to Samut Prakan in terms of road accident density.
-   Road accidents seem more scattered in Nonthaburi and Nakhon Pathom which suggest that there could be more complex road systems in these areas where accidents could occur at various points.

## 9. Nearest Neighbour Analysis

After running KDE which shows the density of road accidents over the BMR, we will perform the Clark-Evans test of aggregation to statistically validate the degree of spatial clustering or dispersion of the road accident points by comparing the observed mean nearest neighbor distance with the expected average distance between neighbours in a hypothetical random distribution.

The test hypotheses are:

H0: The distribution of road accidents is randomly distributed.

H1: The distribution of road accidents is not randomly distributed.

The 95% confidence interval will be used.

### 9.1 Testing spatial point patterns using Clark and Evans Test

### 9.1.1 Nearest Neighbour Analysis for overall data

```{r}
clarkevans.test(roadacc_owin_ppp.km,
                correction = "none",
                clipregion = "province_owin",
                alternative = c("clustered"),
                nsim = 999)
```

-   Since p-value is less than 0.05, **there is sufficient evidence to reject the null hypothesis H0** that the distribution of road accidents is randomly distributed.

-   This is further supported by the R value of 0.19092. As this R value is less than 1, it indicates that **the pattern exhibits clustering and that the road accidents tend to occur close to one another and not in a dispersed/regular manner.**

### 9.1.2 Nearest Neighbour Analysis for each province

::: panel-tabset
## Bangkok

```{r}
clarkevans.test(roadacc_bkk_ppp.km,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```

## Nakhon Pathom

```{r}
clarkevans.test(roadacc_np_ppp.km,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```

## Nonthaburi

```{r}
clarkevans.test(roadacc_n_ppp.km,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```

## Pathum Thani

```{r}
clarkevans.test(roadacc_pt_ppp.km,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```

## Samut Prakan

```{r}
clarkevans.test(roadacc_sp_ppp.km,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```

## Samut Sakhon

```{r}
clarkevans.test(roadacc_ss_ppp.km,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```
:::

Based on the results above, for which all R values are less than 1 and all p-values are less than 0.05, we **reject the null hypothesis** at 95% confidence interval. **There is sufficient evidence to indicate that the distribution of road accidents in all provinces is not randomly distributed and instead exhibit clustering.**

## 10. Network Constrained SPPA

Network constrained SPPA (NetSPPA) is a collection of SAPPA methods specially developed for analysing spatial point events that occur on or alongside a network. In this case, it can be used for the analysis of road accidents that occur on or alongside the road lines network in the BMR.

Before we go into the analysis, we visualise the geospatial data (to save bandwidth, we directly use plot mode):

```{r}
tmap_mode('plot')
tm_shape(roadacc)+
  tm_dots()+
  tm_shape(roadsbkk)+
  tm_lines()
```

### 10.1 Network KDE (NKDE) Analysis

NKDE is used to visualise and explore the intensity of point processes i.e. road accidents along the network i.e. road lines.

### 10.1.1 Preparing the lixels objects

Before computing NKDE, the *roadsbkk* object needs to be cut into lixels with a specified minimal distance. We do this using [lixelize_lines()](https://jeremygelb.github.io/spNetwork/reference/lixelize_lines.html) of **spNetwork.**

However, to determine the appropriate lixel size to use, we need to consider several factors such as the scale of our study, density of accidents. road network characteristics. Some reasons are provided below:

-   [scale of study]{.underline}: shorter lixels may allow capturing of finer details for study of road accidents at a local scale however longer lixels may be more suitable to study patterns over larger distances.

-   [density of accidents]{.underline}: high road accident density areas may benefit from shorter lixels that would enable the capture of precise clustering on small road segments. however, long lixels can help to smooth out analysis for less dense areas and avoid overrepresenting sparsely populated segments

-   [road network characteristics]{.underline}: more complex road networks may benefit from shorter lixels to indicate the finer details of the road lines while larger road networks may work better with longer lixels.

### 10.1.1.1 Nearest Neighbour Distance to determine lixel size

To determine the appropriate lixel size, we can use nearest neighbour distance to understand the distance between road lines. It can help to ensure that we do not choose too small a lixel size i.e. ensuring that lixels would at least contain one accident.

We first calculate the mean nearest neighbour distance between road accident points along the road lines in BMR. We do this by running *nndist()* function on our ppp object *roadacc_owin_ppp.km*:

```{r}
nnd_dist <- nndist(roadacc_owin_ppp.km)
```

```{r}
summary(nnd_dist)
```

The median and max distance between road lines in BMR is 0.01303 km and 7.73467 km respectively.

As a start, we hence set the lixel length to XXm (as *roadsbkk* is in EPSG 32647 for which the unit of measurement is in metres) and the minimum length of a lixel to NULL.

```{r}
lixels <- lixelize_lines(roadsbkk,
                         700,
                         mindist = NULL)
```

### 10.1.2 Generating line centre points

Next, *lines_center()* of **spNetwork** will be used to generate a SpatialPointsDataFrame (i.e. samples) with line centre points as shown in the code chunk below:

```{r}
samples <- lines_center(lixels)
```

The points are located at center of the line based on the length of the line.

### 10.1.3 Performing NKDE

We will compute NKDE using the code chunk below:

```{r}
#| eval: false
densities <- nkde(roadsbkk,
                  events = roadacc,
                  w = rep(1,nrow(roadacc)),
                  samples = samples,
                  kernel_name = "quartic",
                  bw = 13,
                  div = "bw",
                  method = "simple",
                  digits = 1,
                  tol = 1,
                  grid_shape = c(5,5),
                  max_depth = 8,
                  agg = 5,
                  sparse = TRUE,
                  verbose = FALSE)
```

### 10.1.4 Visualising NKDE

Before visualising NKDE values, we use the code chunk below to insert the computed density values into *samples* and *lixels* objects as density field. We also multiply the densities by 1000 to rescale the density values from metres (as the EPSG 32647 projection system is in metres which make the computed density values very small and hard to comprehend) to number of events per kilometer:

```{r}
#| eval: false
samples$density <- densities*1000 
lixels$density <- densities*1000
```

## 11. Temporal Network SPPA

With reference to this site, similar steps were taken to derive the temporal network SPPA for road accidents in BMR.

= WIP =
