{
  "hash": "778d38b72b21b8c0cf588862a73c31a8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home Exercise 2\"\nauthor: \"Kock Si Min\"\ndate: October 2, 2024\ndate-modified: \"last-modified\"\ntoc: true\nexecute:\n  eval: true\n  echo: true\n  freeze: true\n  warning: false\n  message: false\n---\n\n\n# Take-home Exercise 2: Discovering impacts of COVID-19 on Thailand tourism economy at the province level using spatial and spatio-temporal statistics\n\n## 1. Setting the Scene\n\nTourism is one of Thailand’s largest industries, accounting for \\~20% of the gross domestic product (GDP). In 2019, Thailand earned US\\$90 billion from domestic and international tourism, but the COVID-19 pandemic caused revenues to crash to US\\$24 billion in 2020.\n\nThe figure below shows the total revenue receipt from tourism sector between Jan 2019 to Feb 2023, and indicates that the revenue from tourism industry has been gradually recovering since Sep 2021.\n\n![](images/clipboard-378385426.png){width=\"460\"}\n\nHowever, it is important to note that the tourism economy of Thailand is not evenly distributed. The figure below reveals that the tourism economy of Thailand in 2019 was mainly focused on five provinces, namely Bangkok, Phuket, Chon Buri, Krabi and Chiang Mai.\n\n## 2. Objectives\n\nThe objectives of this take-home exercise will be to discover:\n\n-   if the key indicators of tourism economy of Thailand are independent from space and space and time.\n\n-   If the tourism economy is indeed spatial and spatio-temporal dependent, and if so, where the clusters, outliers and emerging hot spot/cold spot areas are.\n\n## 3. The Task\n\nThe specific tasks of this take-home exercise are as follows:\n\n-   Using appropriate function of **sf** and **tidyverse**, prepare the following geospatial data layer:\n\n    -   a study area layer in sf polygon features. It must be at [province level](https://en.wikipedia.org/wiki/Provinces_of_Thailand) (including Bangkok) of Thailand.\n\n    -   a tourism economy indicators layer within the study area in sf polygon features.\n\n    -   a derived tourism economy indicator layer in [**spacetime s3 class of sfdep**](https://sfdep.josiahparry.com/articles/spacetime-s3). Keep the time series at **month and year levels**.\n\n-   Using the extracted data, perform global spatial autocorrelation analysis using [sfdep methods](https://is415-gaa-tskam.netlify.app/in-class_ex/in-class_ex05/in-class_ex05-glsa).\n\n-   Using the extracted data, perform local spatial autocorrelation analysis using [sfdep methods](https://r4gdsa.netlify.app/chap10.html).\n\n-   Using the extracted data, perform emerging hotspot analysis using [sfdep methods](https://is415-gaa-tskam.netlify.app/in-class_ex/in-class_ex05/in-class_ex05-ehsa).\n\n-   Describe the spatial patterns revealed by the analysis above.\n\n## 4. Installing and Loading the necessary R packages\n\nWe use the following code chunk to install and load the necessary R packages for our analysis:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, sfdep, tmap, tidyverse, knitr, plotly, Kendall, VIM, naniar, DT)\n```\n:::\n\n\n## 5. The Data\n\nTwo data sets shall be used:\n\n-   [Thailand Domestic Tourism Statistics](https://www.kaggle.com/datasets/thaweewatboy/thailand-domestic-tourism-statistics) at Kaggle - **version 2** of the data set will be used.\n\n-   [Thailand - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?) at HDX - the province boundary data set will be used.\n\n### 5.1 Thailand Domestic Tourism Statistics\n\n### 5.1.1 Importing the csv file\n\nThe code chunk below uses [`read_csv()`](https://readr.tidyverse.org/reference/read_delim.html) of readr package to load the Thailand Domestic Tourism Statistics:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism <- read_csv(\"data/rawdata/thailand_domestic_tourism_2019_2023_ver2.csv\")\n```\n:::\n\n\nThe *thai_tourism* data has 30,800 rows and 7 variables, namely *date, province_thai, province_eng, region_thai, region_eng, variable* and *value.*\n\n### 5.1.2 Cleaning the data\n\n### 5.1.2.1 Dropping unwanted variables\n\nWe will drop the columns *province_thai* and *region_thai* as these variables are in the Thai language which we do not understand and hence will not be helpful for our analysis:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism <- tourism[,!names(tourism) %in% c(\"province_thai\",\"region_thai\")]\n```\n:::\n\n\n### 5.1.2.2 Determine the presence of missing data\n\nWe determine the presence of missing values using the *vis_miss()* function of the [naniar](https://cran.r-project.org/web/packages/naniar/vignettes/getting-started-w-naniar.html) package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvis_miss(tourism)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nFrom the output above, we note that there are no missing data.\n\n### 5.1.2.3 Creating new year, month and day variables\n\nFrom the code chunk below, we note that the *date* variable in *tourism* data frame is in the Date vector format:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(tourism$date)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Date\"\n```\n\n\n:::\n:::\n\n\nWe form new variables *year* and *month* using the lubridate package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism <- tourism %>%\n  mutate(year_month = format(floor_date(date,\"month\"),\"%Y-%m\"),\n         year = year(date),\n         month = month(date,\n                       label = TRUE,\n                       abbr = TRUE),\n.before = 2)\n```\n:::\n\n\n### 5.1.2.4 Determine the distribution of provinces and corresponding regions\n\nWe first study the distribution of regions in the data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(tourism, \n       aes(x = fct_reorder(region_eng, region_eng, .fun = length))) + \n  geom_bar() +\n  labs(title = \"Distribution of domestic tourism statistics across regions\", x = \"Regions\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nFrom the output above, we note that there 5 different types of regions represented, notably the western region is not represented in the data.\n\nWe take a more detailed look by determining the unique provinces represented in the data and their corresponding regions. This step aims to check for two things:\n\n-   whether there are any duplicate data entries i.e. entries that are meant to represent the same province but have spelling errors.\n\n-   whether the regions for the provinces are accurately indicated\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism_unique <- tourism %>%\n  select(province_eng,region_eng) %>%\n  distinct() %>%\n  arrange(region_eng,province_eng)\n\ntourism_unique\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 77 × 2\n   province_eng             region_eng\n   <chr>                    <chr>     \n 1 Ang Thong                central   \n 2 Bangkok                  central   \n 3 Chainat                  central   \n 4 Kanchanaburi             central   \n 5 Lopburi                  central   \n 6 Nakhon Pathom            central   \n 7 Nonthaburi               central   \n 8 Pathum Thani             central   \n 9 Phetchaburi              central   \n10 Phra Nakhon Si Ayutthaya central   \n# ℹ 67 more rows\n```\n\n\n:::\n:::\n\n\nFrom the output above, we note that all 77 Thailand provinces are represented in the data, and that there are no spelling errors/misrepresented provinces.\n\nHowever, with reference to the [source on provinces in Thailand](https://en.wikipedia.org/wiki/Provinces_of_Thailand), we note a few mistakes in the regions indicated for the provinces.\n\n-   Kanchanaburi, Phetchaburi, Prachuap Khiri Khan and Ratchaburi are stated as being in the central region but actually reside in the west region\n\n-   Nakhon Nayok is stated as being in the east region but actually resides in the central region\n\n-   The *east_northeast* region can actually be renamed as *northeast* region for clarity and consistency with how detailed the other provinces are labelled\n\n-   Kamphaeng Phet, Nakhon Sawan, Phetchabun, Phichit, Phitsanulok, Sukhothai and Uthai Thani are stated as being in the north region but actually reside in central region\n\n-   Tak is stated as being in the north region but actually resides in the west region\n\n-   Sisaket is stated as being in the south region but actually resides in the northeast region\n\n### 5.1.2.4.1 Correcting the erroneous regions of provinces\n\nWe use the code chunk below to rename the \"east_northeast\" region to just \"northeast\" and correct the erroneous regions of the provinces mentioned above:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism <- tourism %>%\n  mutate(region_eng = case_when(\n    region_eng == \"east_northeast\" ~ \"northeast\",\n    province_eng %in% c(\"Kanchanaburi\", \"Phetchaburi\", \"Prachuap Khiri Khan\", \"Ratchaburi\", \"Tak\") ~ \"west\",\n    province_eng %in% c(\"Nakhon Nayok\",\"Kamphaeng Phet\",\"Nakhon Sawan\",\"Phetchabun\",\"Phichit\",\"Phitsanulok\",\"Sukhothai\",\"Uthai Thani\") ~ \"central\",\n    province_eng == \"Sisaket\" ~ \"northeast\",\n    TRUE ~ region_eng\n  ))\n```\n:::\n\n\nWe check by generating the data table of provinces and their corresponding regions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism_unique <- tourism %>%\n  select(province_eng,region_eng) %>%\n  distinct() %>%\n  arrange(region_eng,province_eng)\n\ndatatable(tourism_unique)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-949410d61eeea0505b74\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-949410d61eeea0505b74\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\",\"62\",\"63\",\"64\",\"65\",\"66\",\"67\",\"68\",\"69\",\"70\",\"71\",\"72\",\"73\",\"74\",\"75\",\"76\",\"77\"],[\"Ang Thong\",\"Bangkok\",\"Chainat\",\"Kamphaeng Phet\",\"Lopburi\",\"Nakhon Nayok\",\"Nakhon Pathom\",\"Nakhon Sawan\",\"Nonthaburi\",\"Pathum Thani\",\"Phetchabun\",\"Phichit\",\"Phitsanulok\",\"Phra Nakhon Si Ayutthaya\",\"Samut Prakan\",\"Samut Sakhon\",\"Samut Songkhram\",\"Saraburi\",\"Sing Buri\",\"Sukhothai\",\"Suphan Buri\",\"Uthai Thani\",\"Chachoengsao\",\"Chanthaburi\",\"Chonburi\",\"Prachinburi\",\"Rayong\",\"Sa Kaeo\",\"Trat\",\"Chiang Mai\",\"Chiang Rai\",\"Lampang\",\"Lamphun\",\"Mae Hong Son\",\"Nan\",\"Phayao\",\"Phrae\",\"Uttaradit\",\"Amnat Charoen\",\"Bueng Kan\",\"Buriram\",\"Chaiyaphum\",\"Kalasin\",\"Khon Kaen\",\"Loei\",\"Maha Sarakham\",\"Mukdahan\",\"Nakhon Phanom\",\"Nakhon Ratchasima\",\"Nong Bua Lamphu\",\"Nong Khai\",\"Roi Et\",\"Sakon Nakhon\",\"Sisaket\",\"Surin\",\"Ubon Ratchathani\",\"Udon Thani\",\"Yasothon\",\"Chumphon\",\"Krabi\",\"Nakhon Si Thammarat\",\"Narathiwat\",\"Pattani\",\"Phang Nga\",\"Phatthalung\",\"Phuket\",\"Ranong\",\"Satun\",\"Songkhla\",\"Surat Thani\",\"Trang\",\"Yala\",\"Kanchanaburi\",\"Phetchaburi\",\"Prachuap Khiri Khan\",\"Ratchaburi\",\"Tak\"],[\"central\",\"central\",\"central\",\"central\",\"central\",\"central\",\"central\",\"central\",\"central\",\"central\",\"central\",\"central\",\"central\",\"central\",\"central\",\"central\",\"central\",\"central\",\"central\",\"central\",\"central\",\"central\",\"east\",\"east\",\"east\",\"east\",\"east\",\"east\",\"east\",\"north\",\"north\",\"north\",\"north\",\"north\",\"north\",\"north\",\"north\",\"north\",\"northeast\",\"northeast\",\"northeast\",\"northeast\",\"northeast\",\"northeast\",\"northeast\",\"northeast\",\"northeast\",\"northeast\",\"northeast\",\"northeast\",\"northeast\",\"northeast\",\"northeast\",\"northeast\",\"northeast\",\"northeast\",\"northeast\",\"northeast\",\"south\",\"south\",\"south\",\"south\",\"south\",\"south\",\"south\",\"south\",\"south\",\"south\",\"south\",\"south\",\"south\",\"south\",\"west\",\"west\",\"west\",\"west\",\"west\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>province_eng<\\/th>\\n      <th>region_eng<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"province_eng\",\"targets\":1},{\"name\":\"region_eng\",\"targets\":2}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\nRe-plotting the distribution of domestic tourism statistics across the regions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(tourism, \n       aes(x = fct_reorder(region_eng, region_eng, .fun = length))) + \n  geom_bar(fill = \"skyblue\") +\n  labs(title = \"Distribution of domestic tourism statistics across regions\", x = \"Regions\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nWe note that most of the domestic tourism statistics come from the central region, followed by northeast, south, north, east and finally the west region.\n\n### 5.1.2.5 Determine the distribution of variables and corresponding values\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(tourism, \n       aes(x = fct_reorder(variable, variable, .fun = length))) + \n  geom_bar(fill = \"skyblue\") +\n  labs(title = \"Distribution of Variable\", x = \"Variable\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nWe note that there are 8 different types of variables:\n\n| S/N   | Variable           | Definition                                                                  |\n|-----------------|-----------------|--------------------------------------|\n| **1** | no_tourist_all     | The total number of domestic tourists who visited the province              |\n| **2** | no_tourist_thai    | The number of Thai tourists who visited the province                        |\n| **3** | no_tourist_foreign | The number of foreign tourists who visited the province                     |\n| **4** | no_tourist_stay    | The total number of occupied hotel rooms in the province                    |\n| **5** | ratio_tourist_stay | The percentage of occupied travel accommodation in the province             |\n| **6** | revenue_all        | The revenue generated by the tourism industry in the province, in Thai Baht |\n| **7** | revenue_foreign    | The revenue generated by foreign tourists in the province, in Thai Baht     |\n| **8** | revenue_thai       | The revenue generated by Thai tourists in the province, in Thai Baht        |\n\n### 5.1.2.5.1 pivot_wider() to expand variables as individual columns\n\nWe utilise the *pivot_wider()* function to separate the different variable types as individual columns:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism_wider <- tourism %>%\n  pivot_wider(names_from = variable, values_from = value)\n```\n:::\n\n\n### 5.1.2.5.2 Checking the revenue figures\n\nBased on the definition of the different variable types, we note that \"revenue_all\" should equal to the sum of \"revenue_foreign\" and \"revenue_thai\". We check through the data using the code chunk below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrevenue_numbers <- tourism_wider %>%\n  group_by(province_eng,year_month) %>%\n  summarise(\n    sum_revenue = sum(revenue_foreign, revenue_thai, na.rm = TRUE),\n  revenue_all = sum(revenue_all,na.rm = TRUE),\n            .groups = \"drop\") %>%\n  mutate(is_rev_equal = sum_revenue == revenue_all)\n\nrevenue_numbers\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3,850 × 5\n   province_eng  year_month sum_revenue revenue_all is_rev_equal\n   <chr>         <chr>            <dbl>       <dbl> <lgl>       \n 1 Amnat Charoen 2019-01       34510000    34510000 TRUE        \n 2 Amnat Charoen 2019-02       32290000    32290000 TRUE        \n 3 Amnat Charoen 2019-03       39070000    39070000 TRUE        \n 4 Amnat Charoen 2019-04       32040000    32040000 TRUE        \n 5 Amnat Charoen 2019-05       30110000    30110000 TRUE        \n 6 Amnat Charoen 2019-06       26630000    26630000 TRUE        \n 7 Amnat Charoen 2019-07       21680000    21680000 TRUE        \n 8 Amnat Charoen 2019-08       17700000    17700000 TRUE        \n 9 Amnat Charoen 2019-09       19500000    19500000 TRUE        \n10 Amnat Charoen 2019-10       61440000    61440000 TRUE        \n# ℹ 3,840 more rows\n```\n\n\n:::\n:::\n\n\nWe note from the output below that the data entries for revenue match up:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrevenue_numbers %>%\n  filter(!is_rev_equal)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 × 5\n# ℹ 5 variables: province_eng <chr>, year_month <chr>, sum_revenue <dbl>,\n#   revenue_all <dbl>, is_rev_equal <lgl>\n```\n\n\n:::\n:::\n\n\n### 5.1.2.5.3 Checking the tourist numbers\n\nSimilarly, based on the definition of the different variable types, we note that \"no_tourist_all\" should equal to the sum of \"no_tourist_foreign\" and \"no_tourist_thai\". We check through the data using the code chunk below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism_numbers <- tourism_wider %>%\n  group_by(province_eng,year_month) %>%\n  summarise(\n    sum_tourists = sum(no_tourist_foreign, no_tourist_thai, na.rm = TRUE),\n  tourists_all = sum(no_tourist_all,na.rm = TRUE),\n            .groups = \"drop\") %>%\n  mutate(is_touristno_equal = sum_tourists == tourists_all)\n\ntourism_numbers\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3,850 × 5\n   province_eng  year_month sum_tourists tourists_all is_touristno_equal\n   <chr>         <chr>             <dbl>        <dbl> <lgl>             \n 1 Amnat Charoen 2019-01           21790        21790 TRUE              \n 2 Amnat Charoen 2019-02           20377        20377 TRUE              \n 3 Amnat Charoen 2019-03           24786        24786 TRUE              \n 4 Amnat Charoen 2019-04           23792        23792 TRUE              \n 5 Amnat Charoen 2019-05           22436        22436 TRUE              \n 6 Amnat Charoen 2019-06           19714        19714 TRUE              \n 7 Amnat Charoen 2019-07           20517        20517 TRUE              \n 8 Amnat Charoen 2019-08           16708        16708 TRUE              \n 9 Amnat Charoen 2019-09           18453        18453 TRUE              \n10 Amnat Charoen 2019-10           39242        39242 TRUE              \n# ℹ 3,840 more rows\n```\n\n\n:::\n:::\n\n\nWe note from the output below that the data entries for tourist numbers match up:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism_numbers %>%\n  filter(!is_touristno_equal)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 × 5\n# ℹ 5 variables: province_eng <chr>, year_month <chr>, sum_tourists <dbl>,\n#   tourists_all <dbl>, is_touristno_equal <lgl>\n```\n\n\n:::\n:::\n\n\n### 5.1.2.5.4 Checking the distribution of values of each variable\n\n-   Revenue\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselected_revenue <- tourism %>%\n  filter(variable %in% c(\"revenue_all\", \"revenue_thai\", \"revenue_foreign\"))\n\n# Calculate summary statistics\nsummary_stats <- selected_revenue %>%\n  group_by(variable) %>%\n  summarise(\n    Min = min(value),\n    Q1 = quantile(value, 0.25),\n    Median = median(value),\n    Q3 = quantile(value, 0.75),\n    Max = max(value)\n  )\n\nggplot(selected_revenue, aes(x = variable, y = value, fill = variable)) +\n  geom_boxplot() +\n  geom_text(data=summary_stats, aes(x = variable, \n                               y = Max + 1000, \n                               label = paste(\"Min:\", Min,\n                                             \"\\nQ1:\", Q1, \n                                             \"\\nMedian:\", Median, \n                                             \"\\nQ3:\", Q3, \n                                             \"\\nMax:\", Max)),\n            position = position_dodge(width = 0.75), \n            vjust = 0, hjust = 1, size = 2, color = \"black\") +\n  labs(title = \"Boxplots of Different Revenue Types\", x = \"Revenue Type\", y = \"Revenue\")+\n  scale_y_continuous(limits = c(0,12e+10))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\nFrom the boxplots above, we note that the minimum value for \"revenue_foreign\" is -\\$4250, this indicate that there could have been errors in data entry.\n\n-   Tourist numbers\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselected_tourists <- tourism %>%\n  filter(variable %in% c(\"no_tourist_all\",\"no_tourist_thai\", \"no_tourist_foreign\"))\n\n# Calculate summary statistics\nsummary_stats <- selected_tourists %>%\n  group_by(variable) %>%\n  summarise(\n    Min = min(value),\n    Q1 = quantile(value, 0.25),\n    Median = median(value),\n    Q3 = quantile(value, 0.75),\n    Max = max(value)\n  )\n\nggplot(selected_tourists, aes(x = variable, y = value, fill = variable)) +\n  geom_boxplot() +\n  geom_text(data=summary_stats, aes(x = variable, \n                               y = Max + 100000, \n                               label = paste(\"Min:\", Min,\n                                             \"\\nQ1:\", Q1, \n                                             \"\\nMedian:\", Median, \n                                             \"\\nQ3:\", Q3, \n                                             \"\\nMax:\", Max)),\n            position = position_dodge(width = 0.75), \n            vjust = 0, hjust = 1, size = 2, color = \"black\") +\n  labs(title = \"Boxplots of Different Tourist Numbers\", x = \"Tourist Type\", y = \"Number of Tourists\")+\n  scale_y_continuous(limits = c(0,8e+6))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n-   Occupancy\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate summary statistics\nsummary_stats <- tourism_wider %>%\n  summarise(\n    Min = min(no_tourist_stay),\n    Q1 = quantile(no_tourist_stay, 0.25),\n    Median = median(no_tourist_stay),\n    Q3 = quantile(no_tourist_stay, 0.75),\n    Max = max(no_tourist_stay)\n  )\n\nggplot(tourism_wider, aes(x = \"\", y = no_tourist_stay)) +\n  geom_boxplot(fill = \"lightblue\") +\n  geom_text(data = summary_stats, aes(x = \"\", y = Max + 100000,\n                                      label = paste(\"Min:\", Min,\n                                                     \"\\nQ1:\", Q1,\n                                                     \"\\nMedian:\", Median,\n                                                     \"\\nQ3:\", Q3,\n                                                     \"\\nMax:\", Max)),\n            vjust = 0, size = 2, color = \"black\") +\n  labs(title = \"Distribution of Number of Hotel Rooms Occupied\",\n       y = \"Number of Occupied Hotel Rooms\") +\n  scale_y_continuous(limits = c(0,4e+6))+\n  theme(axis.title.x = element_blank())\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n### 5.1.2.5.5 Removing data with negative \"revenue_foreign\" values\n\nWe clean the data by removing rows with negative \"revenue_foreign\" values. We also remove the \"date\" variable to keep the data more tidy for further analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism_wider <- tourism_wider %>%\n  filter(revenue_foreign >= 0) %>%\n  select(-date)\n```\n:::\n\n\nAfter removing the data, we note that we have 3848 rows remaining.\n\n### 5.1.2.6 Saving as a new rds file\n\nWe save the cleaned data as a new rds file:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism_cleaned <- write_rds(tourism_wider,\"data/rds/tourism_cleaned.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism_cleaned <- read_rds(\"data/rds/tourism_cleaned.rds\")\n```\n:::\n\n\n### 5.2 Thailand Subnational Administrative Boundaries\n\n### 5.2.1 Importing the shapefile\n\nThe code chunk below uses `st_read()` of **sf** package to import the Thailand Subnational Administrative Boundaries shapefile into R. There are a few different files representing different levels of administrative boundaries - level 0 (country), level 1 (province), level 2 (district) and level 3 (sub-district, tambon). As we are only interested in province level administrative boundaries, we will just load the file corresponding to level 1.\n\nThe imported shapefile will be a **simple features** **object** of **sf**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprovince <- st_read(dsn = \"data/rawdata\",\n                    layer = \"tha_admbnda_adm1_rtsd_20220121\")\n```\n:::\n\n\nWe note that the simple features data has a multipolygon geometry and has 77 features and 16 fields. It is in WGS84 geographic coordinate system.\n\n### 5.2.2 Removing the unwanted variables\n\nOf the fields available, only \"ADM1_EN\" and \"geometry\" are essential hence the following code chunk keeps only these two variables in the simple features object:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprovince <- province %>%\n  select(ADM1_EN)\n```\n:::\n\n\nWe save this as new rds file to avoid reloading the original datafile above:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprovince <- write_rds(province,\"data/rds/province.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprovince <- read_rds(\"data/rds/province.rds\")\n```\n:::\n\n\n### 5.2.3 Checking the name of the provinces\n\nAs we will be joining the *province* simple features object and the attribute data from *tourism_cleaned* using the province names (ADM1_EN in *province* simple features object and province_eng in *tourism_cleaned* dataframe), it is important to check through the naming of the provinces to ensure that they all match up.\n\nWe extract the unique province names from both *tourism_cleaned* and *province:*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique_tour_prov <- tourism_cleaned %>%\n  distinct(province_eng)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nunique_shp_prov <- province %>%\n  distinct(ADM1_EN)\n```\n:::\n\n\nWe then combine via a full join and read through the list of province names for discrepancies:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncombined_prov <- full_join(unique_shp_prov,unique_tour_prov,\n                           by = c(\"ADM1_EN\"=\"province_eng\"))\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncombined_prov <- combined_prov %>%\n  arrange(ADM1_EN)\n\ncombined_prov\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                    ADM1_EN\n1             Amnat Charoen\n2                 Ang Thong\n3                   Bangkok\n4                 Bueng Kan\n5                  Buri Ram\n6                   Buriram\n7              Chachoengsao\n8                  Chai Nat\n9                   Chainat\n10               Chaiyaphum\n11              Chanthaburi\n12               Chiang Mai\n13               Chiang Rai\n14                Chon Buri\n15                 Chonburi\n16                 Chumphon\n17                  Kalasin\n18           Kamphaeng Phet\n19             Kanchanaburi\n20                Khon Kaen\n21                    Krabi\n22                  Lampang\n23                  Lamphun\n24                     Loei\n25                 Lop Buri\n26                  Lopburi\n27             Mae Hong Son\n28            Maha Sarakham\n29                 Mukdahan\n30             Nakhon Nayok\n31            Nakhon Pathom\n32            Nakhon Phanom\n33        Nakhon Ratchasima\n34             Nakhon Sawan\n35      Nakhon Si Thammarat\n36                      Nan\n37               Narathiwat\n38         Nong Bua Lam Phu\n39          Nong Bua Lamphu\n40                Nong Khai\n41               Nonthaburi\n42             Pathum Thani\n43                  Pattani\n44                Phang Nga\n45                 Phangnga\n46              Phatthalung\n47                   Phayao\n48               Phetchabun\n49              Phetchaburi\n50                  Phichit\n51              Phitsanulok\n52 Phra Nakhon Si Ayutthaya\n53                    Phrae\n54                   Phuket\n55             Prachin Buri\n56              Prachinburi\n57      Prachuap Khiri Khan\n58                   Ranong\n59               Ratchaburi\n60                   Rayong\n61                   Roi Et\n62                  Sa Kaeo\n63             Sakon Nakhon\n64             Samut Prakan\n65             Samut Sakhon\n66          Samut Songkhram\n67                 Saraburi\n68                    Satun\n69                Si Sa Ket\n70                Sing Buri\n71                  Sisaket\n72                 Songkhla\n73                Sukhothai\n74              Suphan Buri\n75              Surat Thani\n76                    Surin\n77                      Tak\n78                    Trang\n79                     Trat\n80         Ubon Ratchathani\n81               Udon Thani\n82              Uthai Thani\n83                Uttaradit\n84                     Yala\n85                 Yasothon\n```\n\n\n:::\n:::\n\n\nWe note repeated entries for eight provinces which are spelt differently in the original *province* sf object vs *tourism_cleaned* dataframe:\n\n-   Buri Ram vs Buriram\n\n-   Chai Nat vs Chainat\n\n-   Chon Buri vs Chonburi\n\n-   Lop Buri vs Lopburi\n\n-   Nong Bua Lam Phu vs Nong Bua Lamphu\n\n-   Phangnga vs Phang Nga\n\n-   Prachin Buri vs Prachinburi\n\n-   Si Sa Ket vs Sisaket\n\n### 5.2.3.1 Adjusting the naming of provinces in *province* sf object\n\nWe utilise the following code chunk to adjust the naming of the eight provinces to be aligned with the naming in the *tourism_cleaned* dataframe to faciliate relational join in subsequent analysis:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprovince <- province %>%\n  mutate(ADM1_EN = case_when(\n    ADM1_EN == \"Buri Ram\" ~ \"Buriram\",\n    ADM1_EN == \"Chai Nat\" ~ \"Chainat\",\n    ADM1_EN == \"Chon Buri\" ~ \"Chonburi\",\n    ADM1_EN == \"Lop Buri\" ~ \"Lopburi\",\n    ADM1_EN == \"Nong Bua Lam Phu\" ~ \"Nong Bua Lamphu\",\n    ADM1_EN == \"Phangnga\" ~ \"Phang Nga\",\n    ADM1_EN == \"Prachin Buri\" ~ \"Prachinburi\",\n    ADM1_EN == \"Si Sa Ket\" ~ \"Sisaket\",\n    TRUE ~ ADM1_EN\n  ))\n```\n:::\n\n\n### 5.3 Performing relational join\n\nWe then perform a left relational join to update the *province* sf object with the attribute fields of the *tourism_cleaned* data frame:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncombined_prov_tourism <- left_join(province,tourism_cleaned,\n                                   by = c(\"ADM1_EN\" = \"province_eng\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(combined_prov_tourism)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 3,848\nColumns: 14\n$ ADM1_EN            <chr> \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Bangko…\n$ year_month         <chr> \"2019-01\", \"2020-01\", \"2021-01\", \"2022-01\", \"2023-0…\n$ year               <dbl> 2019, 2020, 2021, 2022, 2023, 2019, 2020, 2021, 202…\n$ month              <ord> Jan, Jan, Jan, Jan, Jan, Feb, Feb, Feb, Feb, Feb, M…\n$ region_eng         <chr> \"central\", \"central\", \"central\", \"central\", \"centra…\n$ ratio_tourist_stay <dbl> 93.37, 89.36, 7.54, 26.34, 75.02, 89.19, 68.37, 9.9…\n$ no_tourist_stay    <dbl> 3334971, 3213765, 354676, 1009583, 2440463, 3025538…\n$ no_tourist_all     <dbl> 5959075, 6046765, 1681847, 2437497, 4872078, 521140…\n$ no_tourist_thai    <dbl> 3534061, 3573040, 1632693, 2299906, 2749877, 291992…\n$ no_tourist_foreign <dbl> 2425014, 2473725, 49154, 137591, 2122201, 2291482, …\n$ revenue_all        <dbl> 81926490000, 88202890000, 9539730000, 11823610000, …\n$ revenue_thai       <dbl> 29742580000, 31137650000, 8447450000, 9642600000, 1…\n$ revenue_foreign    <dbl> 52183910000, 57065240000, 1092280000, 2181010000, 4…\n$ geometry           <MULTIPOLYGON [°]> MULTIPOLYGON (((100.6139 13..., MULTIP…\n```\n\n\n:::\n:::\n\n\nWe note that the *combined_prov_tourism* data has the same number of rows, 3848 rows, as the original *tourism_cleaned* data frame indicating that the cleaning up of the different province spellings was done accurately.\n\n### 5.4 Creating a time series cube\n\nWe use [spacetime()](https://sfdep.josiahparry.com/articles/spacetime-s3.html) of sfdep to create a spatio-temporal cube:\n\n\n::: {.cell}\n\n:::\n\n\n## 6. Visualising Different Key Indicators of the Tourism Economy of Thailand\n\n### 6.1 Revenue\n\n### 6.1.1 Total Revenue\n\n### 6.1.2\n",
    "supporting": [
      "Take-home_Ex02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"../../site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/datatables-binding-0.33/datatables.js\"></script>\n<script src=\"../../site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"../../site_libs/dt-core-1.13.6/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\n<link href=\"../../site_libs/dt-core-1.13.6/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/dt-core-1.13.6/js/jquery.dataTables.min.js\"></script>\n<link href=\"../../site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}