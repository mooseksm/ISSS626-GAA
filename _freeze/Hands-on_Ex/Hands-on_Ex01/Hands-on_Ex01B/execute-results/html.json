{
  "hash": "9b8fc7544833bc6d484dd2841dcd66bb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 1B\"\nauthor: \"Kock Si Min\"\ndate: August 25, 2024\ndate-modified: \"last-modified\"\ntoc: true\nexecute:\n  eval: true\n  echo: true\n  freeze: true\n  warning: false\n  message: false\n---\n\n\n# Geospatial Data Science with R\n\n## 1.1 Learning Outcomes\n\nGeospatial Data Science is a process of importing, wrangling, integrating and processing geographically referenced datasets. In this hands-on exercise, I will perform geospatial data science tasks in R using the sf package and acquire the following competencies:\n\n-   install and load [sf](https://r-spatial.github.io/sf/) and [tidyverse](https://www.tidyverse.org/) packages into the R environment\n-   import geospatial data using appropriate functions of **sf** package\n-   import aspatial data by using appropriate function of **readr** package\n-   explore the content of simple feature data frame by using appropriate **Base R** and **sf** functions\n-   assign or transform coordinate systems by using appropriate **sf** functions\n-   convert aspatial data into a **sf** dataframe by using appropriate functions of the **sf** package\n-   perform geoprocessing tasks using appropriate functions of **sf** package\n-   perform data wrangling tasks by using appropriate functions of **dplyr** package\n-   perform exploratory data analysis (EDA) using appropriate functions from **ggplot2** package\n\n## 1.2 Data Acquisition\n\nThe following datasets were downloaded:\n\n-   Master Plan 2014 Subzone Boundary (Web) from [data.gov.sg](https://data.gov.sg/)\n\n-   Pre-Schools Location from [data.gov.sg](https://data.gov.sg/)\n\n-   Cycling Path from [LTADataMall](https://www.mytransport.sg/content/mytransport/home/dataMall.html)\n\n-   Latest version of Singapore Airbnb listing data from [Inside Airbnb](http://insideairbnb.com/get-the-data.html)\n\n## 1.3 Getting Started\n\n### Install and Launch R packages\n\n-   **sf** for importing, managing, and processing geospatial data, and\n\n-   **tidyverse** for performing data science tasks such as importing, wrangling and visualising data. **tidyverse** consists of a family of R packages and the following within the family will be used in this exercise\n\n    -   **readr** for importing csv data,\n\n    -   **readxl** for importing Excel worksheet,\n\n    -   **tidyr** for manipulating data,\n\n    -   **dplyr** for transforming data, and\n\n    -   **ggplot2** for visualising data\n\nThe packages are loaded with the following code chunk:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf,tidyverse)\n```\n:::\n\n\n## 1.4 Importing Geospatial Data\n\nWe will import the following geospatial data using [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package:\n\n-   `MP14_SUBZONE_WEB_PL`, a polygon feature layer in ESRI shapefile format,\n\n-   `CyclingPath`, a line feature layer in ESRI shapefile format, and\n\n-   `PreSchool`, a point feature layer in kml file format.\n\n### 1.4.1 Importing polygon feature data in shapefile format\n\nThe following code chunk uses the *st_read()* function of **sf** package to import `MP14_SUBZONE_WEB_PL` shapefile as a polygon feature data frame.\n\nWhen the input geospatial data is in shapefile format, two arguments are used:\n\n-   `dsn` to define the data path\n\n-   `layer` to provide the shapefile name\n\nNo extension such as .shp,.dbf,.prj and .shx are needed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz = st_read(dsn=\"data/geospatial\",\n               layer=\"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n\n-   It reveals that the geospatial objects are multipolygon features.\n\n-   There are a total of 323 features and 15 fields in the `mpsz` simple feature data frame.\n\n-   `mpsz` is in **svy21** projected coordinates systems.\n\n-   The bounding box provides the x extent and y extent of the data.\n\n### 1.4.2 Importing polyline feature data in shapefile form\n\nThe following code chunk uses the *st_read()* function of **sf** package to import import `CyclingPath` shapefile as a line feature data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncyclingpath = st_read(dsn=\"data/geospatial\",layer=\"CyclingPathGazette\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `CyclingPathGazette' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3138 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42644.17 ymax: 48948.15\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n\n-   It reveals that the geospatial objects are multiline string features.\n\n-   There are a total of 3138 features and 2 fields in the `cyclingpath` linestring feature data frame.\n\n-   `cyclingpath` is in **svy21** projected coordinates systems.\n\n### 1.4.3 Importing GIS data in kml format\n\nThe code chunk below is used to import the `PreSchoolsLocation` data which is in kml format.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npreschool = st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n-   It reveals that preschool is a point feature data frame.\n\n-   There are a total of 2290 features and 2 fields.\n\n-   Unlike the previous two simple feature data frames, preschool is in a **wgs84** coordinates system.\n\n## 1.5 Checking the content of a simple feature data frame\n\nIn this subsection, I will utilise different ways to retrieve information related to the content of a simple feature data frame.\n\n### 1.5.1 Working with *st_geometry()*\n\nThe column in the sf data frame that contains the geometries is a list, of class sfc - the geometry list-column can be retrieved using:\n\n-   mpsz\\$geom or\n\n-   mpsz\\[\\[1\\]\\]\n\nbut more general way uses *st_geometry():*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_geometry(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n```\n\n\n:::\n:::\n\n\nThe print only displays basic information of the feature class such as type of geometry, geographic extent of the features and the coordinate system of the data.\n\n### 1.5.2 Working with glimpse()\n\nTo learn more about the associated attribute information in the data frame, we can use *glimpse()* of **dplyr**:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n```\n\n\n:::\n:::\n\n\nThe report reveals the data type of each field. For example `FMEL-UPD_D` field is in **date** data type and `X_ADDR`, `Y_ADDR`, `SHAPE_L` and `SHAPE_AREA` fields are all in **double-precision values**.\n\n### 1.5.3 Working with *head()*\n\nTo reveal the complete information of a feature object, we use [head()](https://www.rdocumentation.org/packages/utils/versions/3.6.2/topics/head)of Base R:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(mpsz,n=5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n```\n\n\n:::\n:::\n\n\nWe can change the number in the n argument to reflect different number of records.\n\n## 1.6 Plotting the geospatial data\n\nIn geospatial data science, we need to visualise the geospatial features, beyond just looking at the feature information.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mpsz)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01B_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nThe default plot of an sf object is a multiplot of all attributes, up to a reasonable maximum number, as shown above. However, we can choose to plot only the geometry:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(mpsz))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01B_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nAlternatively, we can also choose to plot the sf object by using a specific attribute:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mpsz[\"PLN_AREA_N\"])\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01B_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n::: callout-important\nNote: *plot()* is meant to plot the geospatial object for **a quick look**. For high quality cartographic plot, other R packages such as tmap should be used.\n:::\n\n## 1.7 Working with Projection\n\nMap projection is an important property of a geospatial data. To perform geoprocessing using two geospatial data, there is a need to ensure that both geospatial data are projected using a similar coordinate system.\n\nThe process of projecting a simple feature data frame from one coordinate system to another coordinate system is called **projection transformation.**\n\n### 1.7.1 Assigning [EPSG](https://epsg.io/)code to a simple feature data frame\n\nOne common issue that can happen when importing geospatial data is either the coordinate system of the source data is missing or wrongly assigned during the importing process.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n```\n\n\n:::\n:::\n\n\nWhile the mpsz data frame is projected in svy21, the end of the printout above states that the EPSG is 9001 - this is a wrong EPSG code as the correct EPSG code for svy21 should be [3414](https://epsg.io/3414).\n\nTo correctly assign the right EPSG code to the mpsz data frame, *st_set_crs()* of sf package is used:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz3414 <- st_set_crs(mpsz,3414)\n```\n:::\n\n\nWe then check whether the EPSG code has been corrected:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(mpsz3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n```\n\n\n:::\n:::\n\n\n### 1.7.2 Transforming the projection of preschool from wgs84 to svy21\n\nIn geospatial analytics, it is common to transform the original data from one geographic coordinate system to a projected coordinated system. **This is because a geographic coordinate system is not appropriate if the analysis needs to use distance and/or area measurements.**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_geometry(preschool)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n```\n\n\n:::\n:::\n\n\nThe print indicates that preschool is in wgs84 coordinate system.\n\nThis is a scenario for which *st_set_crs()* is not appropriate and *st_transform()* of sf package should be used. This is because we need to reproject preschool from one coordinate system to another coordinate system mathematically but *st_crs()* : replacing crs does not reproject data.\n\nThe projection transformation is performed as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npreschool3414 <- st_transform(preschool,crs=3414)\n```\n:::\n\n\n::: callout-note\nNote: In practice, we need find out the appropriate project coordinate system to use before performing the projection transformation.\n:::\n\nDisplaying the content of preschool3414 data frame\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_geometry(preschool3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n```\n\n\n:::\n:::\n\n\npreschool3414 is in svy21 projected coordinate system now. Further, as seen from the bounding box, the values are greater than 0 to 360 range of decimal degree commonly used by most of the geographic coordinate systems.\n\n## 1.8 Importing and Converting Aspatial Data\n\nAspatial data are non-geospatial data that have data fields that are able to capture the x- and y-coordinate of data points.\n\nAspatial data can be imported into a R environment, saved as a tibble data frame and further converted into a simple feature data frame.\n\n### 1.8.1 Importing the aspatial data\n\nThe listings dataset is in csv format hence the [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) function of **readr** package is used:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlistings <- read_csv(\"data/aspatial/listings.csv\")\n```\n:::\n\n\nThe output is called a tibble data frame.\n\nTo examine if the data file has been imported properly, *list()* of Base R is used instead of glimpse:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist(listings)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n# A tibble: 3,540 × 18\n       id name      host_id host_name neighbourhood_group neighbourhood latitude\n    <dbl> <chr>       <dbl> <chr>     <chr>               <chr>            <dbl>\n 1  71609 Ensuite …  367042 Belinda   East Region         Tampines          1.35\n 2  71896 B&B  Roo…  367042 Belinda   East Region         Tampines          1.35\n 3  71903 Room 2-n…  367042 Belinda   East Region         Tampines          1.35\n 4 275343 10min wa… 1439258 Kay       Central Region      Bukit Merah       1.29\n 5 275344 15 mins … 1439258 Kay       Central Region      Bukit Merah       1.29\n 6 289234 Booking …  367042 Belinda   East Region         Tampines          1.34\n 7 294281 5 mins w… 1521514 Elizabeth Central Region      Newton            1.31\n 8 324945 Comforta… 1439258 Kay       Central Region      Bukit Merah       1.29\n 9 330095 Relaxing… 1439258 Kay       Central Region      Bukit Merah       1.29\n10 344803 Budget s…  367042 Belinda   East Region         Tampines          1.35\n# ℹ 3,530 more rows\n# ℹ 11 more variables: longitude <dbl>, room_type <chr>, price <dbl>,\n#   minimum_nights <dbl>, number_of_reviews <dbl>, last_review <date>,\n#   reviews_per_month <dbl>, calculated_host_listings_count <dbl>,\n#   availability_365 <dbl>, number_of_reviews_ltm <dbl>, license <chr>\n```\n\n\n:::\n:::\n\n\nThe output indicates that the tibble dataframe consists of 3.540 rows and 18 columns. Two useful fields used in next phase are latitude and longitude, which are in decimal degree format. As a guess, it is assumed that the data is in wgs84 geographic coordinate system.\n\n### 1.8.2 Creating a simple feature data frame from an aspatial data frame\n\nThe code chunk below converts the listing data frame into a simple feature data frame using [*st_as_sf()*](https://r-spatial.github.io/sf/reference/st_as_sf.html) of **sf** package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlistings_sf <- st_as_sf(listings,coords=c(\"longitude\",\"latitude\"),crs=4326) %>%\n  st_transform(crs=3414)\n```\n:::\n\n\nLearning points from above:\n\n-   *coords* argument requires the column name of the x-coordinates first followed by the column name of y-coordinates\n\n-   crs argument requires the coordinate system in EPSG format - [EPSG 4326](https://epsg.io/4326) is wgs84 geographic coordinate system while [EPSG 3414](https://epsg.io/3414) is the Singapore svy21 projected coordinate system. Other countries' EPSG code can be found via [EPSG website](https://epsg.io/).\n\n-   %\\>% is used to nest the *st_transform()* to transform the newly created simple feature data frame into a svy21 projected coordinates system.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(listings_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 3,540\nColumns: 17\n$ id                             <dbl> 71609, 71896, 71903, 275343, 275344, 28…\n$ name                           <chr> \"Ensuite Room (Room 1 & 2) near EXPO\", …\n$ host_id                        <dbl> 367042, 367042, 367042, 1439258, 143925…\n$ host_name                      <chr> \"Belinda\", \"Belinda\", \"Belinda\", \"Kay\",…\n$ neighbourhood_group            <chr> \"East Region\", \"East Region\", \"East Reg…\n$ neighbourhood                  <chr> \"Tampines\", \"Tampines\", \"Tampines\", \"Bu…\n$ room_type                      <chr> \"Private room\", \"Private room\", \"Privat…\n$ price                          <dbl> NA, 80, 80, 50, 50, NA, 85, 65, 45, 54,…\n$ minimum_nights                 <dbl> 92, 92, 92, 180, 180, 92, 92, 180, 180,…\n$ number_of_reviews              <dbl> 19, 24, 46, 20, 16, 12, 131, 17, 5, 60,…\n$ last_review                    <date> 2020-01-17, 2019-10-13, 2020-01-09, 20…\n$ reviews_per_month              <dbl> 0.12, 0.15, 0.29, 0.15, 0.11, 0.08, 0.8…\n$ calculated_host_listings_count <dbl> 6, 6, 6, 49, 49, 6, 7, 49, 49, 6, 7, 7,…\n$ availability_365               <dbl> 89, 148, 90, 62, 0, 88, 365, 0, 0, 365,…\n$ number_of_reviews_ltm          <dbl> 0, 0, 0, 0, 2, 0, 0, 1, 1, 1, 0, 0, 0, …\n$ license                        <chr> NA, NA, NA, \"S0399\", \"S0399\", NA, NA, \"…\n$ geometry                       <POINT [m]> POINT (41972.5 36390.05), POINT (…\n```\n\n\n:::\n:::\n\n\nNote that a new column called `geometry` has been added into the data frame while the `longitude` and `latitude` columns have been dropped from the data frame.\n\n## 1.9 Geoprocessing with sf package\n\nBesides providing functions to handle (i.e. importing, exporting, assigning projection, transforming projection) geospatial data, **sf** package also offers geoprocessing functions.\n\nTwo commonly used geoprocessing functions are [buffering](https://www.geographyrealm.com/buffers-in-gis/)and point in polygon count.\n\n### 1.9.1 Buffering\n\nThe scenario:\n\nThe authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on both sides of the current cycling path. The task is to determine the extent of land that needs to be acquired and the total area.\n\nThe solution:\n\nFirst, the [*st_buffer()*](https://r-spatial.github.io/sf/reference/geos_unary.html) of sf package is used to compute the 5-meters buffer around the cycling path:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuffer_cycling <- st_buffer(cyclingpath,dist=5,nQuadSegs = 30)\n```\n:::\n\n\nThe area of the buffers is calculated:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n```\n:::\n\n\nLastly, the sum() of Base R will be used to derive the total land involved:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(buffer_cycling$AREA)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n2218855 [m^2]\n```\n\n\n:::\n:::\n\n\nMission accomplished!\n\n### 1.9.2 Point-in-polygon count\n\nThe scenario:\n\nA preschool service group wants to find out the number of preschools in each planning subzone.\n\nThe solution:\n\nThe code chunk below performs 2 operations at 1 go:\n\n\\(1\\) Identify preschools located inside each planning subzone using [*st_intersects()*](https://r-spatial.github.io/sf/reference/geos_binary_pred.html)\n\n\\(2\\) [*length()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/length) of Base R is used to calculate the number of preschools that fall inside each planning subzone\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz3414$`PreSch Count` <- lengths(st_intersects(mpsz3414,preschool3414))\n```\n:::\n\n\n::: callout-warning\n**Warning**: [*st_intersects()*](https://r-spatial.github.io/sf/reference/geos_binary_pred.html)**should not be confused** with [st_intersection()](https://r-spatial.github.io/sf/reference/geos_binary_ops.html).\n\n**To also note that the symbol is \\` rather than '.**\n:::\n\nThe summary statistics of the newly derived *PreSch Count* field can be shown with the code below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(mpsz3414$`PreSch Count`)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n```\n\n\n:::\n:::\n\n\nTo list the planning zone with the most number of preschools, the [*top_n()*](https://dplyr.tidyverse.org/reference/top_n.html) of **dplyr** package is used as shown in the code chunk below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop_n(mpsz3414, 1,`PreSch Count`)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n```\n\n\n:::\n:::\n\n\nTo calculate the density of preschools by planning zone:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz3414$Area <- mpsz3414 %>%\n  st_area()\n```\n:::\n\n\nNext, [*mutate()*](https://dplyr.tidyverse.org/reference/mutate.html) of [**dplyr**](https://dplyr.tidyverse.org/) package is used to compute the density by using the code chunk below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz3414 <- mpsz3414 %>%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n```\n:::\n\n\n## 1.10 Exploratory Data Analysis (EDA)\n\nIn practice, many geospatial analytics start with Exploratory Data Analysis. In this section, appropriate [ggplot2](https://ggplot2.tidyverse.org/) functions will be used to create functional and yet truthful statistical graphs for EDA purposes.\n\nA histogram is plotted to reveal the distribution of *PreSch Density*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(mpsz3414$`PreSch Density`)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01B_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\nHowever, the output does not meet publication quality and there is limited room for further customisation using this function. As such, we use **ggplot2** functions instead:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpsz3414,\n       aes(x=as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20,\n                 color='black',\n                 fill='pink')+\n  labs(title=\"Are preschools evenly distributed in Singapore?\",\n       subtitle=\"There are many planning subzones with a single preschool. However, there are two planning subzones with at least 20 preschools.\",\n       x=\"Preschool density (per km sq)\",\n       y=\"Frequency\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01B_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\nA scatterplot is plotted to show the relationship between *PreSch Density* and *PreSch Count*:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data= mpsz3414,\n       aes(y=`PreSch Count`,\n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\")+\n  xlim(0,40)+\n  ylim(0,40)+\n  labs(title=\"Preschool count vs Preschool density\",\n       x=\"Preschool density(per km sq)\",\n       y=\"Preschool count\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01B_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Hands-on_Ex01B_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}