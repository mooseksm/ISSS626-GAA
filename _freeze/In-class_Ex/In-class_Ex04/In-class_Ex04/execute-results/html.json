{
  "hash": "b3503dc8bb319934c77ee2c8bf1df5d0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class Exercise 4\"\nauthor: \"Kock Si Min\"\ndate: September 16, 2024\ndate-modified: \"last-modified\"\ntoc: true\nexecute:\n  eval: true\n  echo: true\n  freeze: true\n  warning: false\n  message: false\n---\n\n\n# In-class Exercise 4: Spatial Weights and Applications\n\n## 4.1 Study Area and Data\n\nTwo data sets will be used in this hands-on exercise:\n\n-   Hunan county boundary layer. This is a geospatial data set in ESRI shapefile format.\n\n-   Hunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n## 4.2 Installing and loading R packages\n\nTo carry out the analysis, we install and load the following R packages:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, ggstatsplot, spdep, tmap, tidyverse, knitr,GWmodel)\n```\n:::\n\n\n## 4.3 Preparing the data\n\nThe geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.\n\n::: panel-tabset\n## Import Hunan shapefile\n\nThe code chunk below uses [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package to import Hunan shapefile into R. The imported shapefile will be a **simple features object of sf.**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_sf <- st_read(dsn = \"data/geospatial\",\n                 layer = \"Hunan\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Hunan' from data source \n  `C:\\mooseksm\\ISSS626-GAA\\In-class_Ex\\In-class_Ex04\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n-   note that above data has not been transformed - this is intentional for this use case so that know that there are packages that have provision for projection\n\n-   note that geometry type is single polygon - always note that administrative boundaries can be captured as polygon or multipolygon\n\n## Import Hunan 2012\n\nNext, we will import *Hunan_2012.csv* into R using *read_csv()* of **readr** package. The output is R dataframe class.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n```\n:::\n\n\n-   do not use read.csv (Base R)\n\n## Joining Hunan and Hunan 2012\n\nThe code chunk below is used to update the attribute table of *hunan*’s SpatialPolygonsDataFrame with the attribute fields of *hunan2012* data frame. This is performed using *left_join()* of **dplyr** package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_sf <- left_join(hunan_sf,hunan2012) %>%\n  select(1:3,7,15,16,31,32)\n```\n:::\n\n\n-   combining spatial data with aspatial data - use dplyr left_join() function but in reality, not so straightforward as need common identifier between the datasets i.e. value in a particular variable must be the same - **need to carefully check through the names and actual values in the datasets to make sure they are the same else might not be able to join** (recall hands-on ex01 where administrative boundary of singapore is in uppercase while that in singstat data is a mix of upper and lowercase)\n\n-   both datasets have \"County\" column hence while code chunk did not define the join field, the code automatically uses the \"County\" column to join. if *hunan_sf* did not have \"County\" column, would have mention the join argument by as \"NAME_3\" in *hunan_sf* and \"County\" in *hunan2012.*\n\n-   **if there's a lot of names in the field, can do a unique match to compare**\n\n-   Select chooses these columns: \"NAME_2\", \"ID_3\", \"NAME_3\", \"County\",\"GDPPC\", \"GIO\",\"Agri\",\"Service\", \"geometry\"\n:::\n\n## 4.4 Converting to SpatialPolygonDataFrame\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_sp <- hunan_sf %>%\n  as_Spatial()\n```\n:::\n\n\n![](images/clipboard-1360567303.png)\n\n-   sp separates the components of data under sf:\n\n    -   data contains all data except geometry data\n\n    -   under polygons, geometry data\n\nTyping the below into console, we note the data object type:\n\n![](images/clipboard-1561598466.png){width=\"315\"}\n\n## 4.5 Geographically Weighted Summary Statistics with adaptive bandwidth\n\n### 4.5.1 Determine adaptive bandwidth\n\n-   both CV and AIC methods produce the same results - that the optimum number of neighbours is 22 but note that this is not always the case i.e. can produce different results\n\n::: panel-tabset\n## Cross-validation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_CV <- bw.gwr(GDPPC ~ 1,\n                data = hunan_sp,\n                approach = \"CV\",\n                adaptive = TRUE,\n                kernel = \"bisquare\",\n                longlat = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth: 62 CV score: 15515442343 \nAdaptive bandwidth: 46 CV score: 14937956887 \nAdaptive bandwidth: 36 CV score: 14408561608 \nAdaptive bandwidth: 29 CV score: 14198527496 \nAdaptive bandwidth: 26 CV score: 13898800611 \nAdaptive bandwidth: 22 CV score: 13662299974 \nAdaptive bandwidth: 22 CV score: 13662299974 \n```\n\n\n:::\n:::\n\n\n-   first line is dependent variable \\~ independent variable (put an arbitrary number 1 if don't have independent variable), else without formula, won't work and give error message –\\> this is a global model\n\n-   second line is hunan_sp data\n\n-   approach either CV or AIC (see next tab)\n\n-   adaptive = FALSE means calculating fixed bandwith, TRUE means adaptive bandwidth –\\> in this case, indicate the number of neighbours (note that it starts with 62 then slowly bury the number of neighbours)\n\n-   kernel is the same as spatial point pattern analysis, can change to other methods, not likely to affect much\n\n-   longlat = T, indicate that its in decimal degree - great circle distances will be calculated\n\n-   note that the results are in km\n\n-   based on GDPPC, optimum number of neighbours is 22\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_CV\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 22\n```\n\n\n:::\n:::\n\n\n## AIC\n\n-   smaller AIC value, the better. at some point, AIC points will converge and no longer change/change rate very small - that would be optimal value\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_AIC <- bw.gwr(GDPPC ~ 1,\n                data = hunan_sp,\n                approach = \"AIC\",\n                adaptive = TRUE,\n                kernel = \"bisquare\",\n                longlat = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth (number of nearest neighbours): 62 AICc value: 1923.156 \nAdaptive bandwidth (number of nearest neighbours): 46 AICc value: 1920.469 \nAdaptive bandwidth (number of nearest neighbours): 36 AICc value: 1917.324 \nAdaptive bandwidth (number of nearest neighbours): 29 AICc value: 1916.661 \nAdaptive bandwidth (number of nearest neighbours): 26 AICc value: 1914.897 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \n```\n\n\n:::\n:::\n\n\n-   note that the change in AIC becomes very small and eventually stops\n\n-   based on GDPPC, optimum number of neighbours is 22\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_AIC\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 22\n```\n\n\n:::\n:::\n\n:::\n\n### 4.5.2 Computing geographically weighted summary statistics\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwstat <- gwss(data = hunan_sp,\n               vars = \"GDPPC\",\n               bw = bw_AIC,\n               kernel = \"bisquare\",\n               adaptive = TRUE,\n               longlat = T)\n```\n:::\n\n\n-   need to make sure that the bottom 3 fields are the same as the above in [4.5.1 Determine adaptive bandwidth]\n\n-   ![](images/clipboard-2183633018.png){width=\"152\"} is a gwss object (specially customised object - list that contains many things)\n\n    -   mostly are metadata\n\n    -   what is of interest is SDF - spatialdataframe - contains all spatial information + data information\n\n        ![](images/clipboard-636078429.png)\n\n        can click on logo:\n\n    ![](images/clipboard-2063992322.png)\n\n    -   GDPPC_LM: local mean (have 88 local means that is based on average of 22 neighbours)\n\n    -   GDPPC_LSD: local standard deviation\n\n    -   GDPPC_LSKe: local standard estimations\n\n    -   GDPPC_LCV: local co-variance\n\n    All are taking the average of 22 neighbours\n\n### 4.5.3 Preparing the output data\n\nCode chunk below is used to extract SDF data table from gwss object output from gwss(). It will be converted into data.frame by using as.data.frame():\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwstat_df <- as.data.frame(gwstat$SDF)\n```\n:::\n\n\nNext, cbind() is used to append the newly derived data.frame onto hunan_sf sf data frame:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_gstat <- cbind(hunan_sf,gwstat_df)\n```\n:::\n\n\n-   note that only able to use cbind() with the understanding that there's no change in sequence of data in both dataframes\n\n### 4.5.4 Visualising geographically weighted summary statistics\n\n::: panel-tabset\n## Geographically Weighted Mean\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](In-class_Ex04_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n-   help to generalise the pattern\n\n-   tm_fill n=5 sets the number of gradient\n\n-   tm_borders draw the border around polygon, =1 is full black, closer to 0 - greater transparency\n\n-   tm_layout add in other details\n\n## The code\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(hunan_gstat)+\n  tm_fill(\"GDPPC_LM\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Distribution of geographically weighted mean\",\n            main.title.position = \"center\",\n            main.title.size = 1.0,\n            legend.text.size = 0.6,\n            legend.height = 1.20,\n            legend.width = 1.20,\n            frame = TRUE)+\n  tm_text(\"County\", size = 0.5)\n```\n:::\n\n:::\n\n### 4.5.5 Relationship between GDPPC and Gross Industry Output\n\n::: panel-tabset\n## Conventional statistical solution\n\n\n::: {.cell}\n\n:::\n\n\n## The code\n\n\n::: {.cell}\n\n:::\n\n:::\n\n## 4.6 Geographically Weighted Summary Statistics with fixed bandwidth\n\n### 4.6.1 Determine fixed bandwidth\n\n-   note that results for CV and AIC are not the same - AIC optimum is 160.5517, almost twice of CV optimum of 76.29126 (longer bandwidth have smoother output, shorter bandwidth have more details)\n\n::: panel-tabset\n## Cross-validation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_CV <- bw.gwr(GDPPC ~ 1,\n                data = hunan_sp,\n                approach = \"CV\",\n                adaptive = FALSE,\n                kernel = \"bisquare\",\n                longlat = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFixed bandwidth: 357.4897 CV score: 16265191728 \nFixed bandwidth: 220.985 CV score: 14954930931 \nFixed bandwidth: 136.6204 CV score: 14134185837 \nFixed bandwidth: 84.48025 CV score: 13693362460 \nFixed bandwidth: 52.25585 CV score: Inf \nFixed bandwidth: 104.396 CV score: 13891052305 \nFixed bandwidth: 72.17162 CV score: 13577893677 \nFixed bandwidth: 64.56447 CV score: 14681160609 \nFixed bandwidth: 76.8731 CV score: 13444716890 \nFixed bandwidth: 79.77877 CV score: 13503296834 \nFixed bandwidth: 75.07729 CV score: 13452450771 \nFixed bandwidth: 77.98296 CV score: 13457916138 \nFixed bandwidth: 76.18716 CV score: 13442911302 \nFixed bandwidth: 75.76323 CV score: 13444600639 \nFixed bandwidth: 76.44916 CV score: 13442994078 \nFixed bandwidth: 76.02523 CV score: 13443285248 \nFixed bandwidth: 76.28724 CV score: 13442844774 \nFixed bandwidth: 76.34909 CV score: 13442864995 \nFixed bandwidth: 76.24901 CV score: 13442855596 \nFixed bandwidth: 76.31086 CV score: 13442847019 \nFixed bandwidth: 76.27264 CV score: 13442846793 \nFixed bandwidth: 76.29626 CV score: 13442844829 \nFixed bandwidth: 76.28166 CV score: 13442845238 \nFixed bandwidth: 76.29068 CV score: 13442844678 \nFixed bandwidth: 76.29281 CV score: 13442844691 \nFixed bandwidth: 76.28937 CV score: 13442844698 \nFixed bandwidth: 76.2915 CV score: 13442844676 \nFixed bandwidth: 76.292 CV score: 13442844679 \nFixed bandwidth: 76.29119 CV score: 13442844676 \nFixed bandwidth: 76.29099 CV score: 13442844676 \nFixed bandwidth: 76.29131 CV score: 13442844676 \nFixed bandwidth: 76.29138 CV score: 13442844676 \nFixed bandwidth: 76.29126 CV score: 13442844676 \nFixed bandwidth: 76.29123 CV score: 13442844676 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_CV\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 76.29126\n```\n\n\n:::\n:::\n\n\n## AIC\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_AIC <- bw.gwr(GDPPC ~ 1,\n                data = hunan_sp,\n                approach = \"AIC\",\n                adaptive = FALSE,\n                kernel = \"bisquare\",\n                longlat = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFixed bandwidth: 357.4897 AICc value: 1927.631 \nFixed bandwidth: 220.985 AICc value: 1921.547 \nFixed bandwidth: 136.6204 AICc value: 1919.993 \nFixed bandwidth: 84.48025 AICc value: 1940.603 \nFixed bandwidth: 168.8448 AICc value: 1919.457 \nFixed bandwidth: 188.7606 AICc value: 1920.007 \nFixed bandwidth: 156.5362 AICc value: 1919.41 \nFixed bandwidth: 148.929 AICc value: 1919.527 \nFixed bandwidth: 161.2377 AICc value: 1919.392 \nFixed bandwidth: 164.1433 AICc value: 1919.403 \nFixed bandwidth: 159.4419 AICc value: 1919.393 \nFixed bandwidth: 162.3475 AICc value: 1919.394 \nFixed bandwidth: 160.5517 AICc value: 1919.391 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_AIC\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 160.5517\n```\n\n\n:::\n:::\n\n:::\n\n### Visualising local correlation\n\n-   need to note how many neighbours you are using to define the correlation\n\n-   Corr: parametric vs Spearman: non-parametric - indicate how well each correlate with neighbour\n\n== end ==\n\n::: callout-tip\n## In-class notes from Prof Kam:\n\n-   clean environment, save data image when closing session can help to prevent upload of temporary files\n\n-   [GWmodel](https://cran.r-project.org/web/packages/GWmodel/GWmodel.pdf) package: bw.gwr recommend optimum number of neighbours\n:::\n",
    "supporting": [
      "In-class_Ex04_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}